# 1 "hello.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 494 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "hello.cpp" 2
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iostream" 1 3
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iostream" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__config" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__config" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__config_site" 1 3
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__config_site" 3
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wmacro-redefined"






#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__config" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__configuration/abi.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__configuration/abi.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__configuration/compiler.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__configuration/compiler.h" 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__configuration/abi.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__configuration/platform.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__configuration/platform.h" 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__configuration/abi.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__configuration/abi.h" 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__config" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__configuration/availability.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__configuration/availability.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__configuration/language.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__configuration/language.h" 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__configuration/availability.h" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__configuration/availability.h" 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__config" 2 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__config" 3
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iostream" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/version" 1 3
# 272 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/version" 3
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iostream" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 1 3
# 218 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ios.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ios.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
class allocator;

}}
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory_resource.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory_resource.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory_resource.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory_resource.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory_resource.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory_resource.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory_resource.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory_resource.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace pmr {
template <class _ValueType>
class polymorphic_allocator;
}

}}
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/memory_resource.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string.h" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _CharT>
struct char_traits;
template <>
struct char_traits<char>;






template <>
struct char_traits<char16_t>;
template <>
struct char_traits<char32_t>;


template <>
struct char_traits<wchar_t>;


template <class _CharT, class _Traits = char_traits<_CharT>, class _Allocator = allocator<_CharT> >
class basic_string;

using string = basic_string<char>;


using wstring = basic_string<wchar_t>;






using u16string = basic_string<char16_t>;
using u32string = basic_string<char32_t>;



namespace pmr {
template <class _CharT, class _Traits = char_traits<_CharT>>
using basic_string = std::basic_string<_CharT, _Traits, polymorphic_allocator<_CharT>>;

using string = basic_string<char>;


using wstring = basic_string<wchar_t>;






using u16string = basic_string<char16_t>;
using u32string = basic_string<char32_t>;
}




template <class _CharT, class _Traits, class _Allocator>
class __attribute__((__preferred_name__(string)))

      __attribute__((__preferred_name__(wstring)))




      __attribute__((__preferred_name__(u16string)))
      __attribute__((__preferred_name__(u32string)))

      __attribute__((__preferred_name__(pmr::string)))

      __attribute__((__preferred_name__(pmr::wstring)))




      __attribute__((__preferred_name__(pmr::u16string)))
      __attribute__((__preferred_name__(pmr::u32string)))

      basic_string;


}}
# 105 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ios.h" 2 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ios.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ios.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ios.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ios.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ios.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ios.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ios.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

class __attribute__((__visibility__("default"))) ios_base;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_ios;

using ios = basic_ios<char>;

using wios = basic_ios<wchar_t>;


template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(ios))) __attribute__((__preferred_name__(wios))) basic_ios;





using streamoff = long long;


}}
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ios.h" 3
#pragma clang diagnostic pop
# 219 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ios/fpos.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ios/fpos.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ios/fpos.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ios/fpos.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ios/fpos.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ios/fpos.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ios/fpos.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ios/fpos.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _StateT>
class fpos {
private:
  _StateT __st_;
  streamoff __off_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) fpos(streamoff __off = streamoff()) : __st_(), __off_(__off) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) operator streamoff() const { return __off_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _StateT state() const { return __st_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void state(_StateT __st) { __st_ = __st; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) fpos& operator+=(streamoff __off) {
    __off_ += __off;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) fpos operator+(streamoff __off) const {
    fpos __t(*this);
    __t += __off;
    return __t;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) fpos& operator-=(streamoff __off) {
    __off_ -= __off;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) fpos operator-(streamoff __off) const {
    fpos __t(*this);
    __t -= __off;
    return __t;
  }
};

template <class _StateT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) streamoff operator-(const fpos<_StateT>& __x, const fpos<_StateT>& __y) {
  return streamoff(__x) - streamoff(__y);
}

template <class _StateT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const fpos<_StateT>& __x, const fpos<_StateT>& __y) {
  return streamoff(__x) == streamoff(__y);
}

template <class _StateT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const fpos<_StateT>& __x, const fpos<_StateT>& __y) {
  return streamoff(__x) != streamoff(__y);
}

}}
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ios/fpos.h" 3
#pragma clang diagnostic pop
# 220 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale_dir/locale_base_api.h" 1 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale_dir/locale_base_api.h" 3
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale.h" 1 3 4
# 24 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_xlocale.h" 1 3 4
# 27 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_xlocale.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/cdefs.h" 1 3 4
# 782 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/cdefs.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_symbol_aliasing.h" 1 3 4
# 783 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/cdefs.h" 2 3 4
# 848 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/cdefs.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_posix_availability.h" 1 3 4
# 849 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/cdefs.h" 2 3 4
# 28 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_xlocale.h" 2 3 4





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_locale.h" 1 3 4
# 41 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_locale.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types.h" 1 3 4
# 27 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types.h" 1 3 4
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/_types.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/_types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/_types.h" 1 3 4
# 52 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/_types.h" 3 4
typedef signed char __int8_t;



typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;

typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
# 85 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/_types.h" 3 4
typedef int __darwin_ct_rune_t;





typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;

typedef __mbstate_t __darwin_mbstate_t;




typedef long int __darwin_ptrdiff_t;
# 111 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/_types.h" 3 4
typedef long unsigned int __darwin_size_t;







typedef __builtin_va_list __darwin_va_list;







typedef int __darwin_wchar_t;




typedef __darwin_wchar_t __darwin_rune_t;


typedef int __darwin_wint_t;




typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/_types.h" 2 3 4
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types.h" 2 3 4
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types.h" 3 4
typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;

typedef __darwin_ino64_t __darwin_ino_t;



typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];
typedef char __darwin_uuid_string_t[37];



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_types.h" 1 3 4
# 57 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_types.h" 3 4
struct __darwin_pthread_handler_rec {
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};

struct _opaque_pthread_attr_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_cond_t {
 long __sig;
 char __opaque[40];
};

struct _opaque_pthread_condattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_mutex_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_mutexattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_once_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_rwlock_t {
 long __sig;
 char __opaque[192];
};

struct _opaque_pthread_rwlockattr_t {
 long __sig;
 char __opaque[16];
};

struct _opaque_pthread_t {
 long __sig;
 struct __darwin_pthread_handler_rec *__cleanup_stack;
 char __opaque[8176];
};

typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t *__darwin_pthread_t;
# 95 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types.h" 2 3 4
# 28 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types.h" 2 3 4
# 40 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types.h" 3 4
typedef int __darwin_nl_item;
typedef int __darwin_wctrans_t;

typedef __uint32_t __darwin_wctype_t;
# 42 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_locale.h" 2 3 4

struct lconv {
 char *decimal_point;
 char *thousands_sep;
 char *grouping;
 char *int_curr_symbol;
 char *currency_symbol;
 char *mon_decimal_point;
 char *mon_thousands_sep;
 char *mon_grouping;
 char *positive_sign;
 char *negative_sign;
 char int_frac_digits;
 char frac_digits;
 char p_cs_precedes;
 char p_sep_by_space;
 char n_cs_precedes;
 char n_sep_by_space;
 char p_sign_posn;
 char n_sign_posn;
 char int_p_cs_precedes;
 char int_n_cs_precedes;
 char int_p_sep_by_space;
 char int_n_sep_by_space;
 char int_p_sign_posn;
 char int_n_sign_posn;
};

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_null.h" 1 3 4
# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_locale.h" 2 3 4

extern "C" {
struct lconv *localeconv(void);
}
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_xlocale.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/__xlocale.h" 1 3 4
# 28 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/__xlocale.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_mb_cur_max.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_mb_cur_max.h" 3 4
extern "C" {
int ___mb_cur_max(void);
}
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/__xlocale.h" 2 3 4

struct _xlocale;
typedef struct _xlocale * locale_t;

extern "C" {
int ___mb_cur_max_l(locale_t);
}
# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_xlocale.h" 2 3 4
# 55 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_xlocale.h" 3 4
extern "C" {
extern const locale_t _c_locale;

locale_t duplocale(locale_t);
int freelocale(locale_t);
struct lconv * localeconv_l(locale_t);
locale_t newlocale(int, const char *, locale_t);
const char * querylocale(int, locale_t);
locale_t uselocale(locale_t);
}
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale.h" 2 3 4
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale_dir/locale_base_api.h" 2 3
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale_dir/locale_base_api.h" 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/three_way_comparable.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/three_way_comparable.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/common_comparison_category.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/common_comparison_category.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/ordering.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/ordering.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/enable_if.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/enable_if.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/enable_if.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/enable_if.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/enable_if.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/enable_if.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/enable_if.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/enable_if.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <bool, class _Tp = void>
struct enable_if {};
template <class _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <bool _Bp, class _Tp = void>
using __enable_if_t __attribute__((__nodebug__)) = typename enable_if<_Bp, _Tp>::type;


template <bool _Bp, class _Tp = void>
using enable_if_t = typename enable_if<_Bp, _Tp>::type;


}}
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/enable_if.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/ordering.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_same.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_same.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/integral_constant.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/integral_constant.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/integral_constant.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/integral_constant.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/integral_constant.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/integral_constant.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/integral_constant.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/integral_constant.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, _Tp __v>
struct integral_constant {
  static constexpr const _Tp value = __v;
  typedef _Tp value_type;
  typedef integral_constant type;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr operator value_type() const noexcept { return value; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr value_type operator()() const noexcept { return value; }

};

template <class _Tp, _Tp __v>
constexpr const _Tp integral_constant<_Tp, __v>::value;

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

template <bool _Val>
using _BoolConstant __attribute__((__nodebug__)) = integral_constant<bool, _Val>;


template <bool __b>
using bool_constant = integral_constant<bool, __b>;


}}
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/integral_constant.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_same.h" 2 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_same.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_same.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_same.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_same.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_same.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_same.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_same.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Up>
struct is_same : _BoolConstant<__is_same(_Tp, _Up)> {};


template <class _Tp, class _Up>
inline constexpr bool is_same_v = __is_same(_Tp, _Up);
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_same.h" 3
template <class _Tp, class _Up>
using _IsSame = _BoolConstant<__is_same(_Tp, _Up)>;

template <class _Tp, class _Up>
using _IsNotSame = _BoolConstant<!__is_same(_Tp, _Up)>;

}}
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_same.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/ordering.h" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/ordering.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/ordering.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/ordering.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/ordering.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/ordering.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/ordering.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/ordering.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 276 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/ordering.h" 3
}}
# 276 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/ordering.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/common_comparison_category.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstddef" 1 3
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstddef" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_integral.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_integral.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cv.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cv.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp>
struct remove_const {
  using type __attribute__((__nodebug__)) = __remove_const(_Tp);
};

template <class _Tp>
using __remove_const_t = __remove_const(_Tp);
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const.h" 3
template <class _Tp>
using remove_const_t = __remove_const_t<_Tp>;


}}
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cv.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_volatile.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_volatile.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_volatile.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_volatile.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_volatile.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_volatile.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_volatile.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_volatile.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp>
struct remove_volatile {
  using type __attribute__((__nodebug__)) = __remove_volatile(_Tp);
};

template <class _Tp>
using __remove_volatile_t = __remove_volatile(_Tp);
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_volatile.h" 3
template <class _Tp>
using remove_volatile_t = __remove_volatile_t<_Tp>;


}}
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_volatile.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cv.h" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cv.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cv.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cv.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cv.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cv.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cv.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cv.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp>
struct remove_cv {
  using type __attribute__((__nodebug__)) = __remove_cv(_Tp);
};

template <class _Tp>
using __remove_cv_t = __remove_cv(_Tp);
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cv.h" 3
template <class _Tp>
using remove_cv_t = __remove_cv_t<_Tp>;


}}
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cv.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_integral.h" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_integral.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_integral.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_integral.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_integral.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_integral.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_integral.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_integral.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp> struct __libcpp_is_integral { enum { value = 0 }; };
template <> struct __libcpp_is_integral<bool> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<char> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<signed char> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<unsigned char> { enum { value = 1 }; };

template <> struct __libcpp_is_integral<wchar_t> { enum { value = 1 }; };




template <> struct __libcpp_is_integral<char16_t> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<char32_t> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<short> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<unsigned short> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<int> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<unsigned int> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<long> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<unsigned long> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<long long> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<unsigned long long> { enum { value = 1 }; };

template <> struct __libcpp_is_integral<__int128_t> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<__uint128_t> { enum { value = 1 }; };





template <class _Tp>
struct is_integral : _BoolConstant<__is_integral(_Tp)> {};


template <class _Tp>
inline constexpr bool is_integral_v = __is_integral(_Tp);
# 72 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_integral.h" 3
}}
# 72 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_integral.h" 3
#pragma clang diagnostic pop
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstddef" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stddef.h" 1 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stddef.h" 3




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 1 3
# 84 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_header_macro.h" 1 3
# 85 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_ptrdiff_t.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_ptrdiff_t.h" 3
typedef long int ptrdiff_t;
# 89 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_size_t.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_size_t.h" 3
typedef long unsigned int size_t;
# 94 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_rsize_t.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_rsize_t.h" 3
typedef long unsigned int rsize_t;
# 99 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_wchar_t.h" 1 3
# 104 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_null.h" 1 3
# 109 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_nullptr_t.h" 1 3
# 114 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3
# 123 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_max_align_t.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_max_align_t.h" 3
typedef long double max_align_t;
# 124 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_offsetof.h" 1 3
# 129 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stddef.h" 2 3





typedef decltype(nullptr) nullptr_t;
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstddef" 2 3
# 54 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstddef" 3


#pragma clang diagnostic push
# 56 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstddef" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 56 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstddef" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 56 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstddef" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 56 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstddef" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 56 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstddef" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 56 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstddef" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

using ::nullptr_t;
using ::ptrdiff_t __attribute__((__using_if_exists__));
using ::size_t __attribute__((__using_if_exists__));


using ::max_align_t __attribute__((__using_if_exists__));


}}
# 66 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstddef" 3
#pragma clang diagnostic pop


namespace std
{
enum class byte : unsigned char {};

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr byte operator|(byte __lhs, byte __rhs) noexcept {
  return static_cast<byte>(
      static_cast<unsigned char>(static_cast<unsigned int>(__lhs) | static_cast<unsigned int>(__rhs)));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr byte& operator|=(byte& __lhs, byte __rhs) noexcept {
  return __lhs = __lhs | __rhs;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr byte operator&(byte __lhs, byte __rhs) noexcept {
  return static_cast<byte>(
      static_cast<unsigned char>(static_cast<unsigned int>(__lhs) & static_cast<unsigned int>(__rhs)));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr byte& operator&=(byte& __lhs, byte __rhs) noexcept {
  return __lhs = __lhs & __rhs;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr byte operator^(byte __lhs, byte __rhs) noexcept {
  return static_cast<byte>(
      static_cast<unsigned char>(static_cast<unsigned int>(__lhs) ^ static_cast<unsigned int>(__rhs)));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr byte& operator^=(byte& __lhs, byte __rhs) noexcept {
  return __lhs = __lhs ^ __rhs;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr byte operator~(byte __b) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(~static_cast<unsigned int>(__b)));
}

template <class _Integer, __enable_if_t<is_integral<_Integer>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr byte& operator<<=(byte& __lhs, _Integer __shift) noexcept {
  return __lhs = __lhs << __shift;
}

template <class _Integer, __enable_if_t<is_integral<_Integer>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr byte operator<<(byte __lhs, _Integer __shift) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(__lhs) << __shift));
}

template <class _Integer, __enable_if_t<is_integral<_Integer>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr byte& operator>>=(byte& __lhs, _Integer __shift) noexcept {
  return __lhs = __lhs >> __shift;
}

template <class _Integer, __enable_if_t<is_integral<_Integer>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr byte operator>>(byte __lhs, _Integer __shift) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(__lhs) >> __shift));
}

template <class _Integer, __enable_if_t<is_integral<_Integer>::value, int> = 0>
[[nodiscard]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Integer to_integer(byte __b) noexcept {
  return static_cast<_Integer>(__b);
}

}
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/common_comparison_category.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/common_comparison_category.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/common_comparison_category.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/common_comparison_category.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/common_comparison_category.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/common_comparison_category.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/common_comparison_category.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/common_comparison_category.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 84 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/common_comparison_category.h" 3
}}
# 84 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/common_comparison_category.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/three_way_comparable.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/common_reference_with.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/common_reference_with.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/convertible_to.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/convertible_to.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_convertible.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_convertible.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_convertible.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_convertible.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_convertible.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_convertible.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_convertible.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_convertible.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _T1, class _T2>
struct is_convertible : public integral_constant<bool, __is_convertible(_T1, _T2)> {};


template <class _From, class _To>
inline constexpr bool is_convertible_v = __is_convertible(_From, _To);


}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_convertible.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/convertible_to.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/declval.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/declval.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/declval.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/declval.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/declval.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/declval.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/declval.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/declval.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



#pragma GCC diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/declval.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/declval.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Tp>
_Tp&& __declval(int);
template <class _Tp>
_Tp __declval(long);
#pragma GCC diagnostic pop

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) decltype(std::__declval<_Tp>(0)) declval() noexcept {
  static_assert(!__is_same(_Tp, _Tp),
                "std::declval can only be used in an unevaluated context. "
                "It's likely that your current usage is trying to extract a value from the function.");
}

}}
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/declval.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/convertible_to.h" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/convertible_to.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/convertible_to.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/convertible_to.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/convertible_to.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/convertible_to.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/convertible_to.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/convertible_to.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/convertible_to.h" 3
}}
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/convertible_to.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/common_reference_with.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/same_as.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/same_as.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/same_as.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/same_as.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/same_as.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/same_as.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/same_as.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/same_as.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/same_as.h" 3
}}
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/same_as.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/common_reference_with.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_reference.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_reference.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_type.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_type.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conditional.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conditional.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conditional.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conditional.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conditional.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conditional.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conditional.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conditional.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <bool>
struct _IfImpl;

template <>
struct _IfImpl<true> {
  template <class _IfRes, class _ElseRes>
  using _Select __attribute__((__nodebug__)) = _IfRes;
};

template <>
struct _IfImpl<false> {
  template <class _IfRes, class _ElseRes>
  using _Select __attribute__((__nodebug__)) = _ElseRes;
};

template <bool _Cond, class _IfRes, class _ElseRes>
using _If __attribute__((__nodebug__)) = typename _IfImpl<_Cond>::template _Select<_IfRes, _ElseRes>;

template <bool _Bp, class _If, class _Then>
struct conditional {
  using type __attribute__((__nodebug__)) = _If;
};
template <class _If, class _Then>
struct conditional<false, _If, _Then> {
  using type __attribute__((__nodebug__)) = _Then;
};


template <bool _Bp, class _IfRes, class _ElseRes>
using conditional_t __attribute__((__nodebug__)) = typename conditional<_Bp, _IfRes, _ElseRes>::type;



template <bool _Bp, class _If, class _Then>
using __conditional_t __attribute__((__nodebug__)) = typename conditional<_Bp, _If, _Then>::type;

}}
# 56 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conditional.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_type.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/decay.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/decay.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_pointer.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_pointer.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_referenceable.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_referenceable.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_referenceable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_referenceable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_referenceable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_referenceable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_referenceable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_referenceable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp>
struct __libcpp_is_referenceable : integral_constant<bool, __is_referenceable(_Tp)> {};
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_referenceable.h" 3
}}
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_referenceable.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_pointer.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_void.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_void.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_void.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_void.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_void.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_void.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_void.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_void.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_void : _BoolConstant<__is_same(__remove_cv(_Tp), void)> {};


template <class _Tp>
inline constexpr bool is_void_v = __is_same(__remove_cv(_Tp), void);


}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_void.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_pointer.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_reference.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_reference.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_reference.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_reference.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_reference.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_reference.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_reference.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_reference.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp>
struct remove_reference {
  using type __attribute__((__nodebug__)) = __remove_reference_t(_Tp);
};

template <class _Tp>
using __libcpp_remove_reference_t = __remove_reference_t(_Tp);
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_reference.h" 3
template <class _Tp>
using remove_reference_t = __libcpp_remove_reference_t<_Tp>;


}}
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_reference.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_pointer.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_pointer.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_pointer.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
using __add_pointer_t = __add_pointer(_Tp);
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_pointer.h" 3
template <class _Tp>
struct add_pointer {
  using type __attribute__((__nodebug__)) = __add_pointer_t<_Tp>;
};


template <class _Tp>
using add_pointer_t = __add_pointer_t<_Tp>;


}}
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_pointer.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/decay.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_array.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_array.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_array.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_array.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_array.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_array.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_array.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_array.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {




template <class _Tp>
struct is_array : _BoolConstant<__is_array(_Tp)> {};


template <class _Tp>
inline constexpr bool is_array_v = __is_array(_Tp);
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_array.h" 3
}}
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_array.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/decay.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_function.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_function.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_function.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_function.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_function.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_function.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_function.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_function.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_function : integral_constant<bool, __is_function(_Tp)> {};


template <class _Tp>
inline constexpr bool is_function_v = __is_function(_Tp);


}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_function.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/decay.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_extent.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_extent.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_extent.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_extent.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_extent.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_extent.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_extent.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_extent.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp>
struct remove_extent {
  using type __attribute__((__nodebug__)) = __remove_extent(_Tp);
};

template <class _Tp>
using __remove_extent_t = __remove_extent(_Tp);
# 48 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_extent.h" 3
template <class _Tp>
using remove_extent_t = __remove_extent_t<_Tp>;


}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_extent.h" 3
#pragma clang diagnostic pop
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/decay.h" 2 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/decay.h" 3


#pragma clang diagnostic push
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/decay.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/decay.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/decay.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/decay.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/decay.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/decay.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp>
using __decay_t __attribute__((__nodebug__)) = __decay(_Tp);

template <class _Tp>
struct decay {
  using type __attribute__((__nodebug__)) = __decay_t<_Tp>;
};
# 67 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/decay.h" 3
template <class _Tp>
using decay_t = __decay_t<_Tp>;


}}
# 71 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/decay.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_type.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cvref.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cvref.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cvref.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cvref.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cvref.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cvref.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cvref.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cvref.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp>
using __remove_cvref_t __attribute__((__nodebug__)) = __remove_cvref(_Tp);





template <class _Tp, class _Up>
struct __is_same_uncvref : _IsSame<__remove_cvref_t<_Tp>, __remove_cvref_t<_Up> > {};
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cvref.h" 3
}}
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_cvref.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_type.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/void_t.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/void_t.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/void_t.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/void_t.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/void_t.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/void_t.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/void_t.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/void_t.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class...>
using void_t = void;


template <class...>
using __void_t = void;

}}
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/void_t.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_type.h" 2 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_type.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_type.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_type.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_type.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_type.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_type.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_type.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_type.h" 3
template <class _Tp, class _Up, class = void>
struct __common_type2_imp {};



template <class _Tp, class _Up>
struct __common_type2_imp<_Tp, _Up, __void_t<decltype(true ? std::declval<_Tp>() : std::declval<_Up>())> > {
  typedef __attribute__((__nodebug__)) __decay_t<decltype(true ? std::declval<_Tp>() : std::declval<_Up>())> type;
};

template <class, class = void>
struct __common_type_impl {};

template <class... _Tp>
struct __common_types;
template <class... _Tp>
struct common_type;

template <class _Tp, class _Up>
struct __common_type_impl< __common_types<_Tp, _Up>, __void_t<typename common_type<_Tp, _Up>::type> > {
  typedef typename common_type<_Tp, _Up>::type type;
};

template <class _Tp, class _Up, class _Vp, class... _Rest>
struct __common_type_impl<__common_types<_Tp, _Up, _Vp, _Rest...>, __void_t<typename common_type<_Tp, _Up>::type> >
    : __common_type_impl<__common_types<typename common_type<_Tp, _Up>::type, _Vp, _Rest...> > {};



template <>
struct common_type<> {};



template <class _Tp>
struct common_type<_Tp> : public common_type<_Tp, _Tp> {};




template <class _Tp, class _Up>
struct common_type<_Tp, _Up>
    : __conditional_t<_IsSame<_Tp, __decay_t<_Tp> >::value && _IsSame<_Up, __decay_t<_Up> >::value,
                      __common_type2_imp<_Tp, _Up>,
                      common_type<__decay_t<_Tp>, __decay_t<_Up> > > {};



template <class _Tp, class _Up, class _Vp, class... _Rest>
struct common_type<_Tp, _Up, _Vp, _Rest...>
    : __common_type_impl<__common_types<_Tp, _Up, _Vp, _Rest...> > {};


template <class... _Tp>
using common_type_t = typename common_type<_Tp...>::type;


}}
# 100 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_type.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_reference.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cv.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cv.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cv.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cv.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cv.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cv.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cv.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cv.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _From>
struct __copy_cv {
  template <class _To>
  using __apply = _To;
};

template <class _From>
struct __copy_cv<const _From> {
  template <class _To>
  using __apply = const _To;
};

template <class _From>
struct __copy_cv<volatile _From> {
  template <class _To>
  using __apply = volatile _To;
};

template <class _From>
struct __copy_cv<const volatile _From> {
  template <class _To>
  using __apply = const volatile _To;
};

template <class _From, class _To>
using __copy_cv_t = typename __copy_cv<_From>::template __apply<_To>;

}}
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cv.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_reference.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cvref.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cvref.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_lvalue_reference.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_lvalue_reference.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_lvalue_reference.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_lvalue_reference.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_lvalue_reference.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_lvalue_reference.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_lvalue_reference.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_lvalue_reference.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
using __add_lvalue_reference_t = __add_lvalue_reference(_Tp);
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_lvalue_reference.h" 3
template <class _Tp>
struct add_lvalue_reference {
  using type __attribute__((__nodebug__)) = __add_lvalue_reference_t<_Tp>;
};


template <class _Tp>
using add_lvalue_reference_t = __add_lvalue_reference_t<_Tp>;


}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_lvalue_reference.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cvref.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_rvalue_reference.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_rvalue_reference.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_rvalue_reference.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_rvalue_reference.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_rvalue_reference.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_rvalue_reference.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_rvalue_reference.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_rvalue_reference.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
using __add_rvalue_reference_t = __add_rvalue_reference(_Tp);
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_rvalue_reference.h" 3
template <class _Tp>
struct add_rvalue_reference {
  using type = __add_rvalue_reference_t<_Tp>;
};


template <class _Tp>
using add_rvalue_reference_t = __add_rvalue_reference_t<_Tp>;


}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_rvalue_reference.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cvref.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cvref.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cvref.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cvref.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cvref.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cvref.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cvref.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cvref.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _From, class _To>
struct __copy_cvref {
  using type = __copy_cv_t<_From, _To>;
};

template <class _From, class _To>
struct __copy_cvref<_From&, _To> {
  using type = __add_lvalue_reference_t<__copy_cv_t<_From, _To> >;
};

template <class _From, class _To>
struct __copy_cvref<_From&&, _To> {
  using type = __add_rvalue_reference_t<__copy_cv_t<_From, _To> >;
};

template <class _From, class _To>
using __copy_cvref_t = typename __copy_cvref<_From, _To>::type;

}}
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/copy_cvref.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_reference.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_reference : _BoolConstant<__is_reference(_Tp)> {};


template <class _Tp>
inline constexpr bool is_reference_v = __is_reference(_Tp);




template <class _Tp>
struct is_lvalue_reference : _BoolConstant<__is_lvalue_reference(_Tp)> {};

template <class _Tp>
struct is_rvalue_reference : _BoolConstant<__is_rvalue_reference(_Tp)> {};


template <class _Tp>
inline constexpr bool is_lvalue_reference_v = __is_lvalue_reference(_Tp);
template <class _Tp>
inline constexpr bool is_rvalue_reference_v = __is_rvalue_reference(_Tp);
# 66 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference.h" 3
}}
# 66 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_reference.h" 2 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_reference.h" 3


#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_reference.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_reference.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_reference.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_reference.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_reference.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_reference.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 191 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_reference.h" 3
}}
# 191 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/common_reference.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/common_reference_with.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/common_reference_with.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/common_reference_with.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/common_reference_with.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/common_reference_with.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/common_reference_with.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/common_reference_with.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/common_reference_with.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/common_reference_with.h" 3
}}
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/common_reference_with.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/three_way_comparable.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/equality_comparable.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/equality_comparable.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/boolean_testable.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/boolean_testable.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp&&
forward([[_Clang::__lifetimebound__]] __libcpp_remove_reference_t<_Tp>& __t) noexcept {
  return static_cast<_Tp&&>(__t);
}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp&&
forward([[_Clang::__lifetimebound__]] __libcpp_remove_reference_t<_Tp>&& __t) noexcept {
  static_assert(!is_lvalue_reference<_Tp>::value, "cannot forward an rvalue as an lvalue");
  return static_cast<_Tp&&>(__t);
}

}}
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/boolean_testable.h" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/boolean_testable.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/boolean_testable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/boolean_testable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/boolean_testable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/boolean_testable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/boolean_testable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/boolean_testable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/boolean_testable.h" 3
}}
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/boolean_testable.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/equality_comparable.h" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_const_lvalue_ref.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_const_lvalue_ref.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_const_lvalue_ref.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_const_lvalue_ref.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_const_lvalue_ref.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_const_lvalue_ref.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_const_lvalue_ref.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_const_lvalue_ref.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
using __make_const_lvalue_ref = const __libcpp_remove_reference_t<_Tp>&;

}}
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_const_lvalue_ref.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/equality_comparable.h" 2 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/equality_comparable.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/equality_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/equality_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/equality_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/equality_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/equality_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/equality_comparable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 54 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/equality_comparable.h" 3
}}
# 54 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/equality_comparable.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/three_way_comparable.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/totally_ordered.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/totally_ordered.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/totally_ordered.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/totally_ordered.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/totally_ordered.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/totally_ordered.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/totally_ordered.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/totally_ordered.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 57 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/totally_ordered.h" 3
}}
# 57 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/totally_ordered.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/three_way_comparable.h" 2 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/three_way_comparable.h" 3


#pragma clang diagnostic push
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/three_way_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/three_way_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/three_way_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/three_way_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/three_way_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/three_way_comparable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/three_way_comparable.h" 3
}}
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/three_way_comparable.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way.h" 3
}}
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__exception/exception.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__exception/exception.h" 3


namespace std {
# 72 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__exception/exception.h" 3
class __attribute__((__visibility__("default"))) exception {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) exception() noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) exception(const exception&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) exception& operator=(const exception&) noexcept = default;

  virtual ~exception() noexcept;
  virtual const char* what() const noexcept;
};

class __attribute__((__visibility__("default"))) bad_exception : public exception {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_exception() noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_exception(const bad_exception&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_exception& operator=(const bad_exception&) noexcept = default;
  ~bad_exception() noexcept override;
  const char* what() const noexcept override;
};


}
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_function.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_function.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_function.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_function.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_function.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_function.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_function.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_function.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_function.h" 3
template <class _Arg1, class _Arg2, class _Result>
struct __binary_function_keep_layout_base {

  using first_argument_type __attribute__((__deprecated__)) = _Arg1;
  using second_argument_type __attribute__((__deprecated__)) = _Arg2;
  using result_type __attribute__((__deprecated__)) = _Result;

};
# 48 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_function.h" 3
template <class _Arg1, class _Arg2, class _Result>
using __binary_function = __binary_function_keep_layout_base<_Arg1, _Arg2, _Result>;


}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_function.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/operations.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/operations.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_function.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_function.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_function.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_function.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_function.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_function.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_function.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_function.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_function.h" 3
template <class _Arg, class _Result>
struct __unary_function_keep_layout_base {

  using argument_type __attribute__((__deprecated__)) = _Arg;
  using result_type __attribute__((__deprecated__)) = _Result;

};
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_function.h" 3
template <class _Arg, class _Result>
using __unary_function = __unary_function_keep_layout_base<_Arg, _Result>;


}}
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_function.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/operations.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/desugars_to.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/desugars_to.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/desugars_to.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/desugars_to.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/desugars_to.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/desugars_to.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/desugars_to.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/desugars_to.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


struct __equal_tag {};
struct __plus_tag {};
struct __less_tag {};
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/desugars_to.h" 3
template <class _CanonicalTag, class _Operation, class... _Args>
inline const bool __desugars_to_v = false;

}}
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/desugars_to.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/operations.h" 2 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/operations.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/operations.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/operations.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/operations.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/operations.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/operations.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/operations.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {




template <class _Tp = void>



struct plus : __binary_function<_Tp, _Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator()(const _Tp& __x, const _Tp& __y) const {
    return __x + __y;
  }
};
template <class... _Tag> [[maybe_unused]] plus(typename _Tag::__allow_ctad...)->plus<_Tag...>;



template <class _Tp>
inline const bool __desugars_to_v<__plus_tag, plus<_Tp>, _Tp, _Tp> = true;

template <class _Tp, class _Up>
inline const bool __desugars_to_v<__plus_tag, plus<void>, _Tp, _Up> = true;


template <>
struct plus<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) + std::forward<_T2>(__u)))
      -> decltype(std::forward<_T1>(__t) + std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) + std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct minus : __binary_function<_Tp, _Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator()(const _Tp& __x, const _Tp& __y) const {
    return __x - __y;
  }
};
template <class... _Tag> [[maybe_unused]] minus(typename _Tag::__allow_ctad...)->minus<_Tag...>;


template <>
struct minus<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) - std::forward<_T2>(__u)))
      -> decltype(std::forward<_T1>(__t) - std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) - std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct multiplies : __binary_function<_Tp, _Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator()(const _Tp& __x, const _Tp& __y) const {
    return __x * __y;
  }
};
template <class... _Tag> [[maybe_unused]] multiplies(typename _Tag::__allow_ctad...)->multiplies<_Tag...>;


template <>
struct multiplies<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) * std::forward<_T2>(__u)))
      -> decltype(std::forward<_T1>(__t) * std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) * std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct divides : __binary_function<_Tp, _Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator()(const _Tp& __x, const _Tp& __y) const {
    return __x / __y;
  }
};
template <class... _Tag> [[maybe_unused]] divides(typename _Tag::__allow_ctad...)->divides<_Tag...>;


template <>
struct divides<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) / std::forward<_T2>(__u)))
      -> decltype(std::forward<_T1>(__t) / std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) / std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct modulus : __binary_function<_Tp, _Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator()(const _Tp& __x, const _Tp& __y) const {
    return __x % __y;
  }
};
template <class... _Tag> [[maybe_unused]] modulus(typename _Tag::__allow_ctad...)->modulus<_Tag...>;


template <>
struct modulus<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) % std::forward<_T2>(__u)))
      -> decltype(std::forward<_T1>(__t) % std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) % std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct negate : __unary_function<_Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator()(const _Tp& __x) const { return -__x; }
};
template <class... _Tag> [[maybe_unused]] negate(typename _Tag::__allow_ctad...)->negate<_Tag...>;


template <>
struct negate<void> {
  template <class _Tp>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_Tp&& __x) const
      noexcept(noexcept(-std::forward<_Tp>(__x)))
      -> decltype(-std::forward<_Tp>(__x)) {
    return -std::forward<_Tp>(__x);
  }
  typedef void is_transparent;
};





template <class _Tp = void>



struct bit_and : __binary_function<_Tp, _Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator()(const _Tp& __x, const _Tp& __y) const {
    return __x & __y;
  }
};
template <class... _Tag> [[maybe_unused]] bit_and(typename _Tag::__allow_ctad...)->bit_and<_Tag...>;


template <>
struct bit_and<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) &
                        std::forward<_T2>(__u))) -> decltype(std::forward<_T1>(__t) & std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) & std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>
struct bit_not : __unary_function<_Tp, _Tp> {
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator()(const _Tp& __x) const { return ~__x; }
};
template <class... _Tag> [[maybe_unused]] bit_not(typename _Tag::__allow_ctad...)->bit_not<_Tag...>;

template <>
struct bit_not<void> {
  template <class _Tp>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_Tp&& __x) const
      noexcept(noexcept(~std::forward<_Tp>(__x)))
      -> decltype(~std::forward<_Tp>(__x)) {
    return ~std::forward<_Tp>(__x);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct bit_or : __binary_function<_Tp, _Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator()(const _Tp& __x, const _Tp& __y) const {
    return __x | __y;
  }
};
template <class... _Tag> [[maybe_unused]] bit_or(typename _Tag::__allow_ctad...)->bit_or<_Tag...>;


template <>
struct bit_or<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) | std::forward<_T2>(__u)))
      -> decltype(std::forward<_T1>(__t) | std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) | std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct bit_xor : __binary_function<_Tp, _Tp, _Tp> {
  typedef _Tp __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator()(const _Tp& __x, const _Tp& __y) const {
    return __x ^ __y;
  }
};
template <class... _Tag> [[maybe_unused]] bit_xor(typename _Tag::__allow_ctad...)->bit_xor<_Tag...>;


template <>
struct bit_xor<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) ^ std::forward<_T2>(__u)))
      -> decltype(std::forward<_T1>(__t) ^ std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) ^ std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};





template <class _Tp = void>



struct equal_to : __binary_function<_Tp, _Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Tp& __x, const _Tp& __y) const {
    return __x == __y;
  }
};
template <class... _Tag> [[maybe_unused]] equal_to(typename _Tag::__allow_ctad...)->equal_to<_Tag...>;


template <>
struct equal_to<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) == std::forward<_T2>(__u)))
      -> decltype(std::forward<_T1>(__t) == std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) == std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};




template <class _Tp>
inline const bool __desugars_to_v<__equal_tag, equal_to<_Tp>, _Tp, _Tp> = true;


template <class _Tp, class _Up>
inline const bool __desugars_to_v<__equal_tag, equal_to<void>, _Tp, _Up> = true;


template <class _Tp = void>



struct not_equal_to : __binary_function<_Tp, _Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Tp& __x, const _Tp& __y) const {
    return __x != __y;
  }
};
template <class... _Tag> [[maybe_unused]] not_equal_to(typename _Tag::__allow_ctad...)->not_equal_to<_Tag...>;


template <>
struct not_equal_to<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) != std::forward<_T2>(__u)))
      -> decltype(std::forward<_T1>(__t) != std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) != std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct less : __binary_function<_Tp, _Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Tp& __x, const _Tp& __y) const {
    return __x < __y;
  }
};
template <class... _Tag> [[maybe_unused]] less(typename _Tag::__allow_ctad...)->less<_Tag...>;

template <class _Tp>
inline const bool __desugars_to_v<__less_tag, less<_Tp>, _Tp, _Tp> = true;


template <>
struct less<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) < std::forward<_T2>(__u)))
      -> decltype(std::forward<_T1>(__t) < std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) < std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};

template <class _Tp>
inline const bool __desugars_to_v<__less_tag, less<>, _Tp, _Tp> = true;



template <class _Tp = void>



struct less_equal : __binary_function<_Tp, _Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Tp& __x, const _Tp& __y) const {
    return __x <= __y;
  }
};
template <class... _Tag> [[maybe_unused]] less_equal(typename _Tag::__allow_ctad...)->less_equal<_Tag...>;


template <>
struct less_equal<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) <= std::forward<_T2>(__u)))
      -> decltype(std::forward<_T1>(__t) <= std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) <= std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct greater_equal : __binary_function<_Tp, _Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Tp& __x, const _Tp& __y) const {
    return __x >= __y;
  }
};
template <class... _Tag> [[maybe_unused]] greater_equal(typename _Tag::__allow_ctad...)->greater_equal<_Tag...>;


template <>
struct greater_equal<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) >=
                        std::forward<_T2>(__u))) -> decltype(std::forward<_T1>(__t) >= std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) >= std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct greater : __binary_function<_Tp, _Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Tp& __x, const _Tp& __y) const {
    return __x > __y;
  }
};
template <class... _Tag> [[maybe_unused]] greater(typename _Tag::__allow_ctad...)->greater<_Tag...>;


template <>
struct greater<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) > std::forward<_T2>(__u)))
      -> decltype(std::forward<_T1>(__t) > std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) > std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};





template <class _Tp = void>



struct logical_and : __binary_function<_Tp, _Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Tp& __x, const _Tp& __y) const {
    return __x && __y;
  }
};
template <class... _Tag> [[maybe_unused]] logical_and(typename _Tag::__allow_ctad...)->logical_and<_Tag...>;


template <>
struct logical_and<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) && std::forward<_T2>(__u)))
      -> decltype(std::forward<_T1>(__t) && std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) && std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct logical_not : __unary_function<_Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Tp& __x) const { return !__x; }
};
template <class... _Tag> [[maybe_unused]] logical_not(typename _Tag::__allow_ctad...)->logical_not<_Tag...>;


template <>
struct logical_not<void> {
  template <class _Tp>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_Tp&& __x) const
      noexcept(noexcept(!std::forward<_Tp>(__x)))
      -> decltype(!std::forward<_Tp>(__x)) {
    return !std::forward<_Tp>(__x);
  }
  typedef void is_transparent;
};



template <class _Tp = void>



struct logical_or : __binary_function<_Tp, _Tp, bool> {
  typedef bool __result_type;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Tp& __x, const _Tp& __y) const {
    return __x || __y;
  }
};
template <class... _Tag> [[maybe_unused]] logical_or(typename _Tag::__allow_ctad...)->logical_or<_Tag...>;


template <>
struct logical_or<void> {
  template <class _T1, class _T2>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_T1&& __t, _T2&& __u) const
      noexcept(noexcept(std::forward<_T1>(__t) || std::forward<_T2>(__u)))
      -> decltype(std::forward<_T1>(__t) || std::forward<_T2>(__u)) {
    return std::forward<_T1>(__t) || std::forward<_T2>(__u);
  }
  typedef void is_transparent;
};


}}
# 539 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/operations.h" 3
#pragma clang diagnostic pop
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/reference_wrapper.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/reference_wrapper.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/synth_three_way.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/synth_three_way.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/synth_three_way.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/synth_three_way.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/synth_three_way.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/synth_three_way.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/synth_three_way.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/synth_three_way.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/synth_three_way.h" 3
}}
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/synth_three_way.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/reference_wrapper.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/invoke.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/invoke.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/invoke.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/invoke.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_base_of.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_base_of.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_base_of.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_base_of.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_base_of.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_base_of.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_base_of.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_base_of.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Bp, class _Dp>
struct is_base_of : public integral_constant<bool, __is_base_of(_Bp, _Dp)> {};


template <class _Bp, class _Dp>
inline constexpr bool is_base_of_v = __is_base_of(_Bp, _Dp);


}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_base_of.h" 3
#pragma clang diagnostic pop
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/invoke.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_core_convertible.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_core_convertible.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_core_convertible.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_core_convertible.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_core_convertible.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_core_convertible.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_core_convertible.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_core_convertible.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {






template <class _Tp, class _Up, class = void>
struct __is_core_convertible : public false_type {};

template <class _Tp, class _Up>
struct __is_core_convertible<_Tp, _Up, decltype(static_cast<void (*)(_Up)>(0)(static_cast<_Tp (*)()>(0)()))>
    : public true_type {};

}}
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_core_convertible.h" 3
#pragma clang diagnostic pop
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/invoke.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_member_pointer.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_member_pointer.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_member_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_member_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_member_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_member_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_member_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_member_pointer.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_member_pointer : _BoolConstant<__is_member_pointer(_Tp)> {};

template <class _Tp>
struct is_member_object_pointer : _BoolConstant<__is_member_object_pointer(_Tp)> {};

template <class _Tp>
struct is_member_function_pointer : _BoolConstant<__is_member_function_pointer(_Tp)> {};


template <class _Tp>
inline constexpr bool is_member_pointer_v = __is_member_pointer(_Tp);

template <class _Tp>
inline constexpr bool is_member_object_pointer_v = __is_member_object_pointer(_Tp);

template <class _Tp>
inline constexpr bool is_member_function_pointer_v = __is_member_function_pointer(_Tp);


}}
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_member_pointer.h" 3
#pragma clang diagnostic pop
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/invoke.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference_wrapper.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference_wrapper.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/functional.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/functional.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/functional.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/functional.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/functional.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/functional.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/functional.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/functional.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class>
struct hash;

template <class>
class reference_wrapper;

}}
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/functional.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference_wrapper.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference_wrapper.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference_wrapper.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference_wrapper.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference_wrapper.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference_wrapper.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference_wrapper.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference_wrapper.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct __is_reference_wrapper_impl : public false_type {};
template <class _Tp>
struct __is_reference_wrapper_impl<reference_wrapper<_Tp> > : public true_type {};
template <class _Tp>
struct __is_reference_wrapper : public __is_reference_wrapper_impl<__remove_cv_t<_Tp> > {};

}}
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_reference_wrapper.h" 3
#pragma clang diagnostic pop
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/invoke.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/nat.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/nat.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/nat.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/nat.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/nat.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/nat.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/nat.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/nat.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

struct __nat {

  __nat() = delete;
  __nat(const __nat&) = delete;
  __nat& operator=(const __nat&) = delete;
  ~__nat() = delete;

};

}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/nat.h" 3
#pragma clang diagnostic pop
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/invoke.h" 2 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/invoke.h" 3


#pragma clang diagnostic push
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/invoke.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/invoke.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/invoke.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/invoke.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/invoke.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/invoke.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _DecayedFp>
struct __member_pointer_class_type {};

template <class _Ret, class _ClassType>
struct __member_pointer_class_type<_Ret _ClassType::*> {
  typedef _ClassType type;
};

template <class _Fp,
          class _A0,
          class _DecayFp = __decay_t<_Fp>,
          class _DecayA0 = __decay_t<_A0>,
          class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>
using __enable_if_bullet1 =
    __enable_if_t<is_member_function_pointer<_DecayFp>::value &&
                  (is_same<_ClassT, _DecayA0>::value || is_base_of<_ClassT, _DecayA0>::value)>;

template <class _Fp, class _A0, class _DecayFp = __decay_t<_Fp>, class _DecayA0 = __decay_t<_A0> >
using __enable_if_bullet2 =
    __enable_if_t<is_member_function_pointer<_DecayFp>::value && __is_reference_wrapper<_DecayA0>::value>;

template <class _Fp,
          class _A0,
          class _DecayFp = __decay_t<_Fp>,
          class _DecayA0 = __decay_t<_A0>,
          class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>
using __enable_if_bullet3 =
    __enable_if_t<is_member_function_pointer<_DecayFp>::value &&
                  !(is_same<_ClassT, _DecayA0>::value || is_base_of<_ClassT, _DecayA0>::value) &&
                  !__is_reference_wrapper<_DecayA0>::value>;

template <class _Fp,
          class _A0,
          class _DecayFp = __decay_t<_Fp>,
          class _DecayA0 = __decay_t<_A0>,
          class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>
using __enable_if_bullet4 =
    __enable_if_t<is_member_object_pointer<_DecayFp>::value &&
                  (is_same<_ClassT, _DecayA0>::value || is_base_of<_ClassT, _DecayA0>::value)>;

template <class _Fp, class _A0, class _DecayFp = __decay_t<_Fp>, class _DecayA0 = __decay_t<_A0> >
using __enable_if_bullet5 =
    __enable_if_t<is_member_object_pointer<_DecayFp>::value && __is_reference_wrapper<_DecayA0>::value>;

template <class _Fp,
          class _A0,
          class _DecayFp = __decay_t<_Fp>,
          class _DecayA0 = __decay_t<_A0>,
          class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>
using __enable_if_bullet6 =
    __enable_if_t<is_member_object_pointer<_DecayFp>::value &&
                  !(is_same<_ClassT, _DecayA0>::value || is_base_of<_ClassT, _DecayA0>::value) &&
                  !__is_reference_wrapper<_DecayA0>::value>;





template <class... _Args>
__nat __invoke(_Args&&... __args);




template <class _Fp, class _A0, class... _Args, class = __enable_if_bullet1<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr
decltype((std::declval<_A0>().*std::declval<_Fp>())(std::declval<_Args>()...))
__invoke(_Fp&& __f, _A0&& __a0, _Args&&... __args)
    noexcept(noexcept((static_cast<_A0&&>(__a0).*__f)(static_cast<_Args&&>(__args)...)))
               { return (static_cast<_A0&&>(__a0).*__f)(static_cast<_Args&&>(__args)...); }

template <class _Fp, class _A0, class... _Args, class = __enable_if_bullet2<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr
decltype((std::declval<_A0>().get().*std::declval<_Fp>())(std::declval<_Args>()...))
__invoke(_Fp&& __f, _A0&& __a0, _Args&&... __args)
    noexcept(noexcept((__a0.get().*__f)(static_cast<_Args&&>(__args)...)))
               { return (__a0.get().*__f)(static_cast<_Args&&>(__args)...); }

template <class _Fp, class _A0, class... _Args, class = __enable_if_bullet3<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr
decltype(((*std::declval<_A0>()).*std::declval<_Fp>())(std::declval<_Args>()...))
__invoke(_Fp&& __f, _A0&& __a0, _Args&&... __args)
    noexcept(noexcept(((*static_cast<_A0&&>(__a0)).*__f)(static_cast<_Args&&>(__args)...)))
               { return ((*static_cast<_A0&&>(__a0)).*__f)(static_cast<_Args&&>(__args)...); }



template <class _Fp, class _A0, class = __enable_if_bullet4<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr
decltype(std::declval<_A0>().*std::declval<_Fp>())
__invoke(_Fp&& __f, _A0&& __a0)
    noexcept(noexcept(static_cast<_A0&&>(__a0).*__f))
               { return static_cast<_A0&&>(__a0).*__f; }

template <class _Fp, class _A0, class = __enable_if_bullet5<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr
decltype(std::declval<_A0>().get().*std::declval<_Fp>())
__invoke(_Fp&& __f, _A0&& __a0)
    noexcept(noexcept(__a0.get().*__f))
               { return __a0.get().*__f; }

template <class _Fp, class _A0, class = __enable_if_bullet6<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr
decltype((*std::declval<_A0>()).*std::declval<_Fp>())
__invoke(_Fp&& __f, _A0&& __a0)
    noexcept(noexcept((*static_cast<_A0&&>(__a0)).*__f))
               { return (*static_cast<_A0&&>(__a0)).*__f; }



template <class _Fp, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr
decltype(std::declval<_Fp>()(std::declval<_Args>()...))
__invoke(_Fp&& __f, _Args&&... __args)
    noexcept(noexcept(static_cast<_Fp&&>(__f)(static_cast<_Args&&>(__args)...)))
               { return static_cast<_Fp&&>(__f)(static_cast<_Args&&>(__args)...); }



template <class _Ret, class _Fp, class... _Args>
struct __invokable_r {
  template <class _XFp, class... _XArgs>
  static decltype(std::__invoke(std::declval<_XFp>(), std::declval<_XArgs>()...)) __try_call(int);
  template <class _XFp, class... _XArgs>
  static __nat __try_call(...);



  using _Result = decltype(__try_call<_Fp, _Args...>(0));

  using type = __conditional_t<_IsNotSame<_Result, __nat>::value,
                                            __conditional_t<is_void<_Ret>::value, true_type, __is_core_convertible<_Result, _Ret> >,
                                            false_type>;
  static const bool value = type::value;
};
template <class _Fp, class... _Args>
using __invokable = __invokable_r<void, _Fp, _Args...>;

template <bool _IsInvokable, bool _IsCVVoid, class _Ret, class _Fp, class... _Args>
struct __nothrow_invokable_r_imp {
  static const bool value = false;
};

template <class _Ret, class _Fp, class... _Args>
struct __nothrow_invokable_r_imp<true, false, _Ret, _Fp, _Args...> {
  typedef __nothrow_invokable_r_imp _ThisT;

  template <class _Tp>
  static void __test_noexcept(_Tp) noexcept;




  static const bool value =
      noexcept(_ThisT::__test_noexcept<_Ret>(std::__invoke(std::declval<_Fp>(), std::declval<_Args>()...)));

};

template <class _Ret, class _Fp, class... _Args>
struct __nothrow_invokable_r_imp<true, true, _Ret, _Fp, _Args...> {



  static const bool value = noexcept(std::__invoke(std::declval<_Fp>(), std::declval<_Args>()...));

};

template <class _Ret, class _Fp, class... _Args>
using __nothrow_invokable_r =
    __nothrow_invokable_r_imp<__invokable_r<_Ret, _Fp, _Args...>::value, is_void<_Ret>::value, _Ret, _Fp, _Args...>;

template <class _Fp, class... _Args>
using __nothrow_invokable = __nothrow_invokable_r_imp<__invokable<_Fp, _Args...>::value, true, void, _Fp, _Args...>;

template <class _Fp, class... _Args>
struct __invoke_of
    : public enable_if<__invokable<_Fp, _Args...>::value, typename __invokable_r<void, _Fp, _Args...>::_Result> {};

template <class _Ret, bool = is_void<_Ret>::value>
struct __invoke_void_return_wrapper {
  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static _Ret __call(_Args&&... __args) {
    return std::__invoke(std::forward<_Args>(__args)...);
  }
};

template <class _Ret>
struct __invoke_void_return_wrapper<_Ret, true> {
  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static void __call(_Args&&... __args) {
    std::__invoke(std::forward<_Args>(__args)...);
  }
};





template <class _Fn, class... _Args>
struct is_invocable : integral_constant<bool, __invokable<_Fn, _Args...>::value> {};

template <class _Ret, class _Fn, class... _Args>
struct is_invocable_r : integral_constant<bool, __invokable_r<_Ret, _Fn, _Args...>::value> {};

template <class _Fn, class... _Args>
inline constexpr bool is_invocable_v = is_invocable<_Fn, _Args...>::value;

template <class _Ret, class _Fn, class... _Args>
inline constexpr bool is_invocable_r_v = is_invocable_r<_Ret, _Fn, _Args...>::value;



template <class _Fn, class... _Args>
struct is_nothrow_invocable : integral_constant<bool, __nothrow_invokable<_Fn, _Args...>::value> {
};

template <class _Ret, class _Fn, class... _Args>
struct is_nothrow_invocable_r
    : integral_constant<bool, __nothrow_invokable_r<_Ret, _Fn, _Args...>::value> {};

template <class _Fn, class... _Args>
inline constexpr bool is_nothrow_invocable_v = is_nothrow_invocable<_Fn, _Args...>::value;

template <class _Ret, class _Fn, class... _Args>
inline constexpr bool is_nothrow_invocable_r_v = is_nothrow_invocable_r<_Ret, _Fn, _Args...>::value;

template <class _Fn, class... _Args>
struct invoke_result : __invoke_of<_Fn, _Args...> {};

template <class _Fn, class... _Args>
using invoke_result_t = typename invoke_result<_Fn, _Args...>::type;



}}
# 268 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/invoke.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/invoke.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/invoke.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/invoke.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/invoke.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/invoke.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/invoke.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/invoke.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/invoke.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Fn, class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) invoke_result_t<_Fn, _Args...>
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/invoke.h" 3
}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/invoke.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/reference_wrapper.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/weak_result_type.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/weak_result_type.h" 3


#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/weak_result_type.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/weak_result_type.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/weak_result_type.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/weak_result_type.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/weak_result_type.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/weak_result_type.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct __has_result_type {
private:
  template <class _Up>
  static false_type __test(...);
  template <class _Up>
  static true_type __test(typename _Up::result_type* = 0);

public:
  static const bool value = decltype(__test<_Tp>(0))::value;
};



template <class _Tp>
struct __derives_from_unary_function {
private:
  struct __two {
    char __lx;
    char __lxx;
  };
  static __two __test(...);
  template <class _Ap, class _Rp>
  static __unary_function<_Ap, _Rp> __test(const volatile __unary_function<_Ap, _Rp>*);

public:
  static const bool value = !is_same<decltype(__test((_Tp*)0)), __two>::value;
  typedef decltype(__test((_Tp*)0)) type;
};

template <class _Tp>
struct __derives_from_binary_function {
private:
  struct __two {
    char __lx;
    char __lxx;
  };
  static __two __test(...);
  template <class _A1, class _A2, class _Rp>
  static __binary_function<_A1, _A2, _Rp> __test(const volatile __binary_function<_A1, _A2, _Rp>*);

public:
  static const bool value = !is_same<decltype(__test((_Tp*)0)), __two>::value;
  typedef decltype(__test((_Tp*)0)) type;
};

template <class _Tp, bool = __derives_from_unary_function<_Tp>::value>
struct __maybe_derive_from_unary_function
    : public __derives_from_unary_function<_Tp>::type {};

template <class _Tp>
struct __maybe_derive_from_unary_function<_Tp, false> {};

template <class _Tp, bool = __derives_from_binary_function<_Tp>::value>
struct __maybe_derive_from_binary_function
    : public __derives_from_binary_function<_Tp>::type {};

template <class _Tp>
struct __maybe_derive_from_binary_function<_Tp, false> {};

template <class _Tp, bool = __has_result_type<_Tp>::value>
struct __weak_result_type_imp
    : public __maybe_derive_from_unary_function<_Tp>,
      public __maybe_derive_from_binary_function<_Tp> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = typename _Tp::result_type;

};

template <class _Tp>
struct __weak_result_type_imp<_Tp, false>
    : public __maybe_derive_from_unary_function<_Tp>, public __maybe_derive_from_binary_function<_Tp> {};

template <class _Tp>
struct __weak_result_type : public __weak_result_type_imp<_Tp> {};



template <class _Rp>
struct __weak_result_type<_Rp()> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Rp>
struct __weak_result_type<_Rp (&)()> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Rp>
struct __weak_result_type<_Rp (*)()> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};



template <class _Rp, class _A1>
struct __weak_result_type<_Rp(_A1)> : public __unary_function<_A1, _Rp> {};

template <class _Rp, class _A1>
struct __weak_result_type<_Rp (&)(_A1)> : public __unary_function<_A1, _Rp> {};

template <class _Rp, class _A1>
struct __weak_result_type<_Rp (*)(_A1)> : public __unary_function<_A1, _Rp> {};

template <class _Rp, class _Cp>
struct __weak_result_type<_Rp (_Cp::*)()> : public __unary_function<_Cp*, _Rp> {};

template <class _Rp, class _Cp>
struct __weak_result_type<_Rp (_Cp::*)() const> : public __unary_function<const _Cp*, _Rp> {};

template <class _Rp, class _Cp>
struct __weak_result_type<_Rp (_Cp::*)() volatile> : public __unary_function<volatile _Cp*, _Rp> {};

template <class _Rp, class _Cp>
struct __weak_result_type<_Rp (_Cp::*)() const volatile> : public __unary_function<const volatile _Cp*, _Rp> {};



template <class _Rp, class _A1, class _A2>
struct __weak_result_type<_Rp(_A1, _A2)> : public __binary_function<_A1, _A2, _Rp> {};

template <class _Rp, class _A1, class _A2>
struct __weak_result_type<_Rp (*)(_A1, _A2)> : public __binary_function<_A1, _A2, _Rp> {};

template <class _Rp, class _A1, class _A2>
struct __weak_result_type<_Rp (&)(_A1, _A2)> : public __binary_function<_A1, _A2, _Rp> {};

template <class _Rp, class _Cp, class _A1>
struct __weak_result_type<_Rp (_Cp::*)(_A1)> : public __binary_function<_Cp*, _A1, _Rp> {};

template <class _Rp, class _Cp, class _A1>
struct __weak_result_type<_Rp (_Cp::*)(_A1) const> : public __binary_function<const _Cp*, _A1, _Rp> {};

template <class _Rp, class _Cp, class _A1>
struct __weak_result_type<_Rp (_Cp::*)(_A1) volatile> : public __binary_function<volatile _Cp*, _A1, _Rp> {};

template <class _Rp, class _Cp, class _A1>
struct __weak_result_type<_Rp (_Cp::*)(_A1) const volatile> : public __binary_function<const volatile _Cp*, _A1, _Rp> {
};



template <class _Rp, class _A1, class _A2, class _A3, class... _A4>
struct __weak_result_type<_Rp(_A1, _A2, _A3, _A4...)> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Rp, class _A1, class _A2, class _A3, class... _A4>
struct __weak_result_type<_Rp (&)(_A1, _A2, _A3, _A4...)> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Rp, class _A1, class _A2, class _A3, class... _A4>
struct __weak_result_type<_Rp (*)(_A1, _A2, _A3, _A4...)> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Rp, class _Cp, class _A1, class _A2, class... _A3>
struct __weak_result_type<_Rp (_Cp::*)(_A1, _A2, _A3...)> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Rp, class _Cp, class _A1, class _A2, class... _A3>
struct __weak_result_type<_Rp (_Cp::*)(_A1, _A2, _A3...) const> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Rp, class _Cp, class _A1, class _A2, class... _A3>
struct __weak_result_type<_Rp (_Cp::*)(_A1, _A2, _A3...) volatile> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Rp, class _Cp, class _A1, class _A2, class... _A3>
struct __weak_result_type<_Rp (_Cp::*)(_A1, _A2, _A3...) const volatile> {

  using result_type __attribute__((__nodebug__)) __attribute__((__deprecated__)) = _Rp;

};

template <class _Tp, class... _Args>
struct __invoke_return {
  typedef decltype(std::__invoke(std::declval<_Tp>(), std::declval<_Args>()...)) type;
};

}}
# 229 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/weak_result_type.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/reference_wrapper.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/addressof.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/addressof.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/addressof.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/addressof.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/addressof.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/addressof.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/addressof.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/addressof.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
inline constexpr __attribute__((__no_sanitize__("cfi"))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* addressof(_Tp& __x) noexcept {
  return __builtin_addressof(__x);
}
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/addressof.h" 3
template <class _Tp>
_Tp* addressof(const _Tp&&) noexcept = delete;


}}
# 59 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/addressof.h" 3
#pragma clang diagnostic pop
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/reference_wrapper.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_const.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_const.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_const.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_const.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_const.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_const.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_const.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_const.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
struct is_const : _BoolConstant<__is_const(_Tp)> {};


template <class _Tp>
inline constexpr bool is_const_v = __is_const(_Tp);
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_const.h" 3
}}
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_const.h" 3
#pragma clang diagnostic pop
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/reference_wrapper.h" 2 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/reference_wrapper.h" 3


#pragma clang diagnostic push
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/reference_wrapper.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/reference_wrapper.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/reference_wrapper.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/reference_wrapper.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/reference_wrapper.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/reference_wrapper.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
class reference_wrapper : public __weak_result_type<_Tp> {
public:

  typedef _Tp type;

private:
  type* __f_;

  static void __fun(_Tp&) noexcept;
  static void __fun(_Tp&&) = delete;

public:
  template <class _Up,
            class = __void_t<decltype(__fun(std::declval<_Up>()))>,
            __enable_if_t<!__is_same_uncvref<_Up, reference_wrapper>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference_wrapper(_Up&& __u)
      noexcept(noexcept(__fun(std::declval<_Up>()))) {
    type& __f = static_cast<_Up&&>(__u);
    __f_ = std::addressof(__f);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) operator type&() const noexcept { return *__f_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) type& get() const noexcept { return *__f_; }


  template <class... _ArgTypes>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __invoke_of<type&, _ArgTypes...>::type
  operator()(_ArgTypes&&... __args) const



      noexcept(is_nothrow_invocable_v<_Tp&, _ArgTypes...>)

  {
    return std::__invoke(get(), std::forward<_ArgTypes>(__args)...);
  }
# 118 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/reference_wrapper.h" 3
};


template <class _Tp>
reference_wrapper(_Tp&) -> reference_wrapper<_Tp>;


template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference_wrapper<_Tp> ref(_Tp& __t) noexcept {
  return reference_wrapper<_Tp>(__t);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference_wrapper<_Tp>
ref(reference_wrapper<_Tp> __t) noexcept {
  return __t;
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference_wrapper<const _Tp> cref(const _Tp& __t) noexcept {
  return reference_wrapper<const _Tp>(__t);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference_wrapper<const _Tp>
cref(reference_wrapper<_Tp> __t) noexcept {
  return __t;
}

template <class _Tp>
void ref(const _Tp&&) = delete;
template <class _Tp>
void cref(const _Tp&&) = delete;

}}
# 152 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/reference_wrapper.h" 3
#pragma clang diagnostic pop
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ostream.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ostream.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ostream.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ostream.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ostream.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ostream.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ostream.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ostream.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_ostream;

using ostream = basic_ostream<char>;


using wostream = basic_ostream<wchar_t>;


template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(ostream))) __attribute__((__preferred_name__(wostream))) basic_ostream;

}}
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/ostream.h" 3
#pragma clang diagnostic pop
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/access.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/access.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/access.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/access.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/access.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/access.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/access.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/access.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, size_t _Np>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp* begin(_Tp (&__array)[_Np]) noexcept {
  return __array;
}

template <class _Tp, size_t _Np>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp* end(_Tp (&__array)[_Np]) noexcept {
  return __array + _Np;
}



template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto begin(_Cp& __c) -> decltype(__c.begin()) {
  return __c.begin();
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto begin(const _Cp& __c) -> decltype(__c.begin()) {
  return __c.begin();
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto end(_Cp& __c) -> decltype(__c.end()) {
  return __c.end();
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto end(const _Cp& __c) -> decltype(__c.end()) {
  return __c.end();
}



template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto
cbegin(const _Cp& __c) noexcept(noexcept(std::begin(__c))) -> decltype(std::begin(__c)) {
  return std::begin(__c);
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto cend(const _Cp& __c) noexcept(noexcept(std::end(__c))) -> decltype(std::end(__c)) {
  return std::end(__c);
}
# 93 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/access.h" 3
}}
# 93 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/access.h" 3
#pragma clang diagnostic pop
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocation_guard.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocation_guard.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__assert" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__assert" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__assertion_handler" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__assertion_handler" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__verbose_abort" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__verbose_abort" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__verbose_abort" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__verbose_abort" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__verbose_abort" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__verbose_abort" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__verbose_abort" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__verbose_abort" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



[[noreturn]] __attribute__((__visibility__("default")))
__attribute__((__format__(__printf__, 1, 2))) void __libcpp_verbose_abort(const char* __format, ...);
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__verbose_abort" 3
}}
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__verbose_abort" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__assertion_handler" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__assertion_handler" 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__assert" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__assert" 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/voidify.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/voidify.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/voidify.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/voidify.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/voidify.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/voidify.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/voidify.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/voidify.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <typename _Tp>
__attribute__((__always_inline__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void* __voidify(_Tp& __from) {

  return const_cast<void*>(static_cast<const volatile void*>(std::addressof(__from)));
}

}}
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/voidify.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/move.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/move.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constructible.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constructible.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constructible.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class... _Args>
struct is_constructible : public integral_constant<bool, __is_constructible(_Tp, _Args...)> {};


template <class _Tp, class... _Args>
inline constexpr bool is_constructible_v = __is_constructible(_Tp, _Args...);


template <class _Tp>
struct is_copy_constructible
    : public integral_constant<bool, __is_constructible(_Tp, __add_lvalue_reference_t<const _Tp>)> {};


template <class _Tp>
inline constexpr bool is_copy_constructible_v = is_copy_constructible<_Tp>::value;


template <class _Tp>
struct is_move_constructible
    : public integral_constant<bool, __is_constructible(_Tp, __add_rvalue_reference_t<_Tp>)> {};


template <class _Tp>
inline constexpr bool is_move_constructible_v = is_move_constructible<_Tp>::value;


template <class _Tp>
struct is_default_constructible : public integral_constant<bool, __is_constructible(_Tp)> {};


template <class _Tp>
inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);


}}
# 57 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constructible.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/move.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_constructible.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_constructible.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_constructible.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template < class _Tp, class... _Args>
struct is_nothrow_constructible
    : public integral_constant<bool, __is_nothrow_constructible(_Tp, _Args...)> {};


template <class _Tp, class... _Args>
inline constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<_Tp, _Args...>::value;


template <class _Tp>
struct is_nothrow_copy_constructible
    : public integral_constant< bool, __is_nothrow_constructible(_Tp, __add_lvalue_reference_t<const _Tp>)> {};


template <class _Tp>
inline constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<_Tp>::value;


template <class _Tp>
struct is_nothrow_move_constructible
    : public integral_constant<bool, __is_nothrow_constructible(_Tp, __add_rvalue_reference_t<_Tp>)> {};


template <class _Tp>
inline constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<_Tp>::value;


template <class _Tp>
struct is_nothrow_default_constructible
    : public integral_constant<bool, __is_nothrow_constructible(_Tp)> {};


template <class _Tp>
inline constexpr bool is_nothrow_default_constructible_v = __is_nothrow_constructible(_Tp);


}}
# 59 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_constructible.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/move.h" 2 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/move.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/move.h" 2 3

#pragma clang diagnostic push
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/move.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/move.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/move.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/move.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/move.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/move.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __libcpp_remove_reference_t<_Tp>&&
move([[_Clang::__lifetimebound__]] _Tp&& __t) noexcept {
  typedef __attribute__((__nodebug__)) __libcpp_remove_reference_t<_Tp> _Up;
  return static_cast<_Up&&>(__t);
}

template <class _Tp>
using __move_if_noexcept_result_t =
    __conditional_t<!is_nothrow_move_constructible<_Tp>::value && is_copy_constructible<_Tp>::value, const _Tp&, _Tp&&>;

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __move_if_noexcept_result_t<_Tp>
move_if_noexcept([[_Clang::__lifetimebound__]] _Tp& __x) noexcept {
  return std::move(__x);
}

}}
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/move.h" 3
#pragma clang diagnostic pop
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/new" 1 3
# 104 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/new" 3
# 118 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/new" 3
namespace std
{


struct __attribute__((__visibility__("default"))) nothrow_t {
  explicit nothrow_t() = default;
};
extern __attribute__((__visibility__("default"))) const nothrow_t nothrow;

class __attribute__((__visibility__("default"))) bad_alloc : public exception {
public:
  bad_alloc() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_alloc(const bad_alloc&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_alloc& operator=(const bad_alloc&) noexcept = default;
  ~bad_alloc() noexcept override;
  const char* what() const noexcept override;
};

class __attribute__((__visibility__("default"))) bad_array_new_length : public bad_alloc {
public:
  bad_array_new_length() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_array_new_length(const bad_array_new_length&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_array_new_length& operator=(const bad_array_new_length&) noexcept = default;
  ~bad_array_new_length() noexcept override;
  const char* what() const noexcept override;
};

typedef void (*new_handler)();
__attribute__((__visibility__("default"))) new_handler set_new_handler(new_handler) noexcept;
__attribute__((__visibility__("default"))) new_handler get_new_handler() noexcept;
# 169 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/new" 3
[[noreturn]] __attribute__((__visibility__("default"))) void __throw_bad_alloc();

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_bad_array_new_length() {

  throw bad_array_new_length();



}



enum class align_val_t : size_t {};
# 196 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/new" 3
}
# 206 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/new" 3
[[__nodiscard__]] __attribute__((__visibility__("default"))) void* operator new(std::size_t __sz) ;
[[__nodiscard__]] __attribute__((__visibility__("default"))) void* operator new(std::size_t __sz, const std::nothrow_t&) noexcept
    __attribute__((__malloc__));
__attribute__((__visibility__("default"))) void operator delete(void* __p) noexcept;
__attribute__((__visibility__("default"))) void operator delete(void* __p, const std::nothrow_t&) noexcept;

__attribute__((__visibility__("default"))) void operator delete(void* __p, std::size_t __sz) noexcept;


[[__nodiscard__]] __attribute__((__visibility__("default"))) void* operator new[](std::size_t __sz) ;
[[__nodiscard__]] __attribute__((__visibility__("default"))) void* operator new[](std::size_t __sz, const std::nothrow_t&) noexcept
    __attribute__((__malloc__));
__attribute__((__visibility__("default"))) void operator delete[](void* __p) noexcept;
__attribute__((__visibility__("default"))) void operator delete[](void* __p, const std::nothrow_t&) noexcept;

__attribute__((__visibility__("default"))) void operator delete[](void* __p, std::size_t __sz) noexcept;



[[__nodiscard__]] __attribute__((__visibility__("default"))) void* operator new(std::size_t __sz, std::align_val_t) ;
[[__nodiscard__]] __attribute__((__visibility__("default"))) void*
operator new(std::size_t __sz, std::align_val_t, const std::nothrow_t&) noexcept __attribute__((__malloc__));
__attribute__((__visibility__("default"))) void operator delete(void* __p, std::align_val_t) noexcept;
__attribute__((__visibility__("default"))) void operator delete(void* __p, std::align_val_t, const std::nothrow_t&) noexcept;

__attribute__((__visibility__("default"))) void operator delete(void* __p, std::size_t __sz, std::align_val_t) noexcept;


[[__nodiscard__]] __attribute__((__visibility__("default"))) void*
operator new[](std::size_t __sz, std::align_val_t) ;
[[__nodiscard__]] __attribute__((__visibility__("default"))) void*
operator new[](std::size_t __sz, std::align_val_t, const std::nothrow_t&) noexcept __attribute__((__malloc__));
__attribute__((__visibility__("default"))) void operator delete[](void* __p, std::align_val_t) noexcept;
__attribute__((__visibility__("default"))) void operator delete[](void* __p, std::align_val_t, const std::nothrow_t&) noexcept;

__attribute__((__visibility__("default"))) void operator delete[](void* __p, std::size_t __sz, std::align_val_t) noexcept;



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void* operator new(std::size_t, void* __p) noexcept { return __p; }
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void* operator new[](std::size_t, void* __p) noexcept { return __p; }
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator delete(void*, void*) noexcept {}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator delete[](void*, void*) noexcept {}



#pragma clang diagnostic push
# 252 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/new" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 252 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/new" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 252 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/new" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 252 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/new" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 252 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/new" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 252 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/new" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

constexpr inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __is_overaligned_for_new(size_t __align) noexcept {

  return __align > 16UL;



}

template <class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void* __libcpp_operator_new(_Args... __args) {

  return __builtin_operator_new(__args...);



}

template <class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __libcpp_operator_delete(_Args... __args) {

  __builtin_operator_delete(__args...);



}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void* __libcpp_allocate(size_t __size, size_t __align) {

  if (__is_overaligned_for_new(__align)) {
    const align_val_t __align_val = static_cast<align_val_t>(__align);
    return __libcpp_operator_new(__size, __align_val);
  }


  (void)__align;
  return __libcpp_operator_new(__size);
}

template <class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __do_deallocate_handle_size(void* __ptr, size_t __size, _Args... __args) {




  return std::__libcpp_operator_delete(__ptr, __size, __args...);

}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __libcpp_deallocate(void* __ptr, size_t __size, size_t __align) {




  if (__is_overaligned_for_new(__align)) {
    const align_val_t __align_val = static_cast<align_val_t>(__align);
    return __do_deallocate_handle_size(__ptr, __size, __align_val);
  } else {
    return __do_deallocate_handle_size(__ptr, __size);
  }

}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __libcpp_deallocate_unsized(void* __ptr, size_t __align) {




  if (__is_overaligned_for_new(__align)) {
    const align_val_t __align_val = static_cast<align_val_t>(__align);
    return __libcpp_operator_delete(__ptr, __align_val);
  } else {
    return __libcpp_operator_delete(__ptr);
  }

}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp* __launder(_Tp* __p) noexcept {
  static_assert(!(is_function<_Tp>::value), "can't launder functions");
  static_assert(!(is_same<void, __remove_cv_t<_Tp> >::value), "can't launder cv-void");
  return __builtin_launder(__p);
}


template <class _Tp>
[[nodiscard]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp* launder(_Tp* __p) noexcept {
  return std::__launder(__p);
}






inline constexpr size_t hardware_destructive_interference_size = 64;
inline constexpr size_t hardware_constructive_interference_size = 64;





}}
# 355 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/new" 3
#pragma clang diagnostic pop


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdlib" 1 3
# 86 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdlib" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdlib.h" 1 3
# 91 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdlib.h" 3



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdlib.h" 1 3 4
# 58 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdlib.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 1 3 4
# 61 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/Availability.h" 1 3 4
# 176 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/Availability.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/AvailabilityVersions.h" 1 3 4
# 177 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/Availability.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/AvailabilityInternal.h" 1 3 4
# 178 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/Availability.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/AvailabilityInternalLegacy.h" 1 3 4
# 179 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/Availability.h" 2 3 4
# 62 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 2 3 4




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/wait.h" 1 3 4
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/wait.h" 3 4
typedef enum {
 P_ALL,
 P_PID,
 P_PGID
} idtype_t;





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_pid_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_pid_t.h" 3 4
typedef __darwin_pid_t pid_t;
# 90 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/wait.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_id_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_id_t.h" 3 4
typedef __darwin_id_t id_t;
# 91 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/wait.h" 2 3 4
# 109 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/wait.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 1 3 4
# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/appleapiopts.h" 1 3 4
# 74 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 2 3 4








# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/signal.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/signal.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/signal.h" 1 3 4
# 41 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/signal.h" 3 4
typedef int sig_atomic_t;
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/signal.h" 2 3 4
# 83 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 2 3 4
# 146 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/_mcontext.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/_mcontext.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/_mcontext.h" 1 3 4
# 36 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/_mcontext.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/machine/_structs.h" 1 3 4
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/machine/_structs.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 1 3 4
# 38 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/types.h" 1 3 4
# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/types.h" 1 3 4
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_int8_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_int8_t.h" 3 4
typedef signed char int8_t;
# 80 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_int16_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_int16_t.h" 3 4
typedef short int16_t;
# 81 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_int32_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_int32_t.h" 3 4
typedef int int32_t;
# 82 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_int64_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_int64_t.h" 3 4
typedef long long int64_t;
# 83 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/types.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_u_int8_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_u_int8_t.h" 3 4
typedef unsigned char u_int8_t;
# 85 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_u_int16_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_u_int16_t.h" 3 4
typedef unsigned short u_int16_t;
# 86 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_u_int32_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_u_int32_t.h" 3 4
typedef unsigned int u_int32_t;
# 87 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_u_int64_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_u_int64_t.h" 3 4
typedef unsigned long long u_int64_t;
# 88 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/types.h" 2 3 4


typedef int64_t register_t;




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_intptr_t.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_intptr_t.h" 3 4
typedef __darwin_intptr_t intptr_t;
# 96 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_uintptr_t.h" 1 3 4
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_uintptr_t.h" 3 4
typedef unsigned long uintptr_t;
# 97 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/types.h" 2 3 4



typedef u_int64_t user_addr_t;
typedef u_int64_t user_size_t;
typedef int64_t user_ssize_t;
typedef int64_t user_long_t;
typedef u_int64_t user_ulong_t;
typedef int64_t user_time_t;
typedef int64_t user_off_t;
# 116 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/types.h" 3 4
typedef u_int64_t syscall_arg_t;
# 36 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/types.h" 2 3 4
# 39 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 2 3 4
# 48 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_thread_state
{
    unsigned int __eax;
    unsigned int __ebx;
    unsigned int __ecx;
    unsigned int __edx;
    unsigned int __edi;
    unsigned int __esi;
    unsigned int __ebp;
    unsigned int __esp;
    unsigned int __ss;
    unsigned int __eflags;
    unsigned int __eip;
    unsigned int __cs;
    unsigned int __ds;
    unsigned int __es;
    unsigned int __fs;
    unsigned int __gs;
};
# 94 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_fp_control
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
      :2,
    __pc :2,





    __rc :2,






             :1,
      :3;
};
typedef struct __darwin_fp_control __darwin_fp_control_t;
# 152 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_fp_status
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
    __stkflt :1,
    __errsumm :1,
    __c0 :1,
    __c1 :1,
    __c2 :1,
    __tos :3,
    __c3 :1,
    __busy :1;
};
typedef struct __darwin_fp_status __darwin_fp_status_t;
# 196 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_mmst_reg
{
 char __mmst_reg[10];
 char __mmst_rsrv[6];
};
# 215 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_xmm_reg
{
 char __xmm_reg[16];
};
# 231 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_ymm_reg
{
 char __ymm_reg[32];
};
# 247 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_zmm_reg
{
 char __zmm_reg[64];
};
# 261 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_opmask_reg
{
 char __opmask_reg[8];
};
# 283 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_float_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
};


struct __darwin_i386_avx_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
};


struct __darwin_i386_avx512_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
 struct __darwin_opmask_reg __fpu_k0;
 struct __darwin_opmask_reg __fpu_k1;
 struct __darwin_opmask_reg __fpu_k2;
 struct __darwin_opmask_reg __fpu_k3;
 struct __darwin_opmask_reg __fpu_k4;
 struct __darwin_opmask_reg __fpu_k5;
 struct __darwin_opmask_reg __fpu_k6;
 struct __darwin_opmask_reg __fpu_k7;
 struct __darwin_ymm_reg __fpu_zmmh0;
 struct __darwin_ymm_reg __fpu_zmmh1;
 struct __darwin_ymm_reg __fpu_zmmh2;
 struct __darwin_ymm_reg __fpu_zmmh3;
 struct __darwin_ymm_reg __fpu_zmmh4;
 struct __darwin_ymm_reg __fpu_zmmh5;
 struct __darwin_ymm_reg __fpu_zmmh6;
 struct __darwin_ymm_reg __fpu_zmmh7;
};
# 577 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_exception_state
{
 __uint16_t __trapno;
 __uint16_t __cpu;
 __uint32_t __err;
 __uint32_t __faultvaddr;
};
# 597 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_debug_state32
{
 unsigned int __dr0;
 unsigned int __dr1;
 unsigned int __dr2;
 unsigned int __dr3;
 unsigned int __dr4;
 unsigned int __dr5;
 unsigned int __dr6;
 unsigned int __dr7;
};


struct __x86_instruction_state
{
        int __insn_stream_valid_bytes;
        int __insn_offset;
 int __out_of_synch;





        __uint8_t __insn_bytes[(2448 - 64 - 4)];

 __uint8_t __insn_cacheline[64];
};


struct __last_branch_record
{
 __uint64_t __from_ip;
 __uint64_t __to_ip;
 __uint32_t __mispredict : 1,
   __tsx_abort : 1,
   __in_tsx : 1,
   __cycle_count: 16,
   __reserved : 13;
};


struct __last_branch_state
{
        int __lbr_count;
 __uint32_t __lbr_supported_tsx : 1,
     __lbr_supported_cycle_count : 1,
     __reserved : 30;

 struct __last_branch_record __lbrs[32];
};
# 704 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __x86_pagein_state
{
 int __pagein_error;
};







struct __darwin_x86_thread_state64
{
 __uint64_t __rax;
 __uint64_t __rbx;
 __uint64_t __rcx;
 __uint64_t __rdx;
 __uint64_t __rdi;
 __uint64_t __rsi;
 __uint64_t __rbp;
 __uint64_t __rsp;
 __uint64_t __r8;
 __uint64_t __r9;
 __uint64_t __r10;
 __uint64_t __r11;
 __uint64_t __r12;
 __uint64_t __r13;
 __uint64_t __r14;
 __uint64_t __r15;
 __uint64_t __rip;
 __uint64_t __rflags;
 __uint64_t __cs;
 __uint64_t __fs;
 __uint64_t __gs;
};
# 773 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_thread_full_state64
{
 struct __darwin_x86_thread_state64 __ss64;
 __uint64_t __ds;
 __uint64_t __es;
 __uint64_t __ss;
 __uint64_t __gsbase;
};
# 796 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_float_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
};


struct __darwin_x86_avx_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
 struct __darwin_xmm_reg __fpu_ymmh8;
 struct __darwin_xmm_reg __fpu_ymmh9;
 struct __darwin_xmm_reg __fpu_ymmh10;
 struct __darwin_xmm_reg __fpu_ymmh11;
 struct __darwin_xmm_reg __fpu_ymmh12;
 struct __darwin_xmm_reg __fpu_ymmh13;
 struct __darwin_xmm_reg __fpu_ymmh14;
 struct __darwin_xmm_reg __fpu_ymmh15;
};


struct __darwin_x86_avx512_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
 struct __darwin_xmm_reg __fpu_ymmh8;
 struct __darwin_xmm_reg __fpu_ymmh9;
 struct __darwin_xmm_reg __fpu_ymmh10;
 struct __darwin_xmm_reg __fpu_ymmh11;
 struct __darwin_xmm_reg __fpu_ymmh12;
 struct __darwin_xmm_reg __fpu_ymmh13;
 struct __darwin_xmm_reg __fpu_ymmh14;
 struct __darwin_xmm_reg __fpu_ymmh15;
 struct __darwin_opmask_reg __fpu_k0;
 struct __darwin_opmask_reg __fpu_k1;
 struct __darwin_opmask_reg __fpu_k2;
 struct __darwin_opmask_reg __fpu_k3;
 struct __darwin_opmask_reg __fpu_k4;
 struct __darwin_opmask_reg __fpu_k5;
 struct __darwin_opmask_reg __fpu_k6;
 struct __darwin_opmask_reg __fpu_k7;
 struct __darwin_ymm_reg __fpu_zmmh0;
 struct __darwin_ymm_reg __fpu_zmmh1;
 struct __darwin_ymm_reg __fpu_zmmh2;
 struct __darwin_ymm_reg __fpu_zmmh3;
 struct __darwin_ymm_reg __fpu_zmmh4;
 struct __darwin_ymm_reg __fpu_zmmh5;
 struct __darwin_ymm_reg __fpu_zmmh6;
 struct __darwin_ymm_reg __fpu_zmmh7;
 struct __darwin_ymm_reg __fpu_zmmh8;
 struct __darwin_ymm_reg __fpu_zmmh9;
 struct __darwin_ymm_reg __fpu_zmmh10;
 struct __darwin_ymm_reg __fpu_zmmh11;
 struct __darwin_ymm_reg __fpu_zmmh12;
 struct __darwin_ymm_reg __fpu_zmmh13;
 struct __darwin_ymm_reg __fpu_zmmh14;
 struct __darwin_ymm_reg __fpu_zmmh15;
 struct __darwin_zmm_reg __fpu_zmm16;
 struct __darwin_zmm_reg __fpu_zmm17;
 struct __darwin_zmm_reg __fpu_zmm18;
 struct __darwin_zmm_reg __fpu_zmm19;
 struct __darwin_zmm_reg __fpu_zmm20;
 struct __darwin_zmm_reg __fpu_zmm21;
 struct __darwin_zmm_reg __fpu_zmm22;
 struct __darwin_zmm_reg __fpu_zmm23;
 struct __darwin_zmm_reg __fpu_zmm24;
 struct __darwin_zmm_reg __fpu_zmm25;
 struct __darwin_zmm_reg __fpu_zmm26;
 struct __darwin_zmm_reg __fpu_zmm27;
 struct __darwin_zmm_reg __fpu_zmm28;
 struct __darwin_zmm_reg __fpu_zmm29;
 struct __darwin_zmm_reg __fpu_zmm30;
 struct __darwin_zmm_reg __fpu_zmm31;
};
# 1254 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_exception_state64
{
    __uint16_t __trapno;
    __uint16_t __cpu;
    __uint32_t __err;
    __uint64_t __faultvaddr;
};
# 1274 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_debug_state64
{
 __uint64_t __dr0;
 __uint64_t __dr1;
 __uint64_t __dr2;
 __uint64_t __dr3;
 __uint64_t __dr4;
 __uint64_t __dr5;
 __uint64_t __dr6;
 __uint64_t __dr7;
};
# 1302 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_cpmu_state64
{
 __uint64_t __ctrs[16];
};
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/mach/machine/_structs.h" 2 3 4
# 37 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/_mcontext.h" 2 3 4




struct __darwin_mcontext32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_float_state __fs;
};


struct __darwin_mcontext_avx32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_avx_state __fs;
};



struct __darwin_mcontext_avx512_32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_avx512_state __fs;
};
# 99 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/_mcontext.h" 3 4
struct __darwin_mcontext64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_float_state64 __fs;
};


struct __darwin_mcontext64_full
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_full_state64 __ss;
 struct __darwin_x86_float_state64 __fs;
};


struct __darwin_mcontext_avx64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_avx_state64 __fs;
};


struct __darwin_mcontext_avx64_full
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_full_state64 __ss;
 struct __darwin_x86_avx_state64 __fs;
};



struct __darwin_mcontext_avx512_64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_avx512_state64 __fs;
};


struct __darwin_mcontext_avx512_64_full
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_full_state64 __ss;
 struct __darwin_x86_avx512_state64 __fs;
};
# 206 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/_mcontext.h" 3 4
typedef struct __darwin_mcontext64 *mcontext_t;
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/_mcontext.h" 2 3 4
# 147 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_attr_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_attr_t.h" 3 4
typedef __darwin_pthread_attr_t pthread_attr_t;
# 149 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_sigaltstack.h" 1 3 4
# 42 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_sigaltstack.h" 3 4
struct __darwin_sigaltstack
{
 void *ss_sp;
 __darwin_size_t ss_size;
 int ss_flags;
};
typedef struct __darwin_sigaltstack stack_t;
# 151 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_ucontext.h" 1 3 4
# 43 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_ucontext.h" 3 4
struct __darwin_ucontext
{
 int uc_onstack;
 __darwin_sigset_t uc_sigmask;
 struct __darwin_sigaltstack uc_stack;
 struct __darwin_ucontext *uc_link;
 __darwin_size_t uc_mcsize;
 struct __darwin_mcontext64 *uc_mcontext;



};


typedef struct __darwin_ucontext ucontext_t;
# 152 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_sigset_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_sigset_t.h" 3 4
typedef __darwin_sigset_t sigset_t;
# 155 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 156 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_uid_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_uid_t.h" 3 4
typedef __darwin_uid_t uid_t;
# 157 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 2 3 4

union sigval {

 int sival_int;
 void *sival_ptr;
};





struct sigevent {
 int sigev_notify;
 int sigev_signo;
 union sigval sigev_value;
 void (*sigev_notify_function)(union sigval);
 pthread_attr_t *sigev_notify_attributes;
};


typedef struct __siginfo {
 int si_signo;
 int si_errno;
 int si_code;
 pid_t si_pid;
 uid_t si_uid;
 int si_status;
 void *si_addr;
 union sigval si_value;
 long si_band;
 unsigned long __pad[7];
} siginfo_t;
# 269 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 3 4
union __sigaction_u {
 void (*__sa_handler)(int);
 void (*__sa_sigaction)(int, struct __siginfo *,
     void *);
};


struct __sigaction {
 union __sigaction_u __sigaction_u;
 void (*sa_tramp)(void *, int, int, siginfo_t *, void *);
 sigset_t sa_mask;
 int sa_flags;
};




struct sigaction {
 union __sigaction_u __sigaction_u;
 sigset_t sa_mask;
 int sa_flags;
};
# 331 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 3 4
typedef void (*sig_t)(int);
# 348 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 3 4
struct sigvec {
 void (*sv_handler)(int);
 int sv_mask;
 int sv_flags;
};
# 367 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 3 4
struct sigstack {
 char *ss_sp;
 int ss_onstack;
};
# 389 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/signal.h" 3 4
extern "C" {
void(*signal(int, void (*)(int)))(int);
}
# 110 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/wait.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/resource.h" 1 3 4
# 72 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/resource.h" 3 4
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdint.h" 1 3 4
# 110 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdint.h" 3
# 124 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdint.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stdint.h" 1 3
# 56 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stdint.h" 3
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdint.h" 1 3 4
# 23 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdint.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_uint8_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_uint8_t.h" 3 4
typedef unsigned char uint8_t;
# 24 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdint.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_uint16_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_uint16_t.h" 3 4
typedef unsigned short uint16_t;
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdint.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_uint32_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_uint32_t.h" 3 4
typedef unsigned int uint32_t;
# 26 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdint.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_uint64_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_uint64_t.h" 3 4
typedef unsigned long long uint64_t;
# 27 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdint.h" 2 3 4


typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;



typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
# 58 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdint.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_intmax_t.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_intmax_t.h" 3 4
typedef long int intmax_t;
# 59 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdint.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_uintmax_t.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_uintmax_t.h" 3 4
typedef long unsigned int uintmax_t;
# 60 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdint.h" 2 3 4
# 57 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stdint.h" 2 3
# 125 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdint.h" 2 3
# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/resource.h" 2 3 4







# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_timeval.h" 1 3 4
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_timeval.h" 3 4
struct timeval
{
 __darwin_time_t tv_sec;
 __darwin_suseconds_t tv_usec;
};
# 81 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/resource.h" 2 3 4








typedef __uint64_t rlim_t;
# 152 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/resource.h" 3 4
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
# 163 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/resource.h" 3 4
 long ru_maxrss;

 long ru_ixrss;
 long ru_idrss;
 long ru_isrss;
 long ru_minflt;
 long ru_majflt;
 long ru_nswap;
 long ru_inblock;
 long ru_oublock;
 long ru_msgsnd;
 long ru_msgrcv;
 long ru_nsignals;
 long ru_nvcsw;
 long ru_nivcsw;


};
# 200 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/resource.h" 3 4
typedef void *rusage_info_t;

struct rusage_info_v0 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
};

struct rusage_info_v1 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
};

struct rusage_info_v2 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
};

struct rusage_info_v3 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
};

struct rusage_info_v4 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
 uint64_t ri_logical_writes;
 uint64_t ri_lifetime_max_phys_footprint;
 uint64_t ri_instructions;
 uint64_t ri_cycles;
 uint64_t ri_billed_energy;
 uint64_t ri_serviced_energy;
 uint64_t ri_interval_max_phys_footprint;
 uint64_t ri_runnable_time;
};

struct rusage_info_v5 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
 uint64_t ri_logical_writes;
 uint64_t ri_lifetime_max_phys_footprint;
 uint64_t ri_instructions;
 uint64_t ri_cycles;
 uint64_t ri_billed_energy;
 uint64_t ri_serviced_energy;
 uint64_t ri_interval_max_phys_footprint;
 uint64_t ri_runnable_time;
 uint64_t ri_flags;
};

struct rusage_info_v6 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
 uint64_t ri_logical_writes;
 uint64_t ri_lifetime_max_phys_footprint;
 uint64_t ri_instructions;
 uint64_t ri_cycles;
 uint64_t ri_billed_energy;
 uint64_t ri_serviced_energy;
 uint64_t ri_interval_max_phys_footprint;
 uint64_t ri_runnable_time;
 uint64_t ri_flags;
 uint64_t ri_user_ptime;
 uint64_t ri_system_ptime;
 uint64_t ri_pinstructions;
 uint64_t ri_pcycles;
 uint64_t ri_energy_nj;
 uint64_t ri_penergy_nj;
 uint64_t ri_secure_time_in_system;
 uint64_t ri_secure_ptime_in_system;
 uint64_t ri_neural_footprint;
 uint64_t ri_lifetime_max_neural_footprint;
 uint64_t ri_interval_max_neural_footprint;
 uint64_t ri_reserved[9];
};

typedef struct rusage_info_v6 rusage_info_current;
# 464 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/resource.h" 3 4
struct rlimit {
 rlim_t rlim_cur;
 rlim_t rlim_max;
};
# 499 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/resource.h" 3 4
struct proc_rlimit_control_wakeupmon {
 uint32_t wm_flags;
 int32_t wm_rate;
};
# 569 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/resource.h" 3 4
extern "C" {
int getpriority(int, id_t);

int getiopolicy_np(int, int) __attribute__((availability(macosx,introduced=10.5)));

int getrlimit(int, struct rlimit *) __asm("_" "getrlimit" );
int getrusage(int, struct rusage *);
int setpriority(int, id_t, int);

int setiopolicy_np(int, int, int) __attribute__((availability(macosx,introduced=10.5)));

int setrlimit(int, const struct rlimit *) __asm("_" "setrlimit" );
}
# 111 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/wait.h" 2 3 4
# 186 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/wait.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/endian.h" 1 3 4
# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/endian.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/endian.h" 1 3 4
# 85 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/endian.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_endian.h" 1 3 4
# 94 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_endian.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/_endian.h" 1 3 4
# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/_endian.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/_endian.h" 1 3 4
# 95 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/_endian.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/__endian.h" 1 3 4
# 96 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/_endian.h" 2 3 4
# 36 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/_endian.h" 2 3 4
# 95 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_endian.h" 2 3 4
# 131 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_endian.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/libkern/_OSByteOrder.h" 1 3 4
# 58 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/libkern/_OSByteOrder.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/libkern/i386/_OSByteOrder.h" 1 3 4
# 48 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/libkern/i386/_OSByteOrder.h" 3 4
static inline
__uint16_t
_OSSwapInt16(
 __uint16_t _data
 )
{
 return (__uint16_t)((_data << 8) | (_data >> 8));
}

static inline
__uint32_t
_OSSwapInt32(
 __uint32_t _data
 )
{

 return __builtin_bswap32(_data);




}


static inline
__uint64_t
_OSSwapInt64(
 __uint64_t _data
 )
{
 return __builtin_bswap64(_data);
}
# 59 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/libkern/_OSByteOrder.h" 2 3 4
# 132 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_endian.h" 2 3 4
# 86 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/endian.h" 2 3 4
# 36 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/endian.h" 2 3 4
# 187 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/wait.h" 2 3 4







union wait {
 int w_status;



 struct {

  unsigned int w_Termsig:7,
      w_Coredump:1,
      w_Retcode:8,
      w_Filler:16;







 } w_T;





 struct {

  unsigned int w_Stopval:8,
      w_Stopsig:8,
      w_Filler:16;






 } w_S;
};
# 247 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/wait.h" 3 4
extern "C" {
pid_t wait(int *) __asm("_" "wait" );
pid_t waitpid(pid_t, int *, int) __asm("_" "waitpid" );

int waitid(idtype_t, id_t, siginfo_t *, int) __asm("_" "waitid" );


pid_t wait3(int *, int, struct rusage *);
pid_t wait4(pid_t, int *, int, struct rusage *);

}
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/alloca.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/alloca.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/alloca.h" 2 3 4

extern "C" {
void *alloca(size_t);
}
# 69 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 2 3 4





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 75 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_ct_rune_t.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_ct_rune_t.h" 3 4
typedef __darwin_ct_rune_t ct_rune_t;
# 78 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_rune_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_rune_t.h" 3 4
typedef __darwin_rune_t rune_t;
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 82 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 2 3 4

typedef struct {
 int quot;
 int rem;
} div_t;

typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef struct {
 long long quot;
 long long rem;
} lldiv_t;


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_null.h" 1 3 4
# 101 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 2 3 4
# 120 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/malloc/_malloc.h" 1 3 4
# 36 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/malloc/_malloc.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 37 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/malloc/_malloc.h" 2 3 4







# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/malloc/_malloc_type.h" 1 3 4
# 27 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/malloc/_malloc_type.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/malloc/_ptrcheck.h" 1 3 4
# 28 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/malloc/_malloc_type.h" 2 3 4


typedef unsigned long long malloc_type_id_t;






# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 38 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/malloc/_malloc_type.h" 2 3 4
# 47 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/malloc/_malloc_type.h" 3 4
extern "C" {



__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_malloc(size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1,2)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void malloc_type_free(void * ptr, malloc_type_id_t type_id);
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_realloc(void * ptr, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_valloc(size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_aligned_alloc(size_t alignment, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));

__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) int malloc_type_posix_memalign(void * *memptr, size_t alignment, size_t size, malloc_type_id_t type_id) ;




typedef struct _malloc_zone_t malloc_zone_t;

__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2,3)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void malloc_type_zone_free(malloc_zone_t *zone, void * ptr, malloc_type_id_t type_id);
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_zone_realloc(malloc_zone_t *zone, void * ptr, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(3)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_zone_valloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(3)));

}
# 45 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/malloc/_malloc.h" 2 3 4







extern "C" {

void * malloc(size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1))) ;
void * calloc(size_t __count, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1,2))) ;
void free(void * );
void * realloc(void * __ptr, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2))) ;
void * reallocf(void * __ptr, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));

void * valloc(size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1))) ;




void * aligned_alloc(size_t __alignment, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_align(1))) __attribute__((alloc_size(2))) __attribute__((availability(macosx,introduced=10.15))) __attribute__((availability(ios,introduced=13.0))) __attribute__((availability(tvos,introduced=13.0))) __attribute__((availability(watchos,introduced=6.0)));


int posix_memalign(void * *__memptr, size_t __alignment, size_t __size) __attribute__((availability(macosx,introduced=10.6)));

}
# 121 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_abort.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_abort.h" 3 4
extern "C" {
void abort(void) __attribute__((__cold__)) __attribute__((__noreturn__));
}
# 122 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 2 3 4

extern "C" {
int abs(int) __attribute__((__const__));
int atexit(void (* _Nonnull)(void));


int at_quick_exit(void (*)(void));

double atof(const char *);
int atoi(const char *);
long atol(const char *);

long long
  atoll(const char *);

void *bsearch(const void *__key, const void *__base, size_t __nel,
     size_t __width, int (* _Nonnull __compar)(const void *, const void *));

div_t div(int, int) __attribute__((__const__));
void exit(int) __attribute__((__noreturn__));

char *getenv(const char *);
long labs(long) __attribute__((__const__));
ldiv_t ldiv(long, long) __attribute__((__const__));

long long
  llabs(long long);
lldiv_t lldiv(long long, long long);


int mblen(const char *__s, size_t __n);
size_t mbstowcs(wchar_t * , const char * , size_t);
int mbtowc(wchar_t * , const char * , size_t);

void qsort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *));


void quick_exit(int) __attribute__((__noreturn__));

int rand(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));

void srand(unsigned) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
double strtod(const char *, char **) __asm("_" "strtod" );
float strtof(const char *, char **) __asm("_" "strtof" );
long strtol(const char *__str, char **__endptr, int __base);
long double
  strtold(const char *, char **);

long long
  strtoll(const char *__str, char **__endptr, int __base);

unsigned long
  strtoul(const char *__str, char **__endptr, int __base);

unsigned long long
  strtoull(const char *__str, char **__endptr, int __base);


__attribute__((__availability__(swift, unavailable, message="Use posix_spawn APIs or NSTask instead. (On iOS, process spawning is unavailable.)")))
__attribute__((availability(macos,introduced=10.0))) __attribute__((availability(ios,unavailable)))
__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
int system(const char *) __asm("_" "system" );


size_t wcstombs(char * , const wchar_t * , size_t);
int wctomb(char *, wchar_t);


void _Exit(int) __attribute__((__noreturn__));
long a64l(const char *);
double drand48(void);
char *ecvt(double, int, int *, int *);
double erand48(unsigned short[3]);
char *fcvt(double, int, int *, int *);
char *gcvt(double, int, char *);
int getsubopt(char **, char * const *, char **);
int grantpt(int);

char *initstate(unsigned, char *, size_t);



long jrand48(unsigned short[3]) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
char *l64a(long);
void lcong48(unsigned short[7]);
long lrand48(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));

__attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of mktemp(3), it is highly recommended that you use mkstemp(3) instead.")))

char *mktemp(char *);
int mkstemp(char *);
long mrand48(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
long nrand48(unsigned short[3]) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
int posix_openpt(int);
char *ptsname(int);


int ptsname_r(int fildes, char *buffer, size_t buflen) __attribute__((availability(macos,introduced=10.13.4))) __attribute__((availability(ios,introduced=11.3))) __attribute__((availability(tvos,introduced=11.3))) __attribute__((availability(watchos,introduced=4.3)));


int putenv(char *) __asm("_" "putenv" );
long random(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
int rand_r(unsigned *) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));

char *realpath(const char * , char * ) __asm("_" "realpath" "$DARWIN_EXTSN");



unsigned short
 *seed48(unsigned short[3]);
int setenv(const char * __name, const char * __value, int __overwrite) __asm("_" "setenv" );

void setkey(const char *) __asm("_" "setkey" );



char *setstate(const char *);
void srand48(long);

void srandom(unsigned);



int unlockpt(int);

int unsetenv(const char *) __asm("_" "unsetenv" );




}



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_dev_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_dev_t.h" 3 4
typedef __darwin_dev_t dev_t;
# 258 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_mode_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_mode_t.h" 3 4
typedef __darwin_mode_t mode_t;
# 259 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 2 3 4


extern "C" {
uint32_t arc4random(void);
void arc4random_addrandom(unsigned char * , int )
    __attribute__((availability(macosx,introduced=10.0))) __attribute__((availability(macosx,deprecated=10.12,message="use arc4random_stir")))
    __attribute__((availability(ios,introduced=2.0))) __attribute__((availability(ios,deprecated=10.0,message="use arc4random_stir")))
    __attribute__((availability(tvos,introduced=2.0))) __attribute__((availability(tvos,deprecated=10.0,message="use arc4random_stir")))
    __attribute__((availability(watchos,introduced=1.0))) __attribute__((availability(watchos,deprecated=3.0,message="use arc4random_stir")));
void arc4random_buf(void * __buf, size_t __nbytes) __attribute__((availability(macosx,introduced=10.7)));
void arc4random_stir(void);
uint32_t
  arc4random_uniform(uint32_t __upper_bound) __attribute__((availability(macosx,introduced=10.7)));

int atexit_b(void (^ _Nonnull)(void)) __attribute__((availability(macosx,introduced=10.6)));
# 282 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 3 4
void *bsearch_b(const void *__key, const void *__base, size_t __nel,
     size_t __width, int (^ _Nonnull __compar)(const void *, const void *) __attribute__((__noescape__)))
     __attribute__((availability(macosx,introduced=10.6)));



char *cgetcap(char *, const char *, int);
int cgetclose(void);
int cgetent(char **, char **, const char *);
int cgetfirst(char **, char **);
int cgetmatch(const char *, const char *);
int cgetnext(char **, char **);
int cgetnum(char *, const char *, long *);
int cgetset(const char *);
int cgetstr(char *, const char *, char **);
int cgetustr(char *, const char *, char **);

int daemon(int, int) __asm("_" "daemon" "$1050") __attribute__((availability(macosx,introduced=10.0,deprecated=10.5,message="Use posix_spawn APIs instead."))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
char *devname(dev_t, mode_t);
char *devname_r(dev_t, mode_t, char *buf, int len);
char *getbsize(int *, long *);
int getloadavg(double [], int);
const char
 *getprogname(void);
void setprogname(const char *);
# 316 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdlib.h" 3 4
int heapsort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *));

int heapsort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *) __attribute__((__noescape__)))
     __attribute__((availability(macosx,introduced=10.6)));

int mergesort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *));

int mergesort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *) __attribute__((__noescape__)))
     __attribute__((availability(macosx,introduced=10.6)));

void psort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *))
     __attribute__((availability(macosx,introduced=10.6)));

void psort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *) __attribute__((__noescape__)))
     __attribute__((availability(macosx,introduced=10.6)));

void psort_r(void *__base, size_t __nel, size_t __width, void *,
     int (* _Nonnull __compar)(void *, const void *, const void *))
     __attribute__((availability(macosx,introduced=10.6)));

void qsort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *) __attribute__((__noescape__)))
     __attribute__((availability(macosx,introduced=10.6)));

void qsort_r(void *__base, size_t __nel, size_t __width, void *,
     int (* _Nonnull __compar)(void *, const void *, const void *));
int radixsort(const unsigned char **__base, int __nel, const unsigned char *__table,
     unsigned __endbyte);
int rpmatch(const char *)
 __attribute__((availability(macos,introduced=10.15))) __attribute__((availability(ios,introduced=13.0))) __attribute__((availability(tvos,introduced=13.0))) __attribute__((availability(watchos,introduced=6.0)));
int sradixsort(const unsigned char **__base, int __nel, const unsigned char *__table,
     unsigned __endbyte);
void sranddev(void);
void srandomdev(void);

long long
 strtonum(const char *__numstr, long long __minval, long long __maxval, const char **__errstrp)
 __attribute__((availability(macos,introduced=11.0))) __attribute__((availability(ios,introduced=14.0))) __attribute__((availability(tvos,introduced=14.0))) __attribute__((availability(watchos,introduced=7.0)));

long long
  strtoq(const char *__str, char **__endptr, int __base);
unsigned long long
  strtouq(const char *__str, char **__endptr, int __base);

extern char *suboptarg;

}


extern "C" {




}
# 59 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdlib.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_stdlib.h" 1 3 4
# 28 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_stdlib.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_stdlib.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_stdlib.h" 2 3 4


extern "C" {
double atof_l(const char *, locale_t);
int atoi_l(const char *, locale_t);
long atol_l(const char *, locale_t);

long long
  atoll_l(const char *, locale_t);

int mblen_l(const char *, size_t, locale_t);
size_t mbstowcs_l(wchar_t * , const char * , size_t,
     locale_t);
int mbtowc_l(wchar_t * , const char * , size_t,
     locale_t);
double strtod_l(const char *, char **, locale_t) __asm("_" "strtod_l" );
float strtof_l(const char *, char **, locale_t) __asm("_" "strtof_l" );
long strtol_l(const char *, char **, int, locale_t);
long double
  strtold_l(const char *, char **, locale_t);
long long
  strtoll_l(const char *, char **, int, locale_t);

long long
  strtoq_l(const char *, char **, int, locale_t);

unsigned long
  strtoul_l(const char *, char **, int, locale_t);
unsigned long long
  strtoull_l(const char *, char **, int, locale_t);

unsigned long long
  strtouq_l(const char *, char **, int, locale_t);

size_t wcstombs_l(char * , const wchar_t * , size_t,
     locale_t);
int wctomb_l(char *, wchar_t, locale_t);





}
# 62 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdlib.h" 2 3 4
# 95 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdlib.h" 2 3



extern "C++" {
# 113 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdlib.h" 3
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long abs(long __x) noexcept { return __builtin_labs(__x); }
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long long abs(long long __x) noexcept { return __builtin_llabs(__x); }


[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float abs(float __lcpp_x) noexcept {
  return __builtin_fabsf(__lcpp_x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double abs(double __lcpp_x) noexcept {
  return __builtin_fabs(__lcpp_x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double abs(long double __lcpp_x) noexcept {
  return __builtin_fabsl(__lcpp_x);
}
# 143 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdlib.h" 3
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ldiv_t div(long __x, long __y) noexcept { return ::ldiv(__x, __y); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) lldiv_t div(long long __x, long long __y) noexcept { return ::lldiv(__x, __y); }


}
# 87 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdlib" 2 3
# 98 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdlib" 3


#pragma clang diagnostic push
# 100 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdlib" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 100 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdlib" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 100 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdlib" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 100 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdlib" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 100 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdlib" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 100 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdlib" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

using ::size_t __attribute__((__using_if_exists__));
using ::div_t __attribute__((__using_if_exists__));
using ::ldiv_t __attribute__((__using_if_exists__));
using ::lldiv_t __attribute__((__using_if_exists__));
using ::atof __attribute__((__using_if_exists__));
using ::atoi __attribute__((__using_if_exists__));
using ::atol __attribute__((__using_if_exists__));
using ::atoll __attribute__((__using_if_exists__));
using ::strtod __attribute__((__using_if_exists__));
using ::strtof __attribute__((__using_if_exists__));
using ::strtold __attribute__((__using_if_exists__));
using ::strtol __attribute__((__using_if_exists__));
using ::strtoll __attribute__((__using_if_exists__));
using ::strtoul __attribute__((__using_if_exists__));
using ::strtoull __attribute__((__using_if_exists__));
using ::rand __attribute__((__using_if_exists__));
using ::srand __attribute__((__using_if_exists__));
using ::calloc __attribute__((__using_if_exists__));
using ::free __attribute__((__using_if_exists__));
using ::malloc __attribute__((__using_if_exists__));
using ::realloc __attribute__((__using_if_exists__));
using ::abort __attribute__((__using_if_exists__));
using ::atexit __attribute__((__using_if_exists__));
using ::exit __attribute__((__using_if_exists__));
using ::_Exit __attribute__((__using_if_exists__));
using ::getenv __attribute__((__using_if_exists__));
using ::system __attribute__((__using_if_exists__));
using ::bsearch __attribute__((__using_if_exists__));
using ::qsort __attribute__((__using_if_exists__));
using ::abs __attribute__((__using_if_exists__));
using ::labs __attribute__((__using_if_exists__));
using ::llabs __attribute__((__using_if_exists__));
using ::div __attribute__((__using_if_exists__));
using ::ldiv __attribute__((__using_if_exists__));
using ::lldiv __attribute__((__using_if_exists__));
using ::mblen __attribute__((__using_if_exists__));

using ::mbtowc __attribute__((__using_if_exists__));
using ::wctomb __attribute__((__using_if_exists__));
using ::mbstowcs __attribute__((__using_if_exists__));
using ::wcstombs __attribute__((__using_if_exists__));


using ::at_quick_exit __attribute__((__using_if_exists__));
using ::quick_exit __attribute__((__using_if_exists__));


using ::aligned_alloc __attribute__((__using_if_exists__));


}}
# 152 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdlib" 3
#pragma clang diagnostic pop
# 359 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/new" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 1 3
# 422 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_const.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_const.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_const.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_const.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_const.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_const.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_const.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_const.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct add_const {
  typedef __attribute__((__nodebug__)) const _Tp type;
};


template <class _Tp>
using add_const_t = typename add_const<_Tp>::type;


}}
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_const.h" 3
#pragma clang diagnostic pop
# 423 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_cv.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_cv.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_cv.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_cv.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_cv.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_cv.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_cv.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_cv.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct add_cv {
  typedef __attribute__((__nodebug__)) const volatile _Tp type;
};


template <class _Tp>
using add_cv_t = typename add_cv<_Tp>::type;


}}
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_cv.h" 3
#pragma clang diagnostic pop
# 424 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_volatile.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_volatile.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_volatile.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_volatile.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_volatile.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_volatile.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_volatile.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_volatile.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct add_volatile {
  typedef __attribute__((__nodebug__)) volatile _Tp type;
};


template <class _Tp>
using add_volatile_t = typename add_volatile<_Tp>::type;


}}
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/add_volatile.h" 3
#pragma clang diagnostic pop
# 428 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_storage.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_storage.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_list.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_list.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_list.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_list.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_list.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_list.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_list.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_list.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Hp, class _Tp>
struct __type_list {
  typedef _Hp _Head;
  typedef _Tp _Tail;
};

template <class _TypeList, size_t _Size, bool = _Size <= sizeof(typename _TypeList::_Head)>
struct __find_first;

template <class _Hp, class _Tp, size_t _Size>
struct __find_first<__type_list<_Hp, _Tp>, _Size, true> {
  typedef __attribute__((__nodebug__)) _Hp type;
};

template <class _Hp, class _Tp, size_t _Size>
struct __find_first<__type_list<_Hp, _Tp>, _Size, false> {
  typedef __attribute__((__nodebug__)) typename __find_first<_Tp, _Size>::type type;
};

}}
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_list.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_storage.h" 2 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_storage.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_storage.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_storage.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_storage.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_storage.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_storage.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_storage.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct __align_type {
  static const size_t value = __alignof(_Tp);
  typedef _Tp type;
};

struct __struct_double {
  long double __lx;
};
struct __struct_double4 {
  double __lx[4];
};


typedef __type_list<__align_type<unsigned char>,
        __type_list<__align_type<unsigned short>,
        __type_list<__align_type<unsigned int>,
        __type_list<__align_type<unsigned long>,
        __type_list<__align_type<unsigned long long>,
        __type_list<__align_type<double>,
        __type_list<__align_type<long double>,
        __type_list<__align_type<__struct_double>,
        __type_list<__align_type<__struct_double4>,
        __type_list<__align_type<int*>,
        __nat
        > > > > > > > > > > __all_types;


template <size_t _Align>
struct alignas(_Align) __fallback_overaligned {};

template <class _TL, size_t _Align>
struct __find_pod;

template <class _Hp, size_t _Align>
struct __find_pod<__type_list<_Hp, __nat>, _Align> {
  typedef __conditional_t<_Align == _Hp::value, typename _Hp::type, __fallback_overaligned<_Align> > type;
};

template <class _Hp, class _Tp, size_t _Align>
struct __find_pod<__type_list<_Hp, _Tp>, _Align> {
  typedef __conditional_t<_Align == _Hp::value, typename _Hp::type, typename __find_pod<_Tp, _Align>::type> type;
};

template <class _TL, size_t _Len>
struct __find_max_align;

template <class _Hp, size_t _Len>
struct __find_max_align<__type_list<_Hp, __nat>, _Len> : public integral_constant<size_t, _Hp::value> {};

template <size_t _Len, size_t _A1, size_t _A2>
struct __select_align {
private:
  static const size_t __min = _A2 < _A1 ? _A2 : _A1;
  static const size_t __max = _A1 < _A2 ? _A2 : _A1;

public:
  static const size_t value = _Len < __max ? __min : __max;
};

template <class _Hp, class _Tp, size_t _Len>
struct __find_max_align<__type_list<_Hp, _Tp>, _Len>
    : public integral_constant<size_t, __select_align<_Len, _Hp::value, __find_max_align<_Tp, _Len>::value>::value> {};

template <size_t _Len, size_t _Align = __find_max_align<__all_types, _Len>::value>
struct aligned_storage {
  typedef typename __find_pod<__all_types, _Align>::type _Aligner;
  union type {
    _Aligner __align;
    unsigned char __data[(_Len + _Align - 1) / _Align * _Align];
  };
};



#pragma GCC diagnostic push
# 100 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_storage.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 100 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_storage.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <size_t _Len, size_t _Align = __find_max_align<__all_types, _Len>::value>
using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;
#pragma GCC diagnostic pop
# 115 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_storage.h" 3
template <size_t _Len> struct aligned_storage<_Len, 0x1> { struct alignas(0x1) type { unsigned char __lx[(_Len + 0x1 - 1) / 0x1 * 0x1]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x2> { struct alignas(0x2) type { unsigned char __lx[(_Len + 0x2 - 1) / 0x2 * 0x2]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x4> { struct alignas(0x4) type { unsigned char __lx[(_Len + 0x4 - 1) / 0x4 * 0x4]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x8> { struct alignas(0x8) type { unsigned char __lx[(_Len + 0x8 - 1) / 0x8 * 0x8]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x10> { struct alignas(0x10) type { unsigned char __lx[(_Len + 0x10 - 1) / 0x10 * 0x10]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x20> { struct alignas(0x20) type { unsigned char __lx[(_Len + 0x20 - 1) / 0x20 * 0x20]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x40> { struct alignas(0x40) type { unsigned char __lx[(_Len + 0x40 - 1) / 0x40 * 0x40]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x80> { struct alignas(0x80) type { unsigned char __lx[(_Len + 0x80 - 1) / 0x80 * 0x80]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x100> { struct alignas(0x100) type { unsigned char __lx[(_Len + 0x100 - 1) / 0x100 * 0x100]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x200> { struct alignas(0x200) type { unsigned char __lx[(_Len + 0x200 - 1) / 0x200 * 0x200]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x400> { struct alignas(0x400) type { unsigned char __lx[(_Len + 0x400 - 1) / 0x400 * 0x400]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x800> { struct alignas(0x800) type { unsigned char __lx[(_Len + 0x800 - 1) / 0x800 * 0x800]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x1000> { struct alignas(0x1000) type { unsigned char __lx[(_Len + 0x1000 - 1) / 0x1000 * 0x1000]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x2000> { struct alignas(0x2000) type { unsigned char __lx[(_Len + 0x2000 - 1) / 0x2000 * 0x2000]; }; };


template <size_t _Len> struct aligned_storage<_Len, 0x4000> { struct alignas(0x4000) type { unsigned char __lx[(_Len + 0x4000 - 1) / 0x4000 * 0x4000]; }; };




}}
# 136 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_storage.h" 3
#pragma clang diagnostic pop
# 429 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_union.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_union.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_union.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_union.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_union.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_union.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_union.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_union.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <size_t _I0, size_t... _In>
struct __static_max;

template <size_t _I0>
struct __static_max<_I0> {
  static const size_t value = _I0;
};

template <size_t _I0, size_t _I1, size_t... _In>
struct __static_max<_I0, _I1, _In...> {
  static const size_t value = _I0 >= _I1 ? __static_max<_I0, _In...>::value : __static_max<_I1, _In...>::value;
};

template <size_t _Len, class _Type0, class... _Types>
struct aligned_union {
  static const size_t alignment_value =
      __static_max<__alignof(_Type0), __alignof(_Types)...>::value;
  static const size_t __len = __static_max<_Len, sizeof(_Type0), sizeof(_Types)...>::value;
  typedef typename aligned_storage<__len, alignment_value>::type type;
};


template <size_t _Len, class... _Types>
using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


}}
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/aligned_union.h" 3
#pragma clang diagnostic pop
# 430 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/alignment_of.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/alignment_of.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/alignment_of.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/alignment_of.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/alignment_of.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/alignment_of.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/alignment_of.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/alignment_of.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct alignment_of : public integral_constant<size_t, alignof(_Tp)> {};


template <class _Tp>
inline constexpr size_t alignment_of_v = alignof(_Tp);


}}
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/alignment_of.h" 3
#pragma clang diagnostic pop
# 431 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/extent.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/extent.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/extent.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/extent.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/extent.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/extent.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/extent.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/extent.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp, size_t _Dim = 0>
struct extent : integral_constant<size_t, __array_extent(_Tp, _Dim)> {};


template <class _Tp, unsigned _Ip = 0>
inline constexpr size_t extent_v = __array_extent(_Tp, _Ip);
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/extent.h" 3
}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/extent.h" 3
#pragma clang diagnostic pop
# 436 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_virtual_destructor.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_virtual_destructor.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_virtual_destructor.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_virtual_destructor.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_virtual_destructor.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_virtual_destructor.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_virtual_destructor.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_virtual_destructor.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct has_virtual_destructor : public integral_constant<bool, __has_virtual_destructor(_Tp)> {};


template <class _Tp>
inline constexpr bool has_virtual_destructor_v = __has_virtual_destructor(_Tp);


}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_virtual_destructor.h" 3
#pragma clang diagnostic pop
# 437 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_abstract.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_abstract.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_abstract.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_abstract.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_abstract.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_abstract.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_abstract.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_abstract.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_abstract : public integral_constant<bool, __is_abstract(_Tp)> {};


template <class _Tp>
inline constexpr bool is_abstract_v = __is_abstract(_Tp);


}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_abstract.h" 3
#pragma clang diagnostic pop
# 439 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_arithmetic.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_arithmetic.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_floating_point.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_floating_point.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_floating_point.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_floating_point.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_floating_point.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_floating_point.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_floating_point.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_floating_point.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp> struct __libcpp_is_floating_point : public false_type {};
template <> struct __libcpp_is_floating_point<float> : public true_type {};
template <> struct __libcpp_is_floating_point<double> : public true_type {};
template <> struct __libcpp_is_floating_point<long double> : public true_type {};


template <class _Tp>
struct is_floating_point : public __libcpp_is_floating_point<__remove_cv_t<_Tp> > {};


template <class _Tp>
inline constexpr bool is_floating_point_v = is_floating_point<_Tp>::value;


}}
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_floating_point.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_arithmetic.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_arithmetic.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_arithmetic.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_arithmetic.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_arithmetic.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_arithmetic.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_arithmetic.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_arithmetic.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_arithmetic
    : public integral_constant<bool, is_integral<_Tp>::value || is_floating_point<_Tp>::value> {};


template <class _Tp>
inline constexpr bool is_arithmetic_v = is_arithmetic<_Tp>::value;


}}
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_arithmetic.h" 3
#pragma clang diagnostic pop
# 440 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_assignable.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_assignable.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_assignable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_assignable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_assignable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_assignable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_assignable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_assignable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Up>
struct is_assignable : _BoolConstant<__is_assignable(_Tp, _Up)> {};


template <class _Tp, class _Arg>
inline constexpr bool is_assignable_v = __is_assignable(_Tp, _Arg);


template <class _Tp>
struct is_copy_assignable
    : public integral_constant<bool,
                               __is_assignable(__add_lvalue_reference_t<_Tp>, __add_lvalue_reference_t<const _Tp>)> {};


template <class _Tp>
inline constexpr bool is_copy_assignable_v = is_copy_assignable<_Tp>::value;


template <class _Tp>
struct is_move_assignable
    : public integral_constant<bool, __is_assignable(__add_lvalue_reference_t<_Tp>, __add_rvalue_reference_t<_Tp>)> {};


template <class _Tp>
inline constexpr bool is_move_assignable_v = is_move_assignable<_Tp>::value;


}}
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_assignable.h" 3
#pragma clang diagnostic pop
# 442 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_class.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_class.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_class.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_class.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_class.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_class.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_class.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_class.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_class : public integral_constant<bool, __is_class(_Tp)> {};


template <class _Tp>
inline constexpr bool is_class_v = __is_class(_Tp);


}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_class.h" 3
#pragma clang diagnostic pop
# 444 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_compound.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_compound.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_fundamental.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_fundamental.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_null_pointer.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_null_pointer.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_null_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_null_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_null_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_null_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_null_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_null_pointer.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
inline const bool __is_null_pointer_v = __is_same(__remove_cv(_Tp), nullptr_t);


template <class _Tp>
struct is_null_pointer : integral_constant<bool, __is_null_pointer_v<_Tp>> {};


template <class _Tp>
inline constexpr bool is_null_pointer_v = __is_null_pointer_v<_Tp>;



}}
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_null_pointer.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_fundamental.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_fundamental.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_fundamental.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_fundamental.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_fundamental.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_fundamental.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_fundamental.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_fundamental.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
struct is_fundamental : _BoolConstant<__is_fundamental(_Tp)> {};


template <class _Tp>
inline constexpr bool is_fundamental_v = __is_fundamental(_Tp);
# 46 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_fundamental.h" 3
}}
# 46 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_fundamental.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_compound.h" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_compound.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_compound.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_compound.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_compound.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_compound.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_compound.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_compound.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
struct is_compound : _BoolConstant<__is_compound(_Tp)> {};


template <class _Tp>
inline constexpr bool is_compound_v = __is_compound(_Tp);
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_compound.h" 3
}}
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_compound.h" 3
#pragma clang diagnostic pop
# 445 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_destructible.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_destructible.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_all_extents.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_all_extents.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_all_extents.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_all_extents.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_all_extents.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_all_extents.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_all_extents.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_all_extents.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp>
struct remove_all_extents {
  using type __attribute__((__nodebug__)) = __remove_all_extents(_Tp);
};

template <class _Tp>
using __remove_all_extents_t = __remove_all_extents(_Tp);
# 48 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_all_extents.h" 3
template <class _Tp>
using remove_all_extents_t = __remove_all_extents_t<_Tp>;


}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_all_extents.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_destructible.h" 2 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_destructible.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_destructible.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_destructible.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_destructible.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_destructible.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_destructible.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_destructible.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
struct is_destructible : _BoolConstant<__is_destructible(_Tp)> {};


template <class _Tp>
inline constexpr bool is_destructible_v = __is_destructible(_Tp);
# 95 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_destructible.h" 3
}}
# 95 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_destructible.h" 3
#pragma clang diagnostic pop
# 449 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_empty.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_empty.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_empty.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_empty.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_empty.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_empty.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_empty.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_empty.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_empty : public integral_constant<bool, __is_empty(_Tp)> {};


template <class _Tp>
inline constexpr bool is_empty_v = __is_empty(_Tp);


}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_empty.h" 3
#pragma clang diagnostic pop
# 450 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_enum.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_enum.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_enum.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_enum.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_enum.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_enum.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_enum.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_enum.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_enum : public integral_constant<bool, __is_enum(_Tp)> {};


template <class _Tp>
inline constexpr bool is_enum_v = __is_enum(_Tp);
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_enum.h" 3
}}
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_enum.h" 3
#pragma clang diagnostic pop
# 451 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_literal_type.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_literal_type.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_literal_type.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_literal_type.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_literal_type.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_literal_type.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_literal_type.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_literal_type.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp>
struct
__attribute__((__deprecated__)) is_literal_type : public integral_constant<bool, __is_literal_type(_Tp)> {};


template <class _Tp>
__attribute__((__deprecated__)) inline constexpr bool is_literal_type_v = __is_literal_type(_Tp);



}}
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_literal_type.h" 3
#pragma clang diagnostic pop
# 456 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_assignable.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_assignable.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_assignable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_assignable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_assignable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_assignable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_assignable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_assignable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Arg>
struct is_nothrow_assignable : public integral_constant<bool, __is_nothrow_assignable(_Tp, _Arg)> {
};


template <class _Tp, class _Arg>
inline constexpr bool is_nothrow_assignable_v = __is_nothrow_assignable(_Tp, _Arg);


template <class _Tp>
struct is_nothrow_copy_assignable
    : public integral_constant<
          bool,
          __is_nothrow_assignable(__add_lvalue_reference_t<_Tp>, __add_lvalue_reference_t<const _Tp>)> {};


template <class _Tp>
inline constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<_Tp>::value;


template <class _Tp>
struct is_nothrow_move_assignable
    : public integral_constant<bool,
                               __is_nothrow_assignable(__add_lvalue_reference_t<_Tp>, __add_rvalue_reference_t<_Tp>)> {
};


template <class _Tp>
inline constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<_Tp>::value;


}}
# 54 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_assignable.h" 3
#pragma clang diagnostic pop
# 458 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_destructible.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_destructible.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_destructible.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_destructible.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_destructible.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_destructible.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_destructible.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_destructible.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
struct is_nothrow_destructible : integral_constant<bool, __is_nothrow_destructible(_Tp)> {};
# 57 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_destructible.h" 3
template <class _Tp>
inline constexpr bool is_nothrow_destructible_v = is_nothrow_destructible<_Tp>::value;


}}
# 61 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_nothrow_destructible.h" 3
#pragma clang diagnostic pop
# 460 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_object.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_object.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_object.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_object.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_object.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_object.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_object.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_object.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_object : _BoolConstant<__is_object(_Tp)> {};


template <class _Tp>
inline constexpr bool is_object_v = __is_object(_Tp);


}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_object.h" 3
#pragma clang diagnostic pop
# 461 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pod.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pod.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pod.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pod.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pod.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pod.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pod.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pod.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_pod : public integral_constant<bool, __is_pod(_Tp)> {};


template <class _Tp>
inline constexpr bool is_pod_v = __is_pod(_Tp);


}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pod.h" 3
#pragma clang diagnostic pop
# 462 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pointer.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pointer.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pointer.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
struct is_pointer : _BoolConstant<__is_pointer(_Tp)> {};


template <class _Tp>
inline constexpr bool is_pointer_v = __is_pointer(_Tp);
# 63 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pointer.h" 3
}}
# 63 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_pointer.h" 3
#pragma clang diagnostic pop
# 463 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_polymorphic.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_polymorphic.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_polymorphic.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_polymorphic.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_polymorphic.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_polymorphic.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_polymorphic.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_polymorphic.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_polymorphic : public integral_constant<bool, __is_polymorphic(_Tp)> {};


template <class _Tp>
inline constexpr bool is_polymorphic_v = __is_polymorphic(_Tp);


}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_polymorphic.h" 3
#pragma clang diagnostic pop
# 464 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_scalar.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_scalar.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_scalar.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_scalar.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_scalar.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_scalar.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_scalar.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_scalar.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
struct is_scalar : _BoolConstant<__is_scalar(_Tp)> {};


template <class _Tp>
inline constexpr bool is_scalar_v = __is_scalar(_Tp);
# 67 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_scalar.h" 3
}}
# 67 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_scalar.h" 3
#pragma clang diagnostic pop
# 467 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
struct is_signed : _BoolConstant<__is_signed(_Tp)> {};


template <class _Tp>
inline constexpr bool is_signed_v = __is_signed(_Tp);
# 57 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed.h" 3
}}
# 57 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed.h" 3
#pragma clang diagnostic pop
# 468 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_standard_layout.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_standard_layout.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_standard_layout.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_standard_layout.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_standard_layout.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_standard_layout.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_standard_layout.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_standard_layout.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_standard_layout : public integral_constant<bool, __is_standard_layout(_Tp)> {};


template <class _Tp>
inline constexpr bool is_standard_layout_v = __is_standard_layout(_Tp);


}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_standard_layout.h" 3
#pragma clang diagnostic pop
# 469 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivial.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivial.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivial.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivial.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivial.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivial.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivial.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivial.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_trivial : public integral_constant<bool, __is_trivial(_Tp)> {};


template <class _Tp>
inline constexpr bool is_trivial_v = __is_trivial(_Tp);


}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivial.h" 3
#pragma clang diagnostic pop
# 470 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_assignable.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_assignable.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_assignable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_assignable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_assignable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_assignable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_assignable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_assignable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Arg>
struct is_trivially_assignable : integral_constant<bool, __is_trivially_assignable(_Tp, _Arg)> {};


template <class _Tp, class _Arg>
inline constexpr bool is_trivially_assignable_v = __is_trivially_assignable(_Tp, _Arg);


template <class _Tp>
struct is_trivially_copy_assignable
    : public integral_constant<
          bool,
          __is_trivially_assignable(__add_lvalue_reference_t<_Tp>, __add_lvalue_reference_t<const _Tp>)> {};


template <class _Tp>
inline constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<_Tp>::value;


template <class _Tp>
struct is_trivially_move_assignable
    : public integral_constant<
          bool,
          __is_trivially_assignable(__add_lvalue_reference_t<_Tp>, __add_rvalue_reference_t<_Tp>)> {};


template <class _Tp>
inline constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<_Tp>::value;


}}
# 54 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_assignable.h" 3
#pragma clang diagnostic pop
# 471 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_constructible.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_constructible.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_constructible.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class... _Args>
struct is_trivially_constructible
    : integral_constant<bool, __is_trivially_constructible(_Tp, _Args...)> {};


template <class _Tp, class... _Args>
inline constexpr bool is_trivially_constructible_v = __is_trivially_constructible(_Tp, _Args...);


template <class _Tp>
struct is_trivially_copy_constructible
    : public integral_constant<bool, __is_trivially_constructible(_Tp, __add_lvalue_reference_t<const _Tp>)> {};


template <class _Tp>
inline constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<_Tp>::value;


template <class _Tp>
struct is_trivially_move_constructible
    : public integral_constant<bool, __is_trivially_constructible(_Tp, __add_rvalue_reference_t<_Tp>)> {};


template <class _Tp>
inline constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<_Tp>::value;


template <class _Tp>
struct is_trivially_default_constructible
    : public integral_constant<bool, __is_trivially_constructible(_Tp)> {};


template <class _Tp>
inline constexpr bool is_trivially_default_constructible_v = __is_trivially_constructible(_Tp);


}}
# 59 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_constructible.h" 3
#pragma clang diagnostic pop
# 472 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_copyable.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_copyable.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdint" 1 3
# 157 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdint" 3


#pragma clang diagnostic push
# 159 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdint" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 159 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdint" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 159 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdint" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 159 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdint" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 159 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdint" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 159 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdint" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

using ::int8_t __attribute__((__using_if_exists__));
using ::int16_t __attribute__((__using_if_exists__));
using ::int32_t __attribute__((__using_if_exists__));
using ::int64_t __attribute__((__using_if_exists__));

using ::uint8_t __attribute__((__using_if_exists__));
using ::uint16_t __attribute__((__using_if_exists__));
using ::uint32_t __attribute__((__using_if_exists__));
using ::uint64_t __attribute__((__using_if_exists__));

using ::int_least8_t __attribute__((__using_if_exists__));
using ::int_least16_t __attribute__((__using_if_exists__));
using ::int_least32_t __attribute__((__using_if_exists__));
using ::int_least64_t __attribute__((__using_if_exists__));

using ::uint_least8_t __attribute__((__using_if_exists__));
using ::uint_least16_t __attribute__((__using_if_exists__));
using ::uint_least32_t __attribute__((__using_if_exists__));
using ::uint_least64_t __attribute__((__using_if_exists__));

using ::int_fast8_t __attribute__((__using_if_exists__));
using ::int_fast16_t __attribute__((__using_if_exists__));
using ::int_fast32_t __attribute__((__using_if_exists__));
using ::int_fast64_t __attribute__((__using_if_exists__));

using ::uint_fast8_t __attribute__((__using_if_exists__));
using ::uint_fast16_t __attribute__((__using_if_exists__));
using ::uint_fast32_t __attribute__((__using_if_exists__));
using ::uint_fast64_t __attribute__((__using_if_exists__));

using ::intptr_t __attribute__((__using_if_exists__));
using ::uintptr_t __attribute__((__using_if_exists__));

using ::intmax_t __attribute__((__using_if_exists__));
using ::uintmax_t __attribute__((__using_if_exists__));

}}
# 197 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdint" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_copyable.h" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_copyable.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_copyable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_copyable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_copyable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_copyable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_copyable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_copyable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_trivially_copyable : public integral_constant<bool, __is_trivially_copyable(_Tp)> {};


template <class _Tp>
inline constexpr bool is_trivially_copyable_v = __is_trivially_copyable(_Tp);







}}
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_copyable.h" 3
#pragma clang diagnostic pop
# 473 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_destructible.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_destructible.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_destructible.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_destructible.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_destructible.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_destructible.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_destructible.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_destructible.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
struct is_trivially_destructible
    : public integral_constant<bool, __is_trivially_destructible(_Tp)> {};
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_destructible.h" 3
template <class _Tp>
inline constexpr bool is_trivially_destructible_v = is_trivially_destructible<_Tp>::value;


}}
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_destructible.h" 3
#pragma clang diagnostic pop
# 474 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_union.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_union.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_union.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_union.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_union.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_union.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_union.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_union.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_union : public integral_constant<bool, __is_union(_Tp)> {};


template <class _Tp>
inline constexpr bool is_union_v = __is_union(_Tp);


}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_union.h" 3
#pragma clang diagnostic pop
# 475 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
struct is_unsigned : _BoolConstant<__is_unsigned(_Tp)> {};


template <class _Tp>
inline constexpr bool is_unsigned_v = __is_unsigned(_Tp);
# 57 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned.h" 3
}}
# 57 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned.h" 3
#pragma clang diagnostic pop
# 476 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_volatile.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_volatile.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_volatile.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_volatile.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_volatile.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_volatile.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_volatile.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_volatile.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
struct is_volatile : _BoolConstant<__is_volatile(_Tp)> {};


template <class _Tp>
inline constexpr bool is_volatile_v = __is_volatile(_Tp);
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_volatile.h" 3
}}
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_volatile.h" 3
#pragma clang diagnostic pop
# 478 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_signed.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_signed.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_signed.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_signed.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_signed.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_signed.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_signed.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_signed.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
using __make_signed_t = __make_signed(_Tp);
# 77 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_signed.h" 3
template <class _Tp>
struct make_signed {
  using type __attribute__((__nodebug__)) = __make_signed_t<_Tp>;
};


template <class _Tp>
using make_signed_t = __make_signed_t<_Tp>;


}}
# 87 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_signed.h" 3
#pragma clang diagnostic pop
# 479 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_unsigned.h" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_unsigned.h" 3


#pragma clang diagnostic push
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_unsigned.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_unsigned.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_unsigned.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_unsigned.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_unsigned.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_unsigned.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
using __make_unsigned_t = __make_unsigned(_Tp);
# 79 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_unsigned.h" 3
template <class _Tp>
struct make_unsigned {
  using type __attribute__((__nodebug__)) = __make_unsigned_t<_Tp>;
};


template <class _Tp>
using make_unsigned_t = __make_unsigned_t<_Tp>;



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __make_unsigned_t<_Tp> __to_unsigned_like(_Tp __x) noexcept {
  return static_cast<__make_unsigned_t<_Tp> >(__x);
}


template <class _Tp, class _Up>
using __copy_unsigned_t = __conditional_t<is_unsigned<_Tp>::value, __make_unsigned_t<_Up>, _Up>;

}}
# 99 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_unsigned.h" 3
#pragma clang diagnostic pop
# 480 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/rank.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/rank.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/rank.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/rank.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/rank.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/rank.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/rank.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/rank.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/rank.h" 3
template <class _Tp>
struct rank : public integral_constant<size_t, 0> {};
template <class _Tp>
struct rank<_Tp[]> : public integral_constant<size_t, rank<_Tp>::value + 1> {};
template <class _Tp, size_t _Np>
struct rank<_Tp[_Np]> : public integral_constant<size_t, rank<_Tp>::value + 1> {};




template <class _Tp>
inline constexpr size_t rank_v = rank<_Tp>::value;


}}
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/rank.h" 3
#pragma clang diagnostic pop
# 481 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_pointer.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_pointer.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_pointer.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_pointer.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp>
struct remove_pointer {
  using type __attribute__((__nodebug__)) = __remove_pointer(_Tp);
};





template <class _Tp>
using __remove_pointer_t = __remove_pointer(_Tp);
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_pointer.h" 3
template <class _Tp>
using remove_pointer_t = __remove_pointer_t<_Tp>;


}}
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_pointer.h" 3
#pragma clang diagnostic pop
# 486 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/result_of.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/result_of.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/result_of.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/result_of.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/result_of.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/result_of.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/result_of.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/result_of.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {




template <class _Callable>
class __attribute__((__deprecated__)) result_of;

template <class _Fp, class... _Args>
class result_of<_Fp(_Args...)> : public __invoke_of<_Fp, _Args...> {};


template <class _Tp>
using result_of_t __attribute__((__deprecated__)) = typename result_of<_Tp>::type;



}}
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/result_of.h" 3
#pragma clang diagnostic pop
# 489 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/underlying_type.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/underlying_type.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/underlying_type.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/underlying_type.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/underlying_type.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/underlying_type.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/underlying_type.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/underlying_type.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, bool = is_enum<_Tp>::value>
struct __underlying_type_impl;

template <class _Tp>
struct __underlying_type_impl<_Tp, false> {};

template <class _Tp>
struct __underlying_type_impl<_Tp, true> {
  typedef __underlying_type(_Tp) type;
};

template <class _Tp>
struct underlying_type : __underlying_type_impl<_Tp, is_enum<_Tp>::value> {};


template <class _Tp>
using underlying_type_t = typename underlying_type<_Tp>::type;


}}
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/underlying_type.h" 3
#pragma clang diagnostic pop
# 490 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_final.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_final.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_final.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_final.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_final.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_final.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_final.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_final.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct __libcpp_is_final : public integral_constant<bool, __is_final(_Tp)> {};


template <class _Tp>
struct is_final : public integral_constant<bool, __is_final(_Tp)> {};



template <class _Tp>
inline constexpr bool is_final_v = __is_final(_Tp);


}}
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_final.h" 3
#pragma clang diagnostic pop
# 493 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conjunction.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conjunction.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conjunction.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conjunction.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conjunction.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conjunction.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conjunction.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conjunction.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class...>
using __expand_to_true = true_type;

template <class... _Pred>
__expand_to_true<__enable_if_t<_Pred::value>...> __and_helper(int);

template <class...>
false_type __and_helper(...);






template <class... _Pred>
using _And __attribute__((__nodebug__)) = decltype(std::__and_helper<_Pred...>(0));

template <bool... _Preds>
struct __all_dummy;

template <bool... _Pred>
struct __all : _IsSame<__all_dummy<_Pred...>, __all_dummy<((void)_Pred, true)...> > {};



template <class...>
struct conjunction : true_type {};

template <class _Arg>
struct conjunction<_Arg> : _Arg {};

template <class _Arg, class... _Args>
struct conjunction<_Arg, _Args...> : conditional_t<!bool(_Arg::value), _Arg, conjunction<_Args...>> {};

template <class... _Args>
inline constexpr bool conjunction_v = conjunction<_Args...>::value;



}}
# 63 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/conjunction.h" 3
#pragma clang diagnostic pop
# 498 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/disjunction.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/disjunction.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/disjunction.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/disjunction.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/disjunction.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/disjunction.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/disjunction.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/disjunction.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <bool>
struct _OrImpl;

template <>
struct _OrImpl<true> {
  template <class _Res, class _First, class... _Rest>
  using _Result __attribute__((__nodebug__)) =
      typename _OrImpl<!bool(_First::value) && sizeof...(_Rest) != 0>::template _Result<_First, _Rest...>;
};

template <>
struct _OrImpl<false> {
  template <class _Res, class...>
  using _Result = _Res;
};







template <class... _Args>
using _Or __attribute__((__nodebug__)) = typename _OrImpl<sizeof...(_Args) != 0>::template _Result<false_type, _Args...>;



template <class... _Args>
struct disjunction : _Or<_Args...> {};

template <class... _Args>
inline constexpr bool disjunction_v = _Or<_Args...>::value;



}}
# 56 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/disjunction.h" 3
#pragma clang diagnostic pop
# 499 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_unique_object_representation.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_unique_object_representation.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_unique_object_representation.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_unique_object_representation.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_unique_object_representation.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_unique_object_representation.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_unique_object_representation.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_unique_object_representation.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
struct has_unique_object_representations





    : public integral_constant<bool, __has_unique_object_representations(remove_all_extents_t<_Tp>)> {};

template <class _Tp>
inline constexpr bool has_unique_object_representations_v = __has_unique_object_representations(_Tp);



}}
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/has_unique_object_representation.h" 3
#pragma clang diagnostic pop
# 500 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_aggregate.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_aggregate.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_aggregate.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_aggregate.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_aggregate.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_aggregate.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_aggregate.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_aggregate.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp>
struct is_aggregate : public integral_constant<bool, __is_aggregate(_Tp)> {};

template <class _Tp>
inline constexpr bool is_aggregate_v = __is_aggregate(_Tp);



}}
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_aggregate.h" 3
#pragma clang diagnostic pop
# 502 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_swappable.h" 1 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_swappable.h" 3


#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_swappable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_swappable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_swappable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_swappable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_swappable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_swappable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Up, class = void>
inline const bool __is_swappable_with_v = false;

template <class _Tp>
inline const bool __is_swappable_v = __is_swappable_with_v<_Tp&, _Tp&>;

template <class _Tp, class _Up, bool = __is_swappable_with_v<_Tp, _Up> >
inline const bool __is_nothrow_swappable_with_v = false;

template <class _Tp>
inline const bool __is_nothrow_swappable_v = __is_nothrow_swappable_with_v<_Tp&, _Tp&>;


template <class _Tp>
using __swap_result_t = __enable_if_t<is_move_constructible<_Tp>::value && is_move_assignable<_Tp>::value>;





template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __swap_result_t<_Tp> swap(_Tp& __x, _Tp& __y)
    noexcept(is_nothrow_move_constructible<_Tp>::value&& is_nothrow_move_assignable<_Tp>::value);

template <class _Tp, size_t _Np, __enable_if_t<__is_swappable_v<_Tp>, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                              void swap(_Tp (&__a)[_Np], _Tp (&__b)[_Np]) noexcept(__is_nothrow_swappable_v<_Tp>);



template <class _Tp, class _Up>
inline const bool __is_swappable_with_v<_Tp,
                                        _Up,
                                        __void_t<decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),
                                                 decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))> > = true;


template <class _Tp, class _Up>
inline const bool __is_nothrow_swappable_with_v<_Tp, _Up, true> =
    noexcept(swap(std::declval<_Tp>(), std::declval<_Up>())) &&
    noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()));




template <class _Tp, class _Up>
inline constexpr bool is_swappable_with_v = __is_swappable_with_v<_Tp, _Up>;

template <class _Tp, class _Up>
struct is_swappable_with : bool_constant<is_swappable_with_v<_Tp, _Up>> {};

template <class _Tp>
inline constexpr bool is_swappable_v =
    is_swappable_with_v<__add_lvalue_reference_t<_Tp>, __add_lvalue_reference_t<_Tp>>;

template <class _Tp>
struct is_swappable : bool_constant<is_swappable_v<_Tp>> {};

template <class _Tp, class _Up>
inline constexpr bool is_nothrow_swappable_with_v = __is_nothrow_swappable_with_v<_Tp, _Up>;

template <class _Tp, class _Up>
struct is_nothrow_swappable_with : bool_constant<is_nothrow_swappable_with_v<_Tp, _Up>> {};

template <class _Tp>
inline constexpr bool is_nothrow_swappable_v =
    is_nothrow_swappable_with_v<__add_lvalue_reference_t<_Tp>, __add_lvalue_reference_t<_Tp>>;

template <class _Tp>
struct is_nothrow_swappable : bool_constant<is_nothrow_swappable_v<_Tp>> {};



}}
# 102 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_swappable.h" 3
#pragma clang diagnostic pop
# 503 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/negation.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/negation.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/negation.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/negation.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/negation.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/negation.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/negation.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/negation.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Pred>
struct _Not : _BoolConstant<!_Pred::value> {};


template <class _Tp>
struct negation : _Not<_Tp> {};
template <class _Tp>
inline constexpr bool negation_v = !_Tp::value;


}}
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/negation.h" 3
#pragma clang diagnostic pop
# 504 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 2 3
# 521 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/type_traits" 3
# 360 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/new" 2 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 2 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 2 3

#pragma clang diagnostic push
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 46 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 3
template <class _Tp, class... _Args, class = decltype(::new(std::declval<void*>()) _Tp(std::declval<_Args>()...))>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* __construct_at(_Tp* __location, _Args&&... __args) {



  return ((void)0),
         ::new (std::__voidify(*__location)) _Tp(std::forward<_Args>(__args)...);

}






template <class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator __destroy(_ForwardIterator, _ForwardIterator);

template <class _Tp, __enable_if_t<!is_array<_Tp>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __destroy_at(_Tp* __loc) {
  ((void)0);
  __loc->~_Tp();
}
# 78 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 3
template <class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
__destroy(_ForwardIterator __first, _ForwardIterator __last) {
  for (; __first != __last; ++__first)
    std::__destroy_at(std::addressof(*__first));
  return __first;
}

template <class _BidirectionalIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _BidirectionalIterator
__reverse_destroy(_BidirectionalIterator __first, _BidirectionalIterator __last) {
  while (__last != __first) {
    --__last;
    std::__destroy_at(std::addressof(*__last));
  }
  return __last;
}



template <class _Tp, enable_if_t<!is_array_v<_Tp>, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void destroy_at(_Tp* __loc) {
  std::__destroy_at(__loc);
}
# 110 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 3
template <class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void destroy(_ForwardIterator __first, _ForwardIterator __last) {
  (void)std::__destroy(std::move(__first), std::move(__last));
}

template <class _ForwardIterator, class _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator destroy_n(_ForwardIterator __first, _Size __n) {
  for (; __n > 0; (void)++__first, --__n)
    std::__destroy_at(std::addressof(*__first));
  return __first;
}



}}
# 124 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/construct_at.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/pointer_traits.h" 1 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/pointer_traits.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/pointer_traits.h" 2 3

#pragma clang diagnostic push
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/pointer_traits.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/pointer_traits.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/pointer_traits.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/pointer_traits.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/pointer_traits.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/pointer_traits.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/pointer_traits.h" 3
template <class _Tp, class = void> struct __has_pointer : false_type {}; template <class _Tp> struct __has_pointer<_Tp, __void_t<typename _Tp::pointer> > : true_type {};
template <class _Tp, class = void> struct __has_element_type : false_type {}; template <class _Tp> struct __has_element_type<_Tp, __void_t<typename _Tp::element_type> > : true_type {};

template <class _Ptr, bool = __has_element_type<_Ptr>::value>
struct __pointer_traits_element_type {};

template <class _Ptr>
struct __pointer_traits_element_type<_Ptr, true> {
  typedef __attribute__((__nodebug__)) typename _Ptr::element_type type;
};

template <template <class, class...> class _Sp, class _Tp, class... _Args>
struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, true> {
  typedef __attribute__((__nodebug__)) typename _Sp<_Tp, _Args...>::element_type type;
};

template <template <class, class...> class _Sp, class _Tp, class... _Args>
struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, false> {
  typedef __attribute__((__nodebug__)) _Tp type;
};

template <class _Tp, class = void>
struct __has_difference_type : false_type {};

template <class _Tp>
struct __has_difference_type<_Tp, __void_t<typename _Tp::difference_type> > : true_type {};

template <class _Ptr, bool = __has_difference_type<_Ptr>::value>
struct __pointer_traits_difference_type {
  typedef __attribute__((__nodebug__)) ptrdiff_t type;
};

template <class _Ptr>
struct __pointer_traits_difference_type<_Ptr, true> {
  typedef __attribute__((__nodebug__)) typename _Ptr::difference_type type;
};

template <class _Tp, class _Up>
struct __has_rebind {
private:
  template <class _Xp>
  static false_type __test(...);
#pragma GCC diagnostic push
# 85 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/pointer_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 85 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/pointer_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template <class _Xp>
  static true_type __test(typename _Xp::template rebind<_Up>* = 0);
#pragma GCC diagnostic pop

public:
  static const bool value = decltype(__test<_Tp>(0))::value;
};

template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
struct __pointer_traits_rebind {

  typedef __attribute__((__nodebug__)) typename _Tp::template rebind<_Up> type;



};

template <template <class, class...> class _Sp, class _Tp, class... _Args, class _Up>
struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, true> {

  typedef __attribute__((__nodebug__)) typename _Sp<_Tp, _Args...>::template rebind<_Up> type;



};

template <template <class, class...> class _Sp, class _Tp, class... _Args, class _Up>
struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, false> {
  typedef _Sp<_Up, _Args...> type;
};

template <class _Ptr, class = void>
struct __pointer_traits_impl {};

template <class _Ptr>
struct __pointer_traits_impl<_Ptr, __void_t<typename __pointer_traits_element_type<_Ptr>::type> > {
  typedef _Ptr pointer;
  typedef typename __pointer_traits_element_type<pointer>::type element_type;
  typedef typename __pointer_traits_difference_type<pointer>::type difference_type;


  template <class _Up>
  using rebind = typename __pointer_traits_rebind<pointer, _Up>::type;







private:
  struct __nat {};

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static pointer
  pointer_to(__conditional_t<is_void<element_type>::value, __nat, element_type>& __r) {
    return pointer::pointer_to(__r);
  }
};

template <class _Ptr>
struct pointer_traits : __pointer_traits_impl<_Ptr> {};

template <class _Tp>
struct pointer_traits<_Tp*> {
  typedef _Tp* pointer;
  typedef _Tp element_type;
  typedef ptrdiff_t difference_type;


  template <class _Up>
  using rebind = _Up*;







private:
  struct __nat {};

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static pointer
  pointer_to(__conditional_t<is_void<element_type>::value, __nat, element_type>& __r) noexcept {
    return std::addressof(__r);
  }
};


template <class _From, class _To>
using __rebind_pointer_t = typename pointer_traits<_From>::template rebind<_To>;







template <class _Pointer, class = void>
struct __to_address_helper;

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp* __to_address(_Tp* __p) noexcept {
  static_assert(!is_function<_Tp>::value, "_Tp is a function type");
  return __p;
}

template <class _Pointer, class = void>
struct _HasToAddress : false_type {};

template <class _Pointer>
struct _HasToAddress<_Pointer, decltype((void)pointer_traits<_Pointer>::to_address(std::declval<const _Pointer&>())) >
    : true_type {};

template <class _Pointer, class = void>
struct _HasArrow : false_type {};

template <class _Pointer>
struct _HasArrow<_Pointer, decltype((void)std::declval<const _Pointer&>().operator->()) > : true_type {};

template <class _Pointer>
struct _IsFancyPointer {
  static const bool value = _HasArrow<_Pointer>::value || _HasToAddress<_Pointer>::value;
};


template <class _Pointer, __enable_if_t< _And<is_class<_Pointer>, _IsFancyPointer<_Pointer> >::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
constexpr __decay_t<decltype(__to_address_helper<_Pointer>::__call(std::declval<const _Pointer&>()))>
__to_address(const _Pointer& __p) noexcept {
  return __to_address_helper<_Pointer>::__call(__p);
}

template <class _Pointer, class>
struct __to_address_helper {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  constexpr static decltype(std::__to_address(std::declval<const _Pointer&>().operator->()))
  __call(const _Pointer& __p) noexcept {
    return std::__to_address(__p.operator->());
  }
};

template <class _Pointer>
struct __to_address_helper<_Pointer,
                           decltype((void)pointer_traits<_Pointer>::to_address(std::declval<const _Pointer&>()))> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  constexpr static decltype(pointer_traits<_Pointer>::to_address(std::declval<const _Pointer&>()))
  __call(const _Pointer& __p) noexcept {
    return pointer_traits<_Pointer>::to_address(__p);
  }
};
# 303 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/pointer_traits.h" 3
}}
# 303 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/pointer_traits.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 2 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/limits" 1 3
# 112 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/limits" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 116 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/limits" 2 3


#pragma clang diagnostic push
# 118 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/limits" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 118 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/limits" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 118 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/limits" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 118 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/limits" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 118 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/limits" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 118 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/limits" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

enum float_round_style {
  round_indeterminate = -1,
  round_toward_zero = 0,
  round_to_nearest = 1,
  round_toward_infinity = 2,
  round_toward_neg_infinity = 3
};

enum float_denorm_style {
  denorm_indeterminate = -1,
  denorm_absent = 0,
  denorm_present = 1
};

template <class _Tp, bool = is_arithmetic<_Tp>::value>
class __libcpp_numeric_limits {
protected:
  typedef _Tp type;

  static constexpr const bool is_specialized = false;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type min() noexcept { return type(); }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type max() noexcept { return type(); }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type lowest() noexcept { return type(); }

  static constexpr const int digits = 0;
  static constexpr const int digits10 = 0;
  static constexpr const int max_digits10 = 0;
  static constexpr const bool is_signed = false;
  static constexpr const bool is_integer = false;
  static constexpr const bool is_exact = false;
  static constexpr const int radix = 0;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type epsilon() noexcept { return type(); }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type round_error() noexcept { return type(); }

  static constexpr const int min_exponent = 0;
  static constexpr const int min_exponent10 = 0;
  static constexpr const int max_exponent = 0;
  static constexpr const int max_exponent10 = 0;

  static constexpr const bool has_infinity = false;
  static constexpr const bool has_quiet_NaN = false;
  static constexpr const bool has_signaling_NaN = false;
  static constexpr const float_denorm_style has_denorm = denorm_absent;
  static constexpr const bool has_denorm_loss = false;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type infinity() noexcept { return type(); }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type quiet_NaN() noexcept { return type(); }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type signaling_NaN() noexcept { return type(); }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type denorm_min() noexcept { return type(); }

  static constexpr const bool is_iec559 = false;
  static constexpr const bool is_bounded = false;
  static constexpr const bool is_modulo = false;

  static constexpr const bool traps = false;
  static constexpr const bool tinyness_before = false;
  static constexpr const float_round_style round_style = round_toward_zero;
};

template <class _Tp, int __digits, bool _IsSigned>
struct __libcpp_compute_min {
  static constexpr const _Tp value = _Tp(_Tp(1) << __digits);
};

template <class _Tp, int __digits>
struct __libcpp_compute_min<_Tp, __digits, false> {
  static constexpr const _Tp value = _Tp(0);
};

template <class _Tp>
class __libcpp_numeric_limits<_Tp, true> {
protected:
  typedef _Tp type;

  static constexpr const bool is_specialized = true;

  static constexpr const bool is_signed = type(-1) < type(0);
  static constexpr const int digits = static_cast<int>(sizeof(type) * 8 - is_signed);
  static constexpr const int digits10 = digits * 3 / 10;
  static constexpr const int max_digits10 = 0;
  static constexpr const type __min = __libcpp_compute_min<type, digits, is_signed>::value;
  static constexpr const type __max = is_signed ? type(type(~0) ^ __min) : type(~0);
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type min() noexcept { return __min; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type max() noexcept { return __max; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type lowest() noexcept { return min(); }

  static constexpr const bool is_integer = true;
  static constexpr const bool is_exact = true;
  static constexpr const int radix = 2;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type epsilon() noexcept { return type(0); }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type round_error() noexcept { return type(0); }

  static constexpr const int min_exponent = 0;
  static constexpr const int min_exponent10 = 0;
  static constexpr const int max_exponent = 0;
  static constexpr const int max_exponent10 = 0;

  static constexpr const bool has_infinity = false;
  static constexpr const bool has_quiet_NaN = false;
  static constexpr const bool has_signaling_NaN = false;
  static constexpr const float_denorm_style has_denorm = denorm_absent;
  static constexpr const bool has_denorm_loss = false;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type infinity() noexcept { return type(0); }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type quiet_NaN() noexcept { return type(0); }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type signaling_NaN() noexcept { return type(0); }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type denorm_min() noexcept { return type(0); }

  static constexpr const bool is_iec559 = false;
  static constexpr const bool is_bounded = true;
  static constexpr const bool is_modulo = !std::is_signed<_Tp>::value;


  static constexpr const bool traps = true;



  static constexpr const bool tinyness_before = false;
  static constexpr const float_round_style round_style = round_toward_zero;
};

template <>
class __libcpp_numeric_limits<bool, true> {
protected:
  typedef bool type;

  static constexpr const bool is_specialized = true;

  static constexpr const bool is_signed = false;
  static constexpr const int digits = 1;
  static constexpr const int digits10 = 0;
  static constexpr const int max_digits10 = 0;
  static constexpr const type __min = false;
  static constexpr const type __max = true;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type min() noexcept { return __min; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type max() noexcept { return __max; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type lowest() noexcept { return min(); }

  static constexpr const bool is_integer = true;
  static constexpr const bool is_exact = true;
  static constexpr const int radix = 2;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type epsilon() noexcept { return type(0); }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type round_error() noexcept { return type(0); }

  static constexpr const int min_exponent = 0;
  static constexpr const int min_exponent10 = 0;
  static constexpr const int max_exponent = 0;
  static constexpr const int max_exponent10 = 0;

  static constexpr const bool has_infinity = false;
  static constexpr const bool has_quiet_NaN = false;
  static constexpr const bool has_signaling_NaN = false;
  static constexpr const float_denorm_style has_denorm = denorm_absent;
  static constexpr const bool has_denorm_loss = false;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type infinity() noexcept { return type(0); }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type quiet_NaN() noexcept { return type(0); }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type signaling_NaN() noexcept { return type(0); }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type denorm_min() noexcept { return type(0); }

  static constexpr const bool is_iec559 = false;
  static constexpr const bool is_bounded = true;
  static constexpr const bool is_modulo = false;

  static constexpr const bool traps = false;
  static constexpr const bool tinyness_before = false;
  static constexpr const float_round_style round_style = round_toward_zero;
};

template <>
class __libcpp_numeric_limits<float, true> {
protected:
  typedef float type;

  static constexpr const bool is_specialized = true;

  static constexpr const bool is_signed = true;
  static constexpr const int digits = 24;
  static constexpr const int digits10 = 6;
  static constexpr const int max_digits10 = 2 + (digits * 30103l) / 100000l;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type min() noexcept { return 1.17549435e-38F; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type max() noexcept { return 3.40282347e+38F; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type lowest() noexcept { return -max(); }

  static constexpr const bool is_integer = false;
  static constexpr const bool is_exact = false;
  static constexpr const int radix = 2;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type epsilon() noexcept { return 1.19209290e-7F; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type round_error() noexcept { return 0.5F; }

  static constexpr const int min_exponent = (-125);
  static constexpr const int min_exponent10 = (-37);
  static constexpr const int max_exponent = 128;
  static constexpr const int max_exponent10 = 38;

  static constexpr const bool has_infinity = true;
  static constexpr const bool has_quiet_NaN = true;
  static constexpr const bool has_signaling_NaN = true;
  static constexpr const float_denorm_style has_denorm = denorm_present;
  static constexpr const bool has_denorm_loss = false;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type infinity() noexcept {
    return __builtin_huge_valf();
  }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type quiet_NaN() noexcept {
    return __builtin_nanf("");
  }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type signaling_NaN() noexcept {
    return __builtin_nansf("");
  }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type denorm_min() noexcept {
    return 1.40129846e-45F;
  }

  static constexpr const bool is_iec559 = true;
  static constexpr const bool is_bounded = true;
  static constexpr const bool is_modulo = false;

  static constexpr const bool traps = false;



  static constexpr const bool tinyness_before = false;

  static constexpr const float_round_style round_style = round_to_nearest;
};

template <>
class __libcpp_numeric_limits<double, true> {
protected:
  typedef double type;

  static constexpr const bool is_specialized = true;

  static constexpr const bool is_signed = true;
  static constexpr const int digits = 53;
  static constexpr const int digits10 = 15;
  static constexpr const int max_digits10 = 2 + (digits * 30103l) / 100000l;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type min() noexcept { return 2.2250738585072014e-308; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type max() noexcept { return 1.7976931348623157e+308; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type lowest() noexcept { return -max(); }

  static constexpr const bool is_integer = false;
  static constexpr const bool is_exact = false;
  static constexpr const int radix = 2;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type epsilon() noexcept { return 2.2204460492503131e-16; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type round_error() noexcept { return 0.5; }

  static constexpr const int min_exponent = (-1021);
  static constexpr const int min_exponent10 = (-307);
  static constexpr const int max_exponent = 1024;
  static constexpr const int max_exponent10 = 308;

  static constexpr const bool has_infinity = true;
  static constexpr const bool has_quiet_NaN = true;
  static constexpr const bool has_signaling_NaN = true;
  static constexpr const float_denorm_style has_denorm = denorm_present;
  static constexpr const bool has_denorm_loss = false;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type infinity() noexcept {
    return __builtin_huge_val();
  }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type quiet_NaN() noexcept {
    return __builtin_nan("");
  }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type signaling_NaN() noexcept {
    return __builtin_nans("");
  }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type denorm_min() noexcept {
    return 4.9406564584124654e-324;
  }

  static constexpr const bool is_iec559 = true;
  static constexpr const bool is_bounded = true;
  static constexpr const bool is_modulo = false;

  static constexpr const bool traps = false;



  static constexpr const bool tinyness_before = false;

  static constexpr const float_round_style round_style = round_to_nearest;
};

template <>
class __libcpp_numeric_limits<long double, true> {
protected:
  typedef long double type;

  static constexpr const bool is_specialized = true;

  static constexpr const bool is_signed = true;
  static constexpr const int digits = 64;
  static constexpr const int digits10 = 18;
  static constexpr const int max_digits10 = 2 + (digits * 30103l) / 100000l;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type min() noexcept { return 3.36210314311209350626e-4932L; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type max() noexcept { return 1.18973149535723176502e+4932L; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type lowest() noexcept { return -max(); }

  static constexpr const bool is_integer = false;
  static constexpr const bool is_exact = false;
  static constexpr const int radix = 2;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type epsilon() noexcept { return 1.08420217248550443401e-19L; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type round_error() noexcept { return 0.5L; }

  static constexpr const int min_exponent = (-16381);
  static constexpr const int min_exponent10 = (-4931);
  static constexpr const int max_exponent = 16384;
  static constexpr const int max_exponent10 = 4932;

  static constexpr const bool has_infinity = true;
  static constexpr const bool has_quiet_NaN = true;
  static constexpr const bool has_signaling_NaN = true;
  static constexpr const float_denorm_style has_denorm = denorm_present;
  static constexpr const bool has_denorm_loss = false;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type infinity() noexcept {
    return __builtin_huge_vall();
  }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type quiet_NaN() noexcept {
    return __builtin_nanl("");
  }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type signaling_NaN() noexcept {
    return __builtin_nansl("");
  }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type denorm_min() noexcept {
    return 3.64519953188247460253e-4951L;
  }




  static constexpr const bool is_iec559 = true;

  static constexpr const bool is_bounded = true;
  static constexpr const bool is_modulo = false;

  static constexpr const bool traps = false;



  static constexpr const bool tinyness_before = false;

  static constexpr const float_round_style round_style = round_to_nearest;
};

template <class _Tp>
class numeric_limits : private __libcpp_numeric_limits<_Tp> {
  typedef __libcpp_numeric_limits<_Tp> __base;
  typedef typename __base::type type;

public:
  static constexpr const bool is_specialized = __base::is_specialized;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type min() noexcept { return __base::min(); }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type max() noexcept { return __base::max(); }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type lowest() noexcept { return __base::lowest(); }

  static constexpr const int digits = __base::digits;
  static constexpr const int digits10 = __base::digits10;
  static constexpr const int max_digits10 = __base::max_digits10;
  static constexpr const bool is_signed = __base::is_signed;
  static constexpr const bool is_integer = __base::is_integer;
  static constexpr const bool is_exact = __base::is_exact;
  static constexpr const int radix = __base::radix;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type epsilon() noexcept {
    return __base::epsilon();
  }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type round_error() noexcept {
    return __base::round_error();
  }

  static constexpr const int min_exponent = __base::min_exponent;
  static constexpr const int min_exponent10 = __base::min_exponent10;
  static constexpr const int max_exponent = __base::max_exponent;
  static constexpr const int max_exponent10 = __base::max_exponent10;

  static constexpr const bool has_infinity = __base::has_infinity;
  static constexpr const bool has_quiet_NaN = __base::has_quiet_NaN;
  static constexpr const bool has_signaling_NaN = __base::has_signaling_NaN;
#pragma GCC diagnostic push
# 494 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 494 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  static constexpr const float_denorm_style has_denorm = __base::has_denorm;
  static constexpr const bool has_denorm_loss = __base::has_denorm_loss;
#pragma GCC diagnostic pop
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type infinity() noexcept {
    return __base::infinity();
  }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type quiet_NaN() noexcept {
    return __base::quiet_NaN();
  }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type signaling_NaN() noexcept {
    return __base::signaling_NaN();
  }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr type denorm_min() noexcept {
    return __base::denorm_min();
  }

  static constexpr const bool is_iec559 = __base::is_iec559;
  static constexpr const bool is_bounded = __base::is_bounded;
  static constexpr const bool is_modulo = __base::is_modulo;

  static constexpr const bool traps = __base::traps;
  static constexpr const bool tinyness_before = __base::tinyness_before;
  static constexpr const float_round_style round_style = __base::round_style;
};

template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_specialized;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::digits;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::digits10;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::max_digits10;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_signed;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_integer;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_exact;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::radix;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::min_exponent;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::min_exponent10;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::max_exponent;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::max_exponent10;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::has_infinity;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::has_quiet_NaN;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::has_signaling_NaN;
template <class _Tp>
constexpr const float_denorm_style numeric_limits<_Tp>::has_denorm;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::has_denorm_loss;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_iec559;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_bounded;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_modulo;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::traps;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::tinyness_before;
template <class _Tp>
constexpr const float_round_style numeric_limits<_Tp>::round_style;

template <class _Tp>
class numeric_limits<const _Tp> : public numeric_limits<_Tp> {};

template <class _Tp>
class numeric_limits<volatile _Tp> : public numeric_limits<_Tp> {};

template <class _Tp>
class numeric_limits<const volatile _Tp> : public numeric_limits<_Tp> {};

}}
# 576 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/limits" 3
#pragma clang diagnostic pop
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 2 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 2 3

#pragma clang diagnostic push
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
template <class _Tp,
          class _Alloc,
          class _RawAlloc = __libcpp_remove_reference_t<_Alloc>,
          bool = __has_pointer<_RawAlloc>::value>
struct __pointer {
  using type __attribute__((__nodebug__)) = typename _RawAlloc::pointer;
};
template <class _Tp, class _Alloc, class _RawAlloc>
struct __pointer<_Tp, _Alloc, _RawAlloc, false> {
  using type __attribute__((__nodebug__)) = _Tp*;
};


template <class _Tp, class = void> struct __has_const_pointer : false_type {}; template <class _Tp> struct __has_const_pointer<_Tp, __void_t<typename _Tp::const_pointer > > : true_type {};
template <class _Tp, class _Ptr, class _Alloc, bool = __has_const_pointer<_Alloc>::value>
struct __const_pointer {
  using type __attribute__((__nodebug__)) = typename _Alloc::const_pointer;
};
template <class _Tp, class _Ptr, class _Alloc>
struct __const_pointer<_Tp, _Ptr, _Alloc, false> {



  using type __attribute__((__nodebug__)) = typename pointer_traits<_Ptr>::template rebind<const _Tp>;

};


template <class _Tp, class = void> struct __has_void_pointer : false_type {}; template <class _Tp> struct __has_void_pointer<_Tp, __void_t<typename _Tp::void_pointer > > : true_type {};
template <class _Ptr, class _Alloc, bool = __has_void_pointer<_Alloc>::value>
struct __void_pointer {
  using type __attribute__((__nodebug__)) = typename _Alloc::void_pointer;
};
template <class _Ptr, class _Alloc>
struct __void_pointer<_Ptr, _Alloc, false> {



  using type __attribute__((__nodebug__)) = typename pointer_traits<_Ptr>::template rebind<void>;

};


template <class _Tp, class = void> struct __has_const_void_pointer : false_type {}; template <class _Tp> struct __has_const_void_pointer<_Tp, __void_t<typename _Tp::const_void_pointer > > : true_type {};
template <class _Ptr, class _Alloc, bool = __has_const_void_pointer<_Alloc>::value>
struct __const_void_pointer {
  using type __attribute__((__nodebug__)) = typename _Alloc::const_void_pointer;
};
template <class _Ptr, class _Alloc>
struct __const_void_pointer<_Ptr, _Alloc, false> {



  using type __attribute__((__nodebug__)) = typename pointer_traits<_Ptr>::template rebind<const void>;

};


template <class _Tp, class = void> struct __has_size_type : false_type {}; template <class _Tp> struct __has_size_type<_Tp, __void_t<typename _Tp::size_type > > : true_type {};
template <class _Alloc, class _DiffType, bool = __has_size_type<_Alloc>::value>
struct __size_type : make_unsigned<_DiffType> {};
template <class _Alloc, class _DiffType>
struct __size_type<_Alloc, _DiffType, true> {
  using type __attribute__((__nodebug__)) = typename _Alloc::size_type;
};


template <class _Tp, class = void> struct __has_alloc_traits_difference_type : false_type {}; template <class _Tp> struct __has_alloc_traits_difference_type<_Tp, __void_t<typename _Tp::difference_type > > : true_type {};
template <class _Alloc, class _Ptr, bool = __has_alloc_traits_difference_type<_Alloc>::value>
struct __alloc_traits_difference_type {
  using type __attribute__((__nodebug__)) = typename pointer_traits<_Ptr>::difference_type;
};
template <class _Alloc, class _Ptr>
struct __alloc_traits_difference_type<_Alloc, _Ptr, true> {
  using type __attribute__((__nodebug__)) = typename _Alloc::difference_type;
};


template <class _Tp, class = void> struct __has_propagate_on_container_copy_assignment : false_type {}; template <class _Tp> struct __has_propagate_on_container_copy_assignment<_Tp, __void_t<typename _Tp::propagate_on_container_copy_assignment > > : true_type {};
template <class _Alloc, bool = __has_propagate_on_container_copy_assignment<_Alloc>::value>
struct __propagate_on_container_copy_assignment : false_type {};
template <class _Alloc>
struct __propagate_on_container_copy_assignment<_Alloc, true> {
  using type __attribute__((__nodebug__)) = typename _Alloc::propagate_on_container_copy_assignment;
};


template <class _Tp, class = void> struct __has_propagate_on_container_move_assignment : false_type {}; template <class _Tp> struct __has_propagate_on_container_move_assignment<_Tp, __void_t<typename _Tp::propagate_on_container_move_assignment > > : true_type {};
template <class _Alloc, bool = __has_propagate_on_container_move_assignment<_Alloc>::value>
struct __propagate_on_container_move_assignment : false_type {};
template <class _Alloc>
struct __propagate_on_container_move_assignment<_Alloc, true> {
  using type __attribute__((__nodebug__)) = typename _Alloc::propagate_on_container_move_assignment;
};


template <class _Tp, class = void> struct __has_propagate_on_container_swap : false_type {}; template <class _Tp> struct __has_propagate_on_container_swap<_Tp, __void_t<typename _Tp::propagate_on_container_swap > > : true_type {};
template <class _Alloc, bool = __has_propagate_on_container_swap<_Alloc>::value>
struct __propagate_on_container_swap : false_type {};
template <class _Alloc>
struct __propagate_on_container_swap<_Alloc, true> {
  using type __attribute__((__nodebug__)) = typename _Alloc::propagate_on_container_swap;
};


template <class _Tp, class = void> struct __has_is_always_equal : false_type {}; template <class _Tp> struct __has_is_always_equal<_Tp, __void_t<typename _Tp::is_always_equal > > : true_type {};
template <class _Alloc, bool = __has_is_always_equal<_Alloc>::value>
struct __is_always_equal : is_empty<_Alloc> {};
template <class _Alloc>
struct __is_always_equal<_Alloc, true> {
  using type __attribute__((__nodebug__)) = typename _Alloc::is_always_equal;
};


#pragma GCC diagnostic push
# 158 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 158 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Tp, class _Up, class = void>
struct __has_rebind_other : false_type {};
template <class _Tp, class _Up>
struct __has_rebind_other<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>::other> > : true_type {};

template <class _Tp, class _Up, bool = __has_rebind_other<_Tp, _Up>::value>
struct __allocator_traits_rebind {
  static_assert(__has_rebind_other<_Tp, _Up>::value, "This allocator has to implement rebind");
  using type __attribute__((__nodebug__)) = typename _Tp::template rebind<_Up>::other;
};
template <template <class, class...> class _Alloc, class _Tp, class... _Args, class _Up>
struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, true> {
  using type __attribute__((__nodebug__)) = typename _Alloc<_Tp, _Args...>::template rebind<_Up>::other;
};
template <template <class, class...> class _Alloc, class _Tp, class... _Args, class _Up>
struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, false> {
  using type __attribute__((__nodebug__)) = _Alloc<_Up, _Args...>;
};
#pragma GCC diagnostic pop

template <class _Alloc, class _Tp>
using __allocator_traits_rebind_t = typename __allocator_traits_rebind<_Alloc, _Tp>::type;

#pragma GCC diagnostic push
# 182 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 182 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"


template <class _Alloc, class _SizeType, class _ConstVoidPtr, class = void>
struct __has_allocate_hint : false_type {};

template <class _Alloc, class _SizeType, class _ConstVoidPtr>
struct __has_allocate_hint<
    _Alloc,
    _SizeType,
    _ConstVoidPtr,
    decltype((void)std::declval<_Alloc>().allocate(std::declval<_SizeType>(), std::declval<_ConstVoidPtr>()))>
    : true_type {};


template <class, class _Alloc, class... _Args>
struct __has_construct_impl : false_type {};

template <class _Alloc, class... _Args>
struct __has_construct_impl<decltype((void)std::declval<_Alloc>().construct(std::declval<_Args>()...)),
                            _Alloc,
                            _Args...> : true_type {};

template <class _Alloc, class... _Args>
struct __has_construct : __has_construct_impl<void, _Alloc, _Args...> {};


template <class _Alloc, class _Pointer, class = void>
struct __has_destroy : false_type {};

template <class _Alloc, class _Pointer>
struct __has_destroy<_Alloc, _Pointer, decltype((void)std::declval<_Alloc>().destroy(std::declval<_Pointer>()))>
    : true_type {};


template <class _Alloc, class = void>
struct __has_max_size : false_type {};

template <class _Alloc>
struct __has_max_size<_Alloc, decltype((void)std::declval<_Alloc&>().max_size())> : true_type {};


template <class _Alloc, class = void>
struct __has_select_on_container_copy_construction : false_type {};

template <class _Alloc>
struct __has_select_on_container_copy_construction<
    _Alloc,
    decltype((void)std::declval<_Alloc>().select_on_container_copy_construction())> : true_type {};

#pragma GCC diagnostic pop
# 245 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
template <class _Alloc>
struct allocator_traits {
  using allocator_type = _Alloc;
  using value_type = typename allocator_type::value_type;
  using pointer = typename __pointer<value_type, allocator_type>::type;
  using const_pointer = typename __const_pointer<value_type, pointer, allocator_type>::type;
  using void_pointer = typename __void_pointer<pointer, allocator_type>::type;
  using const_void_pointer = typename __const_void_pointer<pointer, allocator_type>::type;
  using difference_type = typename __alloc_traits_difference_type<allocator_type, pointer>::type;
  using size_type = typename __size_type<allocator_type, difference_type>::type;
  using propagate_on_container_copy_assignment =
      typename __propagate_on_container_copy_assignment<allocator_type>::type;
  using propagate_on_container_move_assignment =
      typename __propagate_on_container_move_assignment<allocator_type>::type;
  using propagate_on_container_swap = typename __propagate_on_container_swap<allocator_type>::type;
  using is_always_equal = typename __is_always_equal<allocator_type>::type;


  template <class _Tp>
  using rebind_alloc = __allocator_traits_rebind_t<allocator_type, _Tp>;
  template <class _Tp>
  using rebind_traits = allocator_traits<rebind_alloc<_Tp> >;
# 278 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static pointer
  allocate(allocator_type& __a, size_type __n) {
    return __a.allocate(__n);
  }

  template <class _Ap = _Alloc, __enable_if_t<__has_allocate_hint<_Ap, size_type, const_void_pointer>::value, int> = 0>
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static pointer
  allocate(allocator_type& __a, size_type __n, const_void_pointer __hint) {
#pragma GCC diagnostic push
# 286 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 286 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    return __a.allocate(__n, __hint);
#pragma GCC diagnostic pop
  }
  template <class _Ap = _Alloc,
            class = void,
            __enable_if_t<!__has_allocate_hint<_Ap, size_type, const_void_pointer>::value, int> = 0>
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static pointer
  allocate(allocator_type& __a, size_type __n, const_void_pointer) {
    return __a.allocate(__n);
  }
# 310 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static void
  deallocate(allocator_type& __a, pointer __p, size_type __n) noexcept {
    __a.deallocate(__p, __n);
  }

  template <class _Tp, class... _Args, __enable_if_t<__has_construct<allocator_type, _Tp*, _Args...>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static void
  construct(allocator_type& __a, _Tp* __p, _Args&&... __args) {
#pragma GCC diagnostic push
# 318 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 318 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    __a.construct(__p, std::forward<_Args>(__args)...);
#pragma GCC diagnostic pop
  }
  template <class _Tp,
            class... _Args,
            class = void,
            __enable_if_t<!__has_construct<allocator_type, _Tp*, _Args...>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static void
  construct(allocator_type&, _Tp* __p, _Args&&... __args) {
    std::__construct_at(__p, std::forward<_Args>(__args)...);
  }

  template <class _Tp, __enable_if_t<__has_destroy<allocator_type, _Tp*>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static void destroy(allocator_type& __a, _Tp* __p) {
#pragma GCC diagnostic push
# 333 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 333 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    __a.destroy(__p);
#pragma GCC diagnostic pop
  }
  template <class _Tp, class = void, __enable_if_t<!__has_destroy<allocator_type, _Tp*>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static void destroy(allocator_type&, _Tp* __p) {
    std::__destroy_at(__p);
  }

  template <class _Ap = _Alloc, __enable_if_t<__has_max_size<const _Ap>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static size_type max_size(const allocator_type& __a) noexcept {
#pragma GCC diagnostic push
# 344 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 344 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    return __a.max_size();
#pragma GCC diagnostic pop
  }
  template <class _Ap = _Alloc, class = void, __enable_if_t<!__has_max_size<const _Ap>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static size_type max_size(const allocator_type&) noexcept {
    return numeric_limits<size_type>::max() / sizeof(value_type);
  }

  template <class _Ap = _Alloc, __enable_if_t<__has_select_on_container_copy_construction<const _Ap>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static allocator_type
  select_on_container_copy_construction(const allocator_type& __a) {
    return __a.select_on_container_copy_construction();
  }
  template <class _Ap = _Alloc,
            class = void,
            __enable_if_t<!__has_select_on_container_copy_construction<const _Ap>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static allocator_type
  select_on_container_copy_construction(const allocator_type& __a) {
    return __a;
  }
};


template <class _Traits, class _Tp>
using __rebind_alloc __attribute__((__nodebug__)) = typename _Traits::template rebind_alloc<_Tp>;





template <class _Alloc>
struct __check_valid_allocator : true_type {
  using _Traits = std::allocator_traits<_Alloc>;
  static_assert(is_same<_Alloc, __rebind_alloc<_Traits, typename _Traits::value_type> >::value,
                "[allocator.requirements] states that rebinding an allocator to the same type should result in the "
                "original allocator");
};


template <class _Tp>
struct __is_default_allocator : false_type {};

template <class>
class allocator;

template <class _Tp>
struct __is_default_allocator<allocator<_Tp> > : true_type {};


template <class _Alloc, class = void>
struct __is_cpp17_move_insertable : is_move_constructible<typename _Alloc::value_type> {};

template <class _Alloc>
struct __is_cpp17_move_insertable<
    _Alloc,
    __enable_if_t< !__is_default_allocator<_Alloc>::value &&
                   __has_construct<_Alloc, typename _Alloc::value_type*, typename _Alloc::value_type&&>::value > >
    : true_type {};


template <class _Alloc, class = void>
struct __is_cpp17_copy_insertable
    : integral_constant<bool,
                        is_copy_constructible<typename _Alloc::value_type>::value &&
                            __is_cpp17_move_insertable<_Alloc>::value > {};

template <class _Alloc>
struct __is_cpp17_copy_insertable<
    _Alloc,
    __enable_if_t< !__is_default_allocator<_Alloc>::value &&
                   __has_construct<_Alloc, typename _Alloc::value_type*, const typename _Alloc::value_type&>::value > >
    : __is_cpp17_move_insertable<_Alloc> {};



}}
# 420 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_traits.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocation_guard.h" 2 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocation_guard.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocation_guard.h" 2 3

#pragma clang diagnostic push
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocation_guard.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocation_guard.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocation_guard.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocation_guard.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocation_guard.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocation_guard.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocation_guard.h" 3
template <class _Alloc>
struct __allocation_guard {
  using _Pointer = typename allocator_traits<_Alloc>::pointer;
  using _Size = typename allocator_traits<_Alloc>::size_type;

  template <class _AllocT>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __allocation_guard(_AllocT __alloc, _Size __n)
      : __alloc_(std::move(__alloc)),
        __n_(__n),
        __ptr_(allocator_traits<_Alloc>::allocate(__alloc_, __n_))
  {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__allocation_guard() noexcept { __destroy(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __allocation_guard(const __allocation_guard&) = delete;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __allocation_guard(__allocation_guard&& __other) noexcept
      : __alloc_(std::move(__other.__alloc_)),
        __n_(__other.__n_),
        __ptr_(__other.__ptr_) {
    __other.__ptr_ = nullptr;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __allocation_guard& operator=(const __allocation_guard& __other) = delete;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __allocation_guard& operator=(__allocation_guard&& __other) noexcept {
    if (std::addressof(__other) != this) {
      __destroy();

      __alloc_ = std::move(__other.__alloc_);
      __n_ = __other.__n_;
      __ptr_ = __other.__ptr_;
      __other.__ptr_ = nullptr;
    }

    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Pointer
  __release_ptr() noexcept {
    _Pointer __tmp = __ptr_;
    __ptr_ = nullptr;
    return __tmp;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Pointer __get() const noexcept { return __ptr_; }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __destroy() noexcept {
    if (__ptr_ != nullptr) {
      allocator_traits<_Alloc>::deallocate(__alloc_, __ptr_, __n_);
    }
  }

  _Alloc __alloc_;
  _Size __n_;
  _Pointer __ptr_;
};

}}
# 104 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocation_guard.h" 3
#pragma clang diagnostic pop
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocate_at_least.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocate_at_least.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocate_at_least.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocate_at_least.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocate_at_least.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocate_at_least.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocate_at_least.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocate_at_least.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocate_at_least.h" 3
template <class _Pointer>
struct __allocation_result {
  _Pointer ptr;
  size_t count;
};

template <class _Alloc>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
constexpr __allocation_result<typename allocator_traits<_Alloc>::pointer>
__allocate_at_least(_Alloc& __alloc, size_t __n) {
  return {__alloc.allocate(__n), __n};
}



}}
# 46 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocate_at_least.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constant_evaluated.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constant_evaluated.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constant_evaluated.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constant_evaluated.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constant_evaluated.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constant_evaluated.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constant_evaluated.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constant_evaluated.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {







__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr bool __libcpp_is_constant_evaluated() noexcept {
  return __builtin_is_constant_evaluated();
}

}}
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_constant_evaluated.h" 3
#pragma clang diagnostic pop
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator.h" 2 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator.h" 3


#pragma clang diagnostic push
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
class allocator;




template <>
class allocator<void> {
public:
  __attribute__((__deprecated__)) typedef void* pointer;
  __attribute__((__deprecated__)) typedef const void* const_pointer;
  __attribute__((__deprecated__)) typedef void value_type;

  template <class _Up>
  struct __attribute__((__deprecated__)) rebind {
    typedef allocator<_Up> other;
  };
};
# 80 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator.h" 3
template <bool _Cond, class _Unique>
struct __non_trivial_if {};

template <class _Unique>
struct __non_trivial_if<true, _Unique> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __non_trivial_if() noexcept {}
};






template <class _Tp>
class allocator : private __non_trivial_if<!is_void<_Tp>::value, allocator<_Tp> > {
  static_assert(!is_const<_Tp>::value, "std::allocator does not support const types");
  static_assert(!is_volatile<_Tp>::value, "std::allocator does not support volatile types");

public:
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef _Tp value_type;
  typedef true_type propagate_on_container_move_assignment;

                              typedef true_type is_always_equal;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) allocator() noexcept = default;

  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) allocator(const allocator<_Up>&) noexcept {}

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* allocate(size_t __n) {
    if (__n > allocator_traits<allocator>::max_size(*this))
      __throw_bad_array_new_length();
    if (__libcpp_is_constant_evaluated()) {
      return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    } else {
      return static_cast<_Tp*>(std::__libcpp_allocate(__n * sizeof(_Tp), alignof(_Tp)));
    }
  }







  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void deallocate(_Tp* __p, size_t __n) noexcept {
    if (__libcpp_is_constant_evaluated()) {
      ::operator delete(__p);
    } else {
      std::__libcpp_deallocate((void*)__p, __n * sizeof(_Tp), alignof(_Tp));
    }
  }



  __attribute__((__deprecated__)) typedef _Tp* pointer;
  __attribute__((__deprecated__)) typedef const _Tp* const_pointer;
  __attribute__((__deprecated__)) typedef _Tp& reference;
  __attribute__((__deprecated__)) typedef const _Tp& const_reference;

  template <class _Up>
  struct __attribute__((__deprecated__)) rebind {
    typedef allocator<_Up> other;
  };

  __attribute__((__deprecated__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer address(reference __x) const noexcept {
    return std::addressof(__x);
  }
  __attribute__((__deprecated__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_pointer address(const_reference __x) const noexcept {
    return std::addressof(__x);
  }

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__deprecated__)) _Tp* allocate(size_t __n, const void*) {
    return allocate(__n);
  }

  __attribute__((__deprecated__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type max_size() const noexcept {
    return size_type(~0) / sizeof(_Tp);
  }

  template <class _Up, class... _Args>
  __attribute__((__deprecated__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void construct(_Up* __p, _Args&&... __args) {
    ::new ((void*)__p) _Up(std::forward<_Args>(__args)...);
  }

  __attribute__((__deprecated__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void destroy(pointer __p) { __p->~_Tp(); }

};
# 251 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator.h" 3
template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator==(const allocator<_Tp>&, const allocator<_Up>&) noexcept {
  return true;
}



template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const allocator<_Tp>&, const allocator<_Up>&) noexcept {
  return false;
}



}}
# 266 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator.h" 3
#pragma clang diagnostic pop
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_destructor.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_destructor.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_destructor.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_destructor.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_destructor.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_destructor.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_destructor.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_destructor.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Alloc>
class __allocator_destructor {
  typedef __attribute__((__nodebug__)) allocator_traits<_Alloc> __alloc_traits;

public:
  typedef __attribute__((__nodebug__)) typename __alloc_traits::pointer pointer;
  typedef __attribute__((__nodebug__)) typename __alloc_traits::size_type size_type;

private:
  _Alloc& __alloc_;
  size_type __s_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __allocator_destructor(_Alloc& __a, size_type __s) noexcept : __alloc_(__a), __s_(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator()(pointer __p) noexcept { __alloc_traits::deallocate(__alloc_, __p, __s_); }
};

}}
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_destructor.h" 3
#pragma clang diagnostic pop
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/auto_ptr.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/auto_ptr.h" 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/compressed_pair.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/compressed_pair.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/tuple.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/tuple.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/tuple.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/tuple.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/tuple.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/tuple.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/tuple.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/tuple.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <size_t, class>
struct tuple_element;



template <class...>
class tuple;

template <class>
struct tuple_size;

template <size_t _Ip, class... _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename tuple_element<_Ip, tuple<_Tp...> >::type&
get(tuple<_Tp...>&) noexcept;

template <size_t _Ip, class... _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const typename tuple_element<_Ip, tuple<_Tp...> >::type&
get(const tuple<_Tp...>&) noexcept;

template <size_t _Ip, class... _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename tuple_element<_Ip, tuple<_Tp...> >::type&&
get(tuple<_Tp...>&&) noexcept;

template <size_t _Ip, class... _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const typename tuple_element<_Ip, tuple<_Tp...> >::type&&
get(const tuple<_Tp...>&&) noexcept;



}}
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/tuple.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/compressed_pair.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_indices.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_indices.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/integer_sequence.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/integer_sequence.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/integer_sequence.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/integer_sequence.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/integer_sequence.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/integer_sequence.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/integer_sequence.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/integer_sequence.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <size_t...>
struct __tuple_indices;

template <class _IdxType, _IdxType... _Values>
struct __integer_sequence {
  template <template <class _OIdxType, _OIdxType...> class _ToIndexSeq, class _ToIndexType>
  using __convert = _ToIndexSeq<_ToIndexType, _Values...>;

  template <size_t _Sp>
  using __to_tuple_indices = __tuple_indices<(_Values + _Sp)...>;
};


template <size_t _Ep, size_t _Sp>
using __make_indices_imp =
    typename __make_integer_seq<__integer_sequence, size_t, _Ep - _Sp>::template __to_tuple_indices<_Sp>;
# 48 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/integer_sequence.h" 3
template <class _Tp, _Tp... _Ip>
struct integer_sequence {
  typedef _Tp value_type;
  static_assert(is_integral<_Tp>::value, "std::integer_sequence can only be instantiated with an integral type");
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr size_t size() noexcept { return sizeof...(_Ip); }
};

template <size_t... _Ip>
using index_sequence = integer_sequence<size_t, _Ip...>;



template <class _Tp, _Tp _Ep>
using make_integer_sequence __attribute__((__nodebug__)) = __make_integer_seq<integer_sequence, _Tp, _Ep>;
# 72 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/integer_sequence.h" 3
template <size_t _Np>
using make_index_sequence = make_integer_sequence<size_t, _Np>;

template <class... _Tp>
using index_sequence_for = make_index_sequence<sizeof...(_Tp)>;
# 88 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/integer_sequence.h" 3
}}
# 88 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/integer_sequence.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_indices.h" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_indices.h" 3




#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_indices.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_indices.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_indices.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_indices.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_indices.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_indices.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <size_t...>
struct __tuple_indices {};

template <size_t _Ep, size_t _Sp = 0>
struct __make_tuple_indices {
  static_assert(_Sp <= _Ep, "__make_tuple_indices input error");
  typedef __make_indices_imp<_Ep, _Sp> type;
};

}}
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_indices.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/compressed_pair.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/dependent_type.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/dependent_type.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/dependent_type.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/dependent_type.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/dependent_type.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/dependent_type.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/dependent_type.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/dependent_type.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, bool>
struct __dependent_type : public _Tp {};

}}
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/dependent_type.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/compressed_pair.h" 2 3








# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/piecewise_construct.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/piecewise_construct.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/piecewise_construct.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/piecewise_construct.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/piecewise_construct.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/piecewise_construct.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/piecewise_construct.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/piecewise_construct.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

struct piecewise_construct_t {
  explicit piecewise_construct_t() = default;
};


inline constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();




}}
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/piecewise_construct.h" 3
#pragma clang diagnostic pop
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/compressed_pair.h" 2 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/compressed_pair.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/compressed_pair.h" 2 3

#pragma clang diagnostic push
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/compressed_pair.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/compressed_pair.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/compressed_pair.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/compressed_pair.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/compressed_pair.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/compressed_pair.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


struct __default_init_tag {};
struct __value_init_tag {};

template <class _Tp, int _Idx, bool _CanBeEmptyBase = is_empty<_Tp>::value && !__libcpp_is_final<_Tp>::value>
struct __compressed_pair_elem {
  using _ParamT = _Tp;
  using reference = _Tp&;
  using const_reference = const _Tp&;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __compressed_pair_elem(__default_init_tag) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __compressed_pair_elem(__value_init_tag) : __value_() {}

  template <class _Up, __enable_if_t<!is_same<__compressed_pair_elem, __decay_t<_Up> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __compressed_pair_elem(_Up&& __u)
      : __value_(std::forward<_Up>(__u)) {}


  template <class... _Args, size_t... _Indices>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __compressed_pair_elem(
      piecewise_construct_t, tuple<_Args...> __args, __tuple_indices<_Indices...>)
      : __value_(std::forward<_Args>(std::get<_Indices>(__args))...) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference __get() noexcept { return __value_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reference __get() const noexcept { return __value_; }

private:
  _Tp __value_;
};

template <class _Tp, int _Idx>
struct __compressed_pair_elem<_Tp, _Idx, true> : private _Tp {
  using _ParamT = _Tp;
  using reference = _Tp&;
  using const_reference = const _Tp&;
  using __value_type = _Tp;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __compressed_pair_elem() = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __compressed_pair_elem(__default_init_tag) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __compressed_pair_elem(__value_init_tag) : __value_type() {}

  template <class _Up, __enable_if_t<!is_same<__compressed_pair_elem, __decay_t<_Up> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __compressed_pair_elem(_Up&& __u)
      : __value_type(std::forward<_Up>(__u)) {}


  template <class... _Args, size_t... _Indices>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr
  __compressed_pair_elem(piecewise_construct_t, tuple<_Args...> __args, __tuple_indices<_Indices...>)
      : __value_type(std::forward<_Args>(std::get<_Indices>(__args))...) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference __get() noexcept { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reference __get() const noexcept { return *this; }
};

template <class _T1, class _T2>
class __compressed_pair : private __compressed_pair_elem<_T1, 0>, private __compressed_pair_elem<_T2, 1> {
public:




  static_assert(
      (!is_same<_T1, _T2>::value),
      "__compressed_pair cannot be instantiated when T1 and T2 are the same type; "
      "The current implementation is NOT ABI-compatible with the previous implementation for this configuration");

  using _Base1 __attribute__((__nodebug__)) = __compressed_pair_elem<_T1, 0>;
  using _Base2 __attribute__((__nodebug__)) = __compressed_pair_elem<_T2, 1>;

  template <bool _Dummy = true,
            __enable_if_t< __dependent_type<is_default_constructible<_T1>, _Dummy>::value &&
                               __dependent_type<is_default_constructible<_T2>, _Dummy>::value,
                           int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __compressed_pair()
      : _Base1(__value_init_tag()), _Base2(__value_init_tag()) {}

  template <class _U1, class _U2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __compressed_pair(_U1&& __t1, _U2&& __t2)
      : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {}


  template <class... _Args1, class... _Args2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __compressed_pair(
      piecewise_construct_t __pc, tuple<_Args1...> __first_args, tuple<_Args2...> __second_args)
      : _Base1(__pc, std::move(__first_args), typename __make_tuple_indices<sizeof...(_Args1)>::type()),
        _Base2(__pc, std::move(__second_args), typename __make_tuple_indices<sizeof...(_Args2)>::type()) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename _Base1::reference first() noexcept {
    return static_cast<_Base1&>(*this).__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename _Base1::const_reference first() const noexcept {
    return static_cast<_Base1 const&>(*this).__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename _Base2::reference second() noexcept {
    return static_cast<_Base2&>(*this).__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename _Base2::const_reference second() const noexcept {
    return static_cast<_Base2 const&>(*this).__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr static _Base1* __get_first_base(__compressed_pair* __pair) noexcept {
    return static_cast<_Base1*>(__pair);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr static _Base2* __get_second_base(__compressed_pair* __pair) noexcept {
    return static_cast<_Base2*>(__pair);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void swap(__compressed_pair& __x)
      noexcept(__is_nothrow_swappable_v<_T1>&& __is_nothrow_swappable_v<_T2>) {
    using std::swap;
    swap(first(), __x.first());
    swap(second(), __x.second());
  }
};

template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
swap(__compressed_pair<_T1, _T2>& __x, __compressed_pair<_T1, _T2>& __y)
    noexcept(__is_nothrow_swappable_v<_T1>&& __is_nothrow_swappable_v<_T2>) {
  __x.swap(__y);
}

}}
# 167 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/compressed_pair.h" 3
#pragma clang diagnostic pop
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_move_common.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_move_common.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iter_swap.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iter_swap.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/swap.h" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/swap.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/swap.h" 2 3

#pragma clang diagnostic push
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/swap.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/swap.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/swap.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/swap.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/swap.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/swap.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp>
using __swap_result_t = __enable_if_t<is_move_constructible<_Tp>::value && is_move_assignable<_Tp>::value>;





template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __swap_result_t<_Tp> swap(_Tp& __x, _Tp& __y)
    noexcept(is_nothrow_move_constructible<_Tp>::value&& is_nothrow_move_assignable<_Tp>::value) {
  _Tp __t(std::move(__x));
  __x = std::move(__y);
  __y = std::move(__t);
}

template <class _Tp, size_t _Np, __enable_if_t<__is_swappable_v<_Tp>, int> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(_Tp (&__a)[_Np], _Tp (&__b)[_Np])
    noexcept(__is_nothrow_swappable_v<_Tp>) {
  for (size_t __i = 0; __i != _Np; ++__i) {
    swap(__a[__i], __b[__i]);
  }
}

}}
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/swap.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iter_swap.h" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iter_swap.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iter_swap.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iter_swap.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iter_swap.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iter_swap.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iter_swap.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iter_swap.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _ForwardIterator1, class _ForwardIterator2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)

    noexcept(noexcept(swap(*std::declval<_ForwardIterator1>(), *std::declval<_ForwardIterator2>()))) {
  swap(*__a, *__b);
}

}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iter_swap.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_iterator_concept.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_iterator_concept.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/arithmetic.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/arithmetic.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed_integer.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed_integer.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed_integer.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed_integer.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed_integer.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed_integer.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed_integer.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed_integer.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp> struct __libcpp_is_signed_integer : public false_type {};
template <> struct __libcpp_is_signed_integer<signed char> : public true_type {};
template <> struct __libcpp_is_signed_integer<signed short> : public true_type {};
template <> struct __libcpp_is_signed_integer<signed int> : public true_type {};
template <> struct __libcpp_is_signed_integer<signed long> : public true_type {};
template <> struct __libcpp_is_signed_integer<signed long long> : public true_type {};

template <> struct __libcpp_is_signed_integer<__int128_t> : public true_type {};



}}
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_signed_integer.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/arithmetic.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned_integer.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned_integer.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned_integer.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned_integer.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned_integer.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned_integer.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned_integer.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned_integer.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp> struct __libcpp_is_unsigned_integer : public false_type {};
template <> struct __libcpp_is_unsigned_integer<unsigned char> : public true_type {};
template <> struct __libcpp_is_unsigned_integer<unsigned short> : public true_type {};
template <> struct __libcpp_is_unsigned_integer<unsigned int> : public true_type {};
template <> struct __libcpp_is_unsigned_integer<unsigned long> : public true_type {};
template <> struct __libcpp_is_unsigned_integer<unsigned long long> : public true_type {};

template <> struct __libcpp_is_unsigned_integer<__uint128_t> : public true_type {};



}}
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unsigned_integer.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/arithmetic.h" 2 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/arithmetic.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/arithmetic.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/arithmetic.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/arithmetic.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/arithmetic.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/arithmetic.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/arithmetic.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 54 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/arithmetic.h" 3
}}
# 54 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/arithmetic.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/assignable.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/assignable.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/assignable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/assignable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/assignable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/assignable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/assignable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/assignable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/assignable.h" 3
}}
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/assignable.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/constructible.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/constructible.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/destructible.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/destructible.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/destructible.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/destructible.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/destructible.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/destructible.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/destructible.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/destructible.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/destructible.h" 3
}}
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/destructible.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/constructible.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/constructible.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/constructible.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/constructible.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/constructible.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/constructible.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/constructible.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/constructible.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/constructible.h" 3
}}
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/constructible.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/copyable.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/copyable.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/movable.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/movable.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/swappable.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/swappable.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/class_or_enum.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/class_or_enum.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/class_or_enum.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/class_or_enum.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/class_or_enum.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/class_or_enum.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/class_or_enum.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/class_or_enum.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/class_or_enum.h" 3
}}
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/class_or_enum.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/swappable.h" 2 3







# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exchange.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exchange.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exchange.h" 2 3

#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exchange.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exchange.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exchange.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exchange.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exchange.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exchange.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _T1, class _T2 = _T1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _T1 exchange(_T1& __obj, _T2&& __new_value) noexcept(
    is_nothrow_move_constructible<_T1>::value && is_nothrow_assignable<_T1&, _T2>::value) {
  _T1 __old_value = std::move(__obj);
  __obj = std::forward<_T2>(__new_value);
  return __old_value;
}


}}
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exchange.h" 3
#pragma clang diagnostic pop
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/swappable.h" 2 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/swappable.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/swappable.h" 2 3

#pragma clang diagnostic push
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/swappable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/swappable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/swappable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/swappable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/swappable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/swappable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 119 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/swappable.h" 3
}}
# 119 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/swappable.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/movable.h" 2 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/movable.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/movable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/movable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/movable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/movable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/movable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/movable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/movable.h" 3
}}
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/movable.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/copyable.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/copyable.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/copyable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/copyable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/copyable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/copyable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/copyable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/copyable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/copyable.h" 3
}}
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/copyable.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/derived_from.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/derived_from.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/derived_from.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/derived_from.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/derived_from.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/derived_from.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/derived_from.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/derived_from.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/derived_from.h" 3
}}
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/derived_from.h" 3
#pragma clang diagnostic pop
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/invocable.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/invocable.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/invocable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/invocable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/invocable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/invocable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/invocable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/invocable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/invocable.h" 3
}}
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/invocable.h" 3
#pragma clang diagnostic pop
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/predicate.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/predicate.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/predicate.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/predicate.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/predicate.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/predicate.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/predicate.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/predicate.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/predicate.h" 3
}}
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/predicate.h" 3
#pragma clang diagnostic pop
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/regular.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/regular.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/semiregular.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/semiregular.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/semiregular.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/semiregular.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/semiregular.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/semiregular.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/semiregular.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/semiregular.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/semiregular.h" 3
}}
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/semiregular.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/regular.h" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/regular.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/regular.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/regular.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/regular.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/regular.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/regular.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/regular.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/regular.h" 3
}}
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/regular.h" 3
#pragma clang diagnostic pop
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/relation.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/relation.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/relation.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/relation.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/relation.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/relation.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/relation.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/relation.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/relation.h" 3
}}
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/relation.h" 3
#pragma clang diagnostic pop
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 2 3





# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/incrementable_traits.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/incrementable_traits.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_primary_template.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_primary_template.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_valid_expansion.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_valid_expansion.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_valid_expansion.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_valid_expansion.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_valid_expansion.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_valid_expansion.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_valid_expansion.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_valid_expansion.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <template <class...> class _Templ, class... _Args, class = _Templ<_Args...> >
true_type __sfinae_test_impl(int);
template <template <class...> class, class...>
false_type __sfinae_test_impl(...);

template <template <class...> class _Templ, class... _Args>
using _IsValidExpansion __attribute__((__nodebug__)) = decltype(std::__sfinae_test_impl<_Templ, _Args...>(0));

}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_valid_expansion.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_primary_template.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_primary_template.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_primary_template.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_primary_template.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_primary_template.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_primary_template.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_primary_template.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_primary_template.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
using __test_for_primary_template = __enable_if_t<_IsSame<_Tp, typename _Tp::__primary_template>::value>;

template <class _Tp>
using __is_primary_template = _IsValidExpansion<__test_for_primary_template, _Tp>;

}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_primary_template.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/incrementable_traits.h" 2 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/incrementable_traits.h" 3


#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/incrementable_traits.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/incrementable_traits.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/incrementable_traits.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/incrementable_traits.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/incrementable_traits.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/incrementable_traits.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 77 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/incrementable_traits.h" 3
}}
# 77 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/incrementable_traits.h" 3
#pragma clang diagnostic pop
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_move.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_move.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator_traits.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator_traits.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/pair.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/pair.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/pair.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/pair.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/pair.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/pair.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/pair.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/pair.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class, class>
struct pair;

template <size_t _Ip, class _T1, class _T2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename tuple_element<_Ip, pair<_T1, _T2> >::type&
get(pair<_T1, _T2>&) noexcept;

template <size_t _Ip, class _T1, class _T2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const typename tuple_element<_Ip, pair<_T1, _T2> >::type&
get(const pair<_T1, _T2>&) noexcept;


template <size_t _Ip, class _T1, class _T2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename tuple_element<_Ip, pair<_T1, _T2> >::type&&
get(pair<_T1, _T2>&&) noexcept;

template <size_t _Ip, class _T1, class _T2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const typename tuple_element<_Ip, pair<_T1, _T2> >::type&&
get(const pair<_T1, _T2>&&) noexcept;


}}
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/pair.h" 3
#pragma clang diagnostic pop
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator_traits.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/readable_traits.h" 1 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/readable_traits.h" 3


#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/readable_traits.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/readable_traits.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/readable_traits.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/readable_traits.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/readable_traits.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/readable_traits.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 79 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/readable_traits.h" 3
}}
# 79 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/readable_traits.h" 3
#pragma clang diagnostic pop
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator_traits.h" 2 3
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator_traits.h" 3


#pragma clang diagnostic push
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator_traits.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator_traits.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator_traits.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator_traits.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator_traits.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator_traits.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 64 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator_traits.h" 3
template <class _Iter>
struct iterator_traits;

struct input_iterator_tag {};
struct output_iterator_tag {};
struct forward_iterator_tag : public input_iterator_tag {};
struct bidirectional_iterator_tag : public forward_iterator_tag {};
struct random_access_iterator_tag : public bidirectional_iterator_tag {};




template <class _Iter>
struct __iter_traits_cache {
  using type = _If< __is_primary_template<iterator_traits<_Iter> >::value, _Iter, iterator_traits<_Iter> >;
};
template <class _Iter>
using _ITER_TRAITS = typename __iter_traits_cache<_Iter>::type;

struct __iter_concept_concept_test {
  template <class _Iter>
  using _Apply = typename _ITER_TRAITS<_Iter>::iterator_concept;
};
struct __iter_concept_category_test {
  template <class _Iter>
  using _Apply = typename _ITER_TRAITS<_Iter>::iterator_category;
};
struct __iter_concept_random_fallback {
  template <class _Iter>
  using _Apply = __enable_if_t< __is_primary_template<iterator_traits<_Iter> >::value, random_access_iterator_tag >;
};

template <class _Iter, class _Tester>
struct __test_iter_concept : _IsValidExpansion<_Tester::template _Apply, _Iter>, _Tester {};

template <class _Iter>
struct __iter_concept_cache {
  using type = _Or< __test_iter_concept<_Iter, __iter_concept_concept_test>,
                    __test_iter_concept<_Iter, __iter_concept_category_test>,
                    __test_iter_concept<_Iter, __iter_concept_random_fallback> >;
};

template <class _Iter>
using _ITER_CONCEPT = typename __iter_concept_cache<_Iter>::type::template _Apply<_Iter>;

template <class _Tp>
struct __has_iterator_typedefs {
private:
  template <class _Up>
  static false_type __test(...);
  template <class _Up>
  static true_type
  __test(__void_t<typename _Up::iterator_category>* = nullptr,
         __void_t<typename _Up::difference_type>* = nullptr,
         __void_t<typename _Up::value_type>* = nullptr,
         __void_t<typename _Up::reference>* = nullptr,
         __void_t<typename _Up::pointer>* = nullptr);

public:
  static const bool value = decltype(__test<_Tp>(nullptr, nullptr, nullptr, nullptr, nullptr))::value;
};

template <class _Tp>
struct __has_iterator_category {
private:
  template <class _Up>
  static false_type __test(...);
  template <class _Up>
  static true_type __test(typename _Up::iterator_category* = nullptr);

public:
  static const bool value = decltype(__test<_Tp>(nullptr))::value;
};

template <class _Tp>
struct __has_iterator_concept {
private:
  template <class _Up>
  static false_type __test(...);
  template <class _Up>
  static true_type __test(typename _Up::iterator_concept* = nullptr);

public:
  static const bool value = decltype(__test<_Tp>(nullptr))::value;
};
# 370 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator_traits.h" 3
template <class _Iter, bool>
struct __iterator_traits {};

template <class _Iter, bool>
struct __iterator_traits_impl {};

template <class _Iter>
struct __iterator_traits_impl<_Iter, true> {
  typedef typename _Iter::difference_type difference_type;
  typedef typename _Iter::value_type value_type;
  typedef typename _Iter::pointer pointer;
  typedef typename _Iter::reference reference;
  typedef typename _Iter::iterator_category iterator_category;
};

template <class _Iter>
struct __iterator_traits<_Iter, true>
    : __iterator_traits_impl< _Iter,
                              is_convertible<typename _Iter::iterator_category, input_iterator_tag>::value ||
                                  is_convertible<typename _Iter::iterator_category, output_iterator_tag>::value > {};






template <class _Iter>
struct iterator_traits : __iterator_traits<_Iter, __has_iterator_typedefs<_Iter>::value> {
  using __primary_template = iterator_traits;
};


template <class _Tp>



struct iterator_traits<_Tp*> {
  typedef ptrdiff_t difference_type;
  typedef __remove_cv_t<_Tp> value_type;
  typedef _Tp* pointer;
  typedef _Tp& reference;
  typedef random_access_iterator_tag iterator_category;



};

template <class _Tp, class _Up, bool = __has_iterator_category<iterator_traits<_Tp> >::value>
struct __has_iterator_category_convertible_to : is_convertible<typename iterator_traits<_Tp>::iterator_category, _Up> {
};

template <class _Tp, class _Up>
struct __has_iterator_category_convertible_to<_Tp, _Up, false> : false_type {};

template <class _Tp, class _Up, bool = __has_iterator_concept<_Tp>::value>
struct __has_iterator_concept_convertible_to : is_convertible<typename _Tp::iterator_concept, _Up> {};

template <class _Tp, class _Up>
struct __has_iterator_concept_convertible_to<_Tp, _Up, false> : false_type {};

template <class _Tp>
using __has_input_iterator_category = __has_iterator_category_convertible_to<_Tp, input_iterator_tag>;

template <class _Tp>
using __has_forward_iterator_category = __has_iterator_category_convertible_to<_Tp, forward_iterator_tag>;

template <class _Tp>
using __has_bidirectional_iterator_category = __has_iterator_category_convertible_to<_Tp, bidirectional_iterator_tag>;

template <class _Tp>
using __has_random_access_iterator_category = __has_iterator_category_convertible_to<_Tp, random_access_iterator_tag>;
# 455 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator_traits.h" 3
template <class _Tp>
struct __libcpp_is_contiguous_iterator : false_type {};



template <class _Up>
struct __libcpp_is_contiguous_iterator<_Up*> : true_type {};

template <class _Iter>
class __wrap_iter;

template <class _Tp>
using __has_exactly_input_iterator_category =
    integral_constant<bool,
                      __has_iterator_category_convertible_to<_Tp, input_iterator_tag>::value &&
                          !__has_iterator_category_convertible_to<_Tp, forward_iterator_tag>::value>;

template <class _Tp>
using __has_exactly_forward_iterator_category =
    integral_constant<bool,
                      __has_iterator_category_convertible_to<_Tp, forward_iterator_tag>::value &&
                          !__has_iterator_category_convertible_to<_Tp, bidirectional_iterator_tag>::value>;

template <class _Tp>
using __has_exactly_bidirectional_iterator_category =
    integral_constant<bool,
                      __has_iterator_category_convertible_to<_Tp, bidirectional_iterator_tag>::value &&
                          !__has_iterator_category_convertible_to<_Tp, random_access_iterator_tag>::value>;

template <class _InputIterator>
using __iter_value_type = typename iterator_traits<_InputIterator>::value_type;

template <class _InputIterator>
using __iter_key_type = __remove_const_t<typename iterator_traits<_InputIterator>::value_type::first_type>;

template <class _InputIterator>
using __iter_mapped_type = typename iterator_traits<_InputIterator>::value_type::second_type;

template <class _InputIterator>
using __iter_to_alloc_type =
    pair<const typename iterator_traits<_InputIterator>::value_type::first_type,
         typename iterator_traits<_InputIterator>::value_type::second_type>;

template <class _Iter>
using __iterator_category_type = typename iterator_traits<_Iter>::iterator_category;

template <class _Iter>
using __iterator_pointer_type = typename iterator_traits<_Iter>::pointer;

template <class _Iter>
using __iter_diff_t = typename iterator_traits<_Iter>::difference_type;

template <class _Iter>
using __iter_reference = typename iterator_traits<_Iter>::reference;
# 526 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator_traits.h" 3
}}
# 526 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator_traits.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_move.h" 2 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_move.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_move.h" 2 3

#pragma clang diagnostic push
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_move.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_move.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_move.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_move.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_move.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_move.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 99 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_move.h" 3
}}
# 99 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_move.h" 3
#pragma clang diagnostic pop
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 2 3
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 3


#pragma clang diagnostic push
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 247 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 3
template <class _Tp>
using __has_random_access_iterator_category_or_concept



    = __has_random_access_iterator_category<_Tp>;


}}
# 255 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/concepts.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_iterator_concept.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_iterator_concept.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_iterator_concept.h" 2 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/advance.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/advance.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/convert_to_integral.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/convert_to_integral.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/convert_to_integral.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/convert_to_integral.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/convert_to_integral.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/convert_to_integral.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/convert_to_integral.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/convert_to_integral.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int __convert_to_integral(int __val) { return __val; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr unsigned __convert_to_integral(unsigned __val) { return __val; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr long __convert_to_integral(long __val) { return __val; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr unsigned long __convert_to_integral(unsigned long __val) {
  return __val;
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr long long __convert_to_integral(long long __val) { return __val; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr unsigned long long __convert_to_integral(unsigned long long __val) {
  return __val;
}

template <typename _Fp, __enable_if_t<is_floating_point<_Fp>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr long long __convert_to_integral(_Fp __val) {
  return __val;
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __int128_t __convert_to_integral(__int128_t __val) { return __val; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __uint128_t __convert_to_integral(__uint128_t __val) { return __val; }


template <class _Tp, bool = is_enum<_Tp>::value>
struct __sfinae_underlying_type {
  typedef typename underlying_type<_Tp>::type type;
  typedef decltype(((type)1) + 0) __promoted_type;
};

template <class _Tp>
struct __sfinae_underlying_type<_Tp, false> {};

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename __sfinae_underlying_type<_Tp>::__promoted_type
__convert_to_integral(_Tp __val) {
  return __val;
}

}}
# 66 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/convert_to_integral.h" 3
#pragma clang diagnostic pop
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/advance.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/unreachable.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/unreachable.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/unreachable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/unreachable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/unreachable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/unreachable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/unreachable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/unreachable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

[[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline void __libcpp_unreachable() {
  ((void)0);
  __builtin_unreachable();
}







}}
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/unreachable.h" 3
#pragma clang diagnostic pop
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/advance.h" 2 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/advance.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/advance.h" 2 3

#pragma clang diagnostic push
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/advance.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/advance.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/advance.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/advance.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/advance.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/advance.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__advance(_InputIter& __i, typename iterator_traits<_InputIter>::difference_type __n, input_iterator_tag) {
  for (; __n > 0; --__n)
    ++__i;
}

template <class _BiDirIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__advance(_BiDirIter& __i, typename iterator_traits<_BiDirIter>::difference_type __n, bidirectional_iterator_tag) {
  if (__n >= 0)
    for (; __n > 0; --__n)
      ++__i;
  else
    for (; __n < 0; ++__n)
      --__i;
}

template <class _RandIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__advance(_RandIter& __i, typename iterator_traits<_RandIter>::difference_type __n, random_access_iterator_tag) {
  __i += __n;
}

template < class _InputIter,
           class _Distance,
           class _IntegralDistance = decltype(std::__convert_to_integral(std::declval<_Distance>())),
           __enable_if_t<is_integral<_IntegralDistance>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void advance(_InputIter& __i, _Distance __orig_n) {
  typedef typename iterator_traits<_InputIter>::difference_type _Difference;
  _Difference __n = static_cast<_Difference>(std::__convert_to_integral(__orig_n));

  ((void)0);

  std::__advance(__i, __n, typename iterator_traits<_InputIter>::iterator_category());
}
# 201 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/advance.h" 3
}}
# 201 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/advance.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/distance.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/distance.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/access.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/access.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_borrowed_range.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_borrowed_range.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_borrowed_range.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_borrowed_range.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_borrowed_range.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_borrowed_range.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_borrowed_range.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_borrowed_range.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_borrowed_range.h" 3
}}
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_borrowed_range.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/access.h" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/auto_cast.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/auto_cast.h" 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/access.h" 2 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/access.h" 3


#pragma clang diagnostic push
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/access.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/access.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/access.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/access.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/access.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/access.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 208 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/access.h" 3
}}
# 208 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/access.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/distance.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/concepts.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/concepts.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/data.h" 1 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/data.h" 3


#pragma clang diagnostic push
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/data.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/data.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/data.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/data.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/data.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/data.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 100 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/data.h" 3
}}
# 100 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/data.h" 3
#pragma clang diagnostic pop
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/concepts.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_view.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_view.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_view.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_view.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_view.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_view.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_view.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_view.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_view.h" 3
}}
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/enable_view.h" 3
#pragma clang diagnostic pop
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/concepts.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/size.h" 1 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/size.h" 3


#pragma clang diagnostic push
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/size.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/size.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/size.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/size.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/size.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/size.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 135 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/size.h" 3
}}
# 135 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/size.h" 3
#pragma clang diagnostic pop
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/concepts.h" 2 3





# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/initializer_list" 1 3
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/initializer_list" 3


namespace std
{



template <class _Ep>
class initializer_list {
  const _Ep* __begin_;
  size_t __size_;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr initializer_list(const _Ep* __b, size_t __s) noexcept
      : __begin_(__b),
        __size_(__s) {}

public:
  typedef _Ep value_type;
  typedef const _Ep& reference;
  typedef const _Ep& const_reference;
  typedef size_t size_type;

  typedef const _Ep* iterator;
  typedef const _Ep* const_iterator;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr initializer_list() noexcept : __begin_(nullptr), __size_(0) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr size_t size() const noexcept { return __size_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Ep* begin() const noexcept { return __begin_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Ep* end() const noexcept { return __begin_ + __size_; }
};

template <class _Ep>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Ep* begin(initializer_list<_Ep> __il) noexcept {
  return __il.begin();
}

template <class _Ep>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Ep* end(initializer_list<_Ep> __il) noexcept {
  return __il.end();
}



}
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/concepts.h" 2 3
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/concepts.h" 3


#pragma clang diagnostic push
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/concepts.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 140 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/concepts.h" 3
}}
# 140 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/concepts.h" 3
#pragma clang diagnostic pop
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/distance.h" 2 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/distance.h" 3


#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/distance.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/distance.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/distance.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/distance.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/distance.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/distance.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename iterator_traits<_InputIter>::difference_type
__distance(_InputIter __first, _InputIter __last, input_iterator_tag) {
  typename iterator_traits<_InputIter>::difference_type __r(0);
  for (; __first != __last; ++__first)
    ++__r;
  return __r;
}

template <class _RandIter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename iterator_traits<_RandIter>::difference_type
__distance(_RandIter __first, _RandIter __last, random_access_iterator_tag) {
  return __last - __first;
}

template <class _InputIter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename iterator_traits<_InputIter>::difference_type
distance(_InputIter __first, _InputIter __last) {
  return std::__distance(__first, __last, typename iterator_traits<_InputIter>::iterator_category());
}
# 97 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/distance.h" 3
}}
# 97 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/distance.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_swap.h" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_swap.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_swap.h" 2 3

#pragma clang diagnostic push
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_swap.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_swap.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_swap.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_swap.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_swap.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_swap.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 104 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_swap.h" 3
}}
# 104 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iter_swap.h" 3
#pragma clang diagnostic pop
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/next.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/next.h" 3


#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/next.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/next.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/next.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/next.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/next.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/next.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIter, __enable_if_t<__has_input_iterator_category<_InputIter>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _InputIter
next(_InputIter __x, typename iterator_traits<_InputIter>::difference_type __n = 1) {


  ((void)0);


  std::advance(__x, __n);
  return __x;
}
# 81 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/next.h" 3
}}
# 81 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/next.h" 3
#pragma clang diagnostic pop
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/prev.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/prev.h" 3


#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/prev.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/prev.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/prev.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/prev.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/prev.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/prev.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIter, __enable_if_t<__has_input_iterator_category<_InputIter>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _InputIter
prev(_InputIter __x, typename iterator_traits<_InputIter>::difference_type __n = 1) {


  ((void)0);

  std::advance(__x, -__n);
  return __x;
}
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/prev.h" 3
}}
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/prev.h" 3
#pragma clang diagnostic pop
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 2 3
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 2 3

#pragma clang diagnostic push
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy>
struct _IterOps;
# 70 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 3
struct _ClassicAlgPolicy {};

template <>
struct _IterOps<_ClassicAlgPolicy> {
  template <class _Iter>
  using __value_type = typename iterator_traits<_Iter>::value_type;

  template <class _Iter>
  using __iterator_category = typename iterator_traits<_Iter>::iterator_category;

  template <class _Iter>
  using __difference_type = typename iterator_traits<_Iter>::difference_type;


  template <class _Iter, class _Distance>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr static void advance(_Iter& __iter, _Distance __count) {
    std::advance(__iter, __count);
  }


  template <class _Iter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr static typename iterator_traits<_Iter>::difference_type
  distance(_Iter __first, _Iter __last) {
    return std::distance(__first, __last);
  }

  template <class _Iter>
  using __deref_t = decltype(*std::declval<_Iter&>());

  template <class _Iter>
  using __move_t = decltype(std::move(*std::declval<_Iter&>()));

  template <class _Iter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr static void __validate_iter_reference() {
    static_assert(
        is_same<__deref_t<_Iter>, typename iterator_traits<__remove_cvref_t<_Iter> >::reference>::value,
        "It looks like your iterator's `iterator_traits<It>::reference` does not match the return type of "
        "dereferencing the iterator, i.e., calling `*it`. This is undefined behavior according to [input.iterators] "
        "and can lead to dangling reference issues at runtime, so we are flagging this.");
  }


  template <class _Iter, __enable_if_t<is_reference<__deref_t<_Iter> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr static


      __move_t<_Iter>
      __iter_move(_Iter&& __i) {
    __validate_iter_reference<_Iter>();

    return std::move(*std::forward<_Iter>(__i));
  }

  template <class _Iter, __enable_if_t<!is_reference<__deref_t<_Iter> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr static



      __deref_t<_Iter>
      __iter_move(_Iter&& __i) {
    __validate_iter_reference<_Iter>();

    return *std::forward<_Iter>(__i);
  }


  template <class _Iter1, class _Iter2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr static void iter_swap(_Iter1&& __a, _Iter2&& __b) {
    std::iter_swap(std::forward<_Iter1>(__a), std::forward<_Iter2>(__b));
  }


  template <class _Iterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr _Iterator next(_Iterator, _Iterator __last) {
    return __last;
  }

  template <class _Iter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr __remove_cvref_t<_Iter>
  next(_Iter&& __it, typename iterator_traits<__remove_cvref_t<_Iter> >::difference_type __n = 1) {
    return std::next(std::forward<_Iter>(__it), __n);
  }


  template <class _Iter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr __remove_cvref_t<_Iter>
  prev(_Iter&& __iter, typename iterator_traits<__remove_cvref_t<_Iter> >::difference_type __n = 1) {
    return std::prev(std::forward<_Iter>(__iter), __n);
  }

  template <class _Iter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr void __advance_to(_Iter& __first, _Iter __last) {
    __first = __last;
  }


  template <class _Iter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr static __difference_type<_Iter>
  __advance_to(_Iter& __iter, __difference_type<_Iter> __count, const _Iter& __sentinel) {
    return _IterOps::__advance_to(__iter, __count, __sentinel, typename iterator_traits<_Iter>::iterator_category());
  }

private:

  template <class _InputIter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr static __difference_type<_InputIter> __advance_to(
      _InputIter& __iter, __difference_type<_InputIter> __count, const _InputIter& __sentinel, input_iterator_tag) {
    __difference_type<_InputIter> __dist = 0;
    for (; __dist < __count && __iter != __sentinel; ++__dist)
      ++__iter;
    return __count - __dist;
  }


  template <class _BiDirIter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr static __difference_type<_BiDirIter>
  __advance_to(_BiDirIter& __iter,
               __difference_type<_BiDirIter> __count,
               const _BiDirIter& __sentinel,
               bidirectional_iterator_tag) {
    __difference_type<_BiDirIter> __dist = 0;
    if (__count >= 0)
      for (; __dist < __count && __iter != __sentinel; ++__dist)
        ++__iter;
    else
      for (__count = -__count; __dist < __count && __iter != __sentinel; ++__dist)
        --__iter;
    return __count - __dist;
  }


  template <class _RandIter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr static __difference_type<_RandIter>
  __advance_to(_RandIter& __iter,
               __difference_type<_RandIter> __count,
               const _RandIter& __sentinel,
               random_access_iterator_tag) {
    auto __dist = _IterOps::distance(__iter, __sentinel);
    ((void)0);

    if (__count < 0)
      __dist = __dist > __count ? __dist : __count;
    else
      __dist = __dist < __count ? __dist : __count;
    __iter += __dist;
    return __count - __dist;
  }
};

}}
# 219 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/iterator_operations.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_move_common.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_iter.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_iter.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_iter.h" 2 3

#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_iter.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_iter.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_iter.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_iter.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_iter.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_iter.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_iter.h" 3
template <class _Iter, bool = __libcpp_is_contiguous_iterator<_Iter>::value>
struct __unwrap_iter_impl {
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Iter __rewrap(_Iter, _Iter __iter) { return __iter; }
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Iter __unwrap(_Iter __i) noexcept { return __i; }
};





template <class _Iter>
struct __unwrap_iter_impl<_Iter, true> {
  using _ToAddressT = decltype(std::__to_address(std::declval<_Iter>()));

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Iter __rewrap(_Iter __orig_iter, _ToAddressT __unwrapped_iter) {
    return __orig_iter + (__unwrapped_iter - std::__to_address(__orig_iter));
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ToAddressT __unwrap(_Iter __i) noexcept {
    return std::__to_address(__i);
  }
};

template <class _Iter,
          class _Impl = __unwrap_iter_impl<_Iter>,
          __enable_if_t<is_copy_constructible<_Iter>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr decltype(_Impl::__unwrap(std::declval<_Iter>()))
__unwrap_iter(_Iter __i) noexcept {
  return _Impl::__unwrap(__i);
}
# 76 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_iter.h" 3
template <class _OrigIter, class _Iter, class _Impl = __unwrap_iter_impl<_OrigIter> >
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _OrigIter __rewrap_iter(_OrigIter __orig_iter, _Iter __iter) noexcept {
  return _Impl::__rewrap(std::move(__orig_iter), std::move(__iter));
}

}}
# 81 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_iter.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_move_common.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_range.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_range.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/different_from.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/different_from.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/different_from.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/different_from.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/different_from.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/different_from.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/different_from.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/different_from.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/different_from.h" 3
}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__concepts/different_from.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/array.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/array.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/array.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/array.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/array.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/array.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/array.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/array.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, size_t _Size>
struct array;

template <size_t _Ip, class _Tp, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp& get(array<_Tp, _Size>&) noexcept;

template <size_t _Ip, class _Tp, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Tp& get(const array<_Tp, _Size>&) noexcept;


template <size_t _Ip, class _Tp, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp&& get(array<_Tp, _Size>&&) noexcept;

template <size_t _Ip, class _Tp, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Tp&& get(const array<_Tp, _Size>&&) noexcept;


template <class>
struct __is_std_array : false_type {};

template <class _Tp, size_t _Size>
struct __is_std_array<array<_Tp, _Size> > : true_type {};

}}
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/array.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/sfinae_helpers.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/sfinae_helpers.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/make_tuple_types.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/make_tuple_types.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_element.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_element.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_types.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_types.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_types.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_types.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_types.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_types.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_types.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_types.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class... _Tp>
struct __tuple_types {};

}}
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_types.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_element.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_element.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_element.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_element.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_element.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_element.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_element.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_element.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <size_t _Ip, class _Tp>
struct tuple_element;

template <size_t _Ip, class _Tp>
struct tuple_element<_Ip, const _Tp> {
  typedef __attribute__((__nodebug__)) const typename tuple_element<_Ip, _Tp>::type type;
};

template <size_t _Ip, class _Tp>
struct tuple_element<_Ip, volatile _Tp> {
  typedef __attribute__((__nodebug__)) volatile typename tuple_element<_Ip, _Tp>::type type;
};

template <size_t _Ip, class _Tp>
struct tuple_element<_Ip, const volatile _Tp> {
  typedef __attribute__((__nodebug__)) const volatile typename tuple_element<_Ip, _Tp>::type type;
};



template <size_t _Ip, class... _Types>
struct tuple_element<_Ip, __tuple_types<_Types...> > {
  static_assert(_Ip < sizeof...(_Types), "tuple_element index out of range");
  typedef __attribute__((__nodebug__)) __type_pack_element<_Ip, _Types...> type;
};


template <size_t _Ip, class... _Tp>
using tuple_element_t __attribute__((__nodebug__)) = typename tuple_element<_Ip, _Tp...>::type;




}}
# 56 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_element.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/make_tuple_types.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_size.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_size.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_size.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_size.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_size.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_size.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_size.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_size.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct tuple_size;


template <class _Tp, class...>
using __enable_if_tuple_size_imp = _Tp;

template <class _Tp>
struct tuple_size<__enable_if_tuple_size_imp< const _Tp,
                                                                   __enable_if_t<!is_volatile<_Tp>::value>,
                                                                   integral_constant<size_t, sizeof(tuple_size<_Tp>)>>>
    : public integral_constant<size_t, tuple_size<_Tp>::value> {};

template <class _Tp>
struct tuple_size<__enable_if_tuple_size_imp< volatile _Tp,
                                                                   __enable_if_t<!is_const<_Tp>::value>,
                                                                   integral_constant<size_t, sizeof(tuple_size<_Tp>)>>>
    : public integral_constant<size_t, tuple_size<_Tp>::value> {};

template <class _Tp>
struct
tuple_size<__enable_if_tuple_size_imp<const volatile _Tp, integral_constant<size_t, sizeof(tuple_size<_Tp>)>>>
    : public integral_constant<size_t, tuple_size<_Tp>::value> {};
# 60 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_size.h" 3
template <class... _Tp>
struct tuple_size<tuple<_Tp...> > : public integral_constant<size_t, sizeof...(_Tp)> {};

template <class... _Tp>
struct tuple_size<__tuple_types<_Tp...> > : public integral_constant<size_t, sizeof...(_Tp)> {};


template <class _Tp>
inline constexpr size_t tuple_size_v = tuple_size<_Tp>::value;




}}
# 73 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_size.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/make_tuple_types.h" 2 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/make_tuple_types.h" 3




#pragma clang diagnostic push
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/make_tuple_types.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/make_tuple_types.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/make_tuple_types.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/make_tuple_types.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/make_tuple_types.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/make_tuple_types.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {






template <class _TupleTypes, class _TupleIndices>
struct __make_tuple_types_flat;

template <template <class...> class _Tuple, class... _Types, size_t... _Idx>
struct __make_tuple_types_flat<_Tuple<_Types...>, __tuple_indices<_Idx...>> {

  template <class _Tp>
  using __apply_quals __attribute__((__nodebug__)) = __tuple_types<__copy_cvref_t<_Tp, __type_pack_element<_Idx, _Types...>>...>;
};

template <class _Vt, size_t _Np, size_t... _Idx>
struct __make_tuple_types_flat<array<_Vt, _Np>, __tuple_indices<_Idx...>> {
  template <size_t>
  using __value_type = _Vt;
  template <class _Tp>
  using __apply_quals = __tuple_types<__copy_cvref_t<_Tp, __value_type<_Idx>>...>;
};

template <class _Tp,
          size_t _Ep = tuple_size<__libcpp_remove_reference_t<_Tp> >::value,
          size_t _Sp = 0,
          bool _SameSize = (_Ep == tuple_size<__libcpp_remove_reference_t<_Tp> >::value)>
struct __make_tuple_types {
  static_assert(_Sp <= _Ep, "__make_tuple_types input error");
  using _RawTp = __remove_cv_t<__libcpp_remove_reference_t<_Tp> >;
  using _Maker = __make_tuple_types_flat<_RawTp, typename __make_tuple_indices<_Ep, _Sp>::type>;
  using type = typename _Maker::template __apply_quals<_Tp>;
};

template <class... _Types, size_t _Ep>
struct __make_tuple_types<tuple<_Types...>, _Ep, 0, true> {
  typedef __attribute__((__nodebug__)) __tuple_types<_Types...> type;
};

template <class... _Types, size_t _Ep>
struct __make_tuple_types<__tuple_types<_Types...>, _Ep, 0, true> {
  typedef __attribute__((__nodebug__)) __tuple_types<_Types...> type;
};

}}
# 76 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/make_tuple_types.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/sfinae_helpers.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_ext.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_ext.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_ext.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_ext.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_ext.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_ext.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_ext.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_ext.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct __tuple_like_ext : false_type {};

template <class _Tp>
struct __tuple_like_ext<const _Tp> : public __tuple_like_ext<_Tp> {};
template <class _Tp>
struct __tuple_like_ext<volatile _Tp> : public __tuple_like_ext<_Tp> {};
template <class _Tp>
struct __tuple_like_ext<const volatile _Tp> : public __tuple_like_ext<_Tp> {};


template <class... _Tp>
struct __tuple_like_ext<tuple<_Tp...> > : true_type {};


template <class _T1, class _T2>
struct __tuple_like_ext<pair<_T1, _T2> > : true_type {};

template <class _Tp, size_t _Size>
struct __tuple_like_ext<array<_Tp, _Size> > : true_type {};

template <class... _Tp>
struct __tuple_like_ext<__tuple_types<_Tp...> > : true_type {};

}}
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_ext.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/sfinae_helpers.h" 2 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/sfinae_helpers.h" 3


#pragma clang diagnostic push
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/sfinae_helpers.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/sfinae_helpers.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/sfinae_helpers.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/sfinae_helpers.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/sfinae_helpers.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/sfinae_helpers.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



struct __tuple_sfinae_base {
  template <template <class, class...> class _Trait, class... _LArgs, class... _RArgs>
  static auto __do_test(__tuple_types<_LArgs...>,
                        __tuple_types<_RArgs...>) -> __all<__enable_if_t<_Trait<_LArgs, _RArgs>::value, bool>{true}...>;
  template <template <class...> class>
  static auto __do_test(...) -> false_type;

  template <class _FromArgs, class _ToArgs>
  using __constructible = decltype(__do_test<is_constructible>(_ToArgs{}, _FromArgs{}));
};



template <class _Tp,
          class _Up,
          bool = __tuple_like_ext<__libcpp_remove_reference_t<_Tp> >::value,
          bool = __tuple_like_ext<_Up>::value>
struct __tuple_constructible : public false_type {};

template <class _Tp, class _Up>
struct __tuple_constructible<_Tp, _Up, true, true>
    : public __tuple_sfinae_base::__constructible< typename __make_tuple_types<_Tp>::type,
                                                   typename __make_tuple_types<_Up>::type > {};

template <size_t _Ip, class... _Tp>
struct tuple_element<_Ip, tuple<_Tp...> > {
  typedef __attribute__((__nodebug__)) typename tuple_element<_Ip, __tuple_types<_Tp...> >::type type;
};

struct __attribute__((__visibility__("default"))) __check_tuple_constructor_fail {
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __enable_explicit_default() { return false; }
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __enable_implicit_default() { return false; }
  template <class...>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __enable_explicit() {
    return false;
  }
  template <class...>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __enable_implicit() {
    return false;
  }
  template <class...>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __enable_assign() {
    return false;
  }
};




template <bool _CanCopy, bool _CanMove>
struct __sfinae_ctor_base {};
template <>
struct __sfinae_ctor_base<false, false> {
  __sfinae_ctor_base() = default;
  __sfinae_ctor_base(__sfinae_ctor_base const&) = delete;
  __sfinae_ctor_base(__sfinae_ctor_base&&) = delete;
  __sfinae_ctor_base& operator=(__sfinae_ctor_base const&) = default;
  __sfinae_ctor_base& operator=(__sfinae_ctor_base&&) = default;
};
template <>
struct __sfinae_ctor_base<true, false> {
  __sfinae_ctor_base() = default;
  __sfinae_ctor_base(__sfinae_ctor_base const&) = default;
  __sfinae_ctor_base(__sfinae_ctor_base&&) = delete;
  __sfinae_ctor_base& operator=(__sfinae_ctor_base const&) = default;
  __sfinae_ctor_base& operator=(__sfinae_ctor_base&&) = default;
};
template <>
struct __sfinae_ctor_base<false, true> {
  __sfinae_ctor_base() = default;
  __sfinae_ctor_base(__sfinae_ctor_base const&) = delete;
  __sfinae_ctor_base(__sfinae_ctor_base&&) = default;
  __sfinae_ctor_base& operator=(__sfinae_ctor_base const&) = default;
  __sfinae_ctor_base& operator=(__sfinae_ctor_base&&) = default;
};

template <bool _CanCopy, bool _CanMove>
struct __sfinae_assign_base {};
template <>
struct __sfinae_assign_base<false, false> {
  __sfinae_assign_base() = default;
  __sfinae_assign_base(__sfinae_assign_base const&) = default;
  __sfinae_assign_base(__sfinae_assign_base&&) = default;
  __sfinae_assign_base& operator=(__sfinae_assign_base const&) = delete;
  __sfinae_assign_base& operator=(__sfinae_assign_base&&) = delete;
};
template <>
struct __sfinae_assign_base<true, false> {
  __sfinae_assign_base() = default;
  __sfinae_assign_base(__sfinae_assign_base const&) = default;
  __sfinae_assign_base(__sfinae_assign_base&&) = default;
  __sfinae_assign_base& operator=(__sfinae_assign_base const&) = default;
  __sfinae_assign_base& operator=(__sfinae_assign_base&&) = delete;
};
template <>
struct __sfinae_assign_base<false, true> {
  __sfinae_assign_base() = default;
  __sfinae_assign_base(__sfinae_assign_base const&) = default;
  __sfinae_assign_base(__sfinae_assign_base&&) = default;
  __sfinae_assign_base& operator=(__sfinae_assign_base const&) = delete;
  __sfinae_assign_base& operator=(__sfinae_assign_base&&) = default;
};


}}
# 140 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/sfinae_helpers.h" 3
#pragma clang diagnostic pop
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_no_subrange.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_no_subrange.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/complex.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/complex.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/complex.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/complex.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/complex.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/complex.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/complex.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/complex.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
class complex;
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/complex.h" 3
}}
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/complex.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_no_subrange.h" 2 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_no_subrange.h" 3


#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_no_subrange.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_no_subrange.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_no_subrange.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_no_subrange.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_no_subrange.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_no_subrange.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 59 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_no_subrange.h" 3
}}
# 59 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/tuple_like_no_subrange.h" 3
#pragma clang diagnostic pop
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 2 3
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_implicitly_default_constructible.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_implicitly_default_constructible.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_implicitly_default_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_implicitly_default_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_implicitly_default_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_implicitly_default_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_implicitly_default_constructible.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_implicitly_default_constructible.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {






template <class _Tp>
void __test_implicit_default_constructible(_Tp);

template <class _Tp, class = void, class = typename is_default_constructible<_Tp>::type>
struct __is_implicitly_default_constructible : false_type {};

template <class _Tp>
struct __is_implicitly_default_constructible<_Tp,
                                             decltype(std::__test_implicit_default_constructible<_Tp const&>({})),
                                             true_type> : true_type {};

template <class _Tp>
struct __is_implicitly_default_constructible<_Tp,
                                             decltype(std::__test_implicit_default_constructible<_Tp const&>({})),
                                             false_type> : false_type {};


}}
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_implicitly_default_constructible.h" 3
#pragma clang diagnostic pop
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 2 3





# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_relocatable.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_relocatable.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_relocatable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_relocatable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_relocatable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_relocatable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_relocatable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_relocatable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {





template <class _Tp, class = void>
struct __libcpp_is_trivially_relocatable : integral_constant<bool, __is_trivially_relocatable(_Tp)> {};





template <class _Tp>
struct __libcpp_is_trivially_relocatable<_Tp,
                                         __enable_if_t<is_same<_Tp, typename _Tp::__trivially_relocatable>::value> >
    : true_type {};

}}
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_relocatable.h" 3
#pragma clang diagnostic pop
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/unwrap_ref.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/unwrap_ref.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/unwrap_ref.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/unwrap_ref.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/unwrap_ref.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/unwrap_ref.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/unwrap_ref.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/unwrap_ref.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct __unwrap_reference {
  typedef __attribute__((__nodebug__)) _Tp type;
};

template <class _Tp>
struct __unwrap_reference<reference_wrapper<_Tp> > {
  typedef __attribute__((__nodebug__)) _Tp& type;
};
# 46 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/unwrap_ref.h" 3
template <class _Tp>
struct __unwrap_ref_decay



    : __unwrap_reference<__decay_t<_Tp> >

{
};

}}
# 56 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/unwrap_ref.h" 3
#pragma clang diagnostic pop
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 2 3
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 54 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 2 3

#pragma clang diagnostic push
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class, class>
struct __non_trivially_copyable_base {
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __non_trivially_copyable_base() noexcept {}
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  __non_trivially_copyable_base(__non_trivially_copyable_base const&) noexcept {}
};

template <class _T1, class _T2>
struct pair



{
  using first_type = _T1;
  using second_type = _T2;

  _T1 first;
  _T2 second;

  using __trivially_relocatable =
      __conditional_t<__libcpp_is_trivially_relocatable<_T1>::value && __libcpp_is_trivially_relocatable<_T2>::value,
                      pair,
                      void>;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair(pair const&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair(pair&&) = default;
# 111 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
  struct __has_defaulted_members {
    static const bool value = false;
  };
# 144 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
  struct _CheckArgs {
    template <int&...>
    static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __enable_implicit_default() {
      return __is_implicitly_default_constructible<_T1>::value && __is_implicitly_default_constructible<_T2>::value;
    }

    template <int&...>
    static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __enable_default() {
      return is_default_constructible<_T1>::value && is_default_constructible<_T2>::value;
    }

    template <class _U1, class _U2>
    static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __is_pair_constructible() {
      return is_constructible<first_type, _U1>::value && is_constructible<second_type, _U2>::value;
    }

    template <class _U1, class _U2>
    static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __is_implicit() {
      return is_convertible<_U1, first_type>::value && is_convertible<_U2, second_type>::value;
    }
  };

  template <bool _MaybeEnable>
  using _CheckArgsDep __attribute__((__nodebug__)) =
      typename conditional< _MaybeEnable, _CheckArgs, __check_tuple_constructor_fail>::type;

  template <bool _Dummy = true, __enable_if_t<_CheckArgsDep<_Dummy>::__enable_default(), int> = 0>
  explicit(!_CheckArgsDep<_Dummy>::__enable_implicit_default()) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair() noexcept(
      is_nothrow_default_constructible<first_type>::value && is_nothrow_default_constructible<second_type>::value)
      : first(), second() {}

  template <bool _Dummy = true,
            __enable_if_t<_CheckArgsDep<_Dummy>::template __is_pair_constructible<_T1 const&, _T2 const&>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  constexpr explicit(!_CheckArgsDep<_Dummy>::template __is_implicit<_T1 const&, _T2 const&>())
      pair(_T1 const& __t1, _T2 const& __t2) noexcept(is_nothrow_copy_constructible<first_type>::value &&
                                                      is_nothrow_copy_constructible<second_type>::value)
      : first(__t1), second(__t2) {}

  template <




      class _U1,
      class _U2,

      __enable_if_t<_CheckArgs::template __is_pair_constructible<_U1, _U2>(), int> = 0 >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit(!_CheckArgs::template __is_implicit<_U1, _U2>())
      pair(_U1&& __u1, _U2&& __u2) noexcept(is_nothrow_constructible<first_type, _U1>::value &&
                                            is_nothrow_constructible<second_type, _U2>::value)
      : first(std::forward<_U1>(__u1)), second(std::forward<_U2>(__u2)) {
  }
# 206 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
  template <class _U1,
            class _U2,
            __enable_if_t<_CheckArgs::template __is_pair_constructible<_U1 const&, _U2 const&>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  constexpr explicit(!_CheckArgs::template __is_implicit<_U1 const&, _U2 const&>())
      pair(pair<_U1, _U2> const& __p) noexcept(is_nothrow_constructible<first_type, _U1 const&>::value &&
                                               is_nothrow_constructible<second_type, _U2 const&>::value)
      : first(__p.first), second(__p.second) {}

  template <class _U1, class _U2, __enable_if_t<_CheckArgs::template __is_pair_constructible<_U1, _U2>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit(!_CheckArgs::template __is_implicit<_U1, _U2>())
      pair(pair<_U1, _U2>&& __p) noexcept(is_nothrow_constructible<first_type, _U1&&>::value &&
                                          is_nothrow_constructible<second_type, _U2&&>::value)
      : first(std::forward<_U1>(__p.first)), second(std::forward<_U2>(__p.second)) {}
# 250 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
  template <class... _Args1, class... _Args2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  pair(piecewise_construct_t __pc, tuple<_Args1...> __first_args, tuple<_Args2...> __second_args) noexcept(
      is_nothrow_constructible<first_type, _Args1...>::value && is_nothrow_constructible<second_type, _Args2...>::value)
      : pair(__pc,
             __first_args,
             __second_args,
             typename __make_tuple_indices<sizeof...(_Args1)>::type(),
             typename __make_tuple_indices<sizeof...(_Args2) >::type()) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair&
  operator=(__conditional_t<!__has_defaulted_members::value && is_copy_assignable<first_type>::value &&
                                is_copy_assignable<second_type>::value,
                            pair,
                            __nat> const& __p) noexcept(is_nothrow_copy_assignable<first_type>::value &&
                                                        is_nothrow_copy_assignable<second_type>::value) {
    first = __p.first;
    second = __p.second;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair&
  operator=(__conditional_t<!__has_defaulted_members::value && is_move_assignable<first_type>::value &&
                                is_move_assignable<second_type>::value,
                            pair,
                            __nat>&& __p) noexcept(is_nothrow_move_assignable<first_type>::value &&
                                                   is_nothrow_move_assignable<second_type>::value) {
    first = std::forward<first_type>(__p.first);
    second = std::forward<second_type>(__p.second);
    return *this;
  }

  template <
      class _U1,
      class _U2,
      __enable_if_t<is_assignable<first_type&, _U1 const&>::value && is_assignable<second_type&, _U2 const&>::value,
                    int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair& operator=(pair<_U1, _U2> const& __p) {
    first = __p.first;
    second = __p.second;
    return *this;
  }

  template <class _U1,
            class _U2,
            __enable_if_t<is_assignable<first_type&, _U1>::value && is_assignable<second_type&, _U2>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair& operator=(pair<_U1, _U2>&& __p) {
    first = std::forward<_U1>(__p.first);
    second = std::forward<_U2>(__p.second);
    return *this;
  }
# 367 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
  template <class _U1,
            class _U2,
            __enable_if_t<is_convertible<_U1 const&, _T1>::value && is_convertible<_U2 const&, _T2>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair(tuple<_U1, _U2> const& __p)
      : first(std::get<0>(__p)), second(std::get<1>(__p)) {}

  template < class _U1,
             class _U2,
             __enable_if_t<is_constructible<_T1, _U1 const&>::value && is_constructible<_T2, _U2 const&>::value &&
                               !(is_convertible<_U1 const&, _T1>::value && is_convertible<_U2 const&, _T2>::value),
                           int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit pair(tuple<_U1, _U2> const& __p)
      : first(std::get<0>(__p)), second(std::get<1>(__p)) {}

  template <class _U1,
            class _U2,
            __enable_if_t<is_convertible<_U1, _T1>::value && is_convertible<_U2, _T2>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair(tuple<_U1, _U2>&& __p)
      : first(std::get<0>(std::move(__p))), second(std::get<1>(std::move(__p))) {}

  template <class _U1,
            class _U2,
            __enable_if_t<is_constructible<_T1, _U1>::value && is_constructible<_T2, _U2>::value &&
                          !(is_convertible<_U1, _T1>::value && is_convertible<_U2, _T2>::value) > = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit pair(tuple<_U1, _U2>&& __p)
      : first(std::get<0>(std::move(__p))), second(std::get<1>(std::move(__p))) {}

  template <class _U1,
            class _U2,
            __enable_if_t<is_assignable<_T1&, _U1 const&>::value && is_assignable<_T2&, _U2 const&>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair& operator=(tuple<_U1, _U2> const& __p) {
    first = std::get<0>(__p);
    second = std::get<1>(__p);
    return *this;
  }

  template <class _U1,
            class _U2,
            __enable_if_t<is_assignable<_T1&, _U1&&>::value && is_assignable<_T2&, _U2&&>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair& operator=(tuple<_U1, _U2>&& __p) {
    first = std::get<0>(std::move(__p));
    second = std::get<1>(std::move(__p));
    return *this;
  }


  template <class _Up,
            __enable_if_t<is_convertible<_Up const&, _T1>::value && is_convertible<_Up const&, _T2>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair(array<_Up, 2> const& __p) : first(__p[0]), second(__p[1]) {}

  template <class _Up,
            __enable_if_t<is_constructible<_T1, _Up const&>::value && is_constructible<_T2, _Up const&>::value &&
                              !(is_convertible<_Up const&, _T1>::value && is_convertible<_Up const&, _T2>::value),
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit pair(array<_Up, 2> const& __p)
      : first(__p[0]), second(__p[1]) {}

  template <class _Up, __enable_if_t< is_convertible<_Up, _T1>::value && is_convertible<_Up, _T2>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair(array<_Up, 2>&& __p)
      : first(std::move(__p)[0]), second(std::move(__p)[1]) {}

  template <class _Up,
            __enable_if_t<is_constructible<_T1, _Up>::value && is_constructible<_T2, _Up>::value &&
                              !(is_convertible<_Up, _T1>::value && is_convertible<_Up, _T2>::value),
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit pair(array<_Up, 2>&& __p)
      : first(std::move(__p)[0]), second(std::move(__p)[1]) {}

  template <class _Up,
            __enable_if_t<is_assignable<_T1&, _Up const&>::value && is_assignable<_T2&, _Up const&>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair& operator=(array<_Up, 2> const& __p) {
    first = std::get<0>(__p);
    second = std::get<1>(__p);
    return *this;
  }

  template <class _Up, __enable_if_t<is_assignable<_T1&, _Up>::value && is_assignable<_T2&, _Up>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair& operator=(array<_Up, 2>&& __p) {
    first = std::get<0>(std::move(__p));
    second = std::get<1>(std::move(__p));
    return *this;
  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(pair& __p)
      noexcept(__is_nothrow_swappable_v<first_type>&& __is_nothrow_swappable_v<second_type>) {
    using std::swap;
    swap(first, __p.first);
    swap(second, __p.second);
  }
# 468 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
private:

  template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  pair(piecewise_construct_t,
       tuple<_Args1...>& __first_args,
       tuple<_Args2...>& __second_args,
       __tuple_indices<_I1...>,
       __tuple_indices<_I2...>)
      : first(std::forward<_Args1>(std::get<_I1>(__first_args))...),
        second(std::forward<_Args2>(std::get<_I2>(__second_args))...) {}

};


template <class _T1, class _T2>
pair(_T1, _T2) -> pair<_T1, _T2>;




template <class _T1, class _T2, class _U1, class _U2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator==(const pair<_T1, _T2>& __x, const pair<_U1, _U2>& __y) {
  return __x.first == __y.first && __x.second == __y.second;
}
# 509 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
template <class _T1, class _T2, class _U1, class _U2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator!=(const pair<_T1, _T2>& __x, const pair<_U1, _U2>& __y) {
  return !(__x == __y);
}

template <class _T1, class _T2, class _U1, class _U2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator<(const pair<_T1, _T2>& __x, const pair<_U1, _U2>& __y) {
  return __x.first < __y.first || (!(__y.first < __x.first) && __x.second < __y.second);
}

template <class _T1, class _T2, class _U1, class _U2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator>(const pair<_T1, _T2>& __x, const pair<_U1, _U2>& __y) {
  return __y < __x;
}

template <class _T1, class _T2, class _U1, class _U2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator>=(const pair<_T1, _T2>& __x, const pair<_U1, _U2>& __y) {
  return !(__x < __y);
}

template <class _T1, class _T2, class _U1, class _U2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator<=(const pair<_T1, _T2>& __x, const pair<_U1, _U2>& __y) {
  return !(__y < __x);
}
# 557 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
template <class _T1, class _T2, __enable_if_t<__is_swappable_v<_T1> && __is_swappable_v<_T2>, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(__is_nothrow_swappable_v<_T1>&& __is_nothrow_swappable_v<_T2>) {
  __x.swap(__y);
}
# 572 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
constexpr pair<typename __unwrap_ref_decay<_T1>::type, typename __unwrap_ref_decay<_T2>::type>
make_pair(_T1&& __t1, _T2&& __t2) {
  return pair<typename __unwrap_ref_decay<_T1>::type, typename __unwrap_ref_decay<_T2>::type>(
      std::forward<_T1>(__t1), std::forward<_T2>(__t2));
}

template <class _T1, class _T2>
struct tuple_size<pair<_T1, _T2> > : public integral_constant<size_t, 2> {};

template <size_t _Ip, class _T1, class _T2>
struct tuple_element<_Ip, pair<_T1, _T2> > {
  static_assert(_Ip < 2, "Index out of bounds in std::tuple_element<std::pair<T1, T2>>");
};

template <class _T1, class _T2>
struct tuple_element<0, pair<_T1, _T2> > {
  using type __attribute__((__nodebug__)) = _T1;
};

template <class _T1, class _T2>
struct tuple_element<1, pair<_T1, _T2> > {
  using type __attribute__((__nodebug__)) = _T2;
};

template <size_t _Ip>
struct __get_pair;

template <>
struct __get_pair<0> {
  template <class _T1, class _T2>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _T1& get(pair<_T1, _T2>& __p) noexcept {
    return __p.first;
  }

  template <class _T1, class _T2>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _T1& get(const pair<_T1, _T2>& __p) noexcept {
    return __p.first;
  }

  template <class _T1, class _T2>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _T1&& get(pair<_T1, _T2>&& __p) noexcept {
    return std::forward<_T1>(__p.first);
  }

  template <class _T1, class _T2>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _T1&& get(const pair<_T1, _T2>&& __p) noexcept {
    return std::forward<const _T1>(__p.first);
  }
};

template <>
struct __get_pair<1> {
  template <class _T1, class _T2>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _T2& get(pair<_T1, _T2>& __p) noexcept {
    return __p.second;
  }

  template <class _T1, class _T2>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _T2& get(const pair<_T1, _T2>& __p) noexcept {
    return __p.second;
  }

  template <class _T1, class _T2>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _T2&& get(pair<_T1, _T2>&& __p) noexcept {
    return std::forward<_T2>(__p.second);
  }

  template <class _T1, class _T2>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _T2&& get(const pair<_T1, _T2>&& __p) noexcept {
    return std::forward<const _T2>(__p.second);
  }
};

template <size_t _Ip, class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename tuple_element<_Ip, pair<_T1, _T2> >::type&
get(pair<_T1, _T2>& __p) noexcept {
  return __get_pair<_Ip>::get(__p);
}

template <size_t _Ip, class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const typename tuple_element<_Ip, pair<_T1, _T2> >::type&
get(const pair<_T1, _T2>& __p) noexcept {
  return __get_pair<_Ip>::get(__p);
}

template <size_t _Ip, class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename tuple_element<_Ip, pair<_T1, _T2> >::type&&
get(pair<_T1, _T2>&& __p) noexcept {
  return __get_pair<_Ip>::get(std::move(__p));
}

template <size_t _Ip, class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const typename tuple_element<_Ip, pair<_T1, _T2> >::type&&
get(const pair<_T1, _T2>&& __p) noexcept {
  return __get_pair<_Ip>::get(std::move(__p));
}


template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _T1& get(pair<_T1, _T2>& __p) noexcept {
  return __get_pair<0>::get(__p);
}

template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _T1 const& get(pair<_T1, _T2> const& __p) noexcept {
  return __get_pair<0>::get(__p);
}

template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _T1&& get(pair<_T1, _T2>&& __p) noexcept {
  return __get_pair<0>::get(std::move(__p));
}

template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _T1 const&& get(pair<_T1, _T2> const&& __p) noexcept {
  return __get_pair<0>::get(std::move(__p));
}

template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _T1& get(pair<_T2, _T1>& __p) noexcept {
  return __get_pair<1>::get(__p);
}

template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _T1 const& get(pair<_T2, _T1> const& __p) noexcept {
  return __get_pair<1>::get(__p);
}

template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _T1&& get(pair<_T2, _T1>&& __p) noexcept {
  return __get_pair<1>::get(std::move(__p));
}

template <class _T1, class _T2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _T1 const&& get(pair<_T2, _T1> const&& __p) noexcept {
  return __get_pair<1>::get(std::move(__p));
}



}}
# 714 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/pair.h" 3
#pragma clang diagnostic pop
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_range.h" 2 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_range.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_range.h" 2 3

#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_range.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_range.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_range.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_range.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_range.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_range.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 84 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_range.h" 3
template <class _Iter, class _Unwrapped = decltype(std::__unwrap_iter(std::declval<_Iter>()))>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_Unwrapped, _Unwrapped> __unwrap_range(_Iter __first, _Iter __last) {
  return std::make_pair(std::__unwrap_iter(std::move(__first)), std::__unwrap_iter(std::move(__last)));
}

template <class _Iter, class _Unwrapped>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Iter __rewrap_range(_Iter __orig_iter, _Unwrapped __iter) {
  return std::__rewrap_iter(std::move(__orig_iter), std::move(__iter));
}


}}
# 95 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unwrap_range.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_move_common.h" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/constexpr_c_functions.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/constexpr_c_functions.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/datasizeof.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/datasizeof.h" 3








#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/datasizeof.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/datasizeof.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/datasizeof.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/datasizeof.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/datasizeof.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/datasizeof.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp>
inline const size_t __datasizeof_v = __datasizeof(_Tp);
# 63 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/datasizeof.h" 3
}}
# 63 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/datasizeof.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/constexpr_c_functions.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_always_bitcastable.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_always_bitcastable.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_always_bitcastable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_always_bitcastable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_always_bitcastable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_always_bitcastable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_always_bitcastable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_always_bitcastable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {







template <class _From, class _To>
struct __is_always_bitcastable {
  using _UnqualFrom = __remove_cv_t<_From>;
  using _UnqualTo = __remove_cv_t<_To>;


  static const bool value =

      (is_same<_UnqualFrom, _UnqualTo>::value && is_trivially_copyable<_UnqualFrom>::value) ||
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_always_bitcastable.h" 3
      (
        sizeof(_From) == sizeof(_To) &&
        is_integral<_From>::value &&
        is_integral<_To>::value &&
        !is_same<_UnqualTo, bool>::value
      );

};

}}
# 83 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_always_bitcastable.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/constexpr_c_functions.h" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_equality_comparable.h" 1 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_equality_comparable.h" 3


#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_equality_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_equality_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_equality_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_equality_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_equality_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_equality_comparable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Up, class = void>
struct __is_equality_comparable : false_type {};

template <class _Tp, class _Up>
struct __is_equality_comparable<_Tp, _Up, __void_t<decltype(std::declval<_Tp>() == std::declval<_Up>())> > : true_type {
};
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_equality_comparable.h" 3
template <class _Tp, class _Up, class = void>
struct __libcpp_is_trivially_equality_comparable_impl : false_type {};

template <class _Tp>
struct __libcpp_is_trivially_equality_comparable_impl<_Tp, _Tp>

    : integral_constant<bool, __is_trivially_equality_comparable(_Tp) && __is_equality_comparable<_Tp, _Tp>::value> {
};





template <class _Tp, class _Up>
struct __libcpp_is_trivially_equality_comparable_impl<
    _Tp,
    _Up,
    __enable_if_t<is_integral<_Tp>::value && is_integral<_Up>::value && !is_same<_Tp, _Up>::value &&
                  is_signed<_Tp>::value == is_signed<_Up>::value && sizeof(_Tp) == sizeof(_Up)> > : true_type {};

template <class _Tp>
struct __libcpp_is_trivially_equality_comparable_impl<_Tp*, _Tp*> : true_type {};


template <class _Tp, class _Up>
struct __libcpp_is_trivially_equality_comparable_impl<_Tp*, _Up*>
    : integral_constant<
          bool,
          __is_equality_comparable<_Tp*, _Up*>::value &&
              (is_same<__remove_cv_t<_Tp>, __remove_cv_t<_Up> >::value || is_void<_Tp>::value || is_void<_Up>::value)> {
};

template <class _Tp, class _Up>
using __libcpp_is_trivially_equality_comparable =
    __libcpp_is_trivially_equality_comparable_impl<__remove_cv_t<_Tp>, __remove_cv_t<_Up> >;

}}
# 86 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_equality_comparable.h" 3
#pragma clang diagnostic pop
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/constexpr_c_functions.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_lexicographically_comparable.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_lexicographically_comparable.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_lexicographically_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_lexicographically_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_lexicographically_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_lexicographically_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_lexicographically_comparable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_lexicographically_comparable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_lexicographically_comparable.h" 3
template <class _Tp, class _Up>
struct __libcpp_is_trivially_lexicographically_comparable
    : integral_constant<bool,
                        is_same<__remove_cv_t<_Tp>, __remove_cv_t<_Up> >::value && sizeof(_Tp) == 1 &&
                            is_unsigned<_Tp>::value> {};

}}
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_trivially_lexicographically_comparable.h" 3
#pragma clang diagnostic pop
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/constexpr_c_functions.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_pointer_in_range.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_pointer_in_range.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

struct __equal_to {
  template <class _T1, class _T2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator()(const _T1& __x, const _T2& __y) const {
    return __x == __y;
  }
};

template <class _Tp, class _Up>
inline const bool __desugars_to_v<__equal_tag, __equal_to, _Tp, _Up> = true;



template <class _T1 = void, class _T2 = _T1>
struct __less {};

template <>
struct __less<void, void> {
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator()(const _Tp& __lhs, const _Up& __rhs) const {
    return __lhs < __rhs;
  }
};

template <class _Tp>
inline const bool __desugars_to_v<__less_tag, __less<>, _Tp, _Tp> = true;

}}
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_pointer_in_range.h" 2 3







# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_valid_range.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_valid_range.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_valid_range.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_valid_range.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_valid_range.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_valid_range.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_valid_range.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_valid_range.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__no_sanitize__("address"))) bool
__is_valid_range(const _Tp* __first, const _Tp* __last) {
  if (__libcpp_is_constant_evaluated()) {



    return __builtin_constant_p(__first <= __last) && __first <= __last;
  }

  return !__less<>()(__last, __first);
}

}}
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_valid_range.h" 3
#pragma clang diagnostic pop
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_pointer_in_range.h" 2 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_pointer_in_range.h" 3


#pragma clang diagnostic push
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_pointer_in_range.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_pointer_in_range.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_pointer_in_range.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_pointer_in_range.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_pointer_in_range.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_pointer_in_range.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Up, class = void>
struct __is_less_than_comparable : false_type {};

template <class _Tp, class _Up>
struct __is_less_than_comparable<_Tp, _Up, __void_t<decltype(std::declval<_Tp>() < std::declval<_Up>())> > : true_type {
};

template <class _Tp, class _Up, __enable_if_t<__is_less_than_comparable<const _Tp*, const _Up*>::value, int> = 0>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__no_sanitize__("address"))) bool
__is_pointer_in_range(const _Tp* __begin, const _Tp* __end, const _Up* __ptr) {
  ((void)0);

  if (__libcpp_is_constant_evaluated()) {


    if (!__builtin_constant_p(__begin <= __ptr && __ptr < __end))
      return false;
  }

  return !__less<>()(__ptr, __begin) && __less<>()(__ptr, __end);
}

template <class _Tp, class _Up, __enable_if_t<!__is_less_than_comparable<const _Tp*, const _Up*>::value, int> = 0>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__no_sanitize__("address"))) bool
__is_pointer_in_range(const _Tp* __begin, const _Tp* __end, const _Up* __ptr) {
  if (__libcpp_is_constant_evaluated())
    return false;

  return reinterpret_cast<const char*>(__begin) <= reinterpret_cast<const char*>(__ptr) &&
         reinterpret_cast<const char*>(__ptr) < reinterpret_cast<const char*>(__end);
}

}}
# 60 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/is_pointer_in_range.h" 3
#pragma clang diagnostic pop
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/constexpr_c_functions.h" 2 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/constexpr_c_functions.h" 3


#pragma clang diagnostic push
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/constexpr_c_functions.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/constexpr_c_functions.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/constexpr_c_functions.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/constexpr_c_functions.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/constexpr_c_functions.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/constexpr_c_functions.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



enum class __element_count : size_t {};

template <class _Tp>
inline const bool __is_char_type = false;

template <>
inline const bool __is_char_type<char> = true;






template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr size_t __constexpr_strlen(const _Tp* __str) noexcept {
  static_assert(__is_char_type<_Tp>, "__constexpr_strlen only works with char and char8_t");


  if (__libcpp_is_constant_evaluated()) {

    if constexpr (is_same_v<_Tp, char>)
      return __builtin_strlen(__str);

    size_t __i = 0;
    for (; __str[__i] != '\0'; ++__i)
      ;
    return __i;
  }
  return __builtin_strlen(reinterpret_cast<const char*>(__str));
}




template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int
__constexpr_memcmp(const _Tp* __lhs, const _Up* __rhs, __element_count __n) {
  static_assert(__libcpp_is_trivially_lexicographically_comparable<_Tp, _Up>::value,
                "_Tp and _Up have to be trivially lexicographically comparable");

  auto __count = static_cast<size_t>(__n);

  if (__libcpp_is_constant_evaluated()) {

    if (sizeof(_Tp) == 1 && !is_same<_Tp, bool>::value)
      return __builtin_memcmp(__lhs, __rhs, __count * sizeof(_Tp));


    while (__count != 0) {
      if (*__lhs < *__rhs)
        return -1;
      if (*__rhs < *__lhs)
        return 1;

      --__count;
      ++__lhs;
      ++__rhs;
    }
    return 0;
  } else {
    return __builtin_memcmp(__lhs, __rhs, __count * sizeof(_Tp));
  }
}




template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
__constexpr_memcmp_equal(const _Tp* __lhs, const _Up* __rhs, __element_count __n) {
  static_assert(__libcpp_is_trivially_equality_comparable<_Tp, _Up>::value,
                "_Tp and _Up have to be trivially equality comparable");

  auto __count = static_cast<size_t>(__n);

  if (__libcpp_is_constant_evaluated()) {

    if (sizeof(_Tp) == 1 && is_integral<_Tp>::value && !is_same<_Tp, bool>::value)
      return __builtin_memcmp(__lhs, __rhs, __count * sizeof(_Tp)) == 0;

    while (__count != 0) {
      if (*__lhs != *__rhs)
        return false;

      --__count;
      ++__lhs;
      ++__rhs;
    }
    return true;
  } else {
    return ::__builtin_memcmp(__lhs, __rhs, __count * sizeof(_Tp)) == 0;
  }
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp* __constexpr_memchr(_Tp* __str, _Up __value, size_t __count) {
  static_assert(sizeof(_Tp) == 1 && __libcpp_is_trivially_equality_comparable<_Tp, _Up>::value,
                "Calling memchr on non-trivially equality comparable types is unsafe.");

  if (__libcpp_is_constant_evaluated()) {


    if constexpr (is_same_v<remove_cv_t<_Tp>, char> && is_same_v<remove_cv_t<_Up>, char>)
      return __builtin_char_memchr(__str, __value, __count);


    for (; __count; --__count) {
      if (*__str == __value)
        return __str;
      ++__str;
    }
    return nullptr;
  } else {
    char __value_buffer = 0;
    __builtin_memcpy(&__value_buffer, &__value, sizeof(char));
    return static_cast<_Tp*>(__builtin_memchr(__str, __value_buffer, __count));
  }
}
# 165 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/constexpr_c_functions.h" 3
template <class _Tp, class _Up, __enable_if_t<is_assignable<_Tp&, _Up const&>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp& __assign_trivially_copyable(_Tp& __dest, _Up const& __src) {
  __dest = __src;
  return __dest;
}


template <class _Tp, class _Up, __enable_if_t<!is_assignable<_Tp&, _Up const&>::value &&
                                               is_assignable<_Tp&, _Up&&>::value, int> = 0>

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp& __assign_trivially_copyable(_Tp& __dest, _Up& __src) {
  __dest =
      static_cast<_Up&&>(__src);
  return __dest;
}


template <class _Tp, class _Up, __enable_if_t<!is_assignable<_Tp&, _Up const&>::value &&
                                              !is_assignable<_Tp&, _Up&&>::value &&
                                               is_constructible<_Tp, _Up const&>::value, int> = 0>

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp& __assign_trivially_copyable(_Tp& __dest, _Up const& __src) {


  std::__construct_at(std::addressof(__dest), __src);
  return __dest;
}


template <class _Tp, class _Up, __enable_if_t<!is_assignable<_Tp&, _Up const&>::value &&
                                              !is_assignable<_Tp&, _Up&&>::value &&
                                              !is_constructible<_Tp, _Up const&>::value &&
                                               is_constructible<_Tp, _Up&&>::value, int> = 0>

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp& __assign_trivially_copyable(_Tp& __dest, _Up& __src) {


  std::__construct_at(
      std::addressof(__dest),
      static_cast<_Up&&>(__src));
  return __dest;
}

template <class _Tp, class _Up, __enable_if_t<__is_always_bitcastable<_Up, _Tp>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp*
__constexpr_memmove(_Tp* __dest, _Up* __src, __element_count __n) {
  size_t __count = static_cast<size_t>(__n);
  if (__libcpp_is_constant_evaluated()) {

    if (is_same<__remove_cv_t<_Tp>, __remove_cv_t<_Up> >::value) {
      ::__builtin_memmove(__dest, __src, __count * sizeof(_Tp));
      return __dest;
    }

    if (std::__is_pointer_in_range(__src, __src + __count, __dest)) {
      for (; __count > 0; --__count)
        std::__assign_trivially_copyable(__dest[__count - 1], __src[__count - 1]);
    } else {
      for (size_t __i = 0; __i != __count; ++__i)
        std::__assign_trivially_copyable(__dest[__i], __src[__i]);
    }
  } else if (__count > 0) {
    ::__builtin_memmove(__dest, __src, (__count - 1) * sizeof(_Tp) + __datasizeof_v<_Tp>);
  }
  return __dest;
}

}}
# 232 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/constexpr_c_functions.h" 3
#pragma clang diagnostic pop
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_move_common.h" 2 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_move_common.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_move_common.h" 2 3

#pragma clang diagnostic push
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_move_common.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_move_common.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_move_common.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_move_common.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_move_common.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_move_common.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _From, class _To>
struct __can_lower_copy_assignment_to_memmove {
  static const bool value =

      __is_always_bitcastable<_From, _To>::value &&

      is_trivially_assignable<_To&, const _From&>::value &&

      !is_volatile<_From>::value && !is_volatile<_To>::value;
};

template <class _From, class _To>
struct __can_lower_move_assignment_to_memmove {
  static const bool value =
      __is_always_bitcastable<_From, _To>::value && is_trivially_assignable<_To&, _From&&>::value &&
      !is_volatile<_From>::value && !is_volatile<_To>::value;
};



template <class _In, class _Out>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_In*, _Out*>
__copy_trivial_impl(_In* __first, _In* __last, _Out* __result) {
  const size_t __n = static_cast<size_t>(__last - __first);

  std::__constexpr_memmove(__result, __first, __element_count(__n));

  return std::make_pair(__last, __result + __n);
}

template <class _In, class _Out>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_In*, _Out*>
__copy_backward_trivial_impl(_In* __first, _In* __last, _Out* __result) {
  const size_t __n = static_cast<size_t>(__last - __first);
  __result -= __n;

  std::__constexpr_memmove(__result, __first, __element_count(__n));

  return std::make_pair(__last, __result);
}



template <class _InIter, class _OutIter>
struct __can_rewrap
    : integral_constant<bool, is_copy_constructible<_InIter>::value && is_copy_constructible<_OutIter>::value> {};

template <class _Algorithm,
          class _InIter,
          class _Sent,
          class _OutIter,
          __enable_if_t<__can_rewrap<_InIter, _OutIter>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter>
__copy_move_unwrap_iters(_InIter __first, _Sent __last, _OutIter __out_first) {
  auto __range = std::__unwrap_range(__first, std::move(__last));
  auto __result = _Algorithm()(std::move(__range.first), std::move(__range.second), std::__unwrap_iter(__out_first));
  return std::make_pair(std::__rewrap_range<_Sent>(std::move(__first), std::move(__result.first)),
                        std::__rewrap_iter(std::move(__out_first), std::move(__result.second)));
}

template <class _Algorithm,
          class _InIter,
          class _Sent,
          class _OutIter,
          __enable_if_t<!__can_rewrap<_InIter, _OutIter>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter>
__copy_move_unwrap_iters(_InIter __first, _Sent __last, _OutIter __out_first) {
  return _Algorithm()(std::move(__first), std::move(__last), std::move(__out_first));
}

}}
# 110 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_move_common.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_segment.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_segment.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/segmented_iterator.h" 1 3
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/segmented_iterator.h" 3


#pragma clang diagnostic push
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/segmented_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/segmented_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/segmented_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/segmented_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/segmented_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/segmented_iterator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Iterator>
struct __segmented_iterator_traits;
# 68 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/segmented_iterator.h" 3
template <class _Tp, size_t = 0>
struct __has_specialization : false_type {};

template <class _Tp>
struct __has_specialization<_Tp, sizeof(_Tp) * 0> : true_type {};

template <class _Iterator>
using __is_segmented_iterator = __has_specialization<__segmented_iterator_traits<_Iterator> >;

}}
# 77 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/segmented_iterator.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_segment.h" 2 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_segment.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_segment.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_segment.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_segment.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_segment.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_segment.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_segment.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {





template <class _SegmentedIterator, class _Functor>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__for_each_segment(_SegmentedIterator __first, _SegmentedIterator __last, _Functor __func) {
  using _Traits = __segmented_iterator_traits<_SegmentedIterator>;

  auto __sfirst = _Traits::__segment(__first);
  auto __slast = _Traits::__segment(__last);


  if (__sfirst == __slast) {
    __func(_Traits::__local(__first), _Traits::__local(__last));
    return;
  }


  __func(_Traits::__local(__first), _Traits::__end(__sfirst));
  ++__sfirst;

  while (__sfirst != __slast) {
    __func(_Traits::__begin(__sfirst), _Traits::__end(__sfirst));
    ++__sfirst;
  }

  __func(_Traits::__begin(__sfirst), _Traits::__local(__last));
}

}}
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_segment.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp_ref_type.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp_ref_type.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp_ref_type.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp_ref_type.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp_ref_type.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp_ref_type.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp_ref_type.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp_ref_type.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Compare>
struct __debug_less {
  _Compare& __comp_;
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __debug_less(_Compare& __c) : __comp_(__c) {}

  template <class _Tp, class _Up>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Tp& __x, const _Up& __y) {
    bool __r = __comp_(__x, __y);
    if (__r)
      __do_compare_assert(0, __y, __x);
    return __r;
  }

  template <class _Tp, class _Up>
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(_Tp& __x, _Up& __y) {
    bool __r = __comp_(__x, __y);
    if (__r)
      __do_compare_assert(0, __y, __x);
    return __r;
  }

  template <class _LHS, class _RHS>
  constexpr inline
      __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) decltype((void)std::declval<_Compare&>()(std::declval<_LHS&>(), std::declval<_RHS&>()))
      __do_compare_assert(int, _LHS& __l, _RHS& __r) {
    ((void)0);
    (void)__l;
    (void)__r;
  }

  template <class _LHS, class _RHS>
  constexpr inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __do_compare_assert(long, _LHS&, _RHS&) {}
};






template <class _Comp>
using __comp_ref_type = _Comp&;


}}
# 65 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/comp_ref_type.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min_element.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min_element.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/identity.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/identity.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/identity.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/identity.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/identity.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/identity.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/identity.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/identity.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct __is_identity : false_type {};

struct __identity {
  template <class _Tp>
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp&& operator()(_Tp&& __t) const noexcept {
    return std::forward<_Tp>(__t);
  }

  using is_transparent = void;
};

template <>
struct __is_identity<__identity> : true_type {};
template <>
struct __is_identity<reference_wrapper<__identity> > : true_type {};
template <>
struct __is_identity<reference_wrapper<const __identity> > : true_type {};
# 63 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/identity.h" 3
}}
# 63 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/identity.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min_element.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_callable.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_callable.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_callable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_callable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_callable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_callable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_callable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_callable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Func, class... _Args, class = decltype(std::declval<_Func>()(std::declval<_Args>()...))>
true_type __is_callable_helper(int);
template <class...>
false_type __is_callable_helper(...);

template <class _Func, class... _Args>
struct __is_callable : decltype(std::__is_callable_helper<_Func, _Args...>(0)) {};

}}
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_callable.h" 3
#pragma clang diagnostic pop
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min_element.h" 2 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min_element.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min_element.h" 2 3

#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min_element.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min_element.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min_element.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min_element.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min_element.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min_element.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Comp, class _Iter, class _Sent, class _Proj>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Iter
__min_element(_Iter __first, _Sent __last, _Comp __comp, _Proj& __proj) {
  if (__first == __last)
    return __first;

  _Iter __i = __first;
  while (++__i != __last)
    if (std::__invoke(__comp, std::__invoke(__proj, *__i), std::__invoke(__proj, *__first)))
      __first = __i;

  return __first;
}

template <class _Comp, class _Iter, class _Sent>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Iter __min_element(_Iter __first, _Sent __last, _Comp __comp) {
  auto __proj = __identity();
  return std::__min_element<_Comp>(std::move(__first), std::move(__last), __comp, __proj);
}

template <class _ForwardIterator, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ForwardIterator
min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp) {
  static_assert(
      __has_forward_iterator_category<_ForwardIterator>::value, "std::min_element requires a ForwardIterator");
  static_assert(
      __is_callable<_Compare, decltype(*__first), decltype(*__first)>::value, "The comparator has to be callable");

  return std::__min_element<__comp_ref_type<_Compare> >(std::move(__first), std::move(__last), __comp);
}

template <class _ForwardIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ForwardIterator
min_element(_ForwardIterator __first, _ForwardIterator __last) {
  return std::min_element(__first, __last, __less<>());
}

}}
# 67 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min_element.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min.h" 2 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min.h" 2 3

#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Tp&
min([[_Clang::__lifetimebound__]] const _Tp& __a, [[_Clang::__lifetimebound__]] const _Tp& __b, _Compare __comp) {
  return __comp(__b, __a) ? __b : __a;
}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Tp&
min([[_Clang::__lifetimebound__]] const _Tp& __a, [[_Clang::__lifetimebound__]] const _Tp& __b) {
  return std::min(__a, __b, __less<>());
}



template <class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp
min(initializer_list<_Tp> __t, _Compare __comp) {
  return *std::__min_element<__comp_ref_type<_Compare> >(__t.begin(), __t.end(), __comp);
}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp min(initializer_list<_Tp> __t) {
  return *std::min_element(__t.begin(), __t.end(), __less<>());
}



}}
# 54 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/min.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy.h" 2 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy.h" 2 3

#pragma clang diagnostic push
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class, class _InIter, class _Sent, class _OutIter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter> __copy(_InIter, _Sent, _OutIter);

template <class _AlgPolicy>
struct __copy_impl {
  template <class _InIter, class _Sent, class _OutIter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _Sent __last, _OutIter __result) const {
    while (__first != __last) {
      *__result = *__first;
      ++__first;
      ++__result;
    }

    return std::make_pair(std::move(__first), std::move(__result));
  }

  template <class _InIter, class _OutIter>
  struct _CopySegment {
    using _Traits = __segmented_iterator_traits<_InIter>;

    _OutIter& __result_;

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit _CopySegment(_OutIter& __result)
        : __result_(__result) {}

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
    operator()(typename _Traits::__local_iterator __lfirst, typename _Traits::__local_iterator __llast) {
      __result_ = std::__copy<_AlgPolicy>(__lfirst, __llast, std::move(__result_)).second;
    }
  };

  template <class _InIter, class _OutIter, __enable_if_t<__is_segmented_iterator<_InIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _InIter __last, _OutIter __result) const {
    std::__for_each_segment(__first, __last, _CopySegment<_InIter, _OutIter>(__result));
    return std::make_pair(__last, std::move(__result));
  }

  template <class _InIter,
            class _OutIter,
            __enable_if_t<__has_random_access_iterator_category<_InIter>::value &&
                              !__is_segmented_iterator<_InIter>::value && __is_segmented_iterator<_OutIter>::value,
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _InIter __last, _OutIter __result) const {
    using _Traits = __segmented_iterator_traits<_OutIter>;
    using _DiffT = typename common_type<__iter_diff_t<_InIter>, __iter_diff_t<_OutIter> >::type;

    if (__first == __last)
      return std::make_pair(std::move(__first), std::move(__result));

    auto __local_first = _Traits::__local(__result);
    auto __segment_iterator = _Traits::__segment(__result);
    while (true) {
      auto __local_last = _Traits::__end(__segment_iterator);
      auto __size = std::min<_DiffT>(__local_last - __local_first, __last - __first);
      auto __iters = std::__copy<_AlgPolicy>(__first, __first + __size, __local_first);
      __first = std::move(__iters.first);

      if (__first == __last)
        return std::make_pair(std::move(__first), _Traits::__compose(__segment_iterator, std::move(__iters.second)));

      __local_first = _Traits::__begin(++__segment_iterator);
    }
  }


  template <class _In, class _Out, __enable_if_t<__can_lower_copy_assignment_to_memmove<_In, _Out>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_In*, _Out*>
  operator()(_In* __first, _In* __last, _Out* __result) const {
    return std::__copy_trivial_impl(__first, __last, __result);
  }
};

template <class _AlgPolicy, class _InIter, class _Sent, class _OutIter>
pair<_InIter, _OutIter> inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr
__copy(_InIter __first, _Sent __last, _OutIter __result) {
  return std::__copy_move_unwrap_iters<__copy_impl<_AlgPolicy> >(
      std::move(__first), std::move(__last), std::move(__result));
}

template <class _InputIterator, class _OutputIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result) {
  return std::__copy<_ClassicAlgPolicy>(__first, __last, __result).second;
}

}}
# 119 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move.h" 1 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move.h" 2 3

#pragma clang diagnostic push
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _InIter, class _Sent, class _OutIter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter>
__move(_InIter __first, _Sent __last, _OutIter __result);

template <class _AlgPolicy>
struct __move_impl {
  template <class _InIter, class _Sent, class _OutIter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _Sent __last, _OutIter __result) const {
    while (__first != __last) {
      *__result = _IterOps<_AlgPolicy>::__iter_move(__first);
      ++__first;
      ++__result;
    }
    return std::make_pair(std::move(__first), std::move(__result));
  }

  template <class _InIter, class _OutIter>
  struct _MoveSegment {
    using _Traits = __segmented_iterator_traits<_InIter>;

    _OutIter& __result_;

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit _MoveSegment(_OutIter& __result)
        : __result_(__result) {}

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
    operator()(typename _Traits::__local_iterator __lfirst, typename _Traits::__local_iterator __llast) {
      __result_ = std::__move<_AlgPolicy>(__lfirst, __llast, std::move(__result_)).second;
    }
  };

  template <class _InIter, class _OutIter, __enable_if_t<__is_segmented_iterator<_InIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _InIter __last, _OutIter __result) const {
    std::__for_each_segment(__first, __last, _MoveSegment<_InIter, _OutIter>(__result));
    return std::make_pair(__last, std::move(__result));
  }

  template <class _InIter,
            class _OutIter,
            __enable_if_t<__has_random_access_iterator_category<_InIter>::value &&
                              !__is_segmented_iterator<_InIter>::value && __is_segmented_iterator<_OutIter>::value,
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _InIter __last, _OutIter __result) const {
    using _Traits = __segmented_iterator_traits<_OutIter>;
    using _DiffT = typename common_type<__iter_diff_t<_InIter>, __iter_diff_t<_OutIter> >::type;

    if (__first == __last)
      return std::make_pair(std::move(__first), std::move(__result));

    auto __local_first = _Traits::__local(__result);
    auto __segment_iterator = _Traits::__segment(__result);
    while (true) {
      auto __local_last = _Traits::__end(__segment_iterator);
      auto __size = std::min<_DiffT>(__local_last - __local_first, __last - __first);
      auto __iters = std::__move<_AlgPolicy>(__first, __first + __size, __local_first);
      __first = std::move(__iters.first);

      if (__first == __last)
        return std::make_pair(std::move(__first), _Traits::__compose(__segment_iterator, std::move(__iters.second)));

      __local_first = _Traits::__begin(++__segment_iterator);
    }
  }


  template <class _In, class _Out, __enable_if_t<__can_lower_move_assignment_to_memmove<_In, _Out>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_In*, _Out*>
  operator()(_In* __first, _In* __last, _Out* __result) const {
    return std::__copy_trivial_impl(__first, __last, __result);
  }
};

template <class _AlgPolicy, class _InIter, class _Sent, class _OutIter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter>
__move(_InIter __first, _Sent __last, _OutIter __result) {
  return std::__copy_move_unwrap_iters<__move_impl<_AlgPolicy> >(
      std::move(__first), std::move(__last), std::move(__result));
}

template <class _InputIterator, class _OutputIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
move(_InputIterator __first, _InputIterator __last, _OutputIterator __result) {
  static_assert(is_copy_constructible<_InputIterator>::value, "Iterators has to be copy constructible.");
  static_assert(is_copy_constructible<_OutputIterator>::value, "The output iterator has to be copy constructible.");

  return std::__move<_ClassicAlgPolicy>(std::move(__first), std::move(__last), std::move(__result)).second;
}

}}
# 123 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way_result.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way_result.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way_result.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way_result.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way_result.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way_result.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way_result.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way_result.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way_result.h" 3
}}
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__compare/compare_three_way_result.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 2 3








# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Category, class _Tp, class _Distance = ptrdiff_t, class _Pointer = _Tp*, class _Reference = _Tp&>
struct __attribute__((__deprecated__)) iterator {
  typedef _Tp value_type;
  typedef _Distance difference_type;
  typedef _Pointer pointer;
  typedef _Reference reference;
  typedef _Category iterator_category;
};

}}
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/iterator.h" 3
#pragma clang diagnostic pop
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 2 3








# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/subrange.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/subrange.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/subrange.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/subrange.h" 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/subrange.h" 2 3






# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/dangling.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/dangling.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/dangling.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/dangling.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/dangling.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/dangling.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/dangling.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/dangling.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/dangling.h" 3
}}
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/dangling.h" 3
#pragma clang diagnostic pop
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/subrange.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/view_interface.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/view_interface.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/empty.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/empty.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/empty.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/empty.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/empty.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/empty.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/empty.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/empty.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 69 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/empty.h" 3
}}
# 69 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/empty.h" 3
#pragma clang diagnostic pop
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/view_interface.h" 2 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/view_interface.h" 3


#pragma clang diagnostic push
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/view_interface.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/view_interface.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/view_interface.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/view_interface.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/view_interface.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/view_interface.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 168 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/view_interface.h" 3
}}
# 168 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/view_interface.h" 3
#pragma clang diagnostic pop
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/subrange.h" 2 3
# 46 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/subrange.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/subrange.h" 2 3

#pragma clang diagnostic push
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/subrange.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/subrange.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/subrange.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/subrange.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/subrange.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/subrange.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 269 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/subrange.h" 3
}}
# 269 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/subrange.h" 3
#pragma clang diagnostic pop
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 2 3
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3


#pragma clang diagnostic push
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

#pragma GCC diagnostic push
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Iter>
class reverse_iterator

    : public iterator<typename iterator_traits<_Iter>::iterator_category,
                      typename iterator_traits<_Iter>::value_type,
                      typename iterator_traits<_Iter>::difference_type,
                      typename iterator_traits<_Iter>::pointer,
                      typename iterator_traits<_Iter>::reference>

{
#pragma GCC diagnostic pop

private:

  _Iter __t_;







protected:
  _Iter current;

public:
  using iterator_type = _Iter;

  using iterator_category =
      _If<__has_random_access_iterator_category<_Iter>::value,
          random_access_iterator_tag,
          typename iterator_traits<_Iter>::iterator_category>;
  using pointer = typename iterator_traits<_Iter>::pointer;






  using value_type = typename iterator_traits<_Iter>::value_type;
  using difference_type = typename iterator_traits<_Iter>::difference_type;
  using reference = typename iterator_traits<_Iter>::reference;



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator() : __t_(), current() {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit reverse_iterator(_Iter __x) : __t_(__x), current(__x) {}

  template <class _Up, __enable_if_t<!is_same<_Up, _Iter>::value && is_convertible<_Up const&, _Iter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator(const reverse_iterator<_Up>& __u)
      : __t_(__u.base()), current(__u.base()) {}

  template <class _Up,
            __enable_if_t<!is_same<_Up, _Iter>::value && is_convertible<_Up const&, _Iter>::value &&
                              is_assignable<_Iter&, _Up const&>::value,
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator& operator=(const reverse_iterator<_Up>& __u) {
    __t_ = current = __u.base();
    return *this;
  }
# 129 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Iter base() const { return current; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference operator*() const {
    _Iter __tmp = current;
    return *--__tmp;
  }
# 146 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pointer operator->() const { return std::addressof(operator*()); }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator& operator++() {
    --current;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator operator++(int) {
    reverse_iterator __tmp(*this);
    --current;
    return __tmp;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator& operator--() {
    ++current;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator operator--(int) {
    reverse_iterator __tmp(*this);
    ++current;
    return __tmp;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator operator+(difference_type __n) const {
    return reverse_iterator(current - __n);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator& operator+=(difference_type __n) {
    current -= __n;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator operator-(difference_type __n) const {
    return reverse_iterator(current + __n);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator& operator-=(difference_type __n) {
    current += __n;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference operator[](difference_type __n) const {
    return *(*this + __n);
  }
# 202 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
};

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator==(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)





{
  return __x.base() == __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator<(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)





{
  return __x.base() > __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator!=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)





{
  return __x.base() != __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator>(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)





{
  return __x.base() < __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator>=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)





{
  return __x.base() <= __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator<=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)





{
  return __x.base() >= __y.base();
}
# 285 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto
operator-(const reverse_iterator<_Iter1>& __x,
          const reverse_iterator<_Iter2>& __y) -> decltype(__y.base() - __x.base()) {
  return __y.base() - __x.base();
}
# 299 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
template <class _Iter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator<_Iter>
operator+(typename reverse_iterator<_Iter>::difference_type __n, const reverse_iterator<_Iter>& __x) {
  return reverse_iterator<_Iter>(__x.base() - __n);
}
# 312 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
template <class _Iter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator<_Iter> make_reverse_iterator(_Iter __i) {
  return reverse_iterator<_Iter>(__i);
}
# 328 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
template <class _Iter, bool __b>
struct __unwrap_iter_impl<reverse_iterator<reverse_iterator<_Iter> >, __b> {
  using _UnwrappedIter = decltype(__unwrap_iter_impl<_Iter>::__unwrap(std::declval<_Iter>()));
  using _ReverseWrapper = reverse_iterator<reverse_iterator<_Iter> >;

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ReverseWrapper
  __rewrap(_ReverseWrapper __orig_iter, _UnwrappedIter __unwrapped_iter) {
    return _ReverseWrapper(
        reverse_iterator<_Iter>(__unwrap_iter_impl<_Iter>::__rewrap(__orig_iter.base().base(), __unwrapped_iter)));
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _UnwrappedIter __unwrap(_ReverseWrapper __i) noexcept {
    return __unwrap_iter_impl<_Iter>::__unwrap(__i.base().base());
  }
};

}}
# 344 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_iterator.h" 3
#pragma clang diagnostic pop
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 2 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unbounded_array.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unbounded_array.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unbounded_array.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unbounded_array.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unbounded_array.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unbounded_array.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unbounded_array.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unbounded_array.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class>
struct __libcpp_is_unbounded_array : false_type {};
template <class _Tp>
struct __libcpp_is_unbounded_array<_Tp[]> : true_type {};
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unbounded_array.h" 3
}}
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_unbounded_array.h" 3
#pragma clang diagnostic pop
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exception_guard.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exception_guard.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exception_guard.h" 2 3

#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exception_guard.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exception_guard.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exception_guard.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exception_guard.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exception_guard.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exception_guard.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 64 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exception_guard.h" 3
template <class _Rollback>
struct __exception_guard_exceptions {
  __exception_guard_exceptions() = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __exception_guard_exceptions(_Rollback __rollback)
      : __rollback_(std::move(__rollback)), __completed_(false) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  __exception_guard_exceptions(__exception_guard_exceptions&& __other)
      noexcept(is_nothrow_move_constructible<_Rollback>::value)
      : __rollback_(std::move(__other.__rollback_)), __completed_(__other.__completed_) {
    __other.__completed_ = true;
  }

  __exception_guard_exceptions(__exception_guard_exceptions const&) = delete;
  __exception_guard_exceptions& operator=(__exception_guard_exceptions const&) = delete;
  __exception_guard_exceptions& operator=(__exception_guard_exceptions&&) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __complete() noexcept { __completed_ = true; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__exception_guard_exceptions() {
    if (!__completed_)
      __rollback_();
  }

private:
  _Rollback __rollback_;
  bool __completed_;
};

template <class... _Tag> [[maybe_unused]] __exception_guard_exceptions(typename _Tag::__allow_ctad...)->__exception_guard_exceptions<_Tag...>;

template <class _Rollback>
struct __exception_guard_noexceptions {
  __exception_guard_noexceptions() = delete;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                                __attribute__((__nodebug__)) explicit __exception_guard_noexceptions(_Rollback) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__nodebug__))
  __exception_guard_noexceptions(__exception_guard_noexceptions&& __other)
      noexcept(is_nothrow_move_constructible<_Rollback>::value)
      : __completed_(__other.__completed_) {
    __other.__completed_ = true;
  }

  __exception_guard_noexceptions(__exception_guard_noexceptions const&) = delete;
  __exception_guard_noexceptions& operator=(__exception_guard_noexceptions const&) = delete;
  __exception_guard_noexceptions& operator=(__exception_guard_noexceptions&&) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__nodebug__)) void __complete() noexcept {
    __completed_ = true;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__nodebug__)) ~__exception_guard_noexceptions() {
    ((void)0);
  }

private:
  bool __completed_ = false;
};

template <class... _Tag> [[maybe_unused]] __exception_guard_noexceptions(typename _Tag::__allow_ctad...)->__exception_guard_noexceptions<_Tag...>;





template <class _Rollback>
using __exception_guard = __exception_guard_exceptions<_Rollback>;


template <class _Rollback>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __exception_guard<_Rollback> __make_exception_guard(_Rollback __rollback) {
  return __exception_guard<_Rollback>(std::move(__rollback));
}

}}
# 140 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/exception_guard.h" 3
#pragma clang diagnostic pop
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 2 3
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 46 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 2 3

#pragma clang diagnostic push
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

struct __always_false {
  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator()(_Args&&...) const noexcept {
    return false;
  }
};



template <class _ValueType, class _InputIterator, class _Sentinel1, class _ForwardIterator, class _EndPredicate>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_InputIterator, _ForwardIterator> __uninitialized_copy(
    _InputIterator __ifirst, _Sentinel1 __ilast, _ForwardIterator __ofirst, _EndPredicate __stop_copying) {
  _ForwardIterator __idx = __ofirst;

  try {

    for (; __ifirst != __ilast && !__stop_copying(__idx); ++__ifirst, (void)++__idx)
      ::new (std::__voidify(*__idx)) _ValueType(*__ifirst);

  } catch (...) {
    std::__destroy(__ofirst, __idx);
    throw;
  }


  return pair<_InputIterator, _ForwardIterator>(std::move(__ifirst), std::move(__idx));
}

template <class _InputIterator, class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
uninitialized_copy(_InputIterator __ifirst, _InputIterator __ilast, _ForwardIterator __ofirst) {
  typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
  auto __result = std::__uninitialized_copy<_ValueType>(
      std::move(__ifirst), std::move(__ilast), std::move(__ofirst), __always_false());
  return std::move(__result.second);
}



template <class _ValueType, class _InputIterator, class _Size, class _ForwardIterator, class _EndPredicate>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_InputIterator, _ForwardIterator>
__uninitialized_copy_n(_InputIterator __ifirst, _Size __n, _ForwardIterator __ofirst, _EndPredicate __stop_copying) {
  _ForwardIterator __idx = __ofirst;

  try {

    for (; __n > 0 && !__stop_copying(__idx); ++__ifirst, (void)++__idx, (void)--__n)
      ::new (std::__voidify(*__idx)) _ValueType(*__ifirst);

  } catch (...) {
    std::__destroy(__ofirst, __idx);
    throw;
  }


  return pair<_InputIterator, _ForwardIterator>(std::move(__ifirst), std::move(__idx));
}

template <class _InputIterator, class _Size, class _ForwardIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
uninitialized_copy_n(_InputIterator __ifirst, _Size __n, _ForwardIterator __ofirst) {
  typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
  auto __result =
      std::__uninitialized_copy_n<_ValueType>(std::move(__ifirst), __n, std::move(__ofirst), __always_false());
  return std::move(__result.second);
}



template <class _ValueType, class _ForwardIterator, class _Sentinel, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
__uninitialized_fill(_ForwardIterator __first, _Sentinel __last, const _Tp& __x) {
  _ForwardIterator __idx = __first;

  try {

    for (; __idx != __last; ++__idx)
      ::new (std::__voidify(*__idx)) _ValueType(__x);

  } catch (...) {
    std::__destroy(__first, __idx);
    throw;
  }


  return __idx;
}

template <class _ForwardIterator, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x) {
  typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
  (void)std::__uninitialized_fill<_ValueType>(__first, __last, __x);
}



template <class _ValueType, class _ForwardIterator, class _Size, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
__uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x) {
  _ForwardIterator __idx = __first;

  try {

    for (; __n > 0; ++__idx, (void)--__n)
      ::new (std::__voidify(*__idx)) _ValueType(__x);

  } catch (...) {
    std::__destroy(__first, __idx);
    throw;
  }


  return __idx;
}

template <class _ForwardIterator, class _Size, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x) {
  typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
  return std::__uninitialized_fill_n<_ValueType>(__first, __n, __x);
}





template <class _ValueType, class _ForwardIterator, class _Sentinel>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
__uninitialized_default_construct(_ForwardIterator __first, _Sentinel __last) {
  auto __idx = __first;

  try {

    for (; __idx != __last; ++__idx)
      ::new (std::__voidify(*__idx)) _ValueType;

  } catch (...) {
    std::__destroy(__first, __idx);
    throw;
  }


  return __idx;
}

template <class _ForwardIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void uninitialized_default_construct(_ForwardIterator __first, _ForwardIterator __last) {
  using _ValueType = typename iterator_traits<_ForwardIterator>::value_type;
  (void)std::__uninitialized_default_construct<_ValueType>(std::move(__first), std::move(__last));
}



template <class _ValueType, class _ForwardIterator, class _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator __uninitialized_default_construct_n(_ForwardIterator __first, _Size __n) {
  auto __idx = __first;

  try {

    for (; __n > 0; ++__idx, (void)--__n)
      ::new (std::__voidify(*__idx)) _ValueType;

  } catch (...) {
    std::__destroy(__first, __idx);
    throw;
  }


  return __idx;
}

template <class _ForwardIterator, class _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator uninitialized_default_construct_n(_ForwardIterator __first, _Size __n) {
  using _ValueType = typename iterator_traits<_ForwardIterator>::value_type;
  return std::__uninitialized_default_construct_n<_ValueType>(std::move(__first), __n);
}



template <class _ValueType, class _ForwardIterator, class _Sentinel>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
__uninitialized_value_construct(_ForwardIterator __first, _Sentinel __last) {
  auto __idx = __first;

  try {

    for (; __idx != __last; ++__idx)
      ::new (std::__voidify(*__idx)) _ValueType();

  } catch (...) {
    std::__destroy(__first, __idx);
    throw;
  }


  return __idx;
}

template <class _ForwardIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void uninitialized_value_construct(_ForwardIterator __first, _ForwardIterator __last) {
  using _ValueType = typename iterator_traits<_ForwardIterator>::value_type;
  (void)std::__uninitialized_value_construct<_ValueType>(std::move(__first), std::move(__last));
}



template <class _ValueType, class _ForwardIterator, class _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator __uninitialized_value_construct_n(_ForwardIterator __first, _Size __n) {
  auto __idx = __first;

  try {

    for (; __n > 0; ++__idx, (void)--__n)
      ::new (std::__voidify(*__idx)) _ValueType();

  } catch (...) {
    std::__destroy(__first, __idx);
    throw;
  }


  return __idx;
}

template <class _ForwardIterator, class _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator uninitialized_value_construct_n(_ForwardIterator __first, _Size __n) {
  using _ValueType = typename iterator_traits<_ForwardIterator>::value_type;
  return std::__uninitialized_value_construct_n<_ValueType>(std::move(__first), __n);
}



template <class _ValueType,
          class _InputIterator,
          class _Sentinel1,
          class _ForwardIterator,
          class _EndPredicate,
          class _IterMove>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_InputIterator, _ForwardIterator> __uninitialized_move(
    _InputIterator __ifirst,
    _Sentinel1 __ilast,
    _ForwardIterator __ofirst,
    _EndPredicate __stop_moving,
    _IterMove __iter_move) {
  auto __idx = __ofirst;

  try {

    for (; __ifirst != __ilast && !__stop_moving(__idx); ++__idx, (void)++__ifirst) {
      ::new (std::__voidify(*__idx)) _ValueType(__iter_move(__ifirst));
    }

  } catch (...) {
    std::__destroy(__ofirst, __idx);
    throw;
  }


  return {std::move(__ifirst), std::move(__idx)};
}

template <class _InputIterator, class _ForwardIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
uninitialized_move(_InputIterator __ifirst, _InputIterator __ilast, _ForwardIterator __ofirst) {
  using _ValueType = typename iterator_traits<_ForwardIterator>::value_type;
  auto __iter_move = [](auto&& __iter) -> decltype(auto) { return std::move(*__iter); };

  auto __result = std::__uninitialized_move<_ValueType>(
      std::move(__ifirst), std::move(__ilast), std::move(__ofirst), __always_false(), __iter_move);
  return std::move(__result.second);
}



template <class _ValueType,
          class _InputIterator,
          class _Size,
          class _ForwardIterator,
          class _EndPredicate,
          class _IterMove>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_InputIterator, _ForwardIterator> __uninitialized_move_n(
    _InputIterator __ifirst, _Size __n, _ForwardIterator __ofirst, _EndPredicate __stop_moving, _IterMove __iter_move) {
  auto __idx = __ofirst;

  try {

    for (; __n > 0 && !__stop_moving(__idx); ++__idx, (void)++__ifirst, --__n)
      ::new (std::__voidify(*__idx)) _ValueType(__iter_move(__ifirst));

  } catch (...) {
    std::__destroy(__ofirst, __idx);
    throw;
  }


  return {std::move(__ifirst), std::move(__idx)};
}

template <class _InputIterator, class _Size, class _ForwardIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_InputIterator, _ForwardIterator>
uninitialized_move_n(_InputIterator __ifirst, _Size __n, _ForwardIterator __ofirst) {
  using _ValueType = typename iterator_traits<_ForwardIterator>::value_type;
  auto __iter_move = [](auto&& __iter) -> decltype(auto) { return std::move(*__iter); };

  return std::__uninitialized_move_n<_ValueType>(
      std::move(__ifirst), __n, std::move(__ofirst), __always_false(), __iter_move);
}
# 365 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 3
template <class _Alloc,
          class _BidirIter,
          __enable_if_t<__has_bidirectional_iterator_category<_BidirIter>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__allocator_destroy_multidimensional(_Alloc& __alloc, _BidirIter __first, _BidirIter __last) noexcept {
  using _ValueType = typename iterator_traits<_BidirIter>::value_type;
  static_assert(is_same_v<typename allocator_traits<_Alloc>::value_type, _ValueType>,
                "The allocator should already be rebound to the correct type");

  if (__first == __last)
    return;

  if constexpr (is_array_v<_ValueType>) {
    static_assert(!__libcpp_is_unbounded_array<_ValueType>::value,
                  "arrays of unbounded arrays don't exist, but if they did we would mess up here");

    using _Element = remove_extent_t<_ValueType>;
    __allocator_traits_rebind_t<_Alloc, _Element> __elem_alloc(__alloc);
    do {
      --__last;
      decltype(auto) __array = *__last;
      std::__allocator_destroy_multidimensional(__elem_alloc, __array, __array + extent_v<_ValueType>);
    } while (__last != __first);
  } else {
    do {
      --__last;
      allocator_traits<_Alloc>::destroy(__alloc, std::addressof(*__last));
    } while (__last != __first);
  }
}
# 403 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 3
template <class _Alloc, class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void __allocator_construct_at_multidimensional(_Alloc& __alloc, _Tp* __loc) {
  static_assert(is_same_v<typename allocator_traits<_Alloc>::value_type, _Tp>,
                "The allocator should already be rebound to the correct type");

  if constexpr (is_array_v<_Tp>) {
    using _Element = remove_extent_t<_Tp>;
    __allocator_traits_rebind_t<_Alloc, _Element> __elem_alloc(__alloc);
    size_t __i = 0;
    _Tp& __array = *__loc;


    auto __guard = std::__make_exception_guard([&]() {
      std::__allocator_destroy_multidimensional(__elem_alloc, __array, __array + __i);
    });

    for (; __i != extent_v<_Tp>; ++__i) {
      std::__allocator_construct_at_multidimensional(__elem_alloc, std::addressof(__array[__i]));
    }
    __guard.__complete();
  } else {
    allocator_traits<_Alloc>::construct(__alloc, __loc);
  }
}
# 438 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 3
template <class _Alloc, class _Tp, class _Arg>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__allocator_construct_at_multidimensional(_Alloc& __alloc, _Tp* __loc, _Arg const& __arg) {
  static_assert(is_same_v<typename allocator_traits<_Alloc>::value_type, _Tp>,
                "The allocator should already be rebound to the correct type");

  if constexpr (is_array_v<_Tp>) {
    static_assert(is_array_v<_Arg>,
                  "Provided non-array initialization argument to __allocator_construct_at_multidimensional when "
                  "trying to construct an array.");

    using _Element = remove_extent_t<_Tp>;
    __allocator_traits_rebind_t<_Alloc, _Element> __elem_alloc(__alloc);
    size_t __i = 0;
    _Tp& __array = *__loc;


    auto __guard = std::__make_exception_guard([&]() {
      std::__allocator_destroy_multidimensional(__elem_alloc, __array, __array + __i);
    });
    for (; __i != extent_v<_Tp>; ++__i) {
      std::__allocator_construct_at_multidimensional(__elem_alloc, std::addressof(__array[__i]), __arg[__i]);
    }
    __guard.__complete();
  } else {
    allocator_traits<_Alloc>::construct(__alloc, __loc, __arg);
  }
}
# 474 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 3
template <class _Alloc,
          class _BidirIter,
          class _Tp,
          class _Size = typename iterator_traits<_BidirIter>::difference_type>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__uninitialized_allocator_fill_n_multidimensional(_Alloc& __alloc, _BidirIter __it, _Size __n, _Tp const& __value) {
  using _ValueType = typename iterator_traits<_BidirIter>::value_type;
  __allocator_traits_rebind_t<_Alloc, _ValueType> __value_alloc(__alloc);
  _BidirIter __begin = __it;


  auto __guard =
      std::__make_exception_guard([&]() { std::__allocator_destroy_multidimensional(__value_alloc, __begin, __it); });
  for (; __n != 0; --__n, ++__it) {
    std::__allocator_construct_at_multidimensional(__value_alloc, std::addressof(*__it), __value);
  }
  __guard.__complete();
}



template <class _Alloc, class _BidirIter, class _Size = typename iterator_traits<_BidirIter>::difference_type>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__uninitialized_allocator_value_construct_n_multidimensional(_Alloc& __alloc, _BidirIter __it, _Size __n) {
  using _ValueType = typename iterator_traits<_BidirIter>::value_type;
  __allocator_traits_rebind_t<_Alloc, _ValueType> __value_alloc(__alloc);
  _BidirIter __begin = __it;


  auto __guard =
      std::__make_exception_guard([&]() { std::__allocator_destroy_multidimensional(__value_alloc, __begin, __it); });
  for (; __n != 0; --__n, ++__it) {
    std::__allocator_construct_at_multidimensional(__value_alloc, std::addressof(*__it));
  }
  __guard.__complete();
}




template <class _Alloc, class _Iter, class _Sent>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__allocator_destroy(_Alloc& __alloc, _Iter __first, _Sent __last) {
  for (; __first != __last; ++__first)
    allocator_traits<_Alloc>::destroy(__alloc, std::__to_address(__first));
}

template <class _Alloc, class _Iter>
class _AllocatorDestroyRangeReverse {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr
  _AllocatorDestroyRangeReverse(_Alloc& __alloc, _Iter& __first, _Iter& __last)
      : __alloc_(__alloc), __first_(__first), __last_(__last) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void operator()() const {
    std::__allocator_destroy(__alloc_, std::reverse_iterator<_Iter>(__last_), std::reverse_iterator<_Iter>(__first_));
  }

private:
  _Alloc& __alloc_;
  _Iter& __first_;
  _Iter& __last_;
};





template <class _Alloc, class _Iter1, class _Sent1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Iter2
__uninitialized_allocator_copy_impl(_Alloc& __alloc, _Iter1 __first1, _Sent1 __last1, _Iter2 __first2) {
  auto __destruct_first = __first2;
  auto __guard =
      std::__make_exception_guard(_AllocatorDestroyRangeReverse<_Alloc, _Iter2>(__alloc, __destruct_first, __first2));
  while (__first1 != __last1) {
    allocator_traits<_Alloc>::construct(__alloc, std::__to_address(__first2), *__first1);
    ++__first1;
    ++__first2;
  }
  __guard.__complete();
  return __first2;
}

template <class _Alloc, class _Type>
struct __allocator_has_trivial_copy_construct : _Not<__has_construct<_Alloc, _Type*, const _Type&> > {};

template <class _Type>
struct __allocator_has_trivial_copy_construct<allocator<_Type>, _Type> : true_type {};

template <class _Alloc,
          class _In,
          class _RawTypeIn = __remove_const_t<_In>,
          class _Out,
          __enable_if_t<

              is_trivially_copy_constructible<_RawTypeIn>::value && is_trivially_copy_assignable<_RawTypeIn>::value &&
                  is_same<__remove_const_t<_In>, __remove_const_t<_Out> >::value &&
                  __allocator_has_trivial_copy_construct<_Alloc, _RawTypeIn>::value,
              int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Out*
__uninitialized_allocator_copy_impl(_Alloc&, _In* __first1, _In* __last1, _Out* __first2) {

  if (__libcpp_is_constant_evaluated()) {
    while (__first1 != __last1) {
      std::__construct_at(std::__to_address(__first2), *__first1);
      ++__first1;
      ++__first2;
    }
    return __first2;
  } else {
    return std::copy(__first1, __last1, const_cast<_RawTypeIn*>(__first2));
  }
}

template <class _Alloc, class _Iter1, class _Sent1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Iter2
__uninitialized_allocator_copy(_Alloc& __alloc, _Iter1 __first1, _Sent1 __last1, _Iter2 __first2) {
  auto __unwrapped_range = std::__unwrap_range(__first1, __last1);
  auto __result = std::__uninitialized_allocator_copy_impl(
      __alloc, __unwrapped_range.first, __unwrapped_range.second, std::__unwrap_iter(__first2));
  return std::__rewrap_iter(__first2, __result);
}

template <class _Alloc, class _Type>
struct __allocator_has_trivial_move_construct : _Not<__has_construct<_Alloc, _Type*, _Type&&> > {};

template <class _Type>
struct __allocator_has_trivial_move_construct<allocator<_Type>, _Type> : true_type {};

template <class _Alloc, class _Tp>
struct __allocator_has_trivial_destroy : _Not<__has_destroy<_Alloc, _Tp*> > {};

template <class _Tp, class _Up>
struct __allocator_has_trivial_destroy<allocator<_Tp>, _Up> : true_type {};
# 621 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 3
template <class _Alloc, class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__uninitialized_allocator_relocate(_Alloc& __alloc, _Tp* __first, _Tp* __last, _Tp* __result) {
  static_assert(__is_cpp17_move_insertable<_Alloc>::value,
                "The specified type does not meet the requirements of Cpp17MoveInsertable");
  if (__libcpp_is_constant_evaluated() || !__libcpp_is_trivially_relocatable<_Tp>::value ||
      !__allocator_has_trivial_move_construct<_Alloc, _Tp>::value ||
      !__allocator_has_trivial_destroy<_Alloc, _Tp>::value) {
    auto __destruct_first = __result;
    auto __guard =
        std::__make_exception_guard(_AllocatorDestroyRangeReverse<_Alloc, _Tp*>(__alloc, __destruct_first, __result));
    auto __iter = __first;
    while (__iter != __last) {

      allocator_traits<_Alloc>::construct(__alloc, __result, std::move_if_noexcept(*__iter));



      ++__iter;
      ++__result;
    }
    __guard.__complete();
    std::__allocator_destroy(__alloc, __first, __last);
  } else {
    __builtin_memcpy(const_cast<__remove_const_t<_Tp>*>(__result), __first, sizeof(_Tp) * (__last - __first));
  }
}

}}
# 649 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uninitialized_algorithms.h" 3
#pragma clang diagnostic pop
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/hash.h" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/hash.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstring" 1 3
# 62 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstring" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string.h" 1 3
# 58 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string.h" 3



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/string.h" 1 3 4
# 58 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/string.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_string.h" 1 3 4
# 64 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_string.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_string.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_null.h" 1 3 4
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_string.h" 2 3 4



extern "C" {
void *memchr(const void *__s, int __c, size_t __n);
int memcmp(const void *__s1, const void *__s2, size_t __n);
void *memcpy(void *__dst, const void *__src, size_t __n);
void *memmove(void *__dst, const void *__src, size_t __len);
void *memset(void *__b, int __c, size_t __len);
char *strcat(char *__s1, const char *__s2);
char *strchr(const char *__s, int __c);
int strcmp(const char *__s1, const char *__s2);
int strcoll(const char *__s1, const char *__s2);
char *strcpy(char *__dst, const char *__src);
size_t strcspn(const char *__s, const char *__charset);
char *strerror(int __errnum) __asm("_" "strerror" );
size_t strlen(const char *__s);
char *strncat(char *__s1, const char *__s2, size_t __n);
int strncmp(const char *__s1, const char *__s2, size_t __n);
char *strncpy(char *__dst, const char *__src, size_t __n);
char *strpbrk(const char *__s, const char *__charset);
char *strrchr(const char *__s, int __c);
size_t strspn(const char *__s, const char *__charset);
char *strstr(const char *__big, const char *__little);
char *strtok(char *__str, const char *__sep);
size_t strxfrm(char *__s1, const char *__s2, size_t __n);
}
# 103 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_string.h" 3 4
extern "C" {
char *strtok_r(char *__str, const char *__sep, char **__lasts);
}
# 115 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_string.h" 3 4
extern "C" {
int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen);
char *strdup(const char *__s1);
void *memccpy(void *__dst, const void *__src, int __c, size_t __n);
}
# 129 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_string.h" 3 4
extern "C" {
char *stpcpy(char *__dst, const char *__src);
char *stpncpy(char *__dst, const char *__src, size_t __n) __attribute__((availability(macosx,introduced=10.7)));
char *strndup(const char *__s1, size_t __n) __attribute__((availability(macosx,introduced=10.7)));
size_t strnlen(const char *__s1, size_t __n) __attribute__((availability(macosx,introduced=10.7)));
char *strsignal(int __sig);
}





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_rsize_t.h" 1 3 4
# 142 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_string.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_errno_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_errno_t.h" 3 4
typedef int errno_t;
# 143 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_string.h" 2 3 4

extern "C" {
errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n) __attribute__((availability(macosx,introduced=10.9)));
}





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_ssize_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_ssize_t.h" 3 4
typedef __darwin_ssize_t ssize_t;
# 153 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_string.h" 2 3 4

extern "C" {
void *memmem(const void *__big, size_t __big_len, const void *__little, size_t __little_len) __attribute__((availability(macosx,introduced=10.7)));
void memset_pattern4(void *__b, const void *__pattern4, size_t __len) __attribute__((availability(macosx,introduced=10.5)));
void memset_pattern8(void *__b, const void *__pattern8, size_t __len) __attribute__((availability(macosx,introduced=10.5)));
void memset_pattern16(void *__b, const void *__pattern16, size_t __len) __attribute__((availability(macosx,introduced=10.5)));

char *strcasestr(const char *__big, const char *__little);
char *strnstr(const char *__big, const char *__little, size_t __len);
size_t strlcat(char *__dst, const char *__source, size_t __size);
size_t strlcpy(char *__dst, const char *__source, size_t __size);
void strmode(int __mode, char *__bp);
char *strsep(char **__stringp, const char *__delim);


void swab(const void * , void * , ssize_t);

__attribute__((availability(macosx,introduced=10.12.1))) __attribute__((availability(ios,introduced=10.1)))
__attribute__((availability(tvos,introduced=10.0.1))) __attribute__((availability(watchos,introduced=3.1)))
int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len);

__attribute__((availability(macosx,introduced=11.0))) __attribute__((availability(ios,introduced=14.0)))
__attribute__((availability(tvos,introduced=14.0))) __attribute__((availability(watchos,introduced=7.0)))
int strsignal_r(int __sig, char *__strsignalbuf, size_t __buflen);
}




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_strings.h" 1 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_strings.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_strings.h" 2 3 4

extern "C" {


int bcmp(const void *, const void *, size_t) ;
void bcopy(const void *, void *, size_t) ;
void bzero(void *, size_t) ;
char *index(const char *, int) ;
char *rindex(const char *, int) ;


int ffs(int);
int strcasecmp(const char *, const char *);
int strncasecmp(const char *, const char *, size_t);
}



extern "C" {
int ffsl(long) __attribute__((availability(macosx,introduced=10.5)));
int ffsll(long long) __attribute__((availability(macosx,introduced=10.9)));
int fls(int) __attribute__((availability(macosx,introduced=10.5)));
int flsl(long) __attribute__((availability(macosx,introduced=10.5)));
int flsll(long long) __attribute__((availability(macosx,introduced=10.9)));
}
# 183 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_string.h" 2 3 4
# 59 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/string.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_string.h" 1 3 4
# 28 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_string.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_string.h" 2 3 4


extern "C" {
int strcoll_l(const char *, const char *, locale_t);
size_t strxfrm_l(char *, const char *, size_t, locale_t);
int strcasecmp_l(const char *, const char *, locale_t);
char *strcasestr_l(const char *, const char *, locale_t);
int strncasecmp_l(const char *, const char *, size_t, locale_t);
}
# 62 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/string.h" 2 3 4
# 62 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string.h" 2 3
# 72 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string.h" 3
extern "C++" {
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) const char* strchr(const char* __s, int __c) {
  return __builtin_strchr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) char* strchr(char* __s, int __c) {
  return __builtin_strchr(__s, __c);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) const char* strpbrk(const char* __s1, const char* __s2) {
  return __builtin_strpbrk(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) char* strpbrk(char* __s1, const char* __s2) {
  return __builtin_strpbrk(__s1, __s2);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) const char* strrchr(const char* __s, int __c) {
  return __builtin_strrchr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) char* strrchr(char* __s, int __c) {
  return __builtin_strrchr(__s, __c);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) const void* memchr(const void* __s, int __c, size_t __n) {
  return __builtin_memchr(__s, __c, __n);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) void* memchr(void* __s, int __c, size_t __n) {
  return __builtin_memchr(__s, __c, __n);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) const char* strstr(const char* __s1, const char* __s2) {
  return __builtin_strstr(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) char* strstr(char* __s1, const char* __s2) {
  return __builtin_strstr(__s1, __s2);
}
}
# 63 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstring" 2 3
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstring" 3


#pragma clang diagnostic push
# 76 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstring" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 76 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstring" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 76 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstring" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 76 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstring" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 76 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstring" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 76 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstring" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

using ::size_t __attribute__((__using_if_exists__));
using ::memcpy __attribute__((__using_if_exists__));
using ::memmove __attribute__((__using_if_exists__));
using ::strcpy __attribute__((__using_if_exists__));
using ::strncpy __attribute__((__using_if_exists__));
using ::strcat __attribute__((__using_if_exists__));
using ::strncat __attribute__((__using_if_exists__));
using ::memcmp __attribute__((__using_if_exists__));
using ::strcmp __attribute__((__using_if_exists__));
using ::strncmp __attribute__((__using_if_exists__));
using ::strcoll __attribute__((__using_if_exists__));
using ::strxfrm __attribute__((__using_if_exists__));
using ::memchr __attribute__((__using_if_exists__));
using ::strchr __attribute__((__using_if_exists__));
using ::strcspn __attribute__((__using_if_exists__));
using ::strpbrk __attribute__((__using_if_exists__));
using ::strrchr __attribute__((__using_if_exists__));
using ::strspn __attribute__((__using_if_exists__));
using ::strstr __attribute__((__using_if_exists__));
using ::strtok __attribute__((__using_if_exists__));
using ::memset __attribute__((__using_if_exists__));
using ::strerror __attribute__((__using_if_exists__));
using ::strlen __attribute__((__using_if_exists__));

}}
# 102 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstring" 3
#pragma clang diagnostic pop
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/hash.h" 2 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/hash.h" 3


#pragma clang diagnostic push
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/hash.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/hash.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/hash.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/hash.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/hash.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/hash.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Size __loadword(const void* __p) {
  _Size __r;
  std::memcpy(&__r, __p, sizeof(__r));
  return __r;
}




template <class _Size, size_t = sizeof(_Size) * 8>
struct __murmur2_or_cityhash;

template <class _Size>
struct __murmur2_or_cityhash<_Size, 32> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) _Size
  operator()(const void* __key, _Size __len) const {

    const _Size __m = 0x5bd1e995;
    const _Size __r = 24;
    _Size __h = __len;
    const unsigned char* __data = static_cast<const unsigned char*>(__key);
    for (; __len >= 4; __data += 4, __len -= 4) {
      _Size __k = std::__loadword<_Size>(__data);
      __k *= __m;
      __k ^= __k >> __r;
      __k *= __m;
      __h *= __m;
      __h ^= __k;
    }
    switch (__len) {
    case 3:
      __h ^= static_cast<_Size>(__data[2] << 16);
      [[fallthrough]];
    case 2:
      __h ^= static_cast<_Size>(__data[1] << 8);
      [[fallthrough]];
    case 1:
      __h ^= __data[0];
      __h *= __m;
    }
    __h ^= __h >> 13;
    __h *= __m;
    __h ^= __h >> 15;
    return __h;
  }
};

template <class _Size>
struct __murmur2_or_cityhash<_Size, 64> {

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) _Size
  operator()(const void* __key, _Size __len) const {
    const char* __s = static_cast<const char*>(__key);
    if (__len <= 32) {
      if (__len <= 16) {
        return __hash_len_0_to_16(__s, __len);
      } else {
        return __hash_len_17_to_32(__s, __len);
      }
    } else if (__len <= 64) {
      return __hash_len_33_to_64(__s, __len);
    }



    _Size __x = std::__loadword<_Size>(__s + __len - 40);
    _Size __y = std::__loadword<_Size>(__s + __len - 16) + std::__loadword<_Size>(__s + __len - 56);
    _Size __z =
        __hash_len_16(std::__loadword<_Size>(__s + __len - 48) + __len, std::__loadword<_Size>(__s + __len - 24));
    pair<_Size, _Size> __v = __weak_hash_len_32_with_seeds(__s + __len - 64, __len, __z);
    pair<_Size, _Size> __w = __weak_hash_len_32_with_seeds(__s + __len - 32, __y + __k1, __x);
    __x = __x * __k1 + std::__loadword<_Size>(__s);


    __len = (__len - 1) & ~static_cast<_Size>(63);
    do {
      __x = __rotate(__x + __y + __v.first + std::__loadword<_Size>(__s + 8), 37) * __k1;
      __y = __rotate(__y + __v.second + std::__loadword<_Size>(__s + 48), 42) * __k1;
      __x ^= __w.second;
      __y += __v.first + std::__loadword<_Size>(__s + 40);
      __z = __rotate(__z + __w.first, 33) * __k1;
      __v = __weak_hash_len_32_with_seeds(__s, __v.second * __k1, __x + __w.first);
      __w = __weak_hash_len_32_with_seeds(__s + 32, __z + __w.second, __y + std::__loadword<_Size>(__s + 16));
      std::swap(__z, __x);
      __s += 64;
      __len -= 64;
    } while (__len != 0);
    return __hash_len_16(__hash_len_16(__v.first, __w.first) + __shift_mix(__y) * __k1 + __z,
                         __hash_len_16(__v.second, __w.second) + __x);
  }

private:

  static const _Size __k0 = 0xc3a5c85c97cb3127ULL;
  static const _Size __k1 = 0xb492b66fbe98f273ULL;
  static const _Size __k2 = 0x9ae16a3b2f90404fULL;
  static const _Size __k3 = 0xc949d7c7509e6557ULL;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static _Size __rotate(_Size __val, int __shift) {
    return __shift == 0 ? __val : ((__val >> __shift) | (__val << (64 - __shift)));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static _Size __rotate_by_at_least_1(_Size __val, int __shift) {
    return (__val >> __shift) | (__val << (64 - __shift));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static _Size __shift_mix(_Size __val) { return __val ^ (__val >> 47); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) static _Size __hash_len_16(_Size __u, _Size __v) {
    const _Size __mul = 0x9ddfea08eb382d69ULL;
    _Size __a = (__u ^ __v) * __mul;
    __a ^= (__a >> 47);
    _Size __b = (__v ^ __a) * __mul;
    __b ^= (__b >> 47);
    __b *= __mul;
    return __b;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) static _Size
  __hash_len_0_to_16(const char* __s, _Size __len) {
    if (__len > 8) {
      const _Size __a = std::__loadword<_Size>(__s);
      const _Size __b = std::__loadword<_Size>(__s + __len - 8);
      return __hash_len_16(__a, __rotate_by_at_least_1(__b + __len, __len)) ^ __b;
    }
    if (__len >= 4) {
      const uint32_t __a = std::__loadword<uint32_t>(__s);
      const uint32_t __b = std::__loadword<uint32_t>(__s + __len - 4);



      return __hash_len_16(__len + (__a << 3), __b);

    }
    if (__len > 0) {
      const unsigned char __a = static_cast<unsigned char>(__s[0]);
      const unsigned char __b = static_cast<unsigned char>(__s[__len >> 1]);
      const unsigned char __c = static_cast<unsigned char>(__s[__len - 1]);
      const uint32_t __y = static_cast<uint32_t>(__a) + (static_cast<uint32_t>(__b) << 8);
      const uint32_t __z = __len + (static_cast<uint32_t>(__c) << 2);
      return __shift_mix(__y * __k2 ^ __z * __k3) * __k2;
    }
    return __k2;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) static _Size
  __hash_len_17_to_32(const char* __s, _Size __len) {
    const _Size __a = std::__loadword<_Size>(__s) * __k1;
    const _Size __b = std::__loadword<_Size>(__s + 8);
    const _Size __c = std::__loadword<_Size>(__s + __len - 8) * __k2;
    const _Size __d = std::__loadword<_Size>(__s + __len - 16) * __k0;
    return __hash_len_16(
        __rotate(__a - __b, 43) + __rotate(__c, 30) + __d, __a + __rotate(__b ^ __k3, 20) - __c + __len);
  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) static pair<_Size, _Size>
  __weak_hash_len_32_with_seeds(_Size __w, _Size __x, _Size __y, _Size __z, _Size __a, _Size __b) {
    __a += __w;
    __b = __rotate(__b + __a + __z, 21);
    const _Size __c = __a;
    __a += __x;
    __a += __y;
    __b += __rotate(__a, 44);
    return pair<_Size, _Size>(__a + __z, __b + __c);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) static pair<_Size, _Size>
  __weak_hash_len_32_with_seeds(const char* __s, _Size __a, _Size __b) {
    return __weak_hash_len_32_with_seeds(
        std::__loadword<_Size>(__s),
        std::__loadword<_Size>(__s + 8),
        std::__loadword<_Size>(__s + 16),
        std::__loadword<_Size>(__s + 24),
        __a,
        __b);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) static _Size
  __hash_len_33_to_64(const char* __s, size_t __len) {
    _Size __z = std::__loadword<_Size>(__s + 24);
    _Size __a = std::__loadword<_Size>(__s) + (__len + std::__loadword<_Size>(__s + __len - 16)) * __k0;
    _Size __b = __rotate(__a + __z, 52);
    _Size __c = __rotate(__a, 37);
    __a += std::__loadword<_Size>(__s + 8);
    __c += __rotate(__a, 7);
    __a += std::__loadword<_Size>(__s + 16);
    _Size __vf = __a + __z;
    _Size __vs = __b + __rotate(__a, 31) + __c;
    __a = std::__loadword<_Size>(__s + 16) + std::__loadword<_Size>(__s + __len - 32);
    __z += std::__loadword<_Size>(__s + __len - 8);
    __b = __rotate(__a + __z, 52);
    __c = __rotate(__a, 37);
    __a += std::__loadword<_Size>(__s + __len - 24);
    __c += __rotate(__a, 7);
    __a += std::__loadword<_Size>(__s + __len - 16);
    _Size __wf = __a + __z;
    _Size __ws = __b + __rotate(__a, 31) + __c;
    _Size __r = __shift_mix((__vf + __ws) * __k2 + (__wf + __vs) * __k0);
    return __shift_mix(__r * __k0 + __vs) * __k2;
  }
};

template <class _Tp, size_t = sizeof(_Tp) / sizeof(size_t)>
struct __scalar_hash;

template <class _Tp>
struct __scalar_hash<_Tp, 0> : public __unary_function<_Tp, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(_Tp __v) const noexcept {
    union {
      _Tp __t;
      size_t __a;
    } __u;
    __u.__a = 0;
    __u.__t = __v;
    return __u.__a;
  }
};

template <class _Tp>
struct __scalar_hash<_Tp, 1> : public __unary_function<_Tp, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(_Tp __v) const noexcept {
    union {
      _Tp __t;
      size_t __a;
    } __u;
    __u.__t = __v;
    return __u.__a;
  }
};

template <class _Tp>
struct __scalar_hash<_Tp, 2> : public __unary_function<_Tp, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(_Tp __v) const noexcept {
    union {
      _Tp __t;
      struct {
        size_t __a;
        size_t __b;
      } __s;
    } __u;
    __u.__t = __v;
    return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
  }
};

template <class _Tp>
struct __scalar_hash<_Tp, 3> : public __unary_function<_Tp, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(_Tp __v) const noexcept {
    union {
      _Tp __t;
      struct {
        size_t __a;
        size_t __b;
        size_t __c;
      } __s;
    } __u;
    __u.__t = __v;
    return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
  }
};

template <class _Tp>
struct __scalar_hash<_Tp, 4> : public __unary_function<_Tp, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(_Tp __v) const noexcept {
    union {
      _Tp __t;
      struct {
        size_t __a;
        size_t __b;
        size_t __c;
        size_t __d;
      } __s;
    } __u;
    __u.__t = __v;
    return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
  }
};

struct _PairT {
  size_t first;
  size_t second;
};

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline size_t __hash_combine(size_t __lhs, size_t __rhs) noexcept {
  typedef __scalar_hash<_PairT> _HashT;
  const _PairT __p = {__lhs, __rhs};
  return _HashT()(__p);
}

template <class _Tp>
struct hash<_Tp*> : public __unary_function<_Tp*, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(_Tp* __v) const noexcept {
    union {
      _Tp* __t;
      size_t __a;
    } __u;
    __u.__t = __v;
    return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
  }
};

template <>
struct hash<bool> : public __unary_function<bool, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(bool __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<char> : public __unary_function<char, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(char __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<signed char> : public __unary_function<signed char, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(signed char __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<unsigned char> : public __unary_function<unsigned char, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(unsigned char __v) const noexcept { return static_cast<size_t>(__v); }
};
# 365 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/hash.h" 3
template <>
struct hash<char16_t> : public __unary_function<char16_t, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(char16_t __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<char32_t> : public __unary_function<char32_t, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(char32_t __v) const noexcept { return static_cast<size_t>(__v); }
};


template <>
struct hash<wchar_t> : public __unary_function<wchar_t, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(wchar_t __v) const noexcept { return static_cast<size_t>(__v); }
};


template <>
struct hash<short> : public __unary_function<short, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(short __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<unsigned short> : public __unary_function<unsigned short, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(unsigned short __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<int> : public __unary_function<int, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(int __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<unsigned int> : public __unary_function<unsigned int, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(unsigned int __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<long> : public __unary_function<long, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(long __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<unsigned long> : public __unary_function<unsigned long, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(unsigned long __v) const noexcept { return static_cast<size_t>(__v); }
};

template <>
struct hash<long long> : public __scalar_hash<long long> {};

template <>
struct hash<unsigned long long> : public __scalar_hash<unsigned long long> {};



template <>
struct hash<__int128_t> : public __scalar_hash<__int128_t> {};

template <>
struct hash<__uint128_t> : public __scalar_hash<__uint128_t> {};



template <>
struct hash<float> : public __scalar_hash<float> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(float __v) const noexcept {

    if (__v == 0.0f)
      return 0;
    return __scalar_hash<float>::operator()(__v);
  }
};

template <>
struct hash<double> : public __scalar_hash<double> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(double __v) const noexcept {

    if (__v == 0.0)
      return 0;
    return __scalar_hash<double>::operator()(__v);
  }
};

template <>
struct hash<long double> : public __scalar_hash<long double> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(long double __v) const noexcept {

    if (__v == 0.0L)
      return 0;
# 473 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/hash.h" 3
    union {
      long double __t;
      struct {
        size_t __a;
        size_t __b;
      } __s;
    } __u;
    __u.__s.__a = 0;
    __u.__s.__b = 0;
    __u.__t = __v;
    return __u.__s.__a ^ __u.__s.__b;



  }
};

template <class _Tp, bool = is_enum<_Tp>::value>
struct __enum_hash : public __unary_function<_Tp, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(_Tp __v) const noexcept {
    typedef typename underlying_type<_Tp>::type type;
    return hash<type>()(static_cast<type>(__v));
  }
};
template <class _Tp>
struct __enum_hash<_Tp, false> {
  __enum_hash() = delete;
  __enum_hash(__enum_hash const&) = delete;
  __enum_hash& operator=(__enum_hash const&) = delete;
};

template <class _Tp>
struct hash : public __enum_hash<_Tp> {};



template <>
struct hash<nullptr_t> : public __unary_function<nullptr_t, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(nullptr_t) const noexcept { return 662607004ull; }
};



template <class _Key, class _Hash>
using __check_hash_requirements __attribute__((__nodebug__)) =
    integral_constant<bool,
                      is_copy_constructible<_Hash>::value && is_move_constructible<_Hash>::value &&
                          __invokable_r<size_t, _Hash, _Key const&>::value >;

template <class _Key, class _Hash = hash<_Key> >
using __has_enabled_hash __attribute__((__nodebug__)) =
    integral_constant<bool, __check_hash_requirements<_Key, _Hash>::value && is_default_constructible<_Hash>::value >;


template <class _Type, class>
using __enable_hash_helper_imp __attribute__((__nodebug__)) = _Type;

template <class _Type, class... _Keys>
using __enable_hash_helper __attribute__((__nodebug__)) =
    __enable_hash_helper_imp<_Type, __enable_if_t<__all<__has_enabled_hash<_Keys>::value...>::value> >;







}}
# 540 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/hash.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 2 3
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_identity.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_identity.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_identity.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_identity.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_identity.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_identity.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_identity.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_identity.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct __type_identity {
  typedef _Tp type;
};

template <class _Tp>
using __type_identity_t __attribute__((__nodebug__)) = typename __type_identity<_Tp>::type;
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_identity.h" 3
}}
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/type_identity.h" 3
#pragma clang diagnostic pop
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 2 3
# 48 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 2 3

#pragma clang diagnostic push
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Ptr>
struct __is_noexcept_deref_or_void {
  static constexpr bool value = noexcept(*std::declval<_Ptr>());
};

template <>
struct __is_noexcept_deref_or_void<void*> : true_type {};


template <class _Tp>
struct default_delete {
  static_assert(!is_function<_Tp>::value, "default_delete cannot be instantiated for function types");

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr default_delete() noexcept = default;



  template <class _Up, __enable_if_t<is_convertible<_Up*, _Tp*>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) default_delete(const default_delete<_Up>&) noexcept {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator()(_Tp* __ptr) const noexcept {
    static_assert(sizeof(_Tp) >= 0, "cannot delete an incomplete type");
    static_assert(!is_void<_Tp>::value, "cannot delete an incomplete type");
    delete __ptr;
  }
};

template <class _Tp>
struct default_delete<_Tp[]> {
private:
  template <class _Up>
  struct _EnableIfConvertible : enable_if<is_convertible<_Up (*)[], _Tp (*)[]>::value> {};

public:

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr default_delete() noexcept = default;




  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  default_delete(const default_delete<_Up[]>&, typename _EnableIfConvertible<_Up>::type* = 0) noexcept {}

  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename _EnableIfConvertible<_Up>::type
  operator()(_Up* __ptr) const noexcept {
    static_assert(sizeof(_Up) >= 0, "cannot delete an incomplete type");
    delete[] __ptr;
  }
};

template <class _Deleter>
struct __unique_ptr_deleter_sfinae {
  static_assert(!is_reference<_Deleter>::value, "incorrect specialization");
  typedef const _Deleter& __lval_ref_type;
  typedef _Deleter&& __good_rval_ref_type;
  typedef true_type __enable_rval_overload;
};

template <class _Deleter>
struct __unique_ptr_deleter_sfinae<_Deleter const&> {
  typedef const _Deleter& __lval_ref_type;
  typedef const _Deleter&& __bad_rval_ref_type;
  typedef false_type __enable_rval_overload;
};

template <class _Deleter>
struct __unique_ptr_deleter_sfinae<_Deleter&> {
  typedef _Deleter& __lval_ref_type;
  typedef _Deleter&& __bad_rval_ref_type;
  typedef false_type __enable_rval_overload;
};







template <class _Tp, class _Dp = default_delete<_Tp> >
class unique_ptr {
public:
  typedef _Tp element_type;
  typedef _Dp deleter_type;
  typedef __attribute__((__nodebug__)) typename __pointer<_Tp, deleter_type>::type pointer;

  static_assert(!is_rvalue_reference<deleter_type>::value, "the specified deleter type cannot be an rvalue reference");







  using __trivially_relocatable = __conditional_t<
      __libcpp_is_trivially_relocatable<pointer>::value && __libcpp_is_trivially_relocatable<deleter_type>::value,
      unique_ptr,
      void>;

private:
  __compressed_pair<pointer, deleter_type> __ptr_;

  typedef __attribute__((__nodebug__)) __unique_ptr_deleter_sfinae<_Dp> _DeleterSFINAE;

  template <bool _Dummy>
  using _LValRefType __attribute__((__nodebug__)) = typename __dependent_type<_DeleterSFINAE, _Dummy>::__lval_ref_type;

  template <bool _Dummy>
  using _GoodRValRefType __attribute__((__nodebug__)) = typename __dependent_type<_DeleterSFINAE, _Dummy>::__good_rval_ref_type;

  template <bool _Dummy>
  using _BadRValRefType __attribute__((__nodebug__)) = typename __dependent_type<_DeleterSFINAE, _Dummy>::__bad_rval_ref_type;

  template <bool _Dummy, class _Deleter = typename __dependent_type< __type_identity<deleter_type>, _Dummy>::type>
  using _EnableIfDeleterDefaultConstructible __attribute__((__nodebug__)) =
      __enable_if_t<is_default_constructible<_Deleter>::value && !is_pointer<_Deleter>::value>;

  template <class _ArgType>
  using _EnableIfDeleterConstructible __attribute__((__nodebug__)) = __enable_if_t<is_constructible<deleter_type, _ArgType>::value>;

  template <class _UPtr, class _Up>
  using _EnableIfMoveConvertible __attribute__((__nodebug__)) =
      __enable_if_t< is_convertible<typename _UPtr::pointer, pointer>::value && !is_array<_Up>::value >;

  template <class _UDel>
  using _EnableIfDeleterConvertible __attribute__((__nodebug__)) =
      __enable_if_t< (is_reference<_Dp>::value && is_same<_Dp, _UDel>::value) ||
                     (!is_reference<_Dp>::value && is_convertible<_UDel, _Dp>::value) >;

  template <class _UDel>
  using _EnableIfDeleterAssignable = __enable_if_t< is_assignable<_Dp&, _UDel&&>::value >;

public:
  template <bool _Dummy = true, class = _EnableIfDeleterDefaultConstructible<_Dummy> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr unique_ptr() noexcept : __ptr_(__value_init_tag(), __value_init_tag()) {}

  template <bool _Dummy = true, class = _EnableIfDeleterDefaultConstructible<_Dummy> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr unique_ptr(nullptr_t) noexcept
      : __ptr_(__value_init_tag(), __value_init_tag()) {}

  template <bool _Dummy = true, class = _EnableIfDeleterDefaultConstructible<_Dummy> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                                explicit unique_ptr(pointer __p) noexcept : __ptr_(__p, __value_init_tag()) {}

  template <bool _Dummy = true, class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr(pointer __p, _LValRefType<_Dummy> __d) noexcept
      : __ptr_(__p, __d) {}

  template <bool _Dummy = true, class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr(pointer __p, _GoodRValRefType<_Dummy> __d) noexcept
      : __ptr_(__p, std::move(__d)) {
    static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
  }

  template <bool _Dummy = true, class = _EnableIfDeleterConstructible<_BadRValRefType<_Dummy> > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr(pointer __p, _BadRValRefType<_Dummy> __d) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr(unique_ptr&& __u) noexcept
      : __ptr_(__u.release(), std::forward<deleter_type>(__u.get_deleter())) {}

  template <class _Up,
            class _Ep,
            class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
            class = _EnableIfDeleterConvertible<_Ep> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
      : __ptr_(__u.release(), std::forward<_Ep>(__u.get_deleter())) {}







  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr& operator=(unique_ptr&& __u) noexcept {
    reset(__u.release());
    __ptr_.second() = std::forward<deleter_type>(__u.get_deleter());
    return *this;
  }

  template <class _Up,
            class _Ep,
            class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
            class = _EnableIfDeleterAssignable<_Ep> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr& operator=(unique_ptr<_Up, _Ep>&& __u) noexcept {
    reset(__u.release());
    __ptr_.second() = std::forward<_Ep>(__u.get_deleter());
    return *this;
  }
# 261 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~unique_ptr() { reset(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr& operator=(nullptr_t) noexcept {
    reset();
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __add_lvalue_reference_t<_Tp> operator*() const
      noexcept(__is_noexcept_deref_or_void<pointer>::value) {
    return *__ptr_.first();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer operator->() const noexcept { return __ptr_.first(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer get() const noexcept { return __ptr_.first(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deleter_type& get_deleter() noexcept { return __ptr_.second(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const deleter_type& get_deleter() const noexcept {
    return __ptr_.second();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit operator bool() const noexcept {
    return __ptr_.first() != nullptr;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer release() noexcept {
    pointer __t = __ptr_.first();
    __ptr_.first() = pointer();
    return __t;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reset(pointer __p = pointer()) noexcept {
    pointer __tmp = __ptr_.first();
    __ptr_.first() = __p;
    if (__tmp)
      __ptr_.second()(__tmp);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(unique_ptr& __u) noexcept { __ptr_.swap(__u.__ptr_); }
};

template <class _Tp, class _Dp>
class unique_ptr<_Tp[], _Dp> {
public:
  typedef _Tp element_type;
  typedef _Dp deleter_type;
  typedef typename __pointer<_Tp, deleter_type>::type pointer;







  using __trivially_relocatable = __conditional_t<
      __libcpp_is_trivially_relocatable<pointer>::value && __libcpp_is_trivially_relocatable<deleter_type>::value,
      unique_ptr,
      void>;

private:
  __compressed_pair<pointer, deleter_type> __ptr_;

  template <class _From>
  struct _CheckArrayPointerConversion : is_same<_From, pointer> {};

  template <class _FromElem>
  struct _CheckArrayPointerConversion<_FromElem*>
      : integral_constant<bool,
                          is_same<_FromElem*, pointer>::value ||
                              (is_same<pointer, element_type*>::value &&
                               is_convertible<_FromElem (*)[], element_type (*)[]>::value) > {};

  typedef __unique_ptr_deleter_sfinae<_Dp> _DeleterSFINAE;

  template <bool _Dummy>
  using _LValRefType __attribute__((__nodebug__)) = typename __dependent_type<_DeleterSFINAE, _Dummy>::__lval_ref_type;

  template <bool _Dummy>
  using _GoodRValRefType __attribute__((__nodebug__)) = typename __dependent_type<_DeleterSFINAE, _Dummy>::__good_rval_ref_type;

  template <bool _Dummy>
  using _BadRValRefType __attribute__((__nodebug__)) = typename __dependent_type<_DeleterSFINAE, _Dummy>::__bad_rval_ref_type;

  template <bool _Dummy, class _Deleter = typename __dependent_type< __type_identity<deleter_type>, _Dummy>::type>
  using _EnableIfDeleterDefaultConstructible __attribute__((__nodebug__)) =
      __enable_if_t<is_default_constructible<_Deleter>::value && !is_pointer<_Deleter>::value>;

  template <class _ArgType>
  using _EnableIfDeleterConstructible __attribute__((__nodebug__)) = __enable_if_t<is_constructible<deleter_type, _ArgType>::value>;

  template <class _Pp>
  using _EnableIfPointerConvertible __attribute__((__nodebug__)) = __enable_if_t< _CheckArrayPointerConversion<_Pp>::value >;

  template <class _UPtr, class _Up, class _ElemT = typename _UPtr::element_type>
  using _EnableIfMoveConvertible __attribute__((__nodebug__)) =
      __enable_if_t< is_array<_Up>::value && is_same<pointer, element_type*>::value &&
                     is_same<typename _UPtr::pointer, _ElemT*>::value &&
                     is_convertible<_ElemT (*)[], element_type (*)[]>::value >;

  template <class _UDel>
  using _EnableIfDeleterConvertible __attribute__((__nodebug__)) =
      __enable_if_t< (is_reference<_Dp>::value && is_same<_Dp, _UDel>::value) ||
                     (!is_reference<_Dp>::value && is_convertible<_UDel, _Dp>::value) >;

  template <class _UDel>
  using _EnableIfDeleterAssignable __attribute__((__nodebug__)) = __enable_if_t< is_assignable<_Dp&, _UDel&&>::value >;

public:
  template <bool _Dummy = true, class = _EnableIfDeleterDefaultConstructible<_Dummy> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr unique_ptr() noexcept : __ptr_(__value_init_tag(), __value_init_tag()) {}

  template <bool _Dummy = true, class = _EnableIfDeleterDefaultConstructible<_Dummy> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr unique_ptr(nullptr_t) noexcept
      : __ptr_(__value_init_tag(), __value_init_tag()) {}

  template <class _Pp,
            bool _Dummy = true,
            class = _EnableIfDeleterDefaultConstructible<_Dummy>,
            class = _EnableIfPointerConvertible<_Pp> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                                explicit unique_ptr(_Pp __p) noexcept : __ptr_(__p, __value_init_tag()) {}

  template <class _Pp,
            bool _Dummy = true,
            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> >,
            class = _EnableIfPointerConvertible<_Pp> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr(_Pp __p, _LValRefType<_Dummy> __d) noexcept
      : __ptr_(__p, __d) {}

  template <bool _Dummy = true, class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr(nullptr_t, _LValRefType<_Dummy> __d) noexcept
      : __ptr_(nullptr, __d) {}

  template <class _Pp,
            bool _Dummy = true,
            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> >,
            class = _EnableIfPointerConvertible<_Pp> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr(_Pp __p, _GoodRValRefType<_Dummy> __d) noexcept
      : __ptr_(__p, std::move(__d)) {
    static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
  }

  template <bool _Dummy = true, class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr(nullptr_t, _GoodRValRefType<_Dummy> __d) noexcept
      : __ptr_(nullptr, std::move(__d)) {
    static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
  }

  template <class _Pp,
            bool _Dummy = true,
            class = _EnableIfDeleterConstructible<_BadRValRefType<_Dummy> >,
            class = _EnableIfPointerConvertible<_Pp> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr(_Pp __p, _BadRValRefType<_Dummy> __d) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr(unique_ptr&& __u) noexcept
      : __ptr_(__u.release(), std::forward<deleter_type>(__u.get_deleter())) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr& operator=(unique_ptr&& __u) noexcept {
    reset(__u.release());
    __ptr_.second() = std::forward<deleter_type>(__u.get_deleter());
    return *this;
  }

  template <class _Up,
            class _Ep,
            class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
            class = _EnableIfDeleterConvertible<_Ep> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
      : __ptr_(__u.release(), std::forward<_Ep>(__u.get_deleter())) {}

  template <class _Up,
            class _Ep,
            class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
            class = _EnableIfDeleterAssignable<_Ep> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr& operator=(unique_ptr<_Up, _Ep>&& __u) noexcept {
    reset(__u.release());
    __ptr_.second() = std::forward<_Ep>(__u.get_deleter());
    return *this;
  }






public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~unique_ptr() { reset(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_ptr& operator=(nullptr_t) noexcept {
    reset();
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __add_lvalue_reference_t<_Tp> operator[](size_t __i) const {
    return __ptr_.first()[__i];
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer get() const noexcept { return __ptr_.first(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deleter_type& get_deleter() noexcept { return __ptr_.second(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const deleter_type& get_deleter() const noexcept {
    return __ptr_.second();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit operator bool() const noexcept {
    return __ptr_.first() != nullptr;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer release() noexcept {
    pointer __t = __ptr_.first();
    __ptr_.first() = pointer();
    return __t;
  }

  template <class _Pp, __enable_if_t<_CheckArrayPointerConversion<_Pp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reset(_Pp __p) noexcept {
    pointer __tmp = __ptr_.first();
    __ptr_.first() = __p;
    if (__tmp)
      __ptr_.second()(__tmp);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reset(nullptr_t = nullptr) noexcept {
    pointer __tmp = __ptr_.first();
    __ptr_.first() = nullptr;
    if (__tmp)
      __ptr_.second()(__tmp);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(unique_ptr& __u) noexcept { __ptr_.swap(__u.__ptr_); }
};

template <class _Tp, class _Dp, __enable_if_t<__is_swappable_v<_Dp>, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
swap(unique_ptr<_Tp, _Dp>& __x, unique_ptr<_Tp, _Dp>& __y) noexcept {
  __x.swap(__y);
}

template <class _T1, class _D1, class _T2, class _D2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator==(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
  return __x.get() == __y.get();
}


template <class _T1, class _D1, class _T2, class _D2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
  return !(__x == __y);
}


template <class _T1, class _D1, class _T2, class _D2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
  typedef typename unique_ptr<_T1, _D1>::pointer _P1;
  typedef typename unique_ptr<_T2, _D2>::pointer _P2;
  typedef typename common_type<_P1, _P2>::type _Vp;
  return less<_Vp>()(__x.get(), __y.get());
}

template <class _T1, class _D1, class _T2, class _D2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
  return __y < __x;
}

template <class _T1, class _D1, class _T2, class _D2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
  return !(__y < __x);
}

template <class _T1, class _D1, class _T2, class _D2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
  return !(__x < __y);
}
# 540 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 3
template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator==(const unique_ptr<_T1, _D1>& __x, nullptr_t) noexcept {
  return !__x;
}


template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(nullptr_t, const unique_ptr<_T1, _D1>& __x) noexcept {
  return !__x;
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const unique_ptr<_T1, _D1>& __x, nullptr_t) noexcept {
  return static_cast<bool>(__x);
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(nullptr_t, const unique_ptr<_T1, _D1>& __x) noexcept {
  return static_cast<bool>(__x);
}


template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(const unique_ptr<_T1, _D1>& __x, nullptr_t) {
  typedef typename unique_ptr<_T1, _D1>::pointer _P1;
  return less<_P1>()(__x.get(), nullptr);
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(nullptr_t, const unique_ptr<_T1, _D1>& __x) {
  typedef typename unique_ptr<_T1, _D1>::pointer _P1;
  return less<_P1>()(nullptr, __x.get());
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>(const unique_ptr<_T1, _D1>& __x, nullptr_t) {
  return nullptr < __x;
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>(nullptr_t, const unique_ptr<_T1, _D1>& __x) {
  return __x < nullptr;
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<=(const unique_ptr<_T1, _D1>& __x, nullptr_t) {
  return !(nullptr < __x);
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<=(nullptr_t, const unique_ptr<_T1, _D1>& __x) {
  return !(__x < nullptr);
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>=(const unique_ptr<_T1, _D1>& __x, nullptr_t) {
  return !(__x < nullptr);
}

template <class _T1, class _D1>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>=(nullptr_t, const unique_ptr<_T1, _D1>& __x) {
  return !(nullptr < __x);
}
# 616 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 3
template <class _Tp>
struct __unique_if {
  typedef unique_ptr<_Tp> __unique_single;
};

template <class _Tp>
struct __unique_if<_Tp[]> {
  typedef unique_ptr<_Tp[]> __unique_array_unknown_bound;
};

template <class _Tp, size_t _Np>
struct __unique_if<_Tp[_Np]> {
  typedef void __unique_array_known_bound;
};

template <class _Tp, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __unique_if<_Tp>::__unique_single
make_unique(_Args&&... __args) {
  return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...));
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __unique_if<_Tp>::__unique_array_unknown_bound
make_unique(size_t __n) {
  typedef __remove_extent_t<_Tp> _Up;
  return unique_ptr<_Tp>(new _Up[__n]());
}

template <class _Tp, class... _Args>
typename __unique_if<_Tp>::__unique_array_known_bound make_unique(_Args&&...) = delete;
# 668 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 3
template <class _Tp>
struct hash;

template <class _Tp, class _Dp>



struct hash<__enable_hash_helper< unique_ptr<_Tp, _Dp>, typename unique_ptr<_Tp, _Dp>::pointer> >

{

  __attribute__((__deprecated__)) typedef unique_ptr<_Tp, _Dp> argument_type;
  __attribute__((__deprecated__)) typedef size_t result_type;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(const unique_ptr<_Tp, _Dp>& __ptr) const {
    typedef typename unique_ptr<_Tp, _Dp>::pointer pointer;
    return hash<pointer>()(__ptr.get());
  }
};

}}
# 689 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/unique_ptr.h" 3
#pragma clang diagnostic pop
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3





# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_bounded_array.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_bounded_array.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_bounded_array.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_bounded_array.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_bounded_array.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_bounded_array.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_bounded_array.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_bounded_array.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class>
struct __libcpp_is_bounded_array : false_type {};
template <class _Tp, size_t _Np>
struct __libcpp_is_bounded_array<_Tp[_Np]> : true_type {};
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_bounded_array.h" 3
}}
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_bounded_array.h" 3
#pragma clang diagnostic pop
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3
# 54 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/typeinfo" 1 3
# 68 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/typeinfo" 3






namespace std
{
# 184 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/typeinfo" 3
struct __type_info_implementations {
  struct __string_impl_base {
    typedef const char* __type_name_t;
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__always_inline__)) constexpr static const char*
    __type_name_to_string(__type_name_t __v) noexcept {
      return __v;
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__always_inline__)) constexpr static __type_name_t
    __string_to_type_name(const char* __v) noexcept {
      return __v;
    }
  };

  struct __unique_impl : __string_impl_base {
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__always_inline__)) static size_t __hash(__type_name_t __v) noexcept {
      return reinterpret_cast<size_t>(__v);
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__always_inline__)) static bool __eq(__type_name_t __lhs, __type_name_t __rhs) noexcept {
      return __lhs == __rhs;
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__always_inline__)) static bool __lt(__type_name_t __lhs, __type_name_t __rhs) noexcept {
      return __lhs < __rhs;
    }
  };

  struct __non_unique_impl : __string_impl_base {
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__always_inline__)) static size_t __hash(__type_name_t __ptr) noexcept {
      size_t __hash = 5381;
      while (unsigned char __c = static_cast<unsigned char>(*__ptr++))
        __hash = (__hash * 33) ^ __c;
      return __hash;
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__always_inline__)) static bool __eq(__type_name_t __lhs, __type_name_t __rhs) noexcept {
      return __lhs == __rhs || __builtin_strcmp(__lhs, __rhs) == 0;
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__always_inline__)) static bool __lt(__type_name_t __lhs, __type_name_t __rhs) noexcept {
      return __builtin_strcmp(__lhs, __rhs) < 0;
    }
  };

  struct __non_unique_arm_rtti_bit_impl {
    typedef uintptr_t __type_name_t;

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__always_inline__)) static const char* __type_name_to_string(__type_name_t __v) noexcept {
      return reinterpret_cast<const char*>(__v & ~__non_unique_rtti_bit::value);
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__always_inline__)) static __type_name_t __string_to_type_name(const char* __v) noexcept {
      return reinterpret_cast<__type_name_t>(__v);
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__always_inline__)) static size_t __hash(__type_name_t __v) noexcept {
      if (__is_type_name_unique(__v))
        return __v;
      return __non_unique_impl::__hash(__type_name_to_string(__v));
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__always_inline__)) static bool __eq(__type_name_t __lhs, __type_name_t __rhs) noexcept {
      if (__lhs == __rhs)
        return true;
      if (__is_type_name_unique(__lhs) || __is_type_name_unique(__rhs))


        return false;
      return __builtin_strcmp(__type_name_to_string(__lhs), __type_name_to_string(__rhs)) == 0;
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__always_inline__)) static bool __lt(__type_name_t __lhs, __type_name_t __rhs) noexcept {
      if (__is_type_name_unique(__lhs) || __is_type_name_unique(__rhs))
        return __lhs < __rhs;
      return __builtin_strcmp(__type_name_to_string(__lhs), __type_name_to_string(__rhs)) < 0;
    }

  private:


    typedef integral_constant<__type_name_t, (1ULL << ((8 * sizeof(__type_name_t)) - 1))>
        __non_unique_rtti_bit;

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static bool __is_type_name_unique(__type_name_t __lhs) noexcept {
      return !(__lhs & __non_unique_rtti_bit::value);
    }
  };

  typedef

      __unique_impl







          __impl;
};
# 291 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/typeinfo" 3
class __attribute__((__visibility__("default"))) [[_Clang::__ptrauth_vtable_pointer__( process_independent, no_address_discrimination, no_extra_discrimination)]] type_info {
  type_info& operator=(const type_info&);
  type_info(const type_info&);

protected:
  typedef __type_info_implementations::__impl __impl;

  __impl::__type_name_t __type_name;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit type_info(const char* __n) : __type_name(__impl::__string_to_type_name(__n)) {}

public:
  virtual ~type_info();

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const char* name() const noexcept { return __impl::__type_name_to_string(__type_name); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool before(const type_info& __arg) const noexcept {
    return __impl::__lt(__type_name, __arg.__type_name);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t hash_code() const noexcept { return __impl::__hash(__type_name); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const type_info& __arg) const noexcept {


    if (__libcpp_is_constant_evaluated()) {
      return this == &__arg;
    }
    return __impl::__eq(__type_name, __arg.__type_name);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const type_info& __arg) const noexcept { return !operator==(__arg); }

};


class __attribute__((__visibility__("default"))) bad_cast : public exception {
public:
  bad_cast() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_cast(const bad_cast&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_cast& operator=(const bad_cast&) noexcept = default;
  ~bad_cast() noexcept override;
  const char* what() const noexcept override;
};

class __attribute__((__visibility__("default"))) bad_typeid : public exception {
public:
  bad_typeid() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_typeid(const bad_typeid&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_typeid& operator=(const bad_typeid&) noexcept = default;
  ~bad_typeid() noexcept override;
  const char* what() const noexcept override;
};

}
# 374 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/typeinfo" 3
#pragma clang diagnostic push
# 374 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/typeinfo" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 374 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/typeinfo" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 374 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/typeinfo" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 374 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/typeinfo" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 374 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/typeinfo" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 374 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/typeinfo" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_bad_cast() {

  throw bad_cast();



}
}}
# 382 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/typeinfo" 3
#pragma clang diagnostic pop
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/memory_order.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/memory_order.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/memory_order.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/memory_order.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/memory_order.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/memory_order.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/memory_order.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/memory_order.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {




enum __legacy_memory_order { __mo_relaxed, __mo_consume, __mo_acquire, __mo_release, __mo_acq_rel, __mo_seq_cst };

using __memory_order_underlying_t = underlying_type<__legacy_memory_order>::type;
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/memory_order.h" 3
enum memory_order {
  memory_order_relaxed = __mo_relaxed,
  memory_order_consume = __mo_consume,
  memory_order_acquire = __mo_acquire,
  memory_order_release = __mo_release,
  memory_order_acq_rel = __mo_acq_rel,
  memory_order_seq_cst = __mo_seq_cst,
};



}}
# 63 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/memory_order.h" 3
#pragma clang diagnostic pop
# 57 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3
# 61 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 65 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 2 3

#pragma clang diagnostic push
# 66 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 66 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 66 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 66 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 66 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 66 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 77 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
template <class _ValueType>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ValueType __libcpp_relaxed_load(_ValueType const* __value) {


  return __atomic_load_n(__value, 0);



}

template <class _ValueType>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ValueType __libcpp_acquire_load(_ValueType const* __value) {


  return __atomic_load_n(__value, 2);



}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp __libcpp_atomic_refcount_increment(_Tp& __t) noexcept {

  return __atomic_add_fetch(&__t, 1, 0);



}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp __libcpp_atomic_refcount_decrement(_Tp& __t) noexcept {

  return __atomic_add_fetch(&__t, -1, 4);



}

class __attribute__((__visibility__("default"))) bad_weak_ptr : public std::exception {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_weak_ptr() noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_weak_ptr(const bad_weak_ptr&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_weak_ptr& operator=(const bad_weak_ptr&) noexcept = default;
  ~bad_weak_ptr() noexcept override;
  const char* what() const noexcept override;
};

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_bad_weak_ptr() {

  throw bad_weak_ptr();



}

template <class _Tp>
class weak_ptr;

class __attribute__((__visibility__("default"))) __shared_count {
  __shared_count(const __shared_count&);
  __shared_count& operator=(const __shared_count&);

protected:
  long __shared_owners_;
  virtual ~__shared_count();

private:
  virtual void __on_zero_shared() noexcept = 0;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __shared_count(long __refs = 0) noexcept : __shared_owners_(__refs) {}





  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __add_shared() noexcept { __libcpp_atomic_refcount_increment(__shared_owners_); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __release_shared() noexcept {
    if (__libcpp_atomic_refcount_decrement(__shared_owners_) == -1) {
      __on_zero_shared();
      return true;
    }
    return false;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long use_count() const noexcept { return __libcpp_relaxed_load(&__shared_owners_) + 1; }
};

class __attribute__((__visibility__("default"))) __shared_weak_count : private __shared_count {
  long __shared_weak_owners_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __shared_weak_count(long __refs = 0) noexcept
      : __shared_count(__refs),
        __shared_weak_owners_(__refs) {}

protected:
  ~__shared_weak_count() override;

public:





  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __add_shared() noexcept { __shared_count::__add_shared(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __add_weak() noexcept { __libcpp_atomic_refcount_increment(__shared_weak_owners_); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __release_shared() noexcept {
    if (__shared_count::__release_shared())
      __release_weak();
  }

  void __release_weak() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long use_count() const noexcept { return __shared_count::use_count(); }
  __shared_weak_count* lock() noexcept;

  virtual const void* __get_deleter(const type_info&) const noexcept;

private:
  virtual void __on_zero_shared_weak() noexcept = 0;
};

template <class _Tp, class _Dp, class _Alloc>
class __shared_ptr_pointer : public __shared_weak_count {
  __compressed_pair<__compressed_pair<_Tp, _Dp>, _Alloc> __data_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a)
      : __data_(__compressed_pair<_Tp, _Dp>(__p, std::move(__d)), std::move(__a)) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) const void* __get_deleter(const type_info&) const noexcept override;


private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __on_zero_shared() noexcept override;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __on_zero_shared_weak() noexcept override;
};



template <class _Tp, class _Dp, class _Alloc>
const void* __shared_ptr_pointer<_Tp, _Dp, _Alloc>::__get_deleter(const type_info& __t) const noexcept {
  return __t == typeid(_Dp) ? std::addressof(__data_.first().second()) : nullptr;
}



template <class _Tp, class _Dp, class _Alloc>
void __shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared() noexcept {
  __data_.first().second()(__data_.first().first());
  __data_.first().second().~_Dp();
}

template <class _Tp, class _Dp, class _Alloc>
void __shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared_weak() noexcept {
  typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_pointer>::type _Al;
  typedef allocator_traits<_Al> _ATraits;
  typedef pointer_traits<typename _ATraits::pointer> _PTraits;

  _Al __a(__data_.second());
  __data_.second().~_Alloc();
  __a.deallocate(_PTraits::pointer_to(*this), 1);
}




struct __for_overwrite_tag {};

template <class _Tp, class _Alloc>
struct __shared_ptr_emplace : __shared_weak_count {
  template <class... _Args,
            class _Allocator = _Alloc,
            __enable_if_t<is_same<typename _Allocator::value_type, __for_overwrite_tag>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __shared_ptr_emplace(_Alloc __a, _Args&&...) : __storage_(std::move(__a)) {
    static_assert(
        sizeof...(_Args) == 0, "No argument should be provided to the control block when using _for_overwrite");
    ::new ((void*)__get_elem()) _Tp;
  }

  template <class... _Args,
            class _Allocator = _Alloc,
            __enable_if_t<!is_same<typename _Allocator::value_type, __for_overwrite_tag>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __shared_ptr_emplace(_Alloc __a, _Args&&... __args) : __storage_(std::move(__a)) {
    using _TpAlloc = typename __allocator_traits_rebind<_Alloc, __remove_cv_t<_Tp> >::type;
    _TpAlloc __tmp(*__get_alloc());
    allocator_traits<_TpAlloc>::construct(__tmp, __get_elem(), std::forward<_Args>(__args)...);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Alloc* __get_alloc() noexcept { return __storage_.__get_alloc(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* __get_elem() noexcept { return __storage_.__get_elem(); }

private:
  template <class _Allocator = _Alloc,
            __enable_if_t<is_same<typename _Allocator::value_type, __for_overwrite_tag>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __on_zero_shared_impl() noexcept {
    __get_elem()->~_Tp();
  }

  template <class _Allocator = _Alloc,
            __enable_if_t<!is_same<typename _Allocator::value_type, __for_overwrite_tag>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __on_zero_shared_impl() noexcept {
    using _TpAlloc = typename __allocator_traits_rebind<_Allocator, __remove_cv_t<_Tp> >::type;
    _TpAlloc __tmp(*__get_alloc());
    allocator_traits<_TpAlloc>::destroy(__tmp, __get_elem());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __on_zero_shared() noexcept override { __on_zero_shared_impl(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __on_zero_shared_weak() noexcept override {
    using _ControlBlockAlloc = typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type;
    using _ControlBlockPointer = typename allocator_traits<_ControlBlockAlloc>::pointer;
    _ControlBlockAlloc __tmp(*__get_alloc());
    __storage_.~_Storage();
    allocator_traits<_ControlBlockAlloc>::deallocate(__tmp, pointer_traits<_ControlBlockPointer>::pointer_to(*this), 1);
  }
# 304 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
  using _CompressedPair = __compressed_pair<_Alloc, _Tp>;
  struct alignas(_CompressedPair) _Storage {
    char __blob_[sizeof(_CompressedPair)];

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit _Storage(_Alloc&& __a) { ::new ((void*)__get_alloc()) _Alloc(std::move(__a)); }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~_Storage() { __get_alloc()->~_Alloc(); }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Alloc* __get_alloc() noexcept {
      _CompressedPair* __as_pair = reinterpret_cast<_CompressedPair*>(__blob_);
      typename _CompressedPair::_Base1* __first = _CompressedPair::__get_first_base(__as_pair);
      _Alloc* __alloc = reinterpret_cast<_Alloc*>(__first);
      return __alloc;
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__no_sanitize__("cfi"))) _Tp* __get_elem() noexcept {
      _CompressedPair* __as_pair = reinterpret_cast<_CompressedPair*>(__blob_);
      typename _CompressedPair::_Base2* __second = _CompressedPair::__get_second_base(__as_pair);
      _Tp* __elem = reinterpret_cast<_Tp*>(__second);
      return __elem;
    }
  };

  static_assert(alignof(_Storage) == alignof(_CompressedPair), "");
  static_assert(sizeof(_Storage) == sizeof(_CompressedPair), "");
  _Storage __storage_;
};

struct __shared_ptr_dummy_rebind_allocator_type;
template <>
class allocator<__shared_ptr_dummy_rebind_allocator_type> {
public:
  template <class _Other>
  struct rebind {
    typedef allocator<_Other> other;
  };
};

template <class _Tp>
class enable_shared_from_this;





template <class _Yp, class _Tp>
struct __bounded_convertible_to_unbounded : false_type {};

template <class _Up, std::size_t _Np, class _Tp>
struct __bounded_convertible_to_unbounded<_Up[_Np], _Tp> : is_same<__remove_cv_t<_Tp>, _Up[]> {};

template <class _Yp, class _Tp>
struct __compatible_with : _Or< is_convertible<_Yp*, _Tp*>, __bounded_convertible_to_unbounded<_Yp, _Tp> > {};
# 365 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
template <class _Yp, class _Tp, class = void>
struct __raw_pointer_compatible_with : _And< _Not<is_array<_Tp>>, is_convertible<_Yp*, _Tp*> > {};

template <class _Yp, class _Up, std::size_t _Np>
struct __raw_pointer_compatible_with<_Yp, _Up[_Np], __enable_if_t< is_convertible<_Yp (*)[_Np], _Up (*)[_Np]>::value> >
    : true_type {};

template <class _Yp, class _Up>
struct __raw_pointer_compatible_with<_Yp, _Up[], __enable_if_t< is_convertible<_Yp (*)[], _Up (*)[]>::value> >
    : true_type {};






template <class _Ptr, class = void>
struct __is_deletable : false_type {};
template <class _Ptr>
struct __is_deletable<_Ptr, decltype(delete std::declval<_Ptr>())> : true_type {};

template <class _Ptr, class = void>
struct __is_array_deletable : false_type {};
template <class _Ptr>
struct __is_array_deletable<_Ptr, decltype(delete[] std::declval<_Ptr>())> : true_type {};

template <class _Dp, class _Pt, class = decltype(std::declval<_Dp>()(std::declval<_Pt>()))>
true_type __well_formed_deleter_test(int);

template <class, class>
false_type __well_formed_deleter_test(...);

template <class _Dp, class _Pt>
struct __well_formed_deleter : decltype(std::__well_formed_deleter_test<_Dp, _Pt>(0)) {};

template <class _Dp, class _Yp, class _Tp>
struct __shared_ptr_deleter_ctor_reqs {
  static const bool value = __raw_pointer_compatible_with<_Yp, _Tp>::value && is_move_constructible<_Dp>::value &&
                            __well_formed_deleter<_Dp, _Yp*>::value;
};

template <class _Dp>
using __shared_ptr_nullptr_deleter_ctor_reqs = _And<is_move_constructible<_Dp>, __well_formed_deleter<_Dp, nullptr_t> >;







template <class _Tp>
class shared_ptr {
  struct __nullptr_sfinae_tag {};

public:

  typedef weak_ptr<_Tp> weak_type;
  typedef remove_extent_t<_Tp> element_type;






  using __trivially_relocatable = shared_ptr;

private:
  element_type* __ptr_;
  __shared_weak_count* __cntrl_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr shared_ptr() noexcept : __ptr_(nullptr), __cntrl_(nullptr) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr shared_ptr(nullptr_t) noexcept : __ptr_(nullptr), __cntrl_(nullptr) {}

  template <class _Yp,
            __enable_if_t< _And< __raw_pointer_compatible_with<_Yp, _Tp>




                                 ,
                                 _If<is_array<_Tp>::value, __is_array_deletable<_Yp*>, __is_deletable<_Yp*> >

                                 >::value,
                           int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit shared_ptr(_Yp* __p) : __ptr_(__p) {
    unique_ptr<_Yp> __hold(__p);
    typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
    typedef __shared_ptr_pointer<_Yp*, __shared_ptr_default_delete<_Tp, _Yp>, _AllocT> _CntrlBlk;
    __cntrl_ = new _CntrlBlk(__p, __shared_ptr_default_delete<_Tp, _Yp>(), _AllocT());
    __hold.release();
    __enable_weak_this(__p, __p);
  }

  template <class _Yp, class _Dp, __enable_if_t<__shared_ptr_deleter_ctor_reqs<_Dp, _Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr(_Yp* __p, _Dp __d) : __ptr_(__p) {

    try {

      typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
      typedef __shared_ptr_pointer<_Yp*, _Dp, _AllocT> _CntrlBlk;

      __cntrl_ = new _CntrlBlk(__p, std::move(__d), _AllocT());



      __enable_weak_this(__p, __p);

    } catch (...) {
      __d(__p);
      throw;
    }

  }

  template <class _Yp,
            class _Dp,
            class _Alloc,
            __enable_if_t<__shared_ptr_deleter_ctor_reqs<_Dp, _Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr(_Yp* __p, _Dp __d, _Alloc __a) : __ptr_(__p) {

    try {

      typedef __shared_ptr_pointer<_Yp*, _Dp, _Alloc> _CntrlBlk;
      typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
      typedef __allocator_destructor<_A2> _D2;
      _A2 __a2(__a);
      unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
      ::new ((void*)std::addressof(*__hold2.get()))

          _CntrlBlk(__p, std::move(__d), __a);



      __cntrl_ = std::addressof(*__hold2.release());
      __enable_weak_this(__p, __p);

    } catch (...) {
      __d(__p);
      throw;
    }

  }

  template <class _Dp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr(
      nullptr_t __p,
      _Dp __d,
      __enable_if_t<__shared_ptr_nullptr_deleter_ctor_reqs<_Dp>::value, __nullptr_sfinae_tag> = __nullptr_sfinae_tag())
      : __ptr_(nullptr) {

    try {

      typedef typename __shared_ptr_default_allocator<_Tp>::type _AllocT;
      typedef __shared_ptr_pointer<nullptr_t, _Dp, _AllocT> _CntrlBlk;

      __cntrl_ = new _CntrlBlk(__p, std::move(__d), _AllocT());




    } catch (...) {
      __d(__p);
      throw;
    }

  }

  template <class _Dp, class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr(
      nullptr_t __p,
      _Dp __d,
      _Alloc __a,
      __enable_if_t<__shared_ptr_nullptr_deleter_ctor_reqs<_Dp>::value, __nullptr_sfinae_tag> = __nullptr_sfinae_tag())
      : __ptr_(nullptr) {

    try {

      typedef __shared_ptr_pointer<nullptr_t, _Dp, _Alloc> _CntrlBlk;
      typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
      typedef __allocator_destructor<_A2> _D2;
      _A2 __a2(__a);
      unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
      ::new ((void*)std::addressof(*__hold2.get()))

          _CntrlBlk(__p, std::move(__d), __a);



      __cntrl_ = std::addressof(*__hold2.release());

    } catch (...) {
      __d(__p);
      throw;
    }

  }

  template <class _Yp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) noexcept
      : __ptr_(__p),
        __cntrl_(__r.__cntrl_) {
    if (__cntrl_)
      __cntrl_->__add_shared();
  }
# 583 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr(const shared_ptr& __r) noexcept : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_) {
    if (__cntrl_)
      __cntrl_->__add_shared();
  }

  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr(const shared_ptr<_Yp>& __r) noexcept : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_) {
    if (__cntrl_)
      __cntrl_->__add_shared();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr(shared_ptr&& __r) noexcept : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_) {
    __r.__ptr_ = nullptr;
    __r.__cntrl_ = nullptr;
  }

  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr(shared_ptr<_Yp>&& __r) noexcept : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_) {
    __r.__ptr_ = nullptr;
    __r.__cntrl_ = nullptr;
  }

  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit shared_ptr(const weak_ptr<_Yp>& __r)
      : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_ ? __r.__cntrl_->lock() : __r.__cntrl_) {
    if (__cntrl_ == nullptr)
      __throw_bad_weak_ptr();
  }
# 622 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
  template <class _Yp,
            class _Dp,
            __enable_if_t<!is_lvalue_reference<_Dp>::value && __compatible_with<_Yp, _Tp>::value &&
                              is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr(unique_ptr<_Yp, _Dp>&& __r) : __ptr_(__r.get()) {

    if (__ptr_ == nullptr)
      __cntrl_ = nullptr;
    else

    {
      typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
      typedef __shared_ptr_pointer<typename unique_ptr<_Yp, _Dp>::pointer, _Dp, _AllocT> _CntrlBlk;
      __cntrl_ = new _CntrlBlk(__r.get(), std::move(__r.get_deleter()), _AllocT());
      __enable_weak_this(__r.get(), __r.get());
    }
    __r.release();
  }

  template <class _Yp,
            class _Dp,
            class = void,
            __enable_if_t<is_lvalue_reference<_Dp>::value && __compatible_with<_Yp, _Tp>::value &&
                              is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr(unique_ptr<_Yp, _Dp>&& __r) : __ptr_(__r.get()) {

    if (__ptr_ == nullptr)
      __cntrl_ = nullptr;
    else

    {
      typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
      typedef __shared_ptr_pointer<typename unique_ptr<_Yp, _Dp>::pointer,
                                   reference_wrapper<__libcpp_remove_reference_t<_Dp> >,
                                   _AllocT>
          _CntrlBlk;
      __cntrl_ = new _CntrlBlk(__r.get(), std::ref(__r.get_deleter()), _AllocT());
      __enable_weak_this(__r.get(), __r.get());
    }
    __r.release();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~shared_ptr() {
    if (__cntrl_)
      __cntrl_->__release_shared();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp>& operator=(const shared_ptr& __r) noexcept {
    shared_ptr(__r).swap(*this);
    return *this;
  }

  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp>& operator=(const shared_ptr<_Yp>& __r) noexcept {
    shared_ptr(__r).swap(*this);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp>& operator=(shared_ptr&& __r) noexcept {
    shared_ptr(std::move(__r)).swap(*this);
    return *this;
  }

  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp>& operator=(shared_ptr<_Yp>&& __r) {
    shared_ptr(std::move(__r)).swap(*this);
    return *this;
  }
# 703 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
  template <class _Yp,
            class _Dp,
            __enable_if_t<_And< __compatible_with<_Yp, _Tp>,
                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*> >::value,
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp>& operator=(unique_ptr<_Yp, _Dp>&& __r) {
    shared_ptr(std::move(__r)).swap(*this);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(shared_ptr& __r) noexcept {
    std::swap(__ptr_, __r.__ptr_);
    std::swap(__cntrl_, __r.__cntrl_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reset() noexcept { shared_ptr().swap(*this); }

  template <class _Yp, __enable_if_t<__raw_pointer_compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reset(_Yp* __p) {
    shared_ptr(__p).swap(*this);
  }

  template <class _Yp, class _Dp, __enable_if_t<__shared_ptr_deleter_ctor_reqs<_Dp, _Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reset(_Yp* __p, _Dp __d) {
    shared_ptr(__p, __d).swap(*this);
  }

  template <class _Yp,
            class _Dp,
            class _Alloc,
            __enable_if_t<__shared_ptr_deleter_ctor_reqs<_Dp, _Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reset(_Yp* __p, _Dp __d, _Alloc __a) {
    shared_ptr(__p, __d, __a).swap(*this);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) element_type* get() const noexcept { return __ptr_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __add_lvalue_reference_t<element_type> operator*() const noexcept { return *__ptr_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) element_type* operator->() const noexcept {
    static_assert(!is_array<_Tp>::value, "std::shared_ptr<T>::operator-> is only valid when T is not an array type.");
    return __ptr_;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long use_count() const noexcept { return __cntrl_ ? __cntrl_->use_count() : 0; }


  __attribute__((__deprecated__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool unique() const noexcept { return use_count() == 1; }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit operator bool() const noexcept { return get() != nullptr; }

  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool owner_before(shared_ptr<_Up> const& __p) const noexcept {
    return __cntrl_ < __p.__cntrl_;
  }

  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool owner_before(weak_ptr<_Up> const& __p) const noexcept {
    return __cntrl_ < __p.__cntrl_;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __owner_equivalent(const shared_ptr& __p) const { return __cntrl_ == __p.__cntrl_; }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __add_lvalue_reference_t<element_type> operator[](ptrdiff_t __i) const {
    static_assert(is_array<_Tp>::value, "std::shared_ptr<T>::operator[] is only valid when T is an array type.");
    return __ptr_[__i];
  }



  template <class _Dp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Dp* __get_deleter() const noexcept {
    return static_cast<_Dp*>(__cntrl_ ? const_cast<void*>(__cntrl_->__get_deleter(typeid(_Dp))) : nullptr);
  }


  template <class _Yp, class _CntrlBlk>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static shared_ptr<_Tp> __create_with_control_block(_Yp* __p, _CntrlBlk* __cntrl) noexcept {
    shared_ptr<_Tp> __r;
    __r.__ptr_ = __p;
    __r.__cntrl_ = __cntrl;
    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
    return __r;
  }

private:
  template <class _Yp, bool = is_function<_Yp>::value>
  struct __shared_ptr_default_allocator {
    typedef allocator<__remove_cv_t<_Yp> > type;
  };

  template <class _Yp>
  struct __shared_ptr_default_allocator<_Yp, true> {
    typedef allocator<__shared_ptr_dummy_rebind_allocator_type> type;
  };

  template <class _Yp,
            class _OrigPtr,
            __enable_if_t<is_convertible<_OrigPtr*, const enable_shared_from_this<_Yp>*>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __enable_weak_this(const enable_shared_from_this<_Yp>* __e, _OrigPtr* __ptr) noexcept {
    typedef __remove_cv_t<_Yp> _RawYp;
    if (__e && __e->__weak_this_.expired()) {
      __e->__weak_this_ = shared_ptr<_RawYp>(*this, const_cast<_RawYp*>(static_cast<const _Yp*>(__ptr)));
    }
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __enable_weak_this(...) noexcept {}

  template <class, class _Yp>
  struct __shared_ptr_default_delete : default_delete<_Yp> {};

  template <class _Yp, class _Un, size_t _Sz>
  struct __shared_ptr_default_delete<_Yp[_Sz], _Un> : default_delete<_Yp[]> {};

  template <class _Yp, class _Un>
  struct __shared_ptr_default_delete<_Yp[], _Un> : default_delete<_Yp[]> {};

  template <class _Up>
  friend class shared_ptr;
  template <class _Up>
  friend class weak_ptr;
};


template <class _Tp>
shared_ptr(weak_ptr<_Tp>) -> shared_ptr<_Tp>;
template <class _Tp, class _Dp>
shared_ptr(unique_ptr<_Tp, _Dp>) -> shared_ptr<_Tp>;





template <class _Tp, class _Alloc, class... _Args, __enable_if_t<!is_array<_Tp>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp> allocate_shared(const _Alloc& __a, _Args&&... __args) {
  using _ControlBlock = __shared_ptr_emplace<_Tp, _Alloc>;
  using _ControlBlockAllocator = typename __allocator_traits_rebind<_Alloc, _ControlBlock>::type;
  __allocation_guard<_ControlBlockAllocator> __guard(__a, 1);
  ::new ((void*)std::addressof(*__guard.__get())) _ControlBlock(__a, std::forward<_Args>(__args)...);
  auto __control_block = __guard.__release_ptr();
  return shared_ptr<_Tp>::__create_with_control_block(
      (*__control_block).__get_elem(), std::addressof(*__control_block));
}

template <class _Tp, class... _Args, __enable_if_t<!is_array<_Tp>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp> make_shared(_Args&&... __args) {
  return std::allocate_shared<_Tp>(allocator<__remove_cv_t<_Tp> >(), std::forward<_Args>(__args)...);
}
# 872 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
template <size_t _Alignment>
struct __sp_aligned_storage {
  alignas(_Alignment) char __storage[_Alignment];
};

template <class _Tp, class _Alloc>
struct __unbounded_array_control_block;

template <class _Tp, class _Alloc>
struct __unbounded_array_control_block<_Tp[], _Alloc> : __shared_weak_count {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp* __get_data() noexcept { return __data_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __unbounded_array_control_block(
      _Alloc const& __alloc, size_t __count, _Tp const& __arg)
      : __alloc_(__alloc), __count_(__count) {
    std::__uninitialized_allocator_fill_n_multidimensional(__alloc_, std::begin(__data_), __count_, __arg);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __unbounded_array_control_block(_Alloc const& __alloc, size_t __count)
      : __alloc_(__alloc), __count_(__count) {
# 901 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
    std::__uninitialized_allocator_value_construct_n_multidimensional(__alloc_, std::begin(__data_), __count_);

  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr size_t __bytes_for(size_t __elements) {






    size_t __bytes = __elements == 0 ? sizeof(__unbounded_array_control_block)
                                               : (__elements - 1) * sizeof(_Tp) + sizeof(__unbounded_array_control_block);
    constexpr size_t __align = alignof(_Tp);
    return (__bytes + __align - 1) & ~(__align - 1);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__))
  ~__unbounded_array_control_block() override {
  }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __on_zero_shared() noexcept override {
# 934 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
    __allocator_traits_rebind_t<_Alloc, _Tp> __value_alloc(__alloc_);
    std::__allocator_destroy_multidimensional(__value_alloc, __data_, __data_ + __count_);

  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __on_zero_shared_weak() noexcept override {
    using _AlignedStorage = __sp_aligned_storage<alignof(__unbounded_array_control_block)>;
    using _StorageAlloc = __allocator_traits_rebind_t<_Alloc, _AlignedStorage>;
    using _PointerTraits = pointer_traits<typename allocator_traits<_StorageAlloc>::pointer>;

    _StorageAlloc __tmp(__alloc_);
    __alloc_.~_Alloc();
    size_t __size = __unbounded_array_control_block::__bytes_for(__count_);
    _AlignedStorage* __storage = reinterpret_cast<_AlignedStorage*>(this);
    allocator_traits<_StorageAlloc>::deallocate(
        __tmp, _PointerTraits::pointer_to(*__storage), __size / sizeof(_AlignedStorage));
  }

  [[__no_unique_address__]] _Alloc __alloc_;
  size_t __count_;
  union {
    _Tp __data_[1];
  };
};

template <class _Array, class _Alloc, class... _Arg>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Array>
__allocate_shared_unbounded_array(const _Alloc& __a, size_t __n, _Arg&&... __arg) {
  static_assert(__libcpp_is_unbounded_array<_Array>::value);




  using _ControlBlock = __unbounded_array_control_block<_Array, _Alloc>;
  using _AlignedStorage = __sp_aligned_storage<alignof(_ControlBlock)>;
  using _StorageAlloc = __allocator_traits_rebind_t<_Alloc, _AlignedStorage>;
  __allocation_guard<_StorageAlloc> __guard(__a, _ControlBlock::__bytes_for(__n) / sizeof(_AlignedStorage));
  _ControlBlock* __control_block = reinterpret_cast<_ControlBlock*>(std::addressof(*__guard.__get()));
  std::__construct_at(__control_block, __a, __n, std::forward<_Arg>(__arg)...);
  __guard.__release_ptr();
  return shared_ptr<_Array>::__create_with_control_block(__control_block->__get_data(), __control_block);
}

template <class _Tp, class _Alloc>
struct __bounded_array_control_block;

template <class _Tp, size_t _Count, class _Alloc>
struct __bounded_array_control_block<_Tp[_Count], _Alloc> : __shared_weak_count {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp* __get_data() noexcept { return __data_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __bounded_array_control_block(_Alloc const& __alloc, _Tp const& __arg)
      : __alloc_(__alloc) {
    std::__uninitialized_allocator_fill_n_multidimensional(__alloc_, std::addressof(__data_[0]), _Count, __arg);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __bounded_array_control_block(_Alloc const& __alloc) : __alloc_(__alloc) {
# 999 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
    std::__uninitialized_allocator_value_construct_n_multidimensional(__alloc_, std::addressof(__data_[0]), _Count);

  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__))
  ~__bounded_array_control_block() override {
  }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __on_zero_shared() noexcept override {
# 1017 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
    __allocator_traits_rebind_t<_Alloc, _Tp> __value_alloc(__alloc_);
    std::__allocator_destroy_multidimensional(__value_alloc, __data_, __data_ + _Count);

  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __on_zero_shared_weak() noexcept override {
    using _ControlBlockAlloc = __allocator_traits_rebind_t<_Alloc, __bounded_array_control_block>;
    using _PointerTraits = pointer_traits<typename allocator_traits<_ControlBlockAlloc>::pointer>;

    _ControlBlockAlloc __tmp(__alloc_);
    __alloc_.~_Alloc();
    allocator_traits<_ControlBlockAlloc>::deallocate(__tmp, _PointerTraits::pointer_to(*this), 1);
  }

  [[__no_unique_address__]] _Alloc __alloc_;
  union {
    _Tp __data_[_Count];
  };
};

template <class _Array, class _Alloc, class... _Arg>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Array> __allocate_shared_bounded_array(const _Alloc& __a, _Arg&&... __arg) {
  static_assert(__libcpp_is_bounded_array<_Array>::value);
  using _ControlBlock = __bounded_array_control_block<_Array, _Alloc>;
  using _ControlBlockAlloc = __allocator_traits_rebind_t<_Alloc, _ControlBlock>;

  __allocation_guard<_ControlBlockAlloc> __guard(__a, 1);
  _ControlBlock* __control_block = reinterpret_cast<_ControlBlock*>(std::addressof(*__guard.__get()));
  std::__construct_at(__control_block, __a, std::forward<_Arg>(__arg)...);
  __guard.__release_ptr();
  return shared_ptr<_Array>::__create_with_control_block(__control_block->__get_data(), __control_block);
}
# 1122 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) noexcept {
  return __x.get() == __y.get();
}



template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) noexcept {
  return !(__x == __y);
}

template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) noexcept {




  return less<>()(__x.get(), __y.get());

}

template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) noexcept {
  return __y < __x;
}

template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) noexcept {
  return !(__y < __x);
}

template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) noexcept {
  return !(__x < __y);
}
# 1168 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const shared_ptr<_Tp>& __x, nullptr_t) noexcept {
  return !__x;
}



template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(nullptr_t, const shared_ptr<_Tp>& __x) noexcept {
  return !__x;
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const shared_ptr<_Tp>& __x, nullptr_t) noexcept {
  return static_cast<bool>(__x);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(nullptr_t, const shared_ptr<_Tp>& __x) noexcept {
  return static_cast<bool>(__x);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(const shared_ptr<_Tp>& __x, nullptr_t) noexcept {
  return less<typename shared_ptr<_Tp>::element_type*>()(__x.get(), nullptr);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(nullptr_t, const shared_ptr<_Tp>& __x) noexcept {
  return less<typename shared_ptr<_Tp>::element_type*>()(nullptr, __x.get());
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>(const shared_ptr<_Tp>& __x, nullptr_t) noexcept {
  return nullptr < __x;
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>(nullptr_t, const shared_ptr<_Tp>& __x) noexcept {
  return __x < nullptr;
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<=(const shared_ptr<_Tp>& __x, nullptr_t) noexcept {
  return !(nullptr < __x);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<=(nullptr_t, const shared_ptr<_Tp>& __x) noexcept {
  return !(__x < nullptr);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>=(const shared_ptr<_Tp>& __x, nullptr_t) noexcept {
  return !(__x < nullptr);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>=(nullptr_t, const shared_ptr<_Tp>& __x) noexcept {
  return !(nullptr < __x);
}
# 1239 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(shared_ptr<_Tp>& __x, shared_ptr<_Tp>& __y) noexcept {
  __x.swap(__y);
}

template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp> static_pointer_cast(const shared_ptr<_Up>& __r) noexcept {
  return shared_ptr<_Tp>(__r, static_cast< typename shared_ptr<_Tp>::element_type*>(__r.get()));
}
# 1258 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp> dynamic_pointer_cast(const shared_ptr<_Up>& __r) noexcept {
  typedef typename shared_ptr<_Tp>::element_type _ET;
  _ET* __p = dynamic_cast<_ET*>(__r.get());
  return __p ? shared_ptr<_Tp>(__r, __p) : shared_ptr<_Tp>();
}
# 1275 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp> const_pointer_cast(const shared_ptr<_Up>& __r) noexcept {
  typedef typename shared_ptr<_Tp>::element_type _RTp;
  return shared_ptr<_Tp>(__r, const_cast<_RTp*>(__r.get()));
}
# 1290 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp> reinterpret_pointer_cast(const shared_ptr<_Up>& __r) noexcept {
  return shared_ptr<_Tp>(__r, reinterpret_cast< typename shared_ptr<_Tp>::element_type*>(__r.get()));
}
# 1306 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
template <class _Dp, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Dp* get_deleter(const shared_ptr<_Tp>& __p) noexcept {
  return __p.template __get_deleter<_Dp>();
}



template <class _Tp>
class weak_ptr {
public:

  typedef remove_extent_t<_Tp> element_type;






  using __trivially_relocatable = weak_ptr;

private:
  element_type* __ptr_;
  __shared_weak_count* __cntrl_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr weak_ptr() noexcept;

  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) weak_ptr(shared_ptr<_Yp> const& __r) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) weak_ptr(weak_ptr const& __r) noexcept;

  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) weak_ptr(weak_ptr<_Yp> const& __r) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) weak_ptr(weak_ptr&& __r) noexcept;

  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) weak_ptr(weak_ptr<_Yp>&& __r) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~weak_ptr();

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) weak_ptr& operator=(weak_ptr const& __r) noexcept;
  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) weak_ptr& operator=(weak_ptr<_Yp> const& __r) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) weak_ptr& operator=(weak_ptr&& __r) noexcept;
  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) weak_ptr& operator=(weak_ptr<_Yp>&& __r) noexcept;

  template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) weak_ptr& operator=(shared_ptr<_Yp> const& __r) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(weak_ptr& __r) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reset() noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long use_count() const noexcept { return __cntrl_ ? __cntrl_->use_count() : 0; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool expired() const noexcept { return __cntrl_ == nullptr || __cntrl_->use_count() == 0; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp> lock() const noexcept;
  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool owner_before(const shared_ptr<_Up>& __r) const noexcept {
    return __cntrl_ < __r.__cntrl_;
  }
  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool owner_before(const weak_ptr<_Up>& __r) const noexcept {
    return __cntrl_ < __r.__cntrl_;
  }

  template <class _Up>
  friend class weak_ptr;
  template <class _Up>
  friend class shared_ptr;
};


template <class _Tp>
weak_ptr(shared_ptr<_Tp>) -> weak_ptr<_Tp>;


template <class _Tp>
inline constexpr weak_ptr<_Tp>::weak_ptr() noexcept : __ptr_(nullptr), __cntrl_(nullptr) {}

template <class _Tp>
inline weak_ptr<_Tp>::weak_ptr(weak_ptr const& __r) noexcept : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_) {
  if (__cntrl_)
    __cntrl_->__add_weak();
}

template <class _Tp>
template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> >
inline weak_ptr<_Tp>::weak_ptr(shared_ptr<_Yp> const& __r) noexcept : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_) {
  if (__cntrl_)
    __cntrl_->__add_weak();
}

template <class _Tp>
template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> >
inline weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp> const& __r) noexcept : __ptr_(nullptr), __cntrl_(nullptr) {
  shared_ptr<_Yp> __s = __r.lock();
  *this = weak_ptr<_Tp>(__s);
}

template <class _Tp>
inline weak_ptr<_Tp>::weak_ptr(weak_ptr&& __r) noexcept : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_) {
  __r.__ptr_ = nullptr;
  __r.__cntrl_ = nullptr;
}

template <class _Tp>
template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> >
inline weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp>&& __r) noexcept : __ptr_(nullptr), __cntrl_(nullptr) {
  shared_ptr<_Yp> __s = __r.lock();
  *this = weak_ptr<_Tp>(__s);
  __r.reset();
}

template <class _Tp>
weak_ptr<_Tp>::~weak_ptr() {
  if (__cntrl_)
    __cntrl_->__release_weak();
}

template <class _Tp>
inline weak_ptr<_Tp>& weak_ptr<_Tp>::operator=(weak_ptr const& __r) noexcept {
  weak_ptr(__r).swap(*this);
  return *this;
}

template <class _Tp>
template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> >
inline weak_ptr<_Tp>& weak_ptr<_Tp>::operator=(weak_ptr<_Yp> const& __r) noexcept {
  weak_ptr(__r).swap(*this);
  return *this;
}

template <class _Tp>
inline weak_ptr<_Tp>& weak_ptr<_Tp>::operator=(weak_ptr&& __r) noexcept {
  weak_ptr(std::move(__r)).swap(*this);
  return *this;
}

template <class _Tp>
template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> >
inline weak_ptr<_Tp>& weak_ptr<_Tp>::operator=(weak_ptr<_Yp>&& __r) noexcept {
  weak_ptr(std::move(__r)).swap(*this);
  return *this;
}

template <class _Tp>
template <class _Yp, __enable_if_t<__compatible_with<_Yp, _Tp>::value, int> >
inline weak_ptr<_Tp>& weak_ptr<_Tp>::operator=(shared_ptr<_Yp> const& __r) noexcept {
  weak_ptr(__r).swap(*this);
  return *this;
}

template <class _Tp>
inline void weak_ptr<_Tp>::swap(weak_ptr& __r) noexcept {
  std::swap(__ptr_, __r.__ptr_);
  std::swap(__cntrl_, __r.__cntrl_);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(weak_ptr<_Tp>& __x, weak_ptr<_Tp>& __y) noexcept {
  __x.swap(__y);
}

template <class _Tp>
inline void weak_ptr<_Tp>::reset() noexcept {
  weak_ptr().swap(*this);
}

template <class _Tp>
shared_ptr<_Tp> weak_ptr<_Tp>::lock() const noexcept {
  shared_ptr<_Tp> __r;
  __r.__cntrl_ = __cntrl_ ? __cntrl_->lock() : __cntrl_;
  if (__r.__cntrl_)
    __r.__ptr_ = __ptr_;
  return __r;
}


template <class _Tp = void>
struct owner_less;





template <class _Tp>
struct owner_less<shared_ptr<_Tp> > : __binary_function<shared_ptr<_Tp>, shared_ptr<_Tp>, bool> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(shared_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(shared_ptr<_Tp> const& __x, weak_ptr<_Tp> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
};

template <class _Tp>
struct owner_less<weak_ptr<_Tp> > : __binary_function<weak_ptr<_Tp>, weak_ptr<_Tp>, bool> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(weak_ptr<_Tp> const& __x, weak_ptr<_Tp> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(shared_ptr<_Tp> const& __x, weak_ptr<_Tp> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
};


template <>
struct owner_less<void> {
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(shared_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(shared_ptr<_Tp> const& __x, weak_ptr<_Up> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(weak_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(weak_ptr<_Tp> const& __x, weak_ptr<_Up> const& __y) const noexcept {
    return __x.owner_before(__y);
  }
  typedef void is_transparent;
};


template <class _Tp>
class enable_shared_from_this {
  mutable weak_ptr<_Tp> __weak_this_;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_shared_from_this() noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) enable_shared_from_this(enable_shared_from_this const&) noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) enable_shared_from_this& operator=(enable_shared_from_this const&) noexcept { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~enable_shared_from_this() {}

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp> shared_from_this() { return shared_ptr<_Tp>(__weak_this_); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp const> shared_from_this() const { return shared_ptr<const _Tp>(__weak_this_); }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) weak_ptr<_Tp> weak_from_this() noexcept { return __weak_this_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) weak_ptr<const _Tp> weak_from_this() const noexcept { return __weak_this_; }


  template <class _Up>
  friend class shared_ptr;
};

template <class _Tp>
struct hash;

template <class _Tp>
struct hash<shared_ptr<_Tp> > {

  __attribute__((__deprecated__)) typedef shared_ptr<_Tp> argument_type;
  __attribute__((__deprecated__)) typedef size_t result_type;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(const shared_ptr<_Tp>& __ptr) const noexcept {
    return hash<typename shared_ptr<_Tp>::element_type*>()(__ptr.get());
  }
};

template <class _CharT, class _Traits, class _Yp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, shared_ptr<_Yp> const& __p);



class __attribute__((__visibility__("default"))) __sp_mut {
  void* __lx_;

public:
  void lock() noexcept;
  void unlock() noexcept;

private:
  constexpr __sp_mut(void*) noexcept;
  __sp_mut(const __sp_mut&);
  __sp_mut& operator=(const __sp_mut&);

  friend __attribute__((__visibility__("default"))) __sp_mut& __get_sp_mut(const void*);
};

__attribute__((__visibility__("default"))) __sp_mut& __get_sp_mut(const void*);

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_is_lock_free(const shared_ptr<_Tp>*) {
  return false;
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp> atomic_load(const shared_ptr<_Tp>* __p) {
  __sp_mut& __m = std::__get_sp_mut(__p);
  __m.lock();
  shared_ptr<_Tp> __q = *__p;
  __m.unlock();
  return __q;
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp> atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order) {
  return std::atomic_load(__p);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r) {
  __sp_mut& __m = std::__get_sp_mut(__p);
  __m.lock();
  __p->swap(__r);
  __m.unlock();
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order) {
  std::atomic_store(__p, __r);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp> atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r) {
  __sp_mut& __m = std::__get_sp_mut(__p);
  __m.lock();
  __p->swap(__r);
  __m.unlock();
  return __r;
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) shared_ptr<_Tp>
atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order) {
  return std::atomic_exchange(__p, __r);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w) {
  shared_ptr<_Tp> __temp;
  __sp_mut& __m = std::__get_sp_mut(__p);
  __m.lock();
  if (__p->__owner_equivalent(*__v)) {
    std::swap(__temp, *__p);
    *__p = __w;
    __m.unlock();
    return true;
  }
  std::swap(__temp, *__v);
  *__v = *__p;
  __m.unlock();
  return false;
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w) {
  return std::atomic_compare_exchange_strong(__p, __v, __w);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_compare_exchange_strong_explicit(
    shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w, memory_order, memory_order) {
  return std::atomic_compare_exchange_strong(__p, __v, __w);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_compare_exchange_weak_explicit(
    shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w, memory_order, memory_order) {
  return std::atomic_compare_exchange_weak(__p, __v, __w);
}



}}
# 1690 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/shared_ptr.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/once_flag.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/once_flag.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 1 3
# 220 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_arg_t.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_arg_t.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uses_allocator.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uses_allocator.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uses_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uses_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uses_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uses_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uses_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uses_allocator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct __has_allocator_type {
private:
  template <class _Up>
  static false_type __test(...);
  template <class _Up>
  static true_type __test(typename _Up::allocator_type* = 0);

public:
  static const bool value = decltype(__test<_Tp>(0))::value;
};

template <class _Tp, class _Alloc, bool = __has_allocator_type<_Tp>::value>
struct __uses_allocator : public integral_constant<bool, is_convertible<_Alloc, typename _Tp::allocator_type>::value> {
};

template <class _Tp, class _Alloc>
struct __uses_allocator<_Tp, _Alloc, false> : public false_type {};

template <class _Tp, class _Alloc>
struct uses_allocator : public __uses_allocator<_Tp, _Alloc> {};


template <class _Tp, class _Alloc>
inline constexpr bool uses_allocator_v = uses_allocator<_Tp, _Alloc>::value;


}}
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/uses_allocator.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_arg_t.h" 2 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_arg_t.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_arg_t.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_arg_t.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_arg_t.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_arg_t.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_arg_t.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_arg_t.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

struct allocator_arg_t {
  explicit allocator_arg_t() = default;
};


inline constexpr allocator_arg_t allocator_arg = allocator_arg_t();
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_arg_t.h" 3
template <class _Tp, class _Alloc, class... _Args>
struct __uses_alloc_ctor_imp {
  typedef __attribute__((__nodebug__)) __remove_cvref_t<_Alloc> _RawAlloc;
  static const bool __ua = uses_allocator<_Tp, _RawAlloc>::value;
  static const bool __ic = is_constructible<_Tp, allocator_arg_t, _Alloc, _Args...>::value;
  static const int value = __ua ? 2 - __ic : 0;
};

template <class _Tp, class _Alloc, class... _Args>
struct __uses_alloc_ctor : integral_constant<int, __uses_alloc_ctor_imp<_Tp, _Alloc, _Args...>::value> {};

template <class _Tp, class _Allocator, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__user_alloc_construct_impl(integral_constant<int, 0>, _Tp* __storage, const _Allocator&, _Args&&... __args) {
  new (__storage) _Tp(std::forward<_Args>(__args)...);
}


template <class _Tp, class _Allocator, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__user_alloc_construct_impl(integral_constant<int, 1>, _Tp* __storage, const _Allocator& __a, _Args&&... __args) {
  new (__storage) _Tp(allocator_arg, __a, std::forward<_Args>(__args)...);
}


template <class _Tp, class _Allocator, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__user_alloc_construct_impl(integral_constant<int, 2>, _Tp* __storage, const _Allocator& __a, _Args&&... __args) {
  new (__storage) _Tp(std::forward<_Args>(__args)..., __a);
}



}}
# 73 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/allocator_arg_t.h" 3
#pragma clang diagnostic pop
# 221 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/find_index.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/find_index.h" 3




#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/find_index.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/find_index.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/find_index.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/find_index.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/find_index.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/find_index.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __find_detail {

static constexpr size_t __not_found = static_cast<size_t>(-1);
static constexpr size_t __ambiguous = __not_found - 1;

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr size_t __find_idx_return(size_t __curr_i, size_t __res, bool __matches) {
  return !__matches ? __res : (__res == __not_found ? __curr_i : __ambiguous);
}

template <size_t _Nx>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr size_t __find_idx(size_t __i, const bool (&__matches)[_Nx]) {
  return __i == _Nx
           ? __not_found
           : __find_detail::__find_idx_return(__i, __find_detail::__find_idx(__i + 1, __matches), __matches[__i]);
}

template <class _T1, class... _Args>
struct __find_exactly_one_checked {
  static constexpr bool __matches[sizeof...(_Args)] = {is_same<_T1, _Args>::value...};
  static constexpr size_t value = __find_detail::__find_idx(0, __matches);
  static_assert(value != __not_found, "type not found in type list");
  static_assert(value != __ambiguous, "type occurs more than once in type list");
};

template <class _T1>
struct __find_exactly_one_checked<_T1> {
  static_assert(!is_same<_T1, _T1>::value, "type not in empty type list");
};

}

template <typename _T1, typename... _Args>
struct __find_exactly_one_t : public __find_detail::__find_exactly_one_checked<_T1, _Args...> {};

}}
# 58 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/find_index.h" 3
#pragma clang diagnostic pop
# 223 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/ignore.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/ignore.h" 3




#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/ignore.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/ignore.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/ignore.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/ignore.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/ignore.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/ignore.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

struct __ignore_type {
  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const __ignore_type& operator=(const _Tp&) const noexcept {
    return *this;
  }
};


inline constexpr __ignore_type ignore;




}}
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__tuple/ignore.h" 3
#pragma clang diagnostic pop
# 224 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 2 3
# 250 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/lazy.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/lazy.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/lazy.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/lazy.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/lazy.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/lazy.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/lazy.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/lazy.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <template <class...> class _Func, class... _Args>
struct _Lazy : _Func<_Args...> {};

}}
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/lazy.h" 3
#pragma clang diagnostic pop
# 251 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/maybe_const.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/maybe_const.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/maybe_const.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/maybe_const.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/maybe_const.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/maybe_const.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/maybe_const.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/maybe_const.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <bool _Const, class _Tp>
using __maybe_const = __conditional_t<_Const, const _Tp, _Tp>;

}}
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/maybe_const.h" 3
#pragma clang diagnostic pop
# 252 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 2 3
# 268 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/compare" 1 3
# 165 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/compare" 3
# 174 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/compare" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cmath" 1 3
# 316 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cmath" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hypot.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hypot.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max_element.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max_element.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max_element.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max_element.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max_element.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max_element.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max_element.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max_element.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Compare, class _ForwardIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ForwardIterator
__max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp) {
  static_assert(
      __has_forward_iterator_category<_ForwardIterator>::value, "std::max_element requires a ForwardIterator");
  if (__first != __last) {
    _ForwardIterator __i = __first;
    while (++__i != __last)
      if (__comp(*__first, *__i))
        __first = __i;
  }
  return __first;
}

template <class _ForwardIterator, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ForwardIterator
max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp) {
  return std::__max_element<__comp_ref_type<_Compare> >(__first, __last, __comp);
}

template <class _ForwardIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ForwardIterator
max_element(_ForwardIterator __first, _ForwardIterator __last) {
  return std::max_element(__first, __last, __less<>());
}

}}
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max_element.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max.h" 2 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max.h" 2 3

#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Tp&
max([[_Clang::__lifetimebound__]] const _Tp& __a, [[_Clang::__lifetimebound__]] const _Tp& __b, _Compare __comp) {
  return __comp(__a, __b) ? __b : __a;
}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Tp&
max([[_Clang::__lifetimebound__]] const _Tp& __a, [[_Clang::__lifetimebound__]] const _Tp& __b) {
  return std::max(__a, __b, __less<>());
}



template <class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp
max(initializer_list<_Tp> __t, _Compare __comp) {
  return *std::__max_element<__comp_ref_type<_Compare> >(__t.begin(), __t.end(), __comp);
}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp max(initializer_list<_Tp> __t) {
  return *std::max_element(__t.begin(), __t.end(), __less<>());
}



}}
# 54 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/max.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hypot.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/abs.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/abs.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/abs.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/abs.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/abs.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/abs.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/abs.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/abs.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float fabs(float __x) noexcept { return __builtin_fabsf(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double fabs(double __x) noexcept {
  return __builtin_fabs(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double fabs(long double __x) noexcept {
  return __builtin_fabsl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double fabs(_A1 __x) noexcept {
  return __builtin_fabs((double)__x);
}

}

}}
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/abs.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hypot.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/exponential_functions.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/exponential_functions.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/promote.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/promote.h" 3


#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/promote.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/promote.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/promote.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/promote.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/promote.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/promote.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {




template <class... _Args>
class __promote {
  static_assert((is_arithmetic<_Args>::value && ...));

  static float __test(float);
  static double __test(char);
  static double __test(int);
  static double __test(unsigned);
  static double __test(long);
  static double __test(unsigned long);
  static double __test(long long);
  static double __test(unsigned long long);

  static double __test(__int128_t);
  static double __test(__uint128_t);

  static double __test(double);
  static long double __test(long double);

public:
  using type = decltype((__test(_Args()) + ...));
};
# 126 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/promote.h" 3
}}
# 126 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/promote.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/exponential_functions.h" 2 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/exponential_functions.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/exponential_functions.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/exponential_functions.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/exponential_functions.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/exponential_functions.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/exponential_functions.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/exponential_functions.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float exp(float __x) noexcept { return __builtin_expf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double exp(double __x) noexcept {
  return __builtin_exp(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double exp(long double __x) noexcept { return __builtin_expl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double exp(_A1 __x) noexcept {
  return __builtin_exp((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float frexp(float __x, int* __e) noexcept { return __builtin_frexpf(__x, __e); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double frexp(double __x, int* __e) noexcept {
  return __builtin_frexp(__x, __e);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double frexp(long double __x, int* __e) noexcept {
  return __builtin_frexpl(__x, __e);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double frexp(_A1 __x, int* __e) noexcept {
  return __builtin_frexp((double)__x, __e);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float ldexp(float __x, int __e) noexcept { return __builtin_ldexpf(__x, __e); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double ldexp(double __x, int __e) noexcept {
  return __builtin_ldexp(__x, __e);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double ldexp(long double __x, int __e) noexcept {
  return __builtin_ldexpl(__x, __e);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double ldexp(_A1 __x, int __e) noexcept {
  return __builtin_ldexp((double)__x, __e);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float exp2(float __x) noexcept { return __builtin_exp2f(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double exp2(double __x) noexcept {
  return __builtin_exp2(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double exp2(long double __x) noexcept { return __builtin_exp2l(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double exp2(_A1 __x) noexcept {
  return __builtin_exp2((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float expm1(float __x) noexcept { return __builtin_expm1f(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double expm1(double __x) noexcept {
  return __builtin_expm1(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double expm1(long double __x) noexcept { return __builtin_expm1l(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double expm1(_A1 __x) noexcept {
  return __builtin_expm1((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float scalbln(float __x, long __y) noexcept { return __builtin_scalblnf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double scalbln(double __x, long __y) noexcept {
  return __builtin_scalbln(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double scalbln(long double __x, long __y) noexcept {
  return __builtin_scalblnl(__x, __y);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double scalbln(_A1 __x, long __y) noexcept {
  return __builtin_scalbln((double)__x, __y);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float scalbn(float __x, int __y) noexcept { return __builtin_scalbnf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double scalbn(double __x, int __y) noexcept {
  return __builtin_scalbn(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double scalbn(long double __x, int __y) noexcept {
  return __builtin_scalbnl(__x, __y);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double scalbn(_A1 __x, int __y) noexcept {
  return __builtin_scalbn((double)__x, __y);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float pow(float __x, float __y) noexcept { return __builtin_powf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double pow(double __x, double __y) noexcept {
  return __builtin_pow(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double pow(long double __x, long double __y) noexcept {
  return __builtin_powl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __promote<_A1, _A2>::type pow(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert(!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value), "");
  return __math::pow((__result_type)__x, (__result_type)__y);
}

}

}}
# 169 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/exponential_functions.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hypot.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/roots.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/roots.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/roots.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/roots.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/roots.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/roots.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/roots.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/roots.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float sqrt(float __x) noexcept { return __builtin_sqrtf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double sqrt(double __x) noexcept {
  return __builtin_sqrt(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double sqrt(long double __x) noexcept { return __builtin_sqrtl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double sqrt(_A1 __x) noexcept {
  return __builtin_sqrt((double)__x);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float cbrt(float __x) noexcept { return __builtin_cbrtf(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double cbrt(double __x) noexcept {
  return __builtin_cbrt(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double cbrt(long double __x) noexcept {
  return __builtin_cbrtl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double cbrt(_A1 __x) noexcept {
  return __builtin_cbrt((double)__x);
}

}

}}
# 60 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/roots.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hypot.h" 2 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hypot.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hypot.h" 2 3

#pragma clang diagnostic push
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hypot.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hypot.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hypot.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hypot.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hypot.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hypot.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float hypot(float __x, float __y) noexcept { return __builtin_hypotf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double hypot(double __x, double __y) noexcept {
  return __builtin_hypot(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double hypot(long double __x, long double __y) noexcept {
  return __builtin_hypotl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __promote<_A1, _A2>::type hypot(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert(!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value), "");
  return __math::hypot((__result_type)__x, (__result_type)__y);
}






template <class _Real>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Real __hypot(_Real __x, _Real __y, _Real __z) {

  constexpr int __exp = std::numeric_limits<_Real>::max_exponent / 2;
  const _Real __overflow_threshold = __math::ldexp(_Real(1), __exp);
  const _Real __overflow_scale = __math::ldexp(_Real(1), -(__exp + 20));


  const _Real __max_abs = std::max(__math::fabs(__x), std::max(__math::fabs(__y), __math::fabs(__z)));
  _Real __scale;
  if (__max_abs > __overflow_threshold) {
    __scale = __overflow_scale;
  } else if (__max_abs < 1 / __overflow_threshold) {
    __scale = 1 / __overflow_scale;
  } else {
    __scale = 1;
  }
  __x *= __scale;
  __y *= __scale;
  __z *= __scale;


  return __math::sqrt(__x * __x + __y * __y + __z * __z) / __scale;
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float hypot(float __x, float __y, float __z) { return __math::__hypot(__x, __y, __z); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double hypot(double __x, double __y, double __z) { return __math::__hypot(__x, __y, __z); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double hypot(long double __x, long double __y, long double __z) {
  return __math::__hypot(__x, __y, __z);
}

template <class _A1,
          class _A2,
          class _A3,
          std::enable_if_t< is_arithmetic_v<_A1> && is_arithmetic_v<_A2> && is_arithmetic_v<_A3>, int> = 0 >
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __promote<_A1, _A2, _A3>::type hypot(_A1 __x, _A2 __y, _A3 __z) noexcept {
  using __result_type = typename __promote<_A1, _A2, _A3>::type;
  static_assert(!(
      std::is_same_v<_A1, __result_type> && std::is_same_v<_A2, __result_type> && std::is_same_v<_A3, __result_type>));
  return __math::__hypot(
      static_cast<__result_type>(__x), static_cast<__result_type>(__y), static_cast<__result_type>(__z));
}


}

}}
# 106 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hypot.h" 3
#pragma clang diagnostic pop
# 317 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cmath" 2 3
# 327 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cmath" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/special_functions.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/special_functions.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/copysign.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/copysign.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/copysign.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/copysign.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/copysign.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/copysign.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/copysign.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/copysign.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float copysign(float __x, float __y) noexcept {
  return ::__builtin_copysignf(__x, __y);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double copysign(long double __x, long double __y) noexcept {
  return ::__builtin_copysignl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __promote<_A1, _A2>::type copysign(_A1 __x, _A2 __y) noexcept {
  return ::__builtin_copysign(__x, __y);
}

}

}}
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/copysign.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/special_functions.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/traits.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/traits.h" 3


#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/traits.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/traits.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/traits.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/traits.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/traits.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/traits.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {



template <class _A1, __enable_if_t<is_floating_point<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool signbit(_A1 __x) noexcept {
  return __builtin_signbit(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value && is_signed<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool signbit(_A1 __x) noexcept {
  return __x < 0;
}

template <class _A1, __enable_if_t<is_integral<_A1>::value && !is_signed<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool signbit(_A1) noexcept {
  return false;
}



template <class _A1, __enable_if_t<is_arithmetic<_A1>::value && numeric_limits<_A1>::has_infinity, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isfinite(_A1 __x) noexcept {
  return __builtin_isfinite((typename __promote<_A1>::type)__x);
}

template <class _A1, __enable_if_t<is_arithmetic<_A1>::value && !numeric_limits<_A1>::has_infinity, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isfinite(_A1) noexcept {
  return true;
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isfinite(float __x) noexcept {
  return __builtin_isfinite(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isfinite(double __x) noexcept {
  return __builtin_isfinite(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isfinite(long double __x) noexcept {
  return __builtin_isfinite(__x);
}



template <class _A1, __enable_if_t<is_arithmetic<_A1>::value && numeric_limits<_A1>::has_infinity, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isinf(_A1 __x) noexcept {
  return __builtin_isinf((typename __promote<_A1>::type)__x);
}

template <class _A1, __enable_if_t<is_arithmetic<_A1>::value && !numeric_limits<_A1>::has_infinity, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isinf(_A1) noexcept {
  return false;
}


[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isinf(float __x) noexcept {
  return __builtin_isinf(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) bool
isinf(double __x) noexcept {
  return __builtin_isinf(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isinf(long double __x) noexcept {
  return __builtin_isinf(__x);
}




template <class _A1, __enable_if_t<is_floating_point<_A1>::value, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isnan(_A1 __x) noexcept {
  return __builtin_isnan(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isnan(_A1) noexcept {
  return false;
}


[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isnan(float __x) noexcept {
  return __builtin_isnan(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) bool
isnan(double __x) noexcept {
  return __builtin_isnan(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isnan(long double __x) noexcept {
  return __builtin_isnan(__x);
}




template <class _A1, __enable_if_t<is_floating_point<_A1>::value, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isnormal(_A1 __x) noexcept {
  return __builtin_isnormal(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isnormal(_A1 __x) noexcept {
  return __x != 0;
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isgreater(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_isgreater((type)__x, (type)__y);
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isgreaterequal(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_isgreaterequal((type)__x, (type)__y);
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isless(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_isless((type)__x, (type)__y);
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool islessequal(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_islessequal((type)__x, (type)__y);
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool islessgreater(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_islessgreater((type)__x, (type)__y);
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isunordered(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_isunordered((type)__x, (type)__y);
}

}

}}
# 186 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/traits.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/special_functions.h" 2 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/special_functions.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/special_functions.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/special_functions.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/special_functions.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/special_functions.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/special_functions.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/special_functions.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Real>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Real __hermite(unsigned __n, _Real __x) {






  if (__math::isnan(__x))
    return __x;

  _Real __H_0{1};
  if (__n == 0)
    return __H_0;

  _Real __H_n_prev = __H_0;
  _Real __H_n = 2 * __x;
  for (unsigned __i = 1; __i < __n; ++__i) {
    _Real __H_n_next = 2 * (__x * __H_n - __i * __H_n_prev);
    __H_n_prev = __H_n;
    __H_n = __H_n_next;
  }

  if (!__math::isfinite(__H_n)) {



    _Real __inf = std::numeric_limits<_Real>::infinity();
    return (__n & 1) ? __math::copysign(__inf, __x) : __inf;
  }
  return __H_n;

}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double hermite(unsigned __n, double __x) { return std::__hermite(__n, __x); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float hermite(unsigned __n, float __x) {

  return static_cast<float>(std::hermite(__n, static_cast<double>(__x)));
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double hermite(unsigned __n, long double __x) { return std::__hermite(__n, __x); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float hermitef(unsigned __n, float __x) { return std::hermite(__n, __x); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double hermitel(unsigned __n, long double __x) { return std::hermite(__n, __x); }

template <class _Integer, std::enable_if_t<std::is_integral_v<_Integer>, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double hermite(unsigned __n, _Integer __x) {
  return std::hermite(__n, static_cast<double>(__x));
}



}}
# 82 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/special_functions.h" 3
#pragma clang diagnostic pop
# 328 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cmath" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 1 3
# 298 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 3



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/math.h" 1 3 4
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/math.h" 3 4
extern "C" {
# 45 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/math.h" 3 4
    typedef float float_t;
    typedef double double_t;
# 112 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/math.h" 3 4
extern int __math_errhandling(void);
# 132 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/math.h" 3 4
extern int __fpclassifyf(float);
extern int __fpclassifyd(double);
extern int __fpclassifyl(long double);
# 175 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/math.h" 3 4
inline __attribute__ ((__always_inline__)) int __inline_isfinitef(float);
inline __attribute__ ((__always_inline__)) int __inline_isfinited(double);
inline __attribute__ ((__always_inline__)) int __inline_isfinitel(long double);
inline __attribute__ ((__always_inline__)) int __inline_isinff(float);
inline __attribute__ ((__always_inline__)) int __inline_isinfd(double);
inline __attribute__ ((__always_inline__)) int __inline_isinfl(long double);
inline __attribute__ ((__always_inline__)) int __inline_isnanf(float);
inline __attribute__ ((__always_inline__)) int __inline_isnand(double);
inline __attribute__ ((__always_inline__)) int __inline_isnanl(long double);
inline __attribute__ ((__always_inline__)) int __inline_isnormalf(float);
inline __attribute__ ((__always_inline__)) int __inline_isnormald(double);
inline __attribute__ ((__always_inline__)) int __inline_isnormall(long double);
inline __attribute__ ((__always_inline__)) int __inline_signbitf(float);
inline __attribute__ ((__always_inline__)) int __inline_signbitd(double);
inline __attribute__ ((__always_inline__)) int __inline_signbitl(long double);

inline __attribute__ ((__always_inline__)) int __inline_isfinitef(float __x) {
    return __x == __x && __builtin_fabsf(__x) != __builtin_inff();
}
inline __attribute__ ((__always_inline__)) int __inline_isfinited(double __x) {
    return __x == __x && __builtin_fabs(__x) != __builtin_inf();
}
inline __attribute__ ((__always_inline__)) int __inline_isfinitel(long double __x) {
    return __x == __x && __builtin_fabsl(__x) != __builtin_infl();
}
inline __attribute__ ((__always_inline__)) int __inline_isinff(float __x) {
    return __builtin_fabsf(__x) == __builtin_inff();
}
inline __attribute__ ((__always_inline__)) int __inline_isinfd(double __x) {
    return __builtin_fabs(__x) == __builtin_inf();
}
inline __attribute__ ((__always_inline__)) int __inline_isinfl(long double __x) {
    return __builtin_fabsl(__x) == __builtin_infl();
}
inline __attribute__ ((__always_inline__)) int __inline_isnanf(float __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_isnand(double __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_isnanl(long double __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_signbitf(float __x) {
    union { float __f; unsigned int __u; } __u;
    __u.__f = __x;
    return (int)(__u.__u >> 31);
}
inline __attribute__ ((__always_inline__)) int __inline_signbitd(double __x) {
    union { double __f; unsigned long long __u; } __u;
    __u.__f = __x;
    return (int)(__u.__u >> 63);
}

inline __attribute__ ((__always_inline__)) int __inline_signbitl(long double __x) {
    union {
        long double __ld;
        struct{ unsigned long long __m; unsigned short __sexp; } __p;
    } __u;
    __u.__ld = __x;
    return (int)(__u.__p.__sexp >> 15);
}







inline __attribute__ ((__always_inline__)) int __inline_isnormalf(float __x) {
    return __inline_isfinitef(__x) && __builtin_fabsf(__x) >= 1.17549435e-38F;
}
inline __attribute__ ((__always_inline__)) int __inline_isnormald(double __x) {
    return __inline_isfinited(__x) && __builtin_fabs(__x) >= 2.2250738585072014e-308;
}
inline __attribute__ ((__always_inline__)) int __inline_isnormall(long double __x) {
    return __inline_isfinitel(__x) && __builtin_fabsl(__x) >= 3.36210314311209350626e-4932L;
}
# 309 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/math.h" 3 4
extern float acosf(float);
extern double acos(double);
extern long double acosl(long double);

extern float asinf(float);
extern double asin(double);
extern long double asinl(long double);

extern float atanf(float);
extern double atan(double);
extern long double atanl(long double);

extern float atan2f(float, float);
extern double atan2(double, double);
extern long double atan2l(long double, long double);

extern float cosf(float);
extern double cos(double);
extern long double cosl(long double);

extern float sinf(float);
extern double sin(double);
extern long double sinl(long double);

extern float tanf(float);
extern double tan(double);
extern long double tanl(long double);

extern float acoshf(float);
extern double acosh(double);
extern long double acoshl(long double);

extern float asinhf(float);
extern double asinh(double);
extern long double asinhl(long double);

extern float atanhf(float);
extern double atanh(double);
extern long double atanhl(long double);

extern float coshf(float);
extern double cosh(double);
extern long double coshl(long double);

extern float sinhf(float);
extern double sinh(double);
extern long double sinhl(long double);

extern float tanhf(float);
extern double tanh(double);
extern long double tanhl(long double);

extern float expf(float);
extern double exp(double);
extern long double expl(long double);

extern float exp2f(float);
extern double exp2(double);
extern long double exp2l(long double);

extern float expm1f(float);
extern double expm1(double);
extern long double expm1l(long double);

extern float logf(float);
extern double log(double);
extern long double logl(long double);

extern float log10f(float);
extern double log10(double);
extern long double log10l(long double);

extern float log2f(float);
extern double log2(double);
extern long double log2l(long double);

extern float log1pf(float);
extern double log1p(double);
extern long double log1pl(long double);

extern float logbf(float);
extern double logb(double);
extern long double logbl(long double);

extern float modff(float, float *);
extern double modf(double, double *);
extern long double modfl(long double, long double *);

extern float ldexpf(float, int);
extern double ldexp(double, int);
extern long double ldexpl(long double, int);

extern float frexpf(float, int *);
extern double frexp(double, int *);
extern long double frexpl(long double, int *);

extern int ilogbf(float);
extern int ilogb(double);
extern int ilogbl(long double);

extern float scalbnf(float, int);
extern double scalbn(double, int);
extern long double scalbnl(long double, int);

extern float scalblnf(float, long int);
extern double scalbln(double, long int);
extern long double scalblnl(long double, long int);

extern float fabsf(float);
extern double fabs(double);
extern long double fabsl(long double);

extern float cbrtf(float);
extern double cbrt(double);
extern long double cbrtl(long double);

extern float hypotf(float, float);
extern double hypot(double, double);
extern long double hypotl(long double, long double);

extern float powf(float, float);
extern double pow(double, double);
extern long double powl(long double, long double);

extern float sqrtf(float);
extern double sqrt(double);
extern long double sqrtl(long double);

extern float erff(float);
extern double erf(double);
extern long double erfl(long double);

extern float erfcf(float);
extern double erfc(double);
extern long double erfcl(long double);




extern float lgammaf(float);
extern double lgamma(double);
extern long double lgammal(long double);

extern float tgammaf(float);
extern double tgamma(double);
extern long double tgammal(long double);

extern float ceilf(float);
extern double ceil(double);
extern long double ceill(long double);

extern float floorf(float);
extern double floor(double);
extern long double floorl(long double);

extern float nearbyintf(float);
extern double nearbyint(double);
extern long double nearbyintl(long double);

extern float rintf(float);
extern double rint(double);
extern long double rintl(long double);

extern long int lrintf(float);
extern long int lrint(double);
extern long int lrintl(long double);

extern float roundf(float);
extern double round(double);
extern long double roundl(long double);

extern long int lroundf(float);
extern long int lround(double);
extern long int lroundl(long double);




extern long long int llrintf(float);
extern long long int llrint(double);
extern long long int llrintl(long double);

extern long long int llroundf(float);
extern long long int llround(double);
extern long long int llroundl(long double);


extern float truncf(float);
extern double trunc(double);
extern long double truncl(long double);

extern float fmodf(float, float);
extern double fmod(double, double);
extern long double fmodl(long double, long double);

extern float remainderf(float, float);
extern double remainder(double, double);
extern long double remainderl(long double, long double);

extern float remquof(float, float, int *);
extern double remquo(double, double, int *);
extern long double remquol(long double, long double, int *);

extern float copysignf(float, float);
extern double copysign(double, double);
extern long double copysignl(long double, long double);

extern float nanf(const char *);
extern double nan(const char *);
extern long double nanl(const char *);

extern float nextafterf(float, float);
extern double nextafter(double, double);
extern long double nextafterl(long double, long double);

extern double nexttoward(double, long double);
extern float nexttowardf(float, long double);
extern long double nexttowardl(long double, long double);

extern float fdimf(float, float);
extern double fdim(double, double);
extern long double fdiml(long double, long double);

extern float fmaxf(float, float);
extern double fmax(double, double);
extern long double fmaxl(long double, long double);

extern float fminf(float, float);
extern double fmin(double, double);
extern long double fminl(long double, long double);

extern float fmaf(float, float, float);
extern double fma(double, double, double);
extern long double fmal(long double, long double, long double);
# 553 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/math.h" 3 4
extern float __inff(void)
__attribute__((availability(macos,introduced=10.0,deprecated=10.9,message="use `(float)INFINITY` instead"))) __attribute__((availability(ios,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
extern double __inf(void)
__attribute__((availability(macos,introduced=10.0,deprecated=10.9,message="use `INFINITY` instead"))) __attribute__((availability(ios,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
extern long double __infl(void)
__attribute__((availability(macos,introduced=10.0,deprecated=10.9,message="use `(long double)INFINITY` instead"))) __attribute__((availability(ios,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
extern float __nan(void)
__attribute__((availability(macos,introduced=10.0,deprecated=10.14,message="use `NAN` instead"))) __attribute__((availability(ios,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
# 589 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/math.h" 3 4
extern float __exp10f(float) __attribute__((availability(macos,introduced=10.9))) __attribute__((availability(ios,introduced=7.0)));
extern double __exp10(double) __attribute__((availability(macos,introduced=10.9))) __attribute__((availability(ios,introduced=7.0)));





inline __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp);
inline __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp);
# 606 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/math.h" 3 4
extern float __cospif(float) __attribute__((availability(macos,introduced=10.9))) __attribute__((availability(ios,introduced=7.0)));
extern double __cospi(double) __attribute__((availability(macos,introduced=10.9))) __attribute__((availability(ios,introduced=7.0)));
extern float __sinpif(float) __attribute__((availability(macos,introduced=10.9))) __attribute__((availability(ios,introduced=7.0)));
extern double __sinpi(double) __attribute__((availability(macos,introduced=10.9))) __attribute__((availability(ios,introduced=7.0)));
extern float __tanpif(float) __attribute__((availability(macos,introduced=10.9))) __attribute__((availability(ios,introduced=7.0)));
extern double __tanpi(double) __attribute__((availability(macos,introduced=10.9))) __attribute__((availability(ios,introduced=7.0)));


extern _Float16 __fabsf16(_Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __hypotf16(_Float16, _Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __sqrtf16(_Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __ceilf16(_Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __floorf16(_Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __rintf16(_Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __roundf16(_Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __truncf16(_Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __copysignf16(_Float16, _Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __nextafterf16(_Float16, _Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __fmaxf16(_Float16, _Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __fminf16(_Float16, _Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
extern _Float16 __fmaf16(_Float16, _Float16, _Float16) __attribute__((availability(macos,introduced=15.0))) __attribute__((availability(ios,introduced=18.0))) __attribute__((availability(watchos,introduced=11.0))) __attribute__((availability(tvos,introduced=18.0)));
# 652 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/math.h" 3 4
inline __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp);
inline __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp);






struct __float2 { float __sinval; float __cosval; };
struct __double2 { double __sinval; double __cosval; };

extern struct __float2 __sincosf_stret(float);
extern struct __double2 __sincos_stret(double);
extern struct __float2 __sincospif_stret(float);
extern struct __double2 __sincospi_stret(double);

inline __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp) {
    const struct __float2 __stret = __sincosf_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp) {
    const struct __double2 __stret = __sincos_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp) {
    const struct __float2 __stret = __sincospif_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp) {
    const struct __double2 __stret = __sincospi_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}







extern double j0(double) __attribute__((availability(macos,introduced=10.0))) __attribute__((availability(ios,introduced=3.2)));
extern double j1(double) __attribute__((availability(macos,introduced=10.0))) __attribute__((availability(ios,introduced=3.2)));
extern double jn(int, double) __attribute__((availability(macos,introduced=10.0))) __attribute__((availability(ios,introduced=3.2)));
extern double y0(double) __attribute__((availability(macos,introduced=10.0))) __attribute__((availability(ios,introduced=3.2)));
extern double y1(double) __attribute__((availability(macos,introduced=10.0))) __attribute__((availability(ios,introduced=3.2)));
extern double yn(int, double) __attribute__((availability(macos,introduced=10.0))) __attribute__((availability(ios,introduced=3.2)));
extern double scalb(double, double);
extern int signgam;
# 759 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/math.h" 3 4
extern long int rinttol(double)
__attribute__((availability(macos,introduced=10.0,deprecated=10.9,replacement="lrint"))) __attribute__((availability(ios,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));

extern long int roundtol(double)
__attribute__((availability(macos,introduced=10.0,deprecated=10.9,replacement="lround"))) __attribute__((availability(ios,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));

extern double drem(double, double)
__attribute__((availability(macos,introduced=10.0,deprecated=10.9,replacement="remainder"))) __attribute__((availability(ios,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));

extern int finite(double)
__attribute__((availability(macos,introduced=10.0,deprecated=10.9,message="Use `isfinite((double)x)` instead."))) __attribute__((availability(ios,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));

extern double gamma(double)
__attribute__((availability(macos,introduced=10.0,deprecated=10.9,replacement="tgamma"))) __attribute__((availability(ios,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));

extern double significand(double)
__attribute__((availability(macos,introduced=10.0,deprecated=10.9,message="Use `2*frexp( )` or `scalbn(x, -ilogb(x))` instead."))) __attribute__((availability(ios,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
# 790 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/math.h" 3 4
}
# 302 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 2 3






extern "C++" {
# 360 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/error_functions.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/error_functions.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/error_functions.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/error_functions.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/error_functions.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/error_functions.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/error_functions.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/error_functions.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float erf(float __x) noexcept { return __builtin_erff(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double erf(double __x) noexcept {
  return __builtin_erf(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double erf(long double __x) noexcept { return __builtin_erfl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double erf(_A1 __x) noexcept {
  return __builtin_erf((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float erfc(float __x) noexcept { return __builtin_erfcf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double erfc(double __x) noexcept {
  return __builtin_erfc(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double erfc(long double __x) noexcept { return __builtin_erfcl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double erfc(_A1 __x) noexcept {
  return __builtin_erfc((double)__x);
}

}

}}
# 58 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/error_functions.h" 3
#pragma clang diagnostic pop
# 361 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fdim.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fdim.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fdim.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fdim.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fdim.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fdim.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fdim.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fdim.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float fdim(float __x, float __y) noexcept { return __builtin_fdimf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double fdim(double __x, double __y) noexcept {
  return __builtin_fdim(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double fdim(long double __x, long double __y) noexcept {
  return __builtin_fdiml(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __promote<_A1, _A2>::type fdim(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert(!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value), "");
  return __math::fdim((__result_type)__x, (__result_type)__y);
}

}

}}
# 46 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fdim.h" 3
#pragma clang diagnostic pop
# 363 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fma.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fma.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fma.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fma.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fma.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fma.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fma.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fma.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float fma(float __x, float __y, float __z) noexcept {
  return __builtin_fmaf(__x, __y, __z);
}

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double fma(double __x, double __y, double __z) noexcept {
  return __builtin_fma(__x, __y, __z);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double fma(long double __x, long double __y, long double __z) noexcept {
  return __builtin_fmal(__x, __y, __z);
}

template <class _A1,
          class _A2,
          class _A3,
          __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value && is_arithmetic<_A3>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __promote<_A1, _A2, _A3>::type fma(_A1 __x, _A2 __y, _A3 __z) noexcept {
  using __result_type = typename __promote<_A1, _A2, _A3>::type;
  static_assert(
      !(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value && _IsSame<_A3, __result_type>::value),
      "");
  return __builtin_fma((__result_type)__x, (__result_type)__y, (__result_type)__z);
}

}

}}
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/fma.h" 3
#pragma clang diagnostic pop
# 364 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/gamma.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/gamma.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/gamma.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/gamma.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/gamma.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/gamma.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/gamma.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/gamma.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float lgamma(float __x) noexcept { return __builtin_lgammaf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double lgamma(double __x) noexcept {
  return __builtin_lgamma(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double lgamma(long double __x) noexcept { return __builtin_lgammal(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double lgamma(_A1 __x) noexcept {
  return __builtin_lgamma((double)__x);
}





inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float tgamma(float __x) noexcept { return __builtin_tgammaf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double tgamma(double __x) noexcept {
  return __builtin_tgamma(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double tgamma(long double __x) noexcept { return __builtin_tgammal(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double tgamma(_A1 __x) noexcept {
  return __builtin_tgamma((double)__x);
}

}

}}
# 60 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/gamma.h" 3
#pragma clang diagnostic pop
# 365 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hyperbolic_functions.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hyperbolic_functions.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hyperbolic_functions.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hyperbolic_functions.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hyperbolic_functions.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hyperbolic_functions.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hyperbolic_functions.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hyperbolic_functions.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float cosh(float __x) noexcept { return __builtin_coshf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double cosh(double __x) noexcept {
  return __builtin_cosh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double cosh(long double __x) noexcept { return __builtin_coshl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double cosh(_A1 __x) noexcept {
  return __builtin_cosh((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float sinh(float __x) noexcept { return __builtin_sinhf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double sinh(double __x) noexcept {
  return __builtin_sinh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double sinh(long double __x) noexcept { return __builtin_sinhl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double sinh(_A1 __x) noexcept {
  return __builtin_sinh((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float tanh(float __x) noexcept { return __builtin_tanhf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double tanh(double __x) noexcept {
  return __builtin_tanh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double tanh(long double __x) noexcept { return __builtin_tanhl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double tanh(_A1 __x) noexcept {
  return __builtin_tanh((double)__x);
}

}

}}
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/hyperbolic_functions.h" 3
#pragma clang diagnostic pop
# 366 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_hyperbolic_functions.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_hyperbolic_functions.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_hyperbolic_functions.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_hyperbolic_functions.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_hyperbolic_functions.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_hyperbolic_functions.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_hyperbolic_functions.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_hyperbolic_functions.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float acosh(float __x) noexcept { return __builtin_acoshf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double acosh(double __x) noexcept {
  return __builtin_acosh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double acosh(long double __x) noexcept { return __builtin_acoshl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double acosh(_A1 __x) noexcept {
  return __builtin_acosh((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float asinh(float __x) noexcept { return __builtin_asinhf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double asinh(double __x) noexcept {
  return __builtin_asinh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double asinh(long double __x) noexcept { return __builtin_asinhl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double asinh(_A1 __x) noexcept {
  return __builtin_asinh((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float atanh(float __x) noexcept { return __builtin_atanhf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double atanh(double __x) noexcept {
  return __builtin_atanh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double atanh(long double __x) noexcept { return __builtin_atanhl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double atanh(_A1 __x) noexcept {
  return __builtin_atanh((double)__x);
}

}

}}
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_hyperbolic_functions.h" 3
#pragma clang diagnostic pop
# 368 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_trigonometric_functions.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_trigonometric_functions.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_trigonometric_functions.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_trigonometric_functions.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_trigonometric_functions.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_trigonometric_functions.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_trigonometric_functions.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_trigonometric_functions.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float acos(float __x) noexcept { return __builtin_acosf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double acos(double __x) noexcept {
  return __builtin_acos(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double acos(long double __x) noexcept { return __builtin_acosl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double acos(_A1 __x) noexcept {
  return __builtin_acos((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float asin(float __x) noexcept { return __builtin_asinf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double asin(double __x) noexcept {
  return __builtin_asin(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double asin(long double __x) noexcept { return __builtin_asinl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double asin(_A1 __x) noexcept {
  return __builtin_asin((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float atan(float __x) noexcept { return __builtin_atanf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double atan(double __x) noexcept {
  return __builtin_atan(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double atan(long double __x) noexcept { return __builtin_atanl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double atan(_A1 __x) noexcept {
  return __builtin_atan((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float atan2(float __y, float __x) noexcept { return __builtin_atan2f(__y, __x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double atan2(double __x, double __y) noexcept {
  return __builtin_atan2(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double atan2(long double __y, long double __x) noexcept {
  return __builtin_atan2l(__y, __x);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __promote<_A1, _A2>::type atan2(_A1 __y, _A2 __x) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert(!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value), "");
  return __math::atan2((__result_type)__y, (__result_type)__x);
}

}

}}
# 97 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/inverse_trigonometric_functions.h" 3
#pragma clang diagnostic pop
# 369 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/logarithms.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/logarithms.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/logarithms.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/logarithms.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/logarithms.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/logarithms.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/logarithms.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/logarithms.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float log(float __x) noexcept { return __builtin_logf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double log(double __x) noexcept {
  return __builtin_log(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double log(long double __x) noexcept { return __builtin_logl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double log(_A1 __x) noexcept {
  return __builtin_log((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float log10(float __x) noexcept { return __builtin_log10f(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double log10(double __x) noexcept {
  return __builtin_log10(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double log10(long double __x) noexcept { return __builtin_log10l(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double log10(_A1 __x) noexcept {
  return __builtin_log10((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int ilogb(float __x) noexcept { return __builtin_ilogbf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double ilogb(double __x) noexcept {
  return __builtin_ilogb(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int ilogb(long double __x) noexcept { return __builtin_ilogbl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int ilogb(_A1 __x) noexcept {
  return __builtin_ilogb((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float log1p(float __x) noexcept { return __builtin_log1pf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double log1p(double __x) noexcept {
  return __builtin_log1p(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double log1p(long double __x) noexcept { return __builtin_log1pl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double log1p(_A1 __x) noexcept {
  return __builtin_log1p((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float log2(float __x) noexcept { return __builtin_log2f(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double log2(double __x) noexcept {
  return __builtin_log2(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double log2(long double __x) noexcept { return __builtin_log2l(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double log2(_A1 __x) noexcept {
  return __builtin_log2((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float logb(float __x) noexcept { return __builtin_logbf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double logb(double __x) noexcept {
  return __builtin_logb(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double logb(long double __x) noexcept { return __builtin_logbl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double logb(_A1 __x) noexcept {
  return __builtin_logb((double)__x);
}

}

}}
# 122 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/logarithms.h" 3
#pragma clang diagnostic pop
# 370 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/min_max.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/min_max.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/min_max.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/min_max.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/min_max.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/min_max.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/min_max.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/min_max.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float fmax(float __x, float __y) noexcept {
  return __builtin_fmaxf(__x, __y);
}

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double fmax(double __x, double __y) noexcept {
  return __builtin_fmax(__x, __y);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double fmax(long double __x, long double __y) noexcept {
  return __builtin_fmaxl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __promote<_A1, _A2>::type fmax(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert(!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value), "");
  return __math::fmax((__result_type)__x, (__result_type)__y);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float fmin(float __x, float __y) noexcept {
  return __builtin_fminf(__x, __y);
}

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double fmin(double __x, double __y) noexcept {
  return __builtin_fmin(__x, __y);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double fmin(long double __x, long double __y) noexcept {
  return __builtin_fminl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __promote<_A1, _A2>::type fmin(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert(!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value), "");
  return __math::fmin((__result_type)__x, (__result_type)__y);
}

}

}}
# 72 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/min_max.h" 3
#pragma clang diagnostic pop
# 371 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/modulo.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/modulo.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/modulo.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/modulo.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/modulo.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/modulo.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/modulo.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/modulo.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float fmod(float __x, float __y) noexcept { return __builtin_fmodf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double fmod(double __x, double __y) noexcept {
  return __builtin_fmod(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double fmod(long double __x, long double __y) noexcept {
  return __builtin_fmodl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __promote<_A1, _A2>::type fmod(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert(!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value), "");
  return __math::fmod((__result_type)__x, (__result_type)__y);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float modf(float __x, float* __y) noexcept { return __builtin_modff(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double modf(double __x, double* __y) noexcept {
  return __builtin_modf(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double modf(long double __x, long double* __y) noexcept {
  return __builtin_modfl(__x, __y);
}

}

}}
# 61 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/modulo.h" 3
#pragma clang diagnostic pop
# 372 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/remainder.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/remainder.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/remainder.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/remainder.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/remainder.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/remainder.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/remainder.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/remainder.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float remainder(float __x, float __y) noexcept { return __builtin_remainderf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double remainder(double __x, double __y) noexcept {
  return __builtin_remainder(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double remainder(long double __x, long double __y) noexcept {
  return __builtin_remainderl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __promote<_A1, _A2>::type remainder(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert(!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value), "");
  return __math::remainder((__result_type)__x, (__result_type)__y);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float remquo(float __x, float __y, int* __z) noexcept {
  return __builtin_remquof(__x, __y, __z);
}

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double remquo(double __x, double __y, int* __z) noexcept {
  return __builtin_remquo(__x, __y, __z);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double remquo(long double __x, long double __y, int* __z) noexcept {
  return __builtin_remquol(__x, __y, __z);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __promote<_A1, _A2>::type remquo(_A1 __x, _A2 __y, int* __z) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert(!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value), "");
  return __math::remquo((__result_type)__x, (__result_type)__y, __z);
}

}

}}
# 71 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/remainder.h" 3
#pragma clang diagnostic pop
# 373 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/rounding_functions.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/rounding_functions.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/rounding_functions.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/rounding_functions.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/rounding_functions.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/rounding_functions.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/rounding_functions.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/rounding_functions.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float ceil(float __x) noexcept { return __builtin_ceilf(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double ceil(double __x) noexcept {
  return __builtin_ceil(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double ceil(long double __x) noexcept {
  return __builtin_ceill(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double ceil(_A1 __x) noexcept {
  return __builtin_ceil((double)__x);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float floor(float __x) noexcept { return __builtin_floorf(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double floor(double __x) noexcept {
  return __builtin_floor(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double floor(long double __x) noexcept {
  return __builtin_floorl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double floor(_A1 __x) noexcept {
  return __builtin_floor((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long long llrint(float __x) noexcept { return __builtin_llrintf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long long llrint(double __x) noexcept {
  return __builtin_llrint(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long long llrint(long double __x) noexcept { return __builtin_llrintl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long long llrint(_A1 __x) noexcept {
  return __builtin_llrint((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long long llround(float __x) noexcept { return __builtin_llroundf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long long llround(double __x) noexcept {
  return __builtin_llround(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long long llround(long double __x) noexcept { return __builtin_llroundl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long long llround(_A1 __x) noexcept {
  return __builtin_llround((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long lrint(float __x) noexcept { return __builtin_lrintf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long lrint(double __x) noexcept {
  return __builtin_lrint(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long lrint(long double __x) noexcept { return __builtin_lrintl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long lrint(_A1 __x) noexcept {
  return __builtin_lrint((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long lround(float __x) noexcept { return __builtin_lroundf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long lround(double __x) noexcept {
  return __builtin_lround(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long lround(long double __x) noexcept { return __builtin_lroundl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long lround(_A1 __x) noexcept {
  return __builtin_lround((double)__x);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float nearbyint(float __x) noexcept {
  return __builtin_nearbyintf(__x);
}

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double nearbyint(double __x) noexcept {
  return __builtin_nearbyint(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double nearbyint(long double __x) noexcept {
  return __builtin_nearbyintl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double nearbyint(_A1 __x) noexcept {
  return __builtin_nearbyint((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float nextafter(float __x, float __y) noexcept { return __builtin_nextafterf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double nextafter(double __x, double __y) noexcept {
  return __builtin_nextafter(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double nextafter(long double __x, long double __y) noexcept {
  return __builtin_nextafterl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __promote<_A1, _A2>::type nextafter(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert(!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value), "");
  return __math::nextafter((__result_type)__x, (__result_type)__y);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float nexttoward(float __x, long double __y) noexcept {
  return __builtin_nexttowardf(__x, __y);
}

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double nexttoward(double __x, long double __y) noexcept {
  return __builtin_nexttoward(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double nexttoward(long double __x, long double __y) noexcept {
  return __builtin_nexttowardl(__x, __y);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double nexttoward(_A1 __x, long double __y) noexcept {
  return __builtin_nexttoward((double)__x, __y);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float rint(float __x) noexcept { return __builtin_rintf(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double rint(double __x) noexcept {
  return __builtin_rint(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double rint(long double __x) noexcept {
  return __builtin_rintl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double rint(_A1 __x) noexcept {
  return __builtin_rint((double)__x);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float round(float __x) noexcept { return __builtin_round(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double round(double __x) noexcept {
  return __builtin_round(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double round(long double __x) noexcept {
  return __builtin_roundl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double round(_A1 __x) noexcept {
  return __builtin_round((double)__x);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float trunc(float __x) noexcept { return __builtin_trunc(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double trunc(double __x) noexcept {
  return __builtin_trunc(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double trunc(long double __x) noexcept {
  return __builtin_truncl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double trunc(_A1 __x) noexcept {
  return __builtin_trunc((double)__x);
}

}

}}
# 243 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/rounding_functions.h" 3
#pragma clang diagnostic pop
# 375 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/trigonometric_functions.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/trigonometric_functions.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/trigonometric_functions.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/trigonometric_functions.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/trigonometric_functions.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/trigonometric_functions.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/trigonometric_functions.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/trigonometric_functions.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float cos(float __x) noexcept { return __builtin_cosf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double cos(double __x) noexcept {
  return __builtin_cos(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double cos(long double __x) noexcept { return __builtin_cosl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double cos(_A1 __x) noexcept {
  return __builtin_cos((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float sin(float __x) noexcept { return __builtin_sinf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double sin(double __x) noexcept {
  return __builtin_sin(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double sin(long double __x) noexcept { return __builtin_sinl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double sin(_A1 __x) noexcept {
  return __builtin_sin((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float tan(float __x) noexcept { return __builtin_tanf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double tan(double __x) noexcept {
  return __builtin_tan(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double tan(long double __x) noexcept { return __builtin_tanl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double tan(_A1 __x) noexcept {
  return __builtin_tan((double)__x);
}

}

}}
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__math/trigonometric_functions.h" 3
#pragma clang diagnostic pop
# 377 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdlib.h" 1 3
# 381 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 2 3


#pragma clang diagnostic push
# 383 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 383 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 383 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 383 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 383 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 383 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __math {




template <class = int>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int fpclassify(float __x) noexcept {
  return __builtin_fpclassify(1, 2, 4, 5, 3, __x);
}

template <class = int>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int fpclassify(double __x) noexcept {
  return __builtin_fpclassify(1, 2, 4, 5, 3, __x);
}

template <class = int>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int fpclassify(long double __x) noexcept {
  return __builtin_fpclassify(1, 2, 4, 5, 3, __x);
}

template <class _A1, std::__enable_if_t<std::is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int fpclassify(_A1 __x) noexcept {
  return __x == 0 ? 3 : 4;
}

}

}}
# 412 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 3
#pragma clang diagnostic pop

using std::__math::fpclassify;
using std::__math::signbit;



using std::__math::isfinite;
using std::__math::isgreater;
using std::__math::isgreaterequal;
using std::__math::isinf;
using std::__math::isless;
using std::__math::islessequal;
using std::__math::islessgreater;
using std::__math::isnan;
using std::__math::isnormal;
using std::__math::isunordered;
# 444 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/math.h" 3
using std::__math::acos;
using std::__math::acosh;
using std::__math::asin;
using std::__math::asinh;
using std::__math::atan;
using std::__math::atan2;
using std::__math::atanh;
using std::__math::cbrt;
using std::__math::ceil;
using std::__math::copysign;
using std::__math::cos;
using std::__math::cosh;
using std::__math::erf;
using std::__math::erfc;
using std::__math::exp;
using std::__math::exp2;
using std::__math::expm1;
using std::__math::fabs;
using std::__math::fdim;
using std::__math::floor;
using std::__math::fma;
using std::__math::fmax;
using std::__math::fmin;
using std::__math::fmod;
using std::__math::frexp;
using std::__math::hypot;
using std::__math::ilogb;
using std::__math::ldexp;
using std::__math::lgamma;
using std::__math::llrint;
using std::__math::llround;
using std::__math::log;
using std::__math::log10;
using std::__math::log1p;
using std::__math::log2;
using std::__math::logb;
using std::__math::lrint;
using std::__math::lround;
using std::__math::modf;
using std::__math::nearbyint;
using std::__math::nextafter;
using std::__math::nexttoward;
using std::__math::pow;
using std::__math::remainder;
using std::__math::remquo;
using std::__math::rint;
using std::__math::round;
using std::__math::scalbln;
using std::__math::scalbn;
using std::__math::signbit;
using std::__math::sin;
using std::__math::sinh;
using std::__math::sqrt;
using std::__math::tan;
using std::__math::tanh;
using std::__math::tgamma;
using std::__math::trunc;

}
# 329 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cmath" 2 3
# 340 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cmath" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 344 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cmath" 2 3

#pragma clang diagnostic push
# 345 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cmath" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 345 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cmath" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 345 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cmath" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 345 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cmath" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 345 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cmath" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 345 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cmath" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

using ::signbit __attribute__((__using_if_exists__));
using ::fpclassify __attribute__((__using_if_exists__));
using ::isfinite __attribute__((__using_if_exists__));
using ::isinf __attribute__((__using_if_exists__));
using ::isnan __attribute__((__using_if_exists__));
using ::isnormal __attribute__((__using_if_exists__));
using ::isgreater __attribute__((__using_if_exists__));
using ::isgreaterequal __attribute__((__using_if_exists__));
using ::isless __attribute__((__using_if_exists__));
using ::islessequal __attribute__((__using_if_exists__));
using ::islessgreater __attribute__((__using_if_exists__));
using ::isunordered __attribute__((__using_if_exists__));
using ::isunordered __attribute__((__using_if_exists__));

using ::float_t __attribute__((__using_if_exists__));
using ::double_t __attribute__((__using_if_exists__));

using ::abs __attribute__((__using_if_exists__));

using ::acos __attribute__((__using_if_exists__));
using ::acosf __attribute__((__using_if_exists__));
using ::asin __attribute__((__using_if_exists__));
using ::asinf __attribute__((__using_if_exists__));
using ::atan __attribute__((__using_if_exists__));
using ::atanf __attribute__((__using_if_exists__));
using ::atan2 __attribute__((__using_if_exists__));
using ::atan2f __attribute__((__using_if_exists__));
using ::ceil __attribute__((__using_if_exists__));
using ::ceilf __attribute__((__using_if_exists__));
using ::cos __attribute__((__using_if_exists__));
using ::cosf __attribute__((__using_if_exists__));
using ::cosh __attribute__((__using_if_exists__));
using ::coshf __attribute__((__using_if_exists__));

using ::exp __attribute__((__using_if_exists__));
using ::expf __attribute__((__using_if_exists__));

using ::fabs __attribute__((__using_if_exists__));
using ::fabsf __attribute__((__using_if_exists__));
using ::floor __attribute__((__using_if_exists__));
using ::floorf __attribute__((__using_if_exists__));

using ::fmod __attribute__((__using_if_exists__));
using ::fmodf __attribute__((__using_if_exists__));

using ::frexp __attribute__((__using_if_exists__));
using ::frexpf __attribute__((__using_if_exists__));
using ::ldexp __attribute__((__using_if_exists__));
using ::ldexpf __attribute__((__using_if_exists__));

using ::log __attribute__((__using_if_exists__));
using ::logf __attribute__((__using_if_exists__));

using ::log10 __attribute__((__using_if_exists__));
using ::log10f __attribute__((__using_if_exists__));
using ::modf __attribute__((__using_if_exists__));
using ::modff __attribute__((__using_if_exists__));

using ::pow __attribute__((__using_if_exists__));
using ::powf __attribute__((__using_if_exists__));

using ::sin __attribute__((__using_if_exists__));
using ::sinf __attribute__((__using_if_exists__));
using ::sinh __attribute__((__using_if_exists__));
using ::sinhf __attribute__((__using_if_exists__));

using ::sqrt __attribute__((__using_if_exists__));
using ::sqrtf __attribute__((__using_if_exists__));
using ::tan __attribute__((__using_if_exists__));
using ::tanf __attribute__((__using_if_exists__));

using ::tanh __attribute__((__using_if_exists__));
using ::tanhf __attribute__((__using_if_exists__));

using ::acosh __attribute__((__using_if_exists__));
using ::acoshf __attribute__((__using_if_exists__));
using ::asinh __attribute__((__using_if_exists__));
using ::asinhf __attribute__((__using_if_exists__));
using ::atanh __attribute__((__using_if_exists__));
using ::atanhf __attribute__((__using_if_exists__));
using ::cbrt __attribute__((__using_if_exists__));
using ::cbrtf __attribute__((__using_if_exists__));

using ::copysign __attribute__((__using_if_exists__));
using ::copysignf __attribute__((__using_if_exists__));

using ::erf __attribute__((__using_if_exists__));
using ::erff __attribute__((__using_if_exists__));
using ::erfc __attribute__((__using_if_exists__));
using ::erfcf __attribute__((__using_if_exists__));
using ::exp2 __attribute__((__using_if_exists__));
using ::exp2f __attribute__((__using_if_exists__));
using ::expm1 __attribute__((__using_if_exists__));
using ::expm1f __attribute__((__using_if_exists__));
using ::fdim __attribute__((__using_if_exists__));
using ::fdimf __attribute__((__using_if_exists__));
using ::fmaf __attribute__((__using_if_exists__));
using ::fma __attribute__((__using_if_exists__));
using ::fmax __attribute__((__using_if_exists__));
using ::fmaxf __attribute__((__using_if_exists__));
using ::fmin __attribute__((__using_if_exists__));
using ::fminf __attribute__((__using_if_exists__));
using ::hypot __attribute__((__using_if_exists__));
using ::hypotf __attribute__((__using_if_exists__));
using ::ilogb __attribute__((__using_if_exists__));
using ::ilogbf __attribute__((__using_if_exists__));
using ::lgamma __attribute__((__using_if_exists__));
using ::lgammaf __attribute__((__using_if_exists__));
using ::llrint __attribute__((__using_if_exists__));
using ::llrintf __attribute__((__using_if_exists__));
using ::llround __attribute__((__using_if_exists__));
using ::llroundf __attribute__((__using_if_exists__));
using ::log1p __attribute__((__using_if_exists__));
using ::log1pf __attribute__((__using_if_exists__));
using ::log2 __attribute__((__using_if_exists__));
using ::log2f __attribute__((__using_if_exists__));
using ::logb __attribute__((__using_if_exists__));
using ::logbf __attribute__((__using_if_exists__));
using ::lrint __attribute__((__using_if_exists__));
using ::lrintf __attribute__((__using_if_exists__));
using ::lround __attribute__((__using_if_exists__));
using ::lroundf __attribute__((__using_if_exists__));

using ::nan __attribute__((__using_if_exists__));
using ::nanf __attribute__((__using_if_exists__));

using ::nearbyint __attribute__((__using_if_exists__));
using ::nearbyintf __attribute__((__using_if_exists__));
using ::nextafter __attribute__((__using_if_exists__));
using ::nextafterf __attribute__((__using_if_exists__));
using ::nexttoward __attribute__((__using_if_exists__));
using ::nexttowardf __attribute__((__using_if_exists__));
using ::remainder __attribute__((__using_if_exists__));
using ::remainderf __attribute__((__using_if_exists__));
using ::remquo __attribute__((__using_if_exists__));
using ::remquof __attribute__((__using_if_exists__));
using ::rint __attribute__((__using_if_exists__));
using ::rintf __attribute__((__using_if_exists__));
using ::round __attribute__((__using_if_exists__));
using ::roundf __attribute__((__using_if_exists__));
using ::scalbln __attribute__((__using_if_exists__));
using ::scalblnf __attribute__((__using_if_exists__));
using ::scalbn __attribute__((__using_if_exists__));
using ::scalbnf __attribute__((__using_if_exists__));
using ::tgamma __attribute__((__using_if_exists__));
using ::tgammaf __attribute__((__using_if_exists__));
using ::trunc __attribute__((__using_if_exists__));
using ::truncf __attribute__((__using_if_exists__));

using ::acosl __attribute__((__using_if_exists__));
using ::asinl __attribute__((__using_if_exists__));
using ::atanl __attribute__((__using_if_exists__));
using ::atan2l __attribute__((__using_if_exists__));
using ::ceill __attribute__((__using_if_exists__));
using ::cosl __attribute__((__using_if_exists__));
using ::coshl __attribute__((__using_if_exists__));
using ::expl __attribute__((__using_if_exists__));
using ::fabsl __attribute__((__using_if_exists__));
using ::floorl __attribute__((__using_if_exists__));
using ::fmodl __attribute__((__using_if_exists__));
using ::frexpl __attribute__((__using_if_exists__));
using ::ldexpl __attribute__((__using_if_exists__));
using ::logl __attribute__((__using_if_exists__));
using ::log10l __attribute__((__using_if_exists__));
using ::modfl __attribute__((__using_if_exists__));
using ::powl __attribute__((__using_if_exists__));
using ::sinl __attribute__((__using_if_exists__));
using ::sinhl __attribute__((__using_if_exists__));
using ::sqrtl __attribute__((__using_if_exists__));
using ::tanl __attribute__((__using_if_exists__));

using ::tanhl __attribute__((__using_if_exists__));
using ::acoshl __attribute__((__using_if_exists__));
using ::asinhl __attribute__((__using_if_exists__));
using ::atanhl __attribute__((__using_if_exists__));
using ::cbrtl __attribute__((__using_if_exists__));

using ::copysignl __attribute__((__using_if_exists__));

using ::erfl __attribute__((__using_if_exists__));
using ::erfcl __attribute__((__using_if_exists__));
using ::exp2l __attribute__((__using_if_exists__));
using ::expm1l __attribute__((__using_if_exists__));
using ::fdiml __attribute__((__using_if_exists__));
using ::fmal __attribute__((__using_if_exists__));
using ::fmaxl __attribute__((__using_if_exists__));
using ::fminl __attribute__((__using_if_exists__));
using ::hypotl __attribute__((__using_if_exists__));
using ::ilogbl __attribute__((__using_if_exists__));
using ::lgammal __attribute__((__using_if_exists__));
using ::llrintl __attribute__((__using_if_exists__));
using ::llroundl __attribute__((__using_if_exists__));
using ::log1pl __attribute__((__using_if_exists__));
using ::log2l __attribute__((__using_if_exists__));
using ::logbl __attribute__((__using_if_exists__));
using ::lrintl __attribute__((__using_if_exists__));
using ::lroundl __attribute__((__using_if_exists__));
using ::nanl __attribute__((__using_if_exists__));
using ::nearbyintl __attribute__((__using_if_exists__));
using ::nextafterl __attribute__((__using_if_exists__));
using ::nexttowardl __attribute__((__using_if_exists__));
using ::remainderl __attribute__((__using_if_exists__));
using ::remquol __attribute__((__using_if_exists__));
using ::rintl __attribute__((__using_if_exists__));
using ::roundl __attribute__((__using_if_exists__));
using ::scalblnl __attribute__((__using_if_exists__));
using ::scalbnl __attribute__((__using_if_exists__));
using ::tgammal __attribute__((__using_if_exists__));
using ::truncl __attribute__((__using_if_exists__));

template <class _A1, __enable_if_t<is_floating_point<_A1>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __constexpr_isnan(_A1 __lcpp_x) noexcept {

  return __builtin_isnan(__lcpp_x);



}

template <class _A1, __enable_if_t<!is_floating_point<_A1>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __constexpr_isnan(_A1 __lcpp_x) noexcept {
  return std::isnan(__lcpp_x);
}

template <class _A1, __enable_if_t<is_floating_point<_A1>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __constexpr_isinf(_A1 __lcpp_x) noexcept {

  return __builtin_isinf(__lcpp_x);



}

template <class _A1, __enable_if_t<!is_floating_point<_A1>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __constexpr_isinf(_A1 __lcpp_x) noexcept {
  return std::isinf(__lcpp_x);
}

template <class _A1, __enable_if_t<is_floating_point<_A1>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __constexpr_isfinite(_A1 __lcpp_x) noexcept {

  return __builtin_isfinite(__lcpp_x);



}

template <class _A1, __enable_if_t<!is_floating_point<_A1>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __constexpr_isfinite(_A1 __lcpp_x) noexcept {
  return __builtin_isfinite(__lcpp_x);
}
# 638 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cmath" 3
}}
# 638 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cmath" 3
#pragma clang diagnostic pop
# 175 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/compare" 2 3
# 269 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 2 3
# 272 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 276 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 2 3

#pragma clang diagnostic push
# 277 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 277 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 277 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 277 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 277 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 277 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {





template <size_t _Ip, class _Hp, bool = is_empty<_Hp>::value && !__libcpp_is_final<_Hp>::value >
class __tuple_leaf;

template <size_t _Ip, class _Hp, bool _Ep>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
swap(__tuple_leaf<_Ip, _Hp, _Ep>& __x, __tuple_leaf<_Ip, _Hp, _Ep>& __y) noexcept(__is_nothrow_swappable_v<_Hp>) {
  swap(__x.get(), __y.get());
}

template <size_t _Ip, class _Hp, bool _Ep>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
swap(const __tuple_leaf<_Ip, _Hp, _Ep>& __x,
     const __tuple_leaf<_Ip, _Hp, _Ep>& __y) noexcept(__is_nothrow_swappable_v<const _Hp>) {
  swap(__x.get(), __y.get());
}

template <size_t _Ip, class _Hp, bool>
class __tuple_leaf {
  _Hp __value_;

  template <class _Tp>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __can_bind_reference() {

    return !__reference_binds_to_temporary(_Hp, _Tp);



  }

public:
  constexpr __tuple_leaf& operator=(const __tuple_leaf&) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __tuple_leaf() noexcept(is_nothrow_default_constructible<_Hp>::value) : __value_() {
    static_assert(!is_reference<_Hp>::value, "Attempted to default construct a reference element in a tuple");
  }

  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __tuple_leaf(integral_constant<int, 0>, const _Alloc&) : __value_() {
    static_assert(!is_reference<_Hp>::value, "Attempted to default construct a reference element in a tuple");
  }

  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __tuple_leaf(integral_constant<int, 1>, const _Alloc& __a)
      : __value_(allocator_arg_t(), __a) {
    static_assert(!is_reference<_Hp>::value, "Attempted to default construct a reference element in a tuple");
  }

  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __tuple_leaf(integral_constant<int, 2>, const _Alloc& __a) : __value_(__a) {
    static_assert(!is_reference<_Hp>::value, "Attempted to default construct a reference element in a tuple");
  }

  template <
      class _Tp,
      __enable_if_t<_And<_IsNotSame<__remove_cvref_t<_Tp>, __tuple_leaf>, is_constructible<_Hp, _Tp> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  constexpr explicit __tuple_leaf(_Tp&& __t) noexcept(is_nothrow_constructible<_Hp, _Tp>::value)
      : __value_(std::forward<_Tp>(__t)) {
    static_assert(__can_bind_reference<_Tp&&>(),
                  "Attempted construction of reference element binds to a temporary whose lifetime has ended");
  }

  template <class _Tp, class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  constexpr explicit __tuple_leaf(integral_constant<int, 0>, const _Alloc&, _Tp&& __t)
      : __value_(std::forward<_Tp>(__t)) {
    static_assert(__can_bind_reference<_Tp&&>(),
                  "Attempted construction of reference element binds to a temporary whose lifetime has ended");
  }

  template <class _Tp, class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  constexpr explicit __tuple_leaf(integral_constant<int, 1>, const _Alloc& __a, _Tp&& __t)
      : __value_(allocator_arg_t(), __a, std::forward<_Tp>(__t)) {
    static_assert(!is_reference<_Hp>::value, "Attempted to uses-allocator construct a reference element in a tuple");
  }

  template <class _Tp, class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  constexpr explicit __tuple_leaf(integral_constant<int, 2>, const _Alloc& __a, _Tp&& __t)
      : __value_(std::forward<_Tp>(__t), __a) {
    static_assert(!is_reference<_Hp>::value, "Attempted to uses-allocator construct a reference element in a tuple");
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __tuple_leaf(const __tuple_leaf& __t) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __tuple_leaf(__tuple_leaf&& __t) = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int
  swap(__tuple_leaf& __t) noexcept(__is_nothrow_swappable_v<__tuple_leaf>) {
    std::swap(*this, __t);
    return 0;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int swap(const __tuple_leaf& __t) const
      noexcept(__is_nothrow_swappable_v<const __tuple_leaf>) {
    std::swap(*this, __t);
    return 0;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Hp& get() noexcept { return __value_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Hp& get() const noexcept { return __value_; }
};

template <size_t _Ip, class _Hp>
class __tuple_leaf<_Ip, _Hp, true> : private _Hp {
public:
  constexpr __tuple_leaf& operator=(const __tuple_leaf&) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __tuple_leaf() noexcept(is_nothrow_default_constructible<_Hp>::value) {}

  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __tuple_leaf(integral_constant<int, 0>, const _Alloc&) {}

  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __tuple_leaf(integral_constant<int, 1>, const _Alloc& __a)
      : _Hp(allocator_arg_t(), __a) {}

  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __tuple_leaf(integral_constant<int, 2>, const _Alloc& __a) : _Hp(__a) {}

  template <class _Tp,
            __enable_if_t< _And< _IsNotSame<__remove_cvref_t<_Tp>, __tuple_leaf>, is_constructible<_Hp, _Tp> >::value,
                           int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  constexpr explicit __tuple_leaf(_Tp&& __t) noexcept(is_nothrow_constructible<_Hp, _Tp>::value)
      : _Hp(std::forward<_Tp>(__t)) {}

  template <class _Tp, class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __tuple_leaf(integral_constant<int, 0>, const _Alloc&, _Tp&& __t)
      : _Hp(std::forward<_Tp>(__t)) {}

  template <class _Tp, class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __tuple_leaf(integral_constant<int, 1>, const _Alloc& __a, _Tp&& __t)
      : _Hp(allocator_arg_t(), __a, std::forward<_Tp>(__t)) {}

  template <class _Tp, class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __tuple_leaf(integral_constant<int, 2>, const _Alloc& __a, _Tp&& __t)
      : _Hp(std::forward<_Tp>(__t), __a) {}

  __tuple_leaf(__tuple_leaf const&) = default;
  __tuple_leaf(__tuple_leaf&&) = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int
  swap(__tuple_leaf& __t) noexcept(__is_nothrow_swappable_v<__tuple_leaf>) {
    std::swap(*this, __t);
    return 0;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int swap(const __tuple_leaf& __rhs) const
      noexcept(__is_nothrow_swappable_v<const __tuple_leaf>) {
    std::swap(*this, __rhs);
    return 0;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Hp& get() noexcept { return static_cast<_Hp&>(*this); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Hp& get() const noexcept {
    return static_cast<const _Hp&>(*this);
  }
};

template <class... _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void __swallow(_Tp&&...) noexcept {}

template <class _Tp>
struct __all_default_constructible;

template <class... _Tp>
struct __all_default_constructible<__tuple_types<_Tp...>> : __all<is_default_constructible<_Tp>::value...> {};



template <class _Indx, class... _Tp>
struct __tuple_impl;

template <size_t... _Indx, class... _Tp>
struct __tuple_impl<__tuple_indices<_Indx...>, _Tp...>
    : public __tuple_leaf<_Indx, _Tp>... {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __tuple_impl() noexcept(
      __all<is_nothrow_default_constructible<_Tp>::value...>::value) {}

  template <size_t... _Uf, class... _Tf, size_t... _Ul, class... _Tl, class... _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __tuple_impl(
      __tuple_indices<_Uf...>,
      __tuple_types<_Tf...>,
      __tuple_indices<_Ul...>,
      __tuple_types<_Tl...>,
      _Up&&... __u) noexcept(__all<is_nothrow_constructible<_Tf, _Up>::value...>::value &&
                             __all<is_nothrow_default_constructible<_Tl>::value...>::value)
      : __tuple_leaf<_Uf, _Tf>(std::forward<_Up>(__u))..., __tuple_leaf<_Ul, _Tl>()... {}

  template <class _Alloc, size_t... _Uf, class... _Tf, size_t... _Ul, class... _Tl, class... _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __tuple_impl(
      allocator_arg_t,
      const _Alloc& __a,
      __tuple_indices<_Uf...>,
      __tuple_types<_Tf...>,
      __tuple_indices<_Ul...>,
      __tuple_types<_Tl...>,
      _Up&&... __u)
      : __tuple_leaf<_Uf, _Tf>(__uses_alloc_ctor<_Tf, _Alloc, _Up>(), __a, std::forward<_Up>(__u))...,
        __tuple_leaf<_Ul, _Tl>(__uses_alloc_ctor<_Tl, _Alloc>(), __a)... {}

  template <class _Tuple, __enable_if_t<__tuple_constructible<_Tuple, tuple<_Tp...> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __tuple_impl(_Tuple&& __t) noexcept(
      (__all<is_nothrow_constructible<
           _Tp,
           typename tuple_element<_Indx, typename __make_tuple_types<_Tuple>::type>::type>::value...>::value))
      : __tuple_leaf<_Indx, _Tp>(
            std::forward<typename tuple_element<_Indx, typename __make_tuple_types<_Tuple>::type>::type>(
                std::get<_Indx>(__t)))... {}

  template <class _Alloc, class _Tuple, __enable_if_t<__tuple_constructible<_Tuple, tuple<_Tp...> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __tuple_impl(allocator_arg_t, const _Alloc& __a, _Tuple&& __t)
      : __tuple_leaf<_Indx, _Tp>(
            __uses_alloc_ctor<_Tp,
                              _Alloc,
                              typename tuple_element<_Indx, typename __make_tuple_types<_Tuple>::type>::type>(),
            __a,
            std::forward<typename tuple_element<_Indx, typename __make_tuple_types<_Tuple>::type>::type>(
                std::get<_Indx>(__t)))... {}

  __tuple_impl(const __tuple_impl&) = default;
  __tuple_impl(__tuple_impl&&) = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
  swap(__tuple_impl& __t) noexcept(__all<__is_nothrow_swappable_v<_Tp>...>::value) {
    std::__swallow(__tuple_leaf<_Indx, _Tp>::swap(static_cast<__tuple_leaf<_Indx, _Tp>&>(__t))...);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void swap(const __tuple_impl& __t) const
      noexcept(__all<__is_nothrow_swappable_v<const _Tp>...>::value) {
    std::__swallow(__tuple_leaf<_Indx, _Tp>::swap(static_cast<const __tuple_leaf<_Indx, _Tp>&>(__t))...);
  }
};

template <class _Dest, class _Source, size_t... _Np>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__memberwise_copy_assign(_Dest& __dest, _Source const& __source, __tuple_indices<_Np...>) {
  std::__swallow(((std::get<_Np>(__dest) = std::get<_Np>(__source)), void(), 0)...);
}

template <class _Dest, class _Source, class... _Up, size_t... _Np>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__memberwise_forward_assign(_Dest& __dest, _Source&& __source, __tuple_types<_Up...>, __tuple_indices<_Np...>) {
  std::__swallow(((std::get<_Np>(__dest) = std::forward<_Up>(std::get<_Np>(__source))), void(), 0)...);
}

template <class... _Tp>
class tuple {
  typedef __tuple_impl<typename __make_tuple_indices<sizeof...(_Tp)>::type, _Tp...> _BaseT;

  _BaseT __base_;

  template <size_t _Jp, class... _Up>
  friend constexpr typename tuple_element<_Jp, tuple<_Up...> >::type& get(tuple<_Up...>&) noexcept;
  template <size_t _Jp, class... _Up>
  friend constexpr const typename tuple_element<_Jp, tuple<_Up...> >::type&
  get(const tuple<_Up...>&) noexcept;
  template <size_t _Jp, class... _Up>
  friend constexpr typename tuple_element<_Jp, tuple<_Up...> >::type&&
  get(tuple<_Up...>&&) noexcept;
  template <size_t _Jp, class... _Up>
  friend constexpr const typename tuple_element<_Jp, tuple<_Up...> >::type&&
  get(const tuple<_Up...>&&) noexcept;

public:
  using __trivially_relocatable = __conditional_t<_And<__libcpp_is_trivially_relocatable<_Tp>...>::value, tuple, void>;




  template <template <class...> class _IsImpDefault = __is_implicitly_default_constructible,
            template <class...> class _IsDefault = is_default_constructible,
            __enable_if_t< _And< _IsDefault<_Tp>... >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit(_Not<_Lazy<_And, _IsImpDefault<_Tp>...> >::value)
      tuple() noexcept(_And<is_nothrow_default_constructible<_Tp>...>::value) {}

  template <class _Alloc,
            template <class...> class _IsImpDefault = __is_implicitly_default_constructible,
            template <class...> class _IsDefault = is_default_constructible,
            __enable_if_t< _And< _IsDefault<_Tp>... >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit(_Not<_Lazy<_And, _IsImpDefault<_Tp>...> >::value)
      tuple(allocator_arg_t, _Alloc const& __a)
      : __base_(allocator_arg_t(),
                __a,
                __tuple_indices<>(),
                __tuple_types<>(),
                typename __make_tuple_indices<sizeof...(_Tp), 0>::type(),
                __tuple_types<_Tp...>()) {}


  template <template <class...> class _And = _And,
            __enable_if_t< _And< _BoolConstant<sizeof...(_Tp) >= 1>, is_copy_constructible<_Tp>... >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  constexpr explicit(_Not<_Lazy<_And, is_convertible<const _Tp&, _Tp>...> >::value)
      tuple(const _Tp&... __t) noexcept(_And<is_nothrow_copy_constructible<_Tp>...>::value)
      : __base_(typename __make_tuple_indices<sizeof...(_Tp)>::type(),
                typename __make_tuple_types<tuple, sizeof...(_Tp)>::type(),
                typename __make_tuple_indices<0>::type(),
                typename __make_tuple_types<tuple, 0>::type(),
                __t...) {}

  template <class _Alloc,
            template <class...> class _And = _And,
            __enable_if_t< _And< _BoolConstant<sizeof...(_Tp) >= 1>, is_copy_constructible<_Tp>... >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                                explicit(_Not<_Lazy<_And, is_convertible<const _Tp&, _Tp>...> >::value)
      tuple(allocator_arg_t, const _Alloc& __a, const _Tp&... __t)
      : __base_(allocator_arg_t(),
                __a,
                typename __make_tuple_indices<sizeof...(_Tp)>::type(),
                typename __make_tuple_types<tuple, sizeof...(_Tp)>::type(),
                typename __make_tuple_indices<0>::type(),
                typename __make_tuple_types<tuple, 0>::type(),
                __t...) {}


  template <class... _Up>
  struct _IsThisTuple : false_type {};
  template <class _Up>
  struct _IsThisTuple<_Up> : is_same<__remove_cvref_t<_Up>, tuple> {};

  template <class... _Up>
  struct _EnableUTypesCtor
      : _And< _BoolConstant<sizeof...(_Tp) >= 1>,
              _Not<_IsThisTuple<_Up...> >,
              is_constructible<_Tp, _Up>... > {};

  template <class... _Up,
            __enable_if_t< _And< _BoolConstant<sizeof...(_Up) == sizeof...(_Tp)>, _EnableUTypesCtor<_Up...> >::value,
                           int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit(_Not<_Lazy<_And, is_convertible<_Up, _Tp>...> >::value)
      tuple(_Up&&... __u) noexcept(_And<is_nothrow_constructible<_Tp, _Up>...>::value)
      : __base_(typename __make_tuple_indices<sizeof...(_Up)>::type(),
                typename __make_tuple_types<tuple, sizeof...(_Up)>::type(),
                typename __make_tuple_indices<sizeof...(_Tp), sizeof...(_Up)>::type(),
                typename __make_tuple_types<tuple, sizeof...(_Tp), sizeof...(_Up)>::type(),
                std::forward<_Up>(__u)...) {}

  template <class _Alloc,
            class... _Up,
            __enable_if_t< _And< _BoolConstant<sizeof...(_Up) == sizeof...(_Tp)>, _EnableUTypesCtor<_Up...> >::value,
                           int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit(_Not<_Lazy<_And, is_convertible<_Up, _Tp>...> >::value)
      tuple(allocator_arg_t, const _Alloc& __a, _Up&&... __u)
      : __base_(allocator_arg_t(),
                __a,
                typename __make_tuple_indices<sizeof...(_Up)>::type(),
                typename __make_tuple_types<tuple, sizeof...(_Up)>::type(),
                typename __make_tuple_indices<sizeof...(_Tp), sizeof...(_Up)>::type(),
                typename __make_tuple_types<tuple, sizeof...(_Tp), sizeof...(_Up)>::type(),
                std::forward<_Up>(__u)...) {}


  tuple(const tuple&) = default;
  tuple(tuple&&) = default;

  template <class _Alloc,
            template <class...> class _And = _And,
            __enable_if_t< _And<is_copy_constructible<_Tp>...>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple(allocator_arg_t, const _Alloc& __alloc, const tuple& __t)
      : __base_(allocator_arg_t(), __alloc, __t) {}

  template <class _Alloc,
            template <class...> class _And = _And,
            __enable_if_t< _And<is_move_constructible<_Tp>...>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple(allocator_arg_t, const _Alloc& __alloc, tuple&& __t)
      : __base_(allocator_arg_t(), __alloc, std::move(__t)) {}



  template <class _OtherTuple, class _DecayedOtherTuple = __remove_cvref_t<_OtherTuple>, class = void>
  struct _EnableCtorFromUTypesTuple : false_type {};

  template <class _OtherTuple, class... _Up>
  struct _EnableCtorFromUTypesTuple<
      _OtherTuple,
      tuple<_Up...>,

      __enable_if_t<sizeof...(_Up) == sizeof...(_Tp)>>
      : _And<



            _Not<is_same<_OtherTuple, const tuple&> >,
            _Not<is_same<_OtherTuple, tuple&&> >,
            is_constructible<_Tp, __copy_cvref_t<_OtherTuple, _Up> >...,
            _Lazy<_Or,
                  _BoolConstant<sizeof...(_Tp) != 1>,


                  _Lazy<_And,
                        _Not<is_same<_Tp, _Up> >...,
                        _Not<is_convertible<_OtherTuple, _Tp> >...,
                        _Not<is_constructible<_Tp, _OtherTuple> >... > > > {};

  template <class... _Up, __enable_if_t< _And< _EnableCtorFromUTypesTuple<const tuple<_Up...>&> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  constexpr explicit(_Not<_Lazy<_And, is_convertible<const _Up&, _Tp>...> >::value)
      tuple(const tuple<_Up...>& __t) noexcept(_And<is_nothrow_constructible<_Tp, const _Up&>...>::value)
      : __base_(__t) {}

  template <class... _Up,
            class _Alloc,
            __enable_if_t< _And< _EnableCtorFromUTypesTuple<const tuple<_Up...>&> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                                explicit(_Not<_Lazy<_And, is_convertible<const _Up&, _Tp>...> >::value)
      tuple(allocator_arg_t, const _Alloc& __a, const tuple<_Up...>& __t)
      : __base_(allocator_arg_t(), __a, __t) {}
# 707 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
  template <class... _Up, __enable_if_t< _And< _EnableCtorFromUTypesTuple<tuple<_Up...>&&> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit(_Not<_Lazy<_And, is_convertible<_Up, _Tp>...> >::value)
      tuple(tuple<_Up...>&& __t) noexcept(_And<is_nothrow_constructible<_Tp, _Up>...>::value)
      : __base_(std::move(__t)) {}

  template <class _Alloc,
            class... _Up,
            __enable_if_t< _And< _EnableCtorFromUTypesTuple<tuple<_Up...>&&> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit(_Not<_Lazy<_And, is_convertible<_Up, _Tp>...> >::value)
      tuple(allocator_arg_t, const _Alloc& __a, tuple<_Up...>&& __t)
      : __base_(allocator_arg_t(), __a, std::move(__t)) {}
# 737 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
  template <template <class...> class _Pred,
            class _Pair,
            class _DecayedPair = __remove_cvref_t<_Pair>,
            class _Tuple = tuple>
  struct _CtorPredicateFromPair : false_type {};

  template <template <class...> class _Pred, class _Pair, class _Up1, class _Up2, class _Tp1, class _Tp2>
  struct _CtorPredicateFromPair<_Pred, _Pair, pair<_Up1, _Up2>, tuple<_Tp1, _Tp2> >
      : _And< _Pred<_Tp1, __copy_cvref_t<_Pair, _Up1> >, _Pred<_Tp2, __copy_cvref_t<_Pair, _Up2> > > {};

  template <class _Pair>
  struct _EnableCtorFromPair : _CtorPredicateFromPair<is_constructible, _Pair> {};

  template <class _Pair>
  struct _NothrowConstructibleFromPair : _CtorPredicateFromPair<is_nothrow_constructible, _Pair> {};

  template <class _Pair, class _DecayedPair = __remove_cvref_t<_Pair>, class _Tuple = tuple>
  struct _BothImplicitlyConvertible : false_type {};

  template <class _Pair, class _Up1, class _Up2, class _Tp1, class _Tp2>
  struct _BothImplicitlyConvertible<_Pair, pair<_Up1, _Up2>, tuple<_Tp1, _Tp2> >
      : _And< is_convertible<__copy_cvref_t<_Pair, _Up1>, _Tp1>, is_convertible<__copy_cvref_t<_Pair, _Up2>, _Tp2> > {};

  template <class _Up1,
            class _Up2,
            template <class...> class _And = _And,
            __enable_if_t< _And< _EnableCtorFromPair<const pair<_Up1, _Up2>&> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  constexpr explicit(_Not<_BothImplicitlyConvertible<const pair<_Up1, _Up2>&> >::value)
      tuple(const pair<_Up1, _Up2>& __p) noexcept(_NothrowConstructibleFromPair<const pair<_Up1, _Up2>&>::value)
      : __base_(__p) {}

  template <class _Alloc,
            class _Up1,
            class _Up2,
            template <class...> class _And = _And,
            __enable_if_t< _And< _EnableCtorFromPair<const pair<_Up1, _Up2>&> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                                explicit(_Not<_BothImplicitlyConvertible<const pair<_Up1, _Up2>&> >::value)
      tuple(allocator_arg_t, const _Alloc& __a, const pair<_Up1, _Up2>& __p)
      : __base_(allocator_arg_t(), __a, __p) {}
# 798 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
  template <class _Up1,
            class _Up2,
            template <class...> class _And = _And,
            __enable_if_t< _And< _EnableCtorFromPair<pair<_Up1, _Up2>&&> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  constexpr explicit(_Not<_BothImplicitlyConvertible<pair<_Up1, _Up2>&&> >::value)
      tuple(pair<_Up1, _Up2>&& __p) noexcept(_NothrowConstructibleFromPair<pair<_Up1, _Up2>&&>::value)
      : __base_(std::move(__p)) {}

  template <class _Alloc,
            class _Up1,
            class _Up2,
            template <class...> class _And = _And,
            __enable_if_t< _And< _EnableCtorFromPair<pair<_Up1, _Up2>&&> >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                                explicit(_Not<_BothImplicitlyConvertible<pair<_Up1, _Up2>&&> >::value)
      tuple(allocator_arg_t, const _Alloc& __a, pair<_Up1, _Up2>&& __p)
      : __base_(allocator_arg_t(), __a, std::move(__p)) {}
# 835 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple&
  operator=(_If<_And<is_copy_assignable<_Tp>...>::value, tuple, __nat> const& __tuple)
      noexcept(_And<is_nothrow_copy_assignable<_Tp>...>::value) {
    std::__memberwise_copy_assign(*this, __tuple, typename __make_tuple_indices<sizeof...(_Tp)>::type());
    return *this;
  }
# 859 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple&
  operator=(_If<_And<is_move_assignable<_Tp>...>::value, tuple, __nat>&& __tuple)
      noexcept(_And<is_nothrow_move_assignable<_Tp>...>::value) {
    std::__memberwise_forward_assign(
        *this, std::move(__tuple), __tuple_types<_Tp...>(), typename __make_tuple_indices<sizeof...(_Tp)>::type());
    return *this;
  }

  template <
      class... _Up,
      __enable_if_t< _And< _BoolConstant<sizeof...(_Tp) == sizeof...(_Up)>, is_assignable<_Tp&, _Up const&>... >::value,
                     int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple& operator=(tuple<_Up...> const& __tuple)
      noexcept(_And<is_nothrow_assignable<_Tp&, _Up const&>...>::value) {
    std::__memberwise_copy_assign(*this, __tuple, typename __make_tuple_indices<sizeof...(_Tp)>::type());
    return *this;
  }

  template <class... _Up,
            __enable_if_t< _And< _BoolConstant<sizeof...(_Tp) == sizeof...(_Up)>, is_assignable<_Tp&, _Up>... >::value,
                           int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple& operator=(tuple<_Up...>&& __tuple)
      noexcept(_And<is_nothrow_assignable<_Tp&, _Up>...>::value) {
    std::__memberwise_forward_assign(
        *this, std::move(__tuple), __tuple_types<_Up...>(), typename __make_tuple_indices<sizeof...(_Tp)>::type());
    return *this;
  }
# 906 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
  template <template <class...> class _Pred,
            bool _Const,
            class _Pair,
            class _DecayedPair = __remove_cvref_t<_Pair>,
            class _Tuple = tuple>
  struct _AssignPredicateFromPair : false_type {};

  template <template <class...> class _Pred, bool _Const, class _Pair, class _Up1, class _Up2, class _Tp1, class _Tp2>
  struct _AssignPredicateFromPair<_Pred, _Const, _Pair, pair<_Up1, _Up2>, tuple<_Tp1, _Tp2> >
      : _And<_Pred<__maybe_const<_Const, _Tp1>&, __copy_cvref_t<_Pair, _Up1> >,
             _Pred<__maybe_const<_Const, _Tp2>&, __copy_cvref_t<_Pair, _Up2> > > {};

  template <bool _Const, class _Pair>
  struct _EnableAssignFromPair : _AssignPredicateFromPair<is_assignable, _Const, _Pair> {};

  template <bool _Const, class _Pair>
  struct _NothrowAssignFromPair : _AssignPredicateFromPair<is_nothrow_assignable, _Const, _Pair> {};
# 942 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
  template <class _Up1,
            class _Up2,
            __enable_if_t< _EnableAssignFromPair<false, pair<_Up1, _Up2> const&>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple& operator=(pair<_Up1, _Up2> const& __pair)
      noexcept(_NothrowAssignFromPair<false, pair<_Up1, _Up2> const&>::value) {
    std::get<0>(*this) = __pair.first;
    std::get<1>(*this) = __pair.second;
    return *this;
  }

  template <class _Up1, class _Up2, __enable_if_t< _EnableAssignFromPair<false, pair<_Up1, _Up2>&&>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple& operator=(pair<_Up1, _Up2>&& __pair)
      noexcept(_NothrowAssignFromPair<false, pair<_Up1, _Up2>&&>::value) {
    std::get<0>(*this) = std::forward<_Up1>(__pair.first);
    std::get<1>(*this) = std::forward<_Up2>(__pair.second);
    return *this;
  }


  template <
      class _Up,
      size_t _Np,
      __enable_if_t< _And< _BoolConstant<_Np == sizeof...(_Tp)>, is_assignable<_Tp&, _Up const&>... >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple& operator=(array<_Up, _Np> const& __array)
      noexcept(_And<is_nothrow_assignable<_Tp&, _Up const&>...>::value) {
    std::__memberwise_copy_assign(*this, __array, typename __make_tuple_indices<sizeof...(_Tp)>::type());
    return *this;
  }


  template <class _Up,
            size_t _Np,
            class = void,
            __enable_if_t< _And< _BoolConstant<_Np == sizeof...(_Tp)>, is_assignable<_Tp&, _Up>... >::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple& operator=(array<_Up, _Np>&& __array)
      noexcept(_And<is_nothrow_assignable<_Tp&, _Up>...>::value) {
    std::__memberwise_forward_assign(
        *this,
        std::move(__array),
        __tuple_types<_If<true, _Up, _Tp>...>(),
        typename __make_tuple_indices<sizeof...(_Tp)>::type());
    return *this;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(tuple& __t)
      noexcept(__all<__is_nothrow_swappable_v<_Tp>...>::value) {
    __base_.swap(__t.__base_);
  }







};

template <>
class tuple<> {
public:
  constexpr tuple() noexcept = default;
  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple(allocator_arg_t, const _Alloc&) noexcept {}
  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple(allocator_arg_t, const _Alloc&, const tuple&) noexcept {}
  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple(array<_Up, 0>) noexcept {}
  template <class _Alloc, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple(allocator_arg_t, const _Alloc&, array<_Up, 0>) noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(tuple&) noexcept {}



};
# 1033 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
template <class... _Tp>
tuple(_Tp...) -> tuple<_Tp...>;
template <class _Tp1, class _Tp2>
tuple(pair<_Tp1, _Tp2>) -> tuple<_Tp1, _Tp2>;
template <class _Alloc, class... _Tp>
tuple(allocator_arg_t, _Alloc, _Tp...) -> tuple<_Tp...>;
template <class _Alloc, class _Tp1, class _Tp2>
tuple(allocator_arg_t, _Alloc, pair<_Tp1, _Tp2>) -> tuple<_Tp1, _Tp2>;
template <class _Alloc, class... _Tp>
tuple(allocator_arg_t, _Alloc, tuple<_Tp...>) -> tuple<_Tp...>;


template <class... _Tp, __enable_if_t<__all<__is_swappable_v<_Tp>...>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(tuple<_Tp...>& __t, tuple<_Tp...>& __u)
    noexcept(__all<__is_nothrow_swappable_v<_Tp>...>::value) {
  __t.swap(__u);
}
# 1062 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
template <size_t _Ip, class... _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename tuple_element<_Ip, tuple<_Tp...> >::type&
get(tuple<_Tp...>& __t) noexcept {
  typedef __attribute__((__nodebug__)) typename tuple_element<_Ip, tuple<_Tp...> >::type type;
  return static_cast<__tuple_leaf<_Ip, type>&>(__t.__base_).get();
}

template <size_t _Ip, class... _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const typename tuple_element<_Ip, tuple<_Tp...> >::type&
get(const tuple<_Tp...>& __t) noexcept {
  typedef __attribute__((__nodebug__)) typename tuple_element<_Ip, tuple<_Tp...> >::type type;
  return static_cast<const __tuple_leaf<_Ip, type>&>(__t.__base_).get();
}

template <size_t _Ip, class... _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename tuple_element<_Ip, tuple<_Tp...> >::type&&
get(tuple<_Tp...>&& __t) noexcept {
  typedef __attribute__((__nodebug__)) typename tuple_element<_Ip, tuple<_Tp...> >::type type;
  return static_cast<type&&>(static_cast<__tuple_leaf<_Ip, type>&&>(__t.__base_).get());
}

template <size_t _Ip, class... _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const typename tuple_element<_Ip, tuple<_Tp...> >::type&&
get(const tuple<_Tp...>&& __t) noexcept {
  typedef __attribute__((__nodebug__)) typename tuple_element<_Ip, tuple<_Tp...> >::type type;
  return static_cast<const type&&>(static_cast<const __tuple_leaf<_Ip, type>&&>(__t.__base_).get());
}



template <class _T1, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _T1& get(tuple<_Args...>& __tup) noexcept {
  return std::get<__find_exactly_one_t<_T1, _Args...>::value>(__tup);
}

template <class _T1, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _T1 const& get(tuple<_Args...> const& __tup) noexcept {
  return std::get<__find_exactly_one_t<_T1, _Args...>::value>(__tup);
}

template <class _T1, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _T1&& get(tuple<_Args...>&& __tup) noexcept {
  return std::get<__find_exactly_one_t<_T1, _Args...>::value>(std::move(__tup));
}

template <class _T1, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _T1 const&& get(tuple<_Args...> const&& __tup) noexcept {
  return std::get<__find_exactly_one_t<_T1, _Args...>::value>(std::move(__tup));
}





template <class... _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr tuple<_Tp&...> tie(_Tp&... __t) noexcept {
  return tuple<_Tp&...>(__t...);
}

template <class... _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr tuple<typename __unwrap_ref_decay<_Tp>::type...>
make_tuple(_Tp&&... __t) {
  return tuple<typename __unwrap_ref_decay<_Tp>::type...>(std::forward<_Tp>(__t)...);
}

template <class... _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr tuple<_Tp&&...> forward_as_tuple(_Tp&&... __t) noexcept {
  return tuple<_Tp&&...>(std::forward<_Tp>(__t)...);
}

template <size_t _Ip>
struct __tuple_equal {
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator()(const _Tp& __x, const _Up& __y) {
    return __tuple_equal<_Ip - 1>()(__x, __y) && std::get<_Ip - 1>(__x) == std::get<_Ip - 1>(__y);
  }
};

template <>
struct __tuple_equal<0> {
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator()(const _Tp&, const _Up&) {
    return true;
  }
};

template <class... _Tp, class... _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator==(const tuple<_Tp...>& __x, const tuple<_Up...>& __y) {
  static_assert(sizeof...(_Tp) == sizeof...(_Up), "Can't compare tuples of different sizes");
  return __tuple_equal<sizeof...(_Tp)>()(__x, __y);
}
# 1177 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
template <class... _Tp, class... _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator!=(const tuple<_Tp...>& __x, const tuple<_Up...>& __y) {
  return !(__x == __y);
}

template <size_t _Ip>
struct __tuple_less {
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator()(const _Tp& __x, const _Up& __y) {
    const size_t __idx = tuple_size<_Tp>::value - _Ip;
    if (std::get<__idx>(__x) < std::get<__idx>(__y))
      return true;
    if (std::get<__idx>(__y) < std::get<__idx>(__x))
      return false;
    return __tuple_less<_Ip - 1>()(__x, __y);
  }
};

template <>
struct __tuple_less<0> {
  template <class _Tp, class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator()(const _Tp&, const _Up&) {
    return false;
  }
};

template <class... _Tp, class... _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator<(const tuple<_Tp...>& __x, const tuple<_Up...>& __y) {
  static_assert(sizeof...(_Tp) == sizeof...(_Up), "Can't compare tuples of different sizes");
  return __tuple_less<sizeof...(_Tp)>()(__x, __y);
}

template <class... _Tp, class... _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator>(const tuple<_Tp...>& __x, const tuple<_Up...>& __y) {
  return __y < __x;
}

template <class... _Tp, class... _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator>=(const tuple<_Tp...>& __x, const tuple<_Up...>& __y) {
  return !(__x < __y);
}

template <class... _Tp, class... _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator<=(const tuple<_Tp...>& __x, const tuple<_Up...>& __y) {
  return !(__y < __x);
}





template <class _Tp, class _Up>
struct __tuple_cat_type;

template <class... _Ttypes, class... _Utypes>
struct __tuple_cat_type<tuple<_Ttypes...>, __tuple_types<_Utypes...> > {
  typedef __attribute__((__nodebug__)) tuple<_Ttypes..., _Utypes...> type;
};

template <class _ResultTuple, bool _Is_Tuple0TupleLike, class... _Tuples>
struct __tuple_cat_return_1 {};

template <class... _Types, class _Tuple0>
struct __tuple_cat_return_1<tuple<_Types...>, true, _Tuple0> {
  using type __attribute__((__nodebug__)) =
      typename __tuple_cat_type< tuple<_Types...>,
                                 typename __make_tuple_types<__remove_cvref_t<_Tuple0> >::type >::type;
};

template <class... _Types, class _Tuple0, class _Tuple1, class... _Tuples>
struct __tuple_cat_return_1<tuple<_Types...>, true, _Tuple0, _Tuple1, _Tuples...>
    : public __tuple_cat_return_1<
          typename __tuple_cat_type< tuple<_Types...>,
                                     typename __make_tuple_types<__remove_cvref_t<_Tuple0> >::type >::type,
          __tuple_like_ext<__libcpp_remove_reference_t<_Tuple1> >::value,
          _Tuple1,
          _Tuples...> {};

template <class... _Tuples>
struct __tuple_cat_return;

template <class _Tuple0, class... _Tuples>
struct __tuple_cat_return<_Tuple0, _Tuples...>
    : public __tuple_cat_return_1<tuple<>,
                                  __tuple_like_ext<__libcpp_remove_reference_t<_Tuple0> >::value,
                                  _Tuple0,
                                  _Tuples...> {};

template <>
struct __tuple_cat_return<> {
  typedef __attribute__((__nodebug__)) tuple<> type;
};

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr tuple<> tuple_cat() { return tuple<>(); }

template <class _Rp, class _Indices, class _Tuple0, class... _Tuples>
struct __tuple_cat_return_ref_imp;

template <class... _Types, size_t... _I0, class _Tuple0>
struct __tuple_cat_return_ref_imp<tuple<_Types...>, __tuple_indices<_I0...>, _Tuple0> {
  typedef __attribute__((__nodebug__)) __libcpp_remove_reference_t<_Tuple0> _T0;
  typedef tuple<_Types..., __copy_cvref_t<_Tuple0, typename tuple_element<_I0, _T0>::type>&&...> type;
};

template <class... _Types, size_t... _I0, class _Tuple0, class _Tuple1, class... _Tuples>
struct __tuple_cat_return_ref_imp<tuple<_Types...>, __tuple_indices<_I0...>, _Tuple0, _Tuple1, _Tuples...>
    : public __tuple_cat_return_ref_imp<
          tuple<_Types...,
                __copy_cvref_t<_Tuple0, typename tuple_element<_I0, __libcpp_remove_reference_t<_Tuple0>>::type>&&...>,
          typename __make_tuple_indices<tuple_size<__libcpp_remove_reference_t<_Tuple1> >::value>::type,
          _Tuple1,
          _Tuples...> {};

template <class _Tuple0, class... _Tuples>
struct __tuple_cat_return_ref
    : public __tuple_cat_return_ref_imp<
          tuple<>,
          typename __make_tuple_indices< tuple_size<__libcpp_remove_reference_t<_Tuple0> >::value >::type,
          _Tuple0,
          _Tuples...> {};

template <class _Types, class _I0, class _J0>
struct __tuple_cat;

template <class... _Types, size_t... _I0, size_t... _J0>
struct __tuple_cat<tuple<_Types...>, __tuple_indices<_I0...>, __tuple_indices<_J0...> > {
  template <class _Tuple0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr
  typename __tuple_cat_return_ref<tuple<_Types...>&&, _Tuple0&&>::type
  operator()(tuple<_Types...> __t, _Tuple0&& __t0) {
    (void)__t;
    return std::forward_as_tuple(
        std::forward<_Types>(std::get<_I0>(__t))..., std::get<_J0>(std::forward<_Tuple0>(__t0))...);
  }

  template <class _Tuple0, class _Tuple1, class... _Tuples>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr
  typename __tuple_cat_return_ref<tuple<_Types...>&&, _Tuple0&&, _Tuple1&&, _Tuples&&...>::type
  operator()(tuple<_Types...> __t, _Tuple0&& __t0, _Tuple1&& __t1, _Tuples&&... __tpls) {
    (void)__t;
    typedef __attribute__((__nodebug__)) __libcpp_remove_reference_t<_Tuple0> _T0;
    typedef __attribute__((__nodebug__)) __libcpp_remove_reference_t<_Tuple1> _T1;
    return __tuple_cat<tuple<_Types..., __copy_cvref_t<_Tuple0, typename tuple_element<_J0, _T0>::type>&&...>,
                       typename __make_tuple_indices<sizeof...(_Types) + tuple_size<_T0>::value>::type,
                       typename __make_tuple_indices<tuple_size<_T1>::value>::type>()(
        std::forward_as_tuple(
            std::forward<_Types>(std::get<_I0>(__t))..., std::get<_J0>(std::forward<_Tuple0>(__t0))...),
        std::forward<_Tuple1>(__t1),
        std::forward<_Tuples>(__tpls)...);
  }
};

template <class _Tuple0, class... _Tuples>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename __tuple_cat_return<_Tuple0, _Tuples...>::type
tuple_cat(_Tuple0&& __t0, _Tuples&&... __tpls) {
  typedef __attribute__((__nodebug__)) __libcpp_remove_reference_t<_Tuple0> _T0;
  return __tuple_cat<tuple<>, __tuple_indices<>, typename __make_tuple_indices<tuple_size<_T0>::value>::type>()(
      tuple<>(), std::forward<_Tuple0>(__t0), std::forward<_Tuples>(__tpls)...);
}

template <class... _Tp, class _Alloc>
struct uses_allocator<tuple<_Tp...>, _Alloc> : true_type {};







template <class _Fn, class _Tuple, size_t... _Id>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr decltype(auto)
__apply_tuple_impl(_Fn&& __f, _Tuple&& __t, __tuple_indices<_Id...>)
    noexcept(noexcept(std::__invoke(std::forward<_Fn>(__f), std::get<_Id>(std::forward<_Tuple>(__t))...))) { return std::__invoke(std::forward<_Fn>(__f), std::get<_Id>(std::forward<_Tuple>(__t))...); }

template <class _Fn, class _Tuple>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr decltype(auto) apply(_Fn&& __f, _Tuple&& __t)
    noexcept(noexcept(std::__apply_tuple_impl( std::forward<_Fn>(__f), std::forward<_Tuple>(__t), typename __make_tuple_indices<tuple_size_v<remove_reference_t<_Tuple>>>::type{}))) { return std::__apply_tuple_impl( std::forward<_Fn>(__f), std::forward<_Tuple>(__t), typename __make_tuple_indices<tuple_size_v<remove_reference_t<_Tuple>>>::type{}); }
# 1371 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
template <class _Tp, class _Tuple, size_t... _Idx>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp __make_from_tuple_impl(_Tuple&& __t, __tuple_indices<_Idx...>,
    enable_if_t<is_constructible_v<_Tp, decltype(std::get<_Idx>(std::forward<_Tuple>(__t)))...>> * = nullptr)
    noexcept(noexcept(_Tp(std::get<_Idx>(std::forward<_Tuple>(__t))...))) { return _Tp(std::get<_Idx>(std::forward<_Tuple>(__t))...); }


template <class _Tp, class _Tuple,
          class _Seq = typename __make_tuple_indices<tuple_size_v<remove_reference_t<_Tuple>>>::type, class = void>
inline constexpr bool __can_make_from_tuple = false;

template <class _Tp, class _Tuple, size_t... _Idx>
inline constexpr bool __can_make_from_tuple<_Tp, _Tuple, __tuple_indices<_Idx...>,
    enable_if_t<is_constructible_v<_Tp, decltype(std::get<_Idx>(std::declval<_Tuple>()))...>>> = true;
# 1393 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
template <class _Tp, class _Tuple, class = enable_if_t<__can_make_from_tuple<_Tp, _Tuple>>>

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp make_from_tuple(_Tuple&& __t)
    noexcept(noexcept(std::__make_from_tuple_impl<_Tp>( std::forward<_Tuple>(__t), typename __make_tuple_indices<tuple_size_v<remove_reference_t<_Tuple>>>::type{}))) { return std::__make_from_tuple_impl<_Tp>( std::forward<_Tuple>(__t), typename __make_tuple_indices<tuple_size_v<remove_reference_t<_Tuple>>>::type{}); }







}}
# 1404 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 3
#pragma clang diagnostic pop






# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/exception" 1 3
# 81 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/exception" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__exception/exception_ptr.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__exception/exception_ptr.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__exception/operations.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__exception/operations.h" 3


namespace std {
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__exception/operations.h" 3
using terminate_handler = void (*)();
__attribute__((__visibility__("default"))) terminate_handler set_terminate(terminate_handler) noexcept;
__attribute__((__visibility__("default"))) terminate_handler get_terminate() noexcept;

__attribute__((__visibility__("default"))) bool uncaught_exception() noexcept;
__attribute__((__visibility__("default"))) int uncaught_exceptions() noexcept;

class __attribute__((__visibility__("default"))) exception_ptr;

__attribute__((__visibility__("default"))) exception_ptr current_exception() noexcept;
[[noreturn]] __attribute__((__visibility__("default"))) void rethrow_exception(exception_ptr);
}
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__exception/exception_ptr.h" 2 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__exception/exception_ptr.h" 3






namespace __cxxabiv1 {

extern "C" {
__attribute__((__visibility__("default"))) void* __cxa_allocate_exception(size_t) throw();
__attribute__((__visibility__("default"))) void __cxa_free_exception(void*) throw();

struct __cxa_exception;
__attribute__((__visibility__("default"))) __cxa_exception* __cxa_init_primary_exception(
    void*,
    std::type_info*,






    void (*)(void*)) throw();

}

}





namespace std {



class __attribute__((__visibility__("default"))) exception_ptr {
  void* __ptr_;

  static exception_ptr __from_native_exception_pointer(void*) noexcept;

  template <class _Ep>
  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) exception_ptr make_exception_ptr(_Ep) noexcept;

public:

  using __trivially_relocatable = exception_ptr;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) exception_ptr() noexcept : __ptr_() {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) exception_ptr(nullptr_t) noexcept : __ptr_() {}

  exception_ptr(const exception_ptr&) noexcept;
  exception_ptr& operator=(const exception_ptr&) noexcept;
  ~exception_ptr() noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit operator bool() const noexcept { return __ptr_ != nullptr; }

  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const exception_ptr& __x, const exception_ptr& __y) noexcept {
    return __x.__ptr_ == __y.__ptr_;
  }

  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const exception_ptr& __x, const exception_ptr& __y) noexcept {
    return !(__x == __y);
  }

  friend __attribute__((__visibility__("default"))) exception_ptr current_exception() noexcept;
  friend __attribute__((__visibility__("default"))) void rethrow_exception(exception_ptr);
};

template <class _Ep>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) exception_ptr make_exception_ptr(_Ep __e) noexcept {


  using _Ep2 = __decay_t<_Ep>;

  void* __ex = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ep));





  (void)__cxxabiv1::__cxa_init_primary_exception(__ex, const_cast<std::type_info*>(&typeid(_Ep)), [](void* __p) {

        std::__destroy_at(static_cast<_Ep2*>(__p));



      });

  try {
    ::new (__ex) _Ep2(__e);
    return exception_ptr::__from_native_exception_pointer(__ex);
  } catch (...) {
    __cxxabiv1::__cxa_free_exception(__ex);
    return current_exception();
  }
# 131 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__exception/exception_ptr.h" 3
}
# 175 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__exception/exception_ptr.h" 3
}
# 82 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/exception" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__exception/nested_exception.h" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__exception/nested_exception.h" 3


namespace std {

class __attribute__((__visibility__("default"))) nested_exception {
  exception_ptr __ptr_;

public:
  nested_exception() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) nested_exception(const nested_exception&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) nested_exception& operator=(const nested_exception&) noexcept = default;
  virtual ~nested_exception() noexcept;


  [[noreturn]] void rethrow_nested() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) exception_ptr nested_ptr() const noexcept { return __ptr_; }
};

template <class _Tp>
struct __nested : public _Tp, public nested_exception {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __nested(const _Tp& __t) : _Tp(__t) {}
};


template <class _Tp, class _Up, bool>
struct __throw_with_nested;

template <class _Tp, class _Up>
struct __throw_with_nested<_Tp, _Up, true> {
  [[noreturn]] static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __do_throw(_Tp&& __t) {
    throw __nested<_Up>(std::forward<_Tp>(__t));
  }
};

template <class _Tp, class _Up>
struct __throw_with_nested<_Tp, _Up, false> {
  [[noreturn]] static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __do_throw(_Tp&& __t) { throw std::forward<_Tp>(__t); }
};


template <class _Tp>
[[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void throw_with_nested(_Tp&& __t) {

  using _Up = __decay_t<_Tp>;
  static_assert(is_copy_constructible<_Up>::value, "type thrown must be CopyConstructible");
  __throw_with_nested<_Tp,
                      _Up,
                      is_class<_Up>::value && !is_base_of<nested_exception, _Up>::value &&
                          !__libcpp_is_final<_Up>::value>::__do_throw(std::forward<_Tp>(__t));




}

template <class _From, class _To>
struct __can_dynamic_cast
    : _BoolConstant< is_polymorphic<_From>::value &&
                     (!is_base_of<_To, _From>::value || is_convertible<const _From*, const _To*>::value)> {};

template <class _Ep, __enable_if_t< __can_dynamic_cast<_Ep, nested_exception>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void rethrow_if_nested(const _Ep& __e) {
  const nested_exception* __nep = dynamic_cast<const nested_exception*>(std::addressof(__e));
  if (__nep)
    __nep->rethrow_nested();
}

template <class _Ep, __enable_if_t<!__can_dynamic_cast<_Ep, nested_exception>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void rethrow_if_nested(const _Ep&) {}

}
# 83 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/exception" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__exception/terminate.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__exception/terminate.h" 3


namespace std {
[[noreturn]] __attribute__((__visibility__("default"))) void terminate() noexcept;
}
# 85 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/exception" 2 3
# 89 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/exception" 3
# 1412 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iosfwd" 1 3
# 109 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iosfwd" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/fstream.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/fstream.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/fstream.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/fstream.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/fstream.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/fstream.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/fstream.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/fstream.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_filebuf;
template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_ifstream;
template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_ofstream;
template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_fstream;

using filebuf = basic_filebuf<char>;
using ifstream = basic_ifstream<char>;
using ofstream = basic_ofstream<char>;
using fstream = basic_fstream<char>;


using wfilebuf = basic_filebuf<wchar_t>;
using wifstream = basic_ifstream<wchar_t>;
using wofstream = basic_ofstream<wchar_t>;
using wfstream = basic_fstream<wchar_t>;


template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(filebuf))) __attribute__((__preferred_name__(wfilebuf))) basic_filebuf;
template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(ifstream))) __attribute__((__preferred_name__(wifstream))) basic_ifstream;
template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(ofstream))) __attribute__((__preferred_name__(wofstream))) basic_ofstream;
template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(fstream))) __attribute__((__preferred_name__(wfstream))) basic_fstream;

}}
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/fstream.h" 3
#pragma clang diagnostic pop
# 110 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iosfwd" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/istream.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/istream.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/istream.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/istream.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/istream.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/istream.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/istream.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/istream.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_istream;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_iostream;

using istream = basic_istream<char>;
using iostream = basic_iostream<char>;


using wistream = basic_istream<wchar_t>;
using wiostream = basic_iostream<wchar_t>;


template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(istream))) __attribute__((__preferred_name__(wistream))) basic_istream;

template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(iostream))) __attribute__((__preferred_name__(wiostream))) basic_iostream;

}}
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/istream.h" 3
#pragma clang diagnostic pop
# 112 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iosfwd" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/sstream.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/sstream.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/sstream.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/sstream.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/sstream.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/sstream.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/sstream.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/sstream.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _CharT, class _Traits = char_traits<_CharT>, class _Allocator = allocator<_CharT> >
class basic_stringbuf;

template <class _CharT, class _Traits = char_traits<_CharT>, class _Allocator = allocator<_CharT> >
class basic_istringstream;
template <class _CharT, class _Traits = char_traits<_CharT>, class _Allocator = allocator<_CharT> >
class basic_ostringstream;
template <class _CharT, class _Traits = char_traits<_CharT>, class _Allocator = allocator<_CharT> >
class basic_stringstream;

using stringbuf = basic_stringbuf<char>;
using istringstream = basic_istringstream<char>;
using ostringstream = basic_ostringstream<char>;
using stringstream = basic_stringstream<char>;


using wstringbuf = basic_stringbuf<wchar_t>;
using wistringstream = basic_istringstream<wchar_t>;
using wostringstream = basic_ostringstream<wchar_t>;
using wstringstream = basic_stringstream<wchar_t>;


template <class _CharT, class _Traits, class _Allocator>
class __attribute__((__preferred_name__(stringbuf))) __attribute__((__preferred_name__(wstringbuf))) basic_stringbuf;
template <class _CharT, class _Traits, class _Allocator>
class __attribute__((__preferred_name__(istringstream)))
    __attribute__((__preferred_name__(wistringstream))) basic_istringstream;
template <class _CharT, class _Traits, class _Allocator>
class __attribute__((__preferred_name__(ostringstream)))
    __attribute__((__preferred_name__(wostringstream))) basic_ostringstream;
template <class _CharT, class _Traits, class _Allocator>
class __attribute__((__preferred_name__(stringstream)))
    __attribute__((__preferred_name__(wstringstream))) basic_stringstream;

}}
# 56 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/sstream.h" 3
#pragma clang diagnostic pop
# 115 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iosfwd" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/streambuf.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/streambuf.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/streambuf.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/streambuf.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/streambuf.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/streambuf.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/streambuf.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/streambuf.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_streambuf;

using streambuf = basic_streambuf<char>;


using wstreambuf = basic_streambuf<wchar_t>;


template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(streambuf))) __attribute__((__preferred_name__(wstreambuf))) basic_streambuf;

}}
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/streambuf.h" 3
#pragma clang diagnostic pop
# 116 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iosfwd" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__std_mbstate_t.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__std_mbstate_t.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mbstate_t.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mbstate_t.h" 3
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mbstate_t.h" 3
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_mbstate_t.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_mbstate_t.h" 3 4
typedef __darwin_mbstate_t mbstate_t;
# 46 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mbstate_t.h" 2 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__std_mbstate_t.h" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__std_mbstate_t.h" 3





#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__std_mbstate_t.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__std_mbstate_t.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__std_mbstate_t.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__std_mbstate_t.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__std_mbstate_t.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__std_mbstate_t.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

using ::mbstate_t __attribute__((__using_if_exists__));

}}
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__std_mbstate_t.h" 3
#pragma clang diagnostic pop
# 118 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iosfwd" 2 3
# 122 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iosfwd" 3


#pragma clang diagnostic push
# 124 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iosfwd" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 124 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iosfwd" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 124 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iosfwd" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 124 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iosfwd" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 124 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iosfwd" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 124 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iosfwd" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _CharT, class _Traits = char_traits<_CharT> >
class istreambuf_iterator;
template <class _CharT, class _Traits = char_traits<_CharT> >
class ostreambuf_iterator;

template <class _State>
class fpos;
typedef fpos<mbstate_t> streampos;

typedef fpos<mbstate_t> wstreampos;




typedef fpos<mbstate_t> u16streampos;
typedef fpos<mbstate_t> u32streampos;
# 163 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iosfwd" 3
template <class _CharT, class _Traits>
class __save_flags {
  typedef basic_ios<_CharT, _Traits> __stream_type;
  typedef typename __stream_type::fmtflags fmtflags;

  __stream_type& __stream_;
  fmtflags __fmtflags_;
  _CharT __fill_;

public:
    __save_flags(const __save_flags&) = delete;
    __save_flags& operator=(const __save_flags&) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __save_flags(__stream_type& __stream)
      : __stream_(__stream), __fmtflags_(__stream.flags()), __fill_(__stream.fill()) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__save_flags() {
    __stream_.flags(__fmtflags_);
    __stream_.fill(__fill_);
  }
};

}}
# 184 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iosfwd" 3
#pragma clang diagnostic pop
# 1413 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/utility" 1 3
# 256 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/utility" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/rel_ops.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/rel_ops.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/rel_ops.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/rel_ops.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/rel_ops.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/rel_ops.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/rel_ops.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/rel_ops.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace rel_ops {

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const _Tp& __x, const _Tp& __y) {
  return !(__x == __y);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>(const _Tp& __x, const _Tp& __y) {
  return __y < __x;
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<=(const _Tp& __x, const _Tp& __y) {
  return !(__y < __x);
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>=(const _Tp& __x, const _Tp& __y) {
  return !(__x < __y);
}

}

}}
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/rel_ops.h" 3
#pragma clang diagnostic pop
# 257 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/utility" 2 3








# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/as_const.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/as_const.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/as_const.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/as_const.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/as_const.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/as_const.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/as_const.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/as_const.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp>
[[nodiscard]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr add_const_t<_Tp>& as_const(_Tp& __t) noexcept {
  return __t;
}

template <class _Tp>
void as_const(const _Tp&&) = delete;


}}
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/as_const.h" 3
#pragma clang diagnostic pop
# 266 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/utility" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/in_place.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/in_place.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/in_place.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/in_place.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/in_place.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/in_place.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/in_place.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/in_place.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



struct __attribute__((__visibility__("default"))) in_place_t {
  explicit in_place_t() = default;
};
inline constexpr in_place_t in_place{};

template <class _Tp>
struct in_place_type_t {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit in_place_type_t() = default;
};
template <class _Tp>
inline constexpr in_place_type_t<_Tp> in_place_type{};

template <size_t _Idx>
struct in_place_index_t {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit in_place_index_t() = default;
};
template <size_t _Idx>
inline constexpr in_place_index_t<_Idx> in_place_index{};

template <class _Tp>
struct __is_inplace_type_imp : false_type {};
template <class _Tp>
struct __is_inplace_type_imp<in_place_type_t<_Tp>> : true_type {};

template <class _Tp>
using __is_inplace_type = __is_inplace_type_imp<__remove_cvref_t<_Tp>>;

template <class _Tp>
struct __is_inplace_index_imp : false_type {};
template <size_t _Idx>
struct __is_inplace_index_imp<in_place_index_t<_Idx>> : true_type {};

template <class _Tp>
using __is_inplace_index = __is_inplace_index_imp<__remove_cvref_t<_Tp>>;



}}
# 61 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/in_place.h" 3
#pragma clang diagnostic pop
# 267 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/utility" 2 3
# 297 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/utility" 3
# 1417 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/tuple" 2 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/once_flag.h" 2 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/once_flag.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/once_flag.h" 2 3

#pragma clang diagnostic push
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/once_flag.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/once_flag.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/once_flag.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/once_flag.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/once_flag.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/once_flag.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

struct once_flag;



template <class _Callable, class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void call_once(once_flag&, _Callable&&, _Args&&...);
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/once_flag.h" 3
struct once_flag {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr once_flag() noexcept : __state_(_Unset) {}
  once_flag(const once_flag&) = delete;
  once_flag& operator=(const once_flag&) = delete;




  typedef unsigned long _State_type;


  static const _State_type _Unset = 0;
  static const _State_type _Pending = 1;
  static const _State_type _Complete = ~_State_type(0);

private:
  _State_type __state_;


  template <class _Callable, class... _Args>
  friend void call_once(once_flag&, _Callable&&, _Args&&...);







};



template <class _Fp>
class __call_once_param {
  _Fp& __f_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __call_once_param(_Fp& __f) : __f_(__f) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator()() {
    typedef typename __make_tuple_indices<tuple_size<_Fp>::value, 1>::type _Index;
    __execute(_Index());
  }

private:
  template <size_t... _Indices>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __execute(__tuple_indices<_Indices...>) {
    std::__invoke(std::get<0>(std::move(__f_)), std::get<_Indices>(std::move(__f_))...);
  }
};
# 115 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/once_flag.h" 3
template <class _Fp>
void __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __call_once_proxy(void* __vp) {
  __call_once_param<_Fp>* __p = static_cast<__call_once_param<_Fp>*>(__vp);
  (*__p)();
}

__attribute__((__visibility__("default"))) void __call_once(volatile once_flag::_State_type&, void*, void (*)(void*));



template <class _Callable, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void call_once(once_flag& __flag, _Callable&& __func, _Args&&... __args) {
  if (__libcpp_acquire_load(&__flag.__state_) != once_flag::_Complete) {
    typedef tuple<_Callable&&, _Args&&...> _Gp;
    _Gp __f(std::forward<_Callable>(__func), std::forward<_Args>(__args)...);
    __call_once_param<_Gp> __p(__f);
    std::__call_once(__flag.__state_, &__p, &__call_once_proxy<_Gp>);
  }
}
# 155 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/once_flag.h" 3
}}
# 155 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/once_flag.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/no_destroy.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/no_destroy.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/no_destroy.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/no_destroy.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/no_destroy.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/no_destroy.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/no_destroy.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/no_destroy.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

struct __uninitialized_tag {};







template <class _Tp>
struct __no_destroy {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __no_destroy(__uninitialized_tag) : __obj_() {}

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __no_destroy(_Args&&... __args) {
    ::new ((void*)__obj_) _Tp(std::forward<_Args>(__args)...);
  }

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp& __emplace(_Args&&... __args) {
    return *(::new ((void*)__obj_) _Tp(std::forward<_Args>(__args)...));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp& __get() { return *reinterpret_cast<_Tp*>(__obj_); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp const& __get() const { return *reinterpret_cast<const _Tp*>(__obj_); }

private:
  alignas(_Tp) char __obj_[sizeof(_Tp)];
};

}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/no_destroy.h" 3
#pragma clang diagnostic pop
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/private_constructor_tag.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/private_constructor_tag.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/private_constructor_tag.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/private_constructor_tag.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/private_constructor_tag.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/private_constructor_tag.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/private_constructor_tag.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/private_constructor_tag.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {




struct __private_constructor_tag {};

}}
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/private_constructor_tag.h" 3
#pragma clang diagnostic pop
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cctype" 1 3
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cctype" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ctype.h" 1 3
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ctype.h" 3



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/ctype.h" 1 3 4
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/ctype.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_ctype.h" 1 3 4
# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_ctype.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/runetype.h" 1 3 4
# 46 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/runetype.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 47 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/runetype.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 50 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/runetype.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_wint_t.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_wint_t.h" 3 4
typedef __darwin_wint_t wint_t;
# 51 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/runetype.h" 2 3 4
# 60 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/runetype.h" 3 4
typedef struct {
 __darwin_rune_t __min;
 __darwin_rune_t __max;
 __darwin_rune_t __map;
 __uint32_t *__types;
} _RuneEntry;

typedef struct {
 int __nranges;
 _RuneEntry *__ranges;
} _RuneRange;

typedef struct {
 char __name[14];
 __uint32_t __mask;
} _RuneCharClass;

typedef struct {
 char __magic[8];
 char __encoding[32];

 __darwin_rune_t (*__sgetrune)(const char *, __darwin_size_t, char const **);
 int (*__sputrune)(__darwin_rune_t, char *, __darwin_size_t, char **);
 __darwin_rune_t __invalid_rune;

 __uint32_t __runetype[(1 <<8 )];
 __darwin_rune_t __maplower[(1 <<8 )];
 __darwin_rune_t __mapupper[(1 <<8 )];






 _RuneRange __runetype_ext;
 _RuneRange __maplower_ext;
 _RuneRange __mapupper_ext;

 void *__variable;
 int __variable_len;




 int __ncharclasses;
 _RuneCharClass *__charclasses;
} _RuneLocale;



extern "C" {
extern _RuneLocale _DefaultRuneLocale;
extern _RuneLocale *_CurrentRuneLocale;
}
# 72 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_ctype.h" 2 3 4
# 130 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_ctype.h" 3 4
extern "C" {
unsigned long ___runetype(__darwin_ct_rune_t);
__darwin_ct_rune_t ___tolower(__darwin_ct_rune_t);
__darwin_ct_rune_t ___toupper(__darwin_ct_rune_t);
}

inline int
isascii(int _c)
{
 return ((_c & ~0x7F) == 0);
}
# 149 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_ctype.h" 3 4
extern "C" {
int __maskrune(__darwin_ct_rune_t, unsigned long);
}


inline int
__istype(__darwin_ct_rune_t _c, unsigned long _f)
{



 return (isascii(_c) ? !!(_DefaultRuneLocale.__runetype[_c] & _f)
  : !!__maskrune(_c, _f));

}

inline __darwin_ct_rune_t
__isctype(__darwin_ct_rune_t _c, unsigned long _f)
{



 return (_c < 0 || _c >= (1 <<8 )) ? 0 :
  !!(_DefaultRuneLocale.__runetype[_c] & _f);

}
# 189 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_ctype.h" 3 4
extern "C" {
__darwin_ct_rune_t __toupper(__darwin_ct_rune_t);
__darwin_ct_rune_t __tolower(__darwin_ct_rune_t);
}


inline int
__wcwidth(__darwin_ct_rune_t _c)
{
 unsigned int _x;

 if (_c == 0)
  return (0);
 _x = (unsigned int)__maskrune(_c, 0xe0000000L|0x00040000L);
 if ((_x & 0xe0000000L) != 0)
  return ((_x & 0xe0000000L) >> 30);
 return ((_x & 0x00040000L) != 0 ? 1 : -1);
}






inline int
isalnum(int _c)
{
 return (__istype(_c, 0x00000100L|0x00000400L));
}

inline int
isalpha(int _c)
{
 return (__istype(_c, 0x00000100L));
}

inline int
isblank(int _c)
{
 return (__istype(_c, 0x00020000L));
}

inline int
iscntrl(int _c)
{
 return (__istype(_c, 0x00000200L));
}


inline int
isdigit(int _c)
{
 return (__isctype(_c, 0x00000400L));
}

inline int
isgraph(int _c)
{
 return (__istype(_c, 0x00000800L));
}

inline int
islower(int _c)
{
 return (__istype(_c, 0x00001000L));
}

inline int
isprint(int _c)
{
 return (__istype(_c, 0x00040000L));
}

inline int
ispunct(int _c)
{
 return (__istype(_c, 0x00002000L));
}

inline int
isspace(int _c)
{
 return (__istype(_c, 0x00004000L));
}

inline int
isupper(int _c)
{
 return (__istype(_c, 0x00008000L));
}


inline int
isxdigit(int _c)
{
 return (__isctype(_c, 0x00010000L));
}

inline int
toascii(int _c)
{
 return (_c & 0x7F);
}

inline int
tolower(int _c)
{
        return (__tolower(_c));
}

inline int
toupper(int _c)
{
        return (__toupper(_c));
}


inline int
digittoint(int _c)
{
 return (__maskrune(_c, 0x0F));
}

inline int
ishexnumber(int _c)
{
 return (__istype(_c, 0x00010000L));
}

inline int
isideogram(int _c)
{
 return (__istype(_c, 0x00080000L));
}

inline int
isnumber(int _c)
{
 return (__istype(_c, 0x00000400L));
}

inline int
isphonogram(int _c)
{
 return (__istype(_c, 0x00200000L));
}

inline int
isrune(int _c)
{
 return (__istype(_c, 0xFFFFFFF0L));
}

inline int
isspecial(int _c)
{
 return (__istype(_c, 0x00100000L));
}
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/ctype.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_ctype.h" 1 3 4
# 37 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_ctype.h" 3 4
extern "C" {
unsigned long ___runetype_l(__darwin_ct_rune_t, locale_t);
__darwin_ct_rune_t ___tolower_l(__darwin_ct_rune_t, locale_t);
__darwin_ct_rune_t ___toupper_l(__darwin_ct_rune_t, locale_t);
}

extern "C" {
int __maskrune_l(__darwin_ct_rune_t, unsigned long, locale_t);
}

inline int
__istype_l(__darwin_ct_rune_t _c, unsigned long _f, locale_t _l)
{
 return !!(isascii(_c) ? (_DefaultRuneLocale.__runetype[_c] & _f)
  : __maskrune_l(_c, _f, _l));
}

inline __darwin_ct_rune_t
__toupper_l(__darwin_ct_rune_t _c, locale_t _l)
{
 return isascii(_c) ? _DefaultRuneLocale.__mapupper[_c]
  : ___toupper_l(_c, _l);
}

inline __darwin_ct_rune_t
__tolower_l(__darwin_ct_rune_t _c, locale_t _l)
{
 return isascii(_c) ? _DefaultRuneLocale.__maplower[_c]
  : ___tolower_l(_c, _l);
}

inline int
__wcwidth_l(__darwin_ct_rune_t _c, locale_t _l)
{
 unsigned int _x;

 if (_c == 0)
  return (0);
 _x = (unsigned int)__maskrune_l(_c, 0xe0000000L|0x00040000L, _l);
 if ((_x & 0xe0000000L) != 0)
  return ((_x & 0xe0000000L) >> 30);
 return ((_x & 0x00040000L) != 0 ? 1 : -1);
}



inline int
digittoint_l(int c, locale_t l)
{
 return (__maskrune_l(c, 0x0F, l));
}

inline int
isalnum_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000100L|0x00000400L, l));
}

inline int
isalpha_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000100L, l));
}

inline int
isblank_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00020000L, l));
}

inline int
iscntrl_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000200L, l));
}

inline int
isdigit_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000400L, l));
}

inline int
isgraph_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000800L, l));
}

inline int
ishexnumber_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00010000L, l));
}

inline int
isideogram_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00080000L, l));
}

inline int
islower_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00001000L, l));
}

inline int
isnumber_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000400L, l));
}

inline int
isphonogram_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00200000L, l));
}

inline int
isprint_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00040000L, l));
}

inline int
ispunct_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00002000L, l));
}

inline int
isrune_l(int c, locale_t l)
{
 return (__istype_l(c, 0xFFFFFFF0L, l));
}

inline int
isspace_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00004000L, l));
}

inline int
isspecial_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00100000L, l));
}

inline int
isupper_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00008000L, l));
}

inline int
isxdigit_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00010000L, l));
}

inline int
tolower_l(int c, locale_t l)
{
        return (__tolower_l(c, l));
}

inline int
toupper_l(int c, locale_t l)
{
        return (__toupper_l(c, l));
}
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/ctype.h" 2 3 4
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ctype.h" 2 3
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cctype" 2 3
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cctype" 3


#pragma clang diagnostic push
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cctype" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cctype" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cctype" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cctype" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cctype" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cctype" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 110 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cctype" 3
using ::isalnum __attribute__((__using_if_exists__));
using ::isalpha __attribute__((__using_if_exists__));
using ::isblank __attribute__((__using_if_exists__));
using ::iscntrl __attribute__((__using_if_exists__));
using ::isdigit __attribute__((__using_if_exists__));
using ::isgraph __attribute__((__using_if_exists__));
using ::islower __attribute__((__using_if_exists__));
using ::isprint __attribute__((__using_if_exists__));
using ::ispunct __attribute__((__using_if_exists__));
using ::isspace __attribute__((__using_if_exists__));
using ::isupper __attribute__((__using_if_exists__));
using ::isxdigit __attribute__((__using_if_exists__));
using ::tolower __attribute__((__using_if_exists__));
using ::toupper __attribute__((__using_if_exists__));

}}
# 125 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cctype" 3
#pragma clang diagnostic pop
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/clocale" 1 3
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/clocale" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale.h" 1 3
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale.h" 3



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/locale.h" 1 3 4
# 52 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/locale.h" 3 4
extern "C" {
char *setlocale(int, const char *);
}
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale.h" 2 3
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/clocale" 2 3
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/clocale" 3


#pragma clang diagnostic push
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/clocale" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/clocale" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/clocale" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/clocale" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/clocale" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/clocale" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

using ::lconv __attribute__((__using_if_exists__));
using ::setlocale __attribute__((__using_if_exists__));
using ::localeconv __attribute__((__using_if_exists__));

}}
# 59 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/clocale" 3
#pragma clang diagnostic pop
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 1 3
# 591 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_segment_if.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_segment_if.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_segment_if.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_segment_if.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_segment_if.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_segment_if.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_segment_if.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_segment_if.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {







template <class _SegmentedIterator, class _Pred, class _Proj>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _SegmentedIterator
__find_segment_if(_SegmentedIterator __first, _SegmentedIterator __last, _Pred __pred, _Proj& __proj) {
  using _Traits = __segmented_iterator_traits<_SegmentedIterator>;

  auto __sfirst = _Traits::__segment(__first);
  auto __slast = _Traits::__segment(__last);


  if (__sfirst == __slast)
    return _Traits::__compose(__sfirst, __pred(_Traits::__local(__first), _Traits::__local(__last), __proj));

  {
    auto __llast = _Traits::__end(__sfirst);
    auto __liter = __pred(_Traits::__local(__first), __llast, __proj);
    if (__liter != __llast)
      return _Traits::__compose(__sfirst, __liter);
  }
  ++__sfirst;


  while (__sfirst != __slast) {
    auto __llast = _Traits::__end(__sfirst);
    auto __liter = __pred(_Traits::__begin(__sfirst), _Traits::__end(__sfirst), __proj);
    if (__liter != __llast)
      return _Traits::__compose(__sfirst, __liter);
    ++__sfirst;
  }


  return _Traits::__compose(__sfirst, __pred(_Traits::__begin(__sfirst), _Traits::__local(__last), __proj));
}

}}
# 60 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_segment_if.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countr.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countr.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/rotate.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/rotate.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/rotate.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/rotate.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/rotate.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/rotate.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/rotate.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/rotate.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {




template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp __rotl(_Tp __x, int __s) noexcept {
  static_assert(__libcpp_is_unsigned_integer<_Tp>::value, "__rotl requires an unsigned integer type");
  const int __N = numeric_limits<_Tp>::digits;
  int __r = __s % __N;

  if (__r == 0)
    return __x;

  if (__r > 0)
    return (__x << __r) | (__x >> (__N - __r));

  return (__x >> -__r) | (__x << (__N + __r));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp __rotr(_Tp __x, int __s) noexcept {
  static_assert(__libcpp_is_unsigned_integer<_Tp>::value, "__rotr requires an unsigned integer type");
  const int __N = numeric_limits<_Tp>::digits;
  int __r = __s % __N;

  if (__r == 0)
    return __x;

  if (__r > 0)
    return (__x >> __r) | (__x << (__N - __r));

  return (__x << -__r) | (__x >> (__N + __r));
}
# 70 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/rotate.h" 3
}}
# 70 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/rotate.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countr.h" 2 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countr.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countr.h" 2 3

#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countr.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countr.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countr.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countr.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countr.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countr.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int __libcpp_ctz(unsigned __x) noexcept {
  return __builtin_ctz(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int __libcpp_ctz(unsigned long __x) noexcept {
  return __builtin_ctzl(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int __libcpp_ctz(unsigned long long __x) noexcept {
  return __builtin_ctzll(__x);
}

template <class _Tp>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int __countr_zero(_Tp __t) noexcept {

  return __builtin_ctzg(__t, numeric_limits<_Tp>::digits);
# 64 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countr.h" 3
}
# 80 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countr.h" 3
}}
# 80 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countr.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/invert_if.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/invert_if.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/invert_if.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/invert_if.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/invert_if.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/invert_if.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/invert_if.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/invert_if.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <bool _Invert, class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp __invert_if(_Tp __v) {
  if (_Invert)
    return ~__v;
  return __v;
}

}}
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/invert_if.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/bit_reference.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/bit_reference.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/bit_reference.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/bit_reference.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/bit_reference.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/bit_reference.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/bit_reference.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/bit_reference.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Cp, bool _IsConst, typename _Cp::__storage_type = 0>
class __bit_iterator;

}}
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/bit_reference.h" 3
#pragma clang diagnostic pop
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 2 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwchar" 1 3
# 111 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwchar" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwctype" 1 3
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwctype" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/wctype.h" 1 3
# 56 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/wctype.h" 3
# 68 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/wctype.h" 3
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/wctype.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/wctype.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wctype.h" 1 3 4
# 36 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wctype.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_wctrans_t.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_wctrans_t.h" 3 4
typedef __darwin_wctrans_t wctrans_t;
# 37 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wctype.h" 2 3 4



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/__wctype.h" 1 3 4
# 39 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/__wctype.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/___wctype.h" 1 3 4
# 62 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/___wctype.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_wctype_t.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_wctype_t.h" 3 4
typedef __darwin_wctype_t wctype_t;
# 63 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/___wctype.h" 2 3 4
# 80 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/___wctype.h" 3 4
inline int
iswalnum(wint_t _wc)
{
 return (__istype(_wc, 0x00000100L|0x00000400L));
}

inline int
iswalpha(wint_t _wc)
{
 return (__istype(_wc, 0x00000100L));
}

inline int
iswcntrl(wint_t _wc)
{
 return (__istype(_wc, 0x00000200L));
}

inline int
iswctype(wint_t _wc, wctype_t _charclass)
{
 return (__istype(_wc, _charclass));
}

inline int
iswdigit(wint_t _wc)
{
 return (__isctype(_wc, 0x00000400L));
}

inline int
iswgraph(wint_t _wc)
{
 return (__istype(_wc, 0x00000800L));
}

inline int
iswlower(wint_t _wc)
{
 return (__istype(_wc, 0x00001000L));
}

inline int
iswprint(wint_t _wc)
{
 return (__istype(_wc, 0x00040000L));
}

inline int
iswpunct(wint_t _wc)
{
 return (__istype(_wc, 0x00002000L));
}

inline int
iswspace(wint_t _wc)
{
 return (__istype(_wc, 0x00004000L));
}

inline int
iswupper(wint_t _wc)
{
 return (__istype(_wc, 0x00008000L));
}

inline int
iswxdigit(wint_t _wc)
{
 return (__isctype(_wc, 0x00010000L));
}

inline wint_t
towlower(wint_t _wc)
{
  return (__tolower(_wc));
}

inline wint_t
towupper(wint_t _wc)
{
  return (__toupper(_wc));
}
# 185 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/___wctype.h" 3 4
extern "C" {
wctype_t
 wctype(const char *);
}
# 40 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/__wctype.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/___wctype.h" 1 3 4
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/___wctype.h" 3 4
inline int
iswalnum_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00000100L|0x00000400L, _l));
}

inline int
iswalpha_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00000100L, _l));
}

inline int
iswcntrl_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00000200L, _l));
}

inline int
iswctype_l(wint_t _wc, wctype_t _charclass, locale_t _l)
{
 return (__istype_l(_wc, _charclass, _l));
}

inline int
iswdigit_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00000400L, _l));
}

inline int
iswgraph_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00000800L, _l));
}

inline int
iswlower_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00001000L, _l));
}

inline int
iswprint_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00040000L, _l));
}

inline int
iswpunct_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00002000L, _l));
}

inline int
iswspace_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00004000L, _l));
}

inline int
iswupper_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00008000L, _l));
}

inline int
iswxdigit_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00010000L, _l));
}

inline wint_t
towlower_l(wint_t _wc, locale_t _l)
{
        return (__tolower_l(_wc, _l));
}

inline wint_t
towupper_l(wint_t _wc, locale_t _l)
{
        return (__toupper_l(_wc, _l));
}
# 138 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/___wctype.h" 3 4
extern "C" {
wctype_t
 wctype_l(const char *, locale_t);
}
# 43 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/__wctype.h" 2 3 4
# 41 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wctype.h" 2 3 4








inline int
iswblank(wint_t _wc)
{
 return (__istype(_wc, 0x00020000L));
}


inline int
iswascii(wint_t _wc)
{
 return ((_wc & ~0x7F) == 0);
}

inline int
iswhexnumber(wint_t _wc)
{
 return (__istype(_wc, 0x00010000L));
}

inline int
iswideogram(wint_t _wc)
{
 return (__istype(_wc, 0x00080000L));
}

inline int
iswnumber(wint_t _wc)
{
 return (__istype(_wc, 0x00000400L));
}

inline int
iswphonogram(wint_t _wc)
{
 return (__istype(_wc, 0x00200000L));
}

inline int
iswrune(wint_t _wc)
{
 return (__istype(_wc, 0xFFFFFFF0L));
}

inline int
iswspecial(wint_t _wc)
{
 return (__istype(_wc, 0x00100000L));
}
# 117 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wctype.h" 3 4
extern "C" {

wint_t nextwctype(wint_t, wctype_t);

wint_t towctrans(wint_t, wctrans_t);
wctrans_t
 wctrans(const char *);
}
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/wctype.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_wctype.h" 1 3 4
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_wctype.h" 3 4
inline int
iswblank_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00020000L, _l));
}

inline int
iswhexnumber_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00010000L, _l));
}

inline int
iswideogram_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00080000L, _l));
}

inline int
iswnumber_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00000400L, _l));
}

inline int
iswphonogram_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00200000L, _l));
}

inline int
iswrune_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0xFFFFFFF0L, _l));
}

inline int
iswspecial_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00100000L, _l));
}
# 90 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_wctype.h" 3 4
extern "C" {
wint_t nextwctype_l(wint_t, wctype_t, locale_t);
wint_t towctrans_l(wint_t, wctrans_t, locale_t);
wctrans_t
 wctrans_l(const char *, locale_t);
}
# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/wctype.h" 2 3 4
# 69 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/wctype.h" 2 3
# 56 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwctype" 2 3
# 67 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwctype" 3


#pragma clang diagnostic push
# 69 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwctype" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 69 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwctype" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 69 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwctype" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 69 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwctype" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 69 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwctype" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 69 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwctype" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


using ::wint_t __attribute__((__using_if_exists__));
using ::wctrans_t __attribute__((__using_if_exists__));
using ::wctype_t __attribute__((__using_if_exists__));
using ::iswalnum __attribute__((__using_if_exists__));
using ::iswalpha __attribute__((__using_if_exists__));
using ::iswblank __attribute__((__using_if_exists__));
using ::iswcntrl __attribute__((__using_if_exists__));
using ::iswdigit __attribute__((__using_if_exists__));
using ::iswgraph __attribute__((__using_if_exists__));
using ::iswlower __attribute__((__using_if_exists__));
using ::iswprint __attribute__((__using_if_exists__));
using ::iswpunct __attribute__((__using_if_exists__));
using ::iswspace __attribute__((__using_if_exists__));
using ::iswupper __attribute__((__using_if_exists__));
using ::iswxdigit __attribute__((__using_if_exists__));
using ::iswctype __attribute__((__using_if_exists__));
using ::wctype __attribute__((__using_if_exists__));
using ::towlower __attribute__((__using_if_exists__));
using ::towupper __attribute__((__using_if_exists__));
using ::towctrans __attribute__((__using_if_exists__));
using ::wctrans __attribute__((__using_if_exists__));


}}
# 95 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwctype" 3
#pragma clang diagnostic pop
# 112 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwchar" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/wchar.h" 1 3
# 109 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/wchar.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stddef.h" 1 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stddef.h" 3




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 1 3
# 88 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_ptrdiff_t.h" 1 3
# 89 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_size_t.h" 1 3
# 94 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_rsize_t.h" 1 3
# 99 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_wchar_t.h" 1 3
# 104 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3
# 113 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_nullptr_t.h" 1 3
# 114 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3
# 128 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_offsetof.h" 1 3
# 129 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stddef.h" 2 3
# 110 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/wchar.h" 2 3
# 118 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/wchar.h" 3
# 127 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/wchar.h" 3
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/wchar.h" 1 3 4
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/wchar.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wchar.h" 1 3 4
# 74 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wchar.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_null.h" 1 3 4
# 75 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wchar.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 76 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wchar.h" 2 3 4



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 80 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wchar.h" 2 3 4
# 89 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wchar.h" 3 4
# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stdarg.h" 1 3 4
# 47 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stdarg.h" 3 4
# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stdarg_header_macro.h" 1 3 4
# 48 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stdarg.h" 2 3 4



# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stdarg___gnuc_va_list.h" 1 3 4
# 12 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stdarg___gnuc_va_list.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 52 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stdarg.h" 2 3 4




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stdarg_va_list.h" 1 3 4
# 12 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stdarg_va_list.h" 3 4
typedef __builtin_va_list va_list;
# 57 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stdarg.h" 2 3 4




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stdarg_va_arg.h" 1 3 4
# 62 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stdarg.h" 2 3 4




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stdarg___va_copy.h" 1 3 4
# 67 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stdarg.h" 2 3 4




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stdarg_va_copy.h" 1 3 4
# 72 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stdarg.h" 2 3 4
# 90 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wchar.h" 2 3 4
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdio.h" 1 3 4
# 105 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdio.h" 3



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdio.h" 1 3 4
# 61 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdio.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 1 3 4
# 76 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_va_list.h" 1 3 4
# 44 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_va_list.h" 3 4
typedef __darwin_va_list va_list;
# 77 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 78 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_null.h" 1 3 4
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/stdio.h" 1 3 4
# 45 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/stdio.h" 3 4
extern "C" {

int renameat(int, const char *, int, const char *) __attribute__((availability(macosx,introduced=10.10)));



int renamex_np(const char *, const char *, unsigned int) __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
int renameatx_np(int, const char *, int, const char *, unsigned int) __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));



}
# 81 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_printf.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_printf.h" 3 4
extern "C" {
int printf(const char * , ...) __attribute__((__format__ (__printf__, 1, 2)));
}
# 82 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 2 3 4

typedef __darwin_off_t fpos_t;
# 94 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 3 4
struct __sbuf {
 unsigned char *_base;
 int _size;
};


struct __sFILEX;
# 128 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 3 4
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;
 short _flags;
 short _file;
 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (* _Nullable _close)(void *);
 int (* _Nullable _read) (void *, char *, int);
 fpos_t (* _Nullable _seek) (void *, fpos_t, int);
 int (* _Nullable _write)(void *, const char *, int);


 struct __sbuf _ub;
 struct __sFILEX *_extra;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_seek_set.h" 1 3 4
# 162 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 2 3 4

extern "C" {
extern FILE *__stdinp __attribute__((__swift_attr__("nonisolated(unsafe)")));
extern FILE *__stdoutp __attribute__((__swift_attr__("nonisolated(unsafe)")));
extern FILE *__stderrp __attribute__((__swift_attr__("nonisolated(unsafe)")));
}
# 228 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 3 4
extern "C" {
void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE * , fpos_t *);
char *fgets(char * , int, FILE *);



FILE *fopen(const char * __filename, const char * __mode) __asm("_" "fopen" );

int fprintf(FILE * , const char * , ...) __attribute__((__format__ (__printf__, 2, 3)));
int fputc(int, FILE *);
int fputs(const char * , FILE * ) __asm("_" "fputs" );
size_t fread(void * __ptr, size_t __size, size_t __nitems, FILE * __stream);
FILE *freopen(const char * , const char * ,
     FILE * ) __asm("_" "freopen" );
int fscanf(FILE * , const char * , ...) __attribute__((__format__ (__scanf__, 2, 3)));
int fseek(FILE *, long, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
size_t fwrite(const void * __ptr, size_t __size, size_t __nitems, FILE * __stream) __asm("_" "fwrite" );
int getc(FILE *);
int getchar(void);


__attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of gets(3), it is highly recommended that you use fgets(3) instead.")))

char *gets(char *);

void perror(const char *) __attribute__((__cold__));
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
int rename (const char *__old, const char *__new);
void rewind(FILE *);
int scanf(const char * , ...) __attribute__((__format__ (__scanf__, 1, 2)));
void setbuf(FILE * , char * );
int setvbuf(FILE * , char * , int, size_t);

__attribute__((__availability__(swift, unavailable, message="Use snprintf instead.")))

__attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead.")))

int sprintf(char * , const char * , ...) __attribute__((__format__ (__printf__, 2, 3)));

int sscanf(const char * , const char * , ...) __attribute__((__format__ (__scanf__, 2, 3)));
FILE *tmpfile(void);

__attribute__((__availability__(swift, unavailable, message="Use mkstemp(3) instead.")))

__attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.")))

char *tmpnam(char *);

int ungetc(int, FILE *);
int vfprintf(FILE * , const char * , va_list) __attribute__((__format__ (__printf__, 2, 0)));
int vprintf(const char * , va_list) __attribute__((__format__ (__printf__, 1, 0)));

__attribute__((__availability__(swift, unavailable, message="Use vsnprintf instead.")))

__attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use vsnprintf(3) instead.")))

int vsprintf(char * , const char * , va_list) __attribute__((__format__ (__printf__, 2, 0)));
}
# 307 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_ctermid.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_ctermid.h" 3 4
extern "C" {

char *ctermid(char *);

}
# 308 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 2 3 4

extern "C" {




FILE *fdopen(int, const char *) __asm("_" "fdopen" );

int fileno(FILE *);
}
# 326 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 3 4
extern "C" {
int pclose(FILE *) __attribute__((__availability__(swift, unavailable, message="Use posix_spawn APIs or NSTask instead. (On iOS, process spawning is unavailable.)")));



FILE *popen(const char *, const char *) __asm("_" "popen" ) __attribute__((__availability__(swift, unavailable, message="Use posix_spawn APIs or NSTask instead. (On iOS, process spawning is unavailable.)")));

}
# 345 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 3 4
extern "C" {
int __srget(FILE *);
int __svfscanf(FILE *, const char *, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int __swbuf(int, FILE *);
}







inline __attribute__ ((__always_inline__)) int __sputc(int _c, FILE *_p) {
 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf(_c, _p));
}
# 382 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 3 4
extern "C" {
void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);



int getw(FILE *);
int putw(int, FILE *);


__attribute__((__availability__(swift, unavailable, message="Use mkstemp(3) instead.")))

__attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.")))

char *tempnam(const char *__dir, const char *__prefix) __asm("_" "tempnam" );
}
# 421 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_off_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_off_t.h" 3 4
typedef __darwin_off_t off_t;
# 422 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 2 3 4

extern "C" {
int fseeko(FILE * __stream, off_t __offset, int __whence);
off_t ftello(FILE * __stream);
}



extern "C" {
int snprintf(char * __str, size_t __size, const char * __format, ...) __attribute__((__format__ (__printf__, 3, 4)));
int vfscanf(FILE * __stream, const char * __format, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int vscanf(const char * __format, va_list) __attribute__((__format__ (__scanf__, 1, 0)));
int vsnprintf(char * __str, size_t __size, const char * __format, va_list) __attribute__((__format__ (__printf__, 3, 0)));
int vsscanf(const char * __str, const char * __format, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
}
# 448 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_stdio.h" 3 4
extern "C" {
int dprintf(int, const char * , ...) __attribute__((__format__ (__printf__, 2, 3))) __attribute__((availability(macosx,introduced=10.7)));
int vdprintf(int, const char * , va_list) __attribute__((__format__ (__printf__, 2, 0))) __attribute__((availability(macosx,introduced=10.7)));
ssize_t getdelim(char ** __linep, size_t * __linecapp, int __delimiter, FILE * __stream) __attribute__((availability(macosx,introduced=10.7)));
ssize_t getline(char ** __linep, size_t * __linecapp, FILE * __stream) __attribute__((availability(macosx,introduced=10.7)));
FILE *fmemopen(void * __buf, size_t __size, const char * __mode) __attribute__((availability(macos,introduced=10.13))) __attribute__((availability(ios,introduced=11.0))) __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
FILE *open_memstream(char **__bufp, size_t *__sizep) __attribute__((availability(macos,introduced=10.13))) __attribute__((availability(ios,introduced=11.0))) __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
}







extern "C" {
extern const int sys_nerr;
extern const char *const sys_errlist[];

int asprintf(char ** , const char * , ...) __attribute__((__format__ (__printf__, 2, 3)));
char *ctermid_r(char *);
char *fgetln(FILE *, size_t *);
const char *fmtcheck(const char *, const char *) __attribute__((format_arg(2)));
int fpurge(FILE *);
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);
int vasprintf(char ** , const char * , va_list) __attribute__((__format__ (__printf__, 2, 0)));





FILE *funopen(const void *,
     int (* _Nullable)(void *, char *, int),
     int (* _Nullable)(void *, const char *, int),
     fpos_t (* _Nullable)(void *, fpos_t, int),
     int (* _Nullable)(void *));
}
# 62 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdio.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_stdio.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_stdio.h" 3 4
extern "C" {

int fprintf_l(FILE * , locale_t , const char * , ...)
        __attribute__((__format__ (__printf__, 3, 4)));
int fscanf_l(FILE * , locale_t , const char * , ...)
        __attribute__((__format__ (__scanf__, 3, 4)));
int printf_l(locale_t , const char * , ...)
        __attribute__((__format__ (__printf__, 2, 3)));
int scanf_l(locale_t , const char * , ...)
        __attribute__((__format__ (__scanf__, 2, 3)));
int sprintf_l(char * , locale_t , const char * , ...)
        __attribute__((__format__ (__printf__, 3, 4))) __attribute__((__availability__(swift, unavailable, message="Use snprintf_l instead.")));
int sscanf_l(const char * , locale_t , const char * , ...)
        __attribute__((__format__ (__scanf__, 3, 4)));
int vfprintf_l(FILE * , locale_t , const char * , va_list)
        __attribute__((__format__ (__printf__, 3, 0)));
int vprintf_l(locale_t , const char * , va_list)
        __attribute__((__format__ (__printf__, 2, 0)));
int vsprintf_l(char * , locale_t , const char * , va_list)
        __attribute__((__format__ (__printf__, 3, 0))) __attribute__((__availability__(swift, unavailable, message="Use vsnprintf_l instead.")));


int snprintf_l(char * , size_t, locale_t , const char * , ...)
        __attribute__((__format__ (__printf__, 4, 5)));
int vfscanf_l(FILE * , locale_t , const char * , va_list)
        __attribute__((__format__ (__scanf__, 3, 0)));
int vscanf_l(locale_t , const char * , va_list)
        __attribute__((__format__ (__scanf__, 2, 0)));
int vsnprintf_l(char * , size_t, locale_t , const char * , va_list)
        __attribute__((__format__ (__printf__, 4, 0)));
int vsscanf_l(const char * , locale_t , const char * , va_list)
        __attribute__((__format__ (__scanf__, 3, 0)));



int dprintf_l(int, locale_t , const char * , ...)
        __attribute__((__format__ (__printf__, 3, 4))) __attribute__((availability(macosx,introduced=10.7)));
int vdprintf_l(int, locale_t , const char * , va_list)
        __attribute__((__format__ (__printf__, 3, 0))) __attribute__((availability(macosx,introduced=10.7)));




int asprintf_l(char ** , locale_t , const char * , ...)
        __attribute__((__format__ (__printf__, 3, 4)));
int vasprintf_l(char ** , locale_t , const char * , va_list)
        __attribute__((__format__ (__printf__, 3, 0)));


}
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/stdio.h" 2 3 4
# 109 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdio.h" 2 3
# 91 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wchar.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/time.h" 1 3 4
# 63 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/time.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_time.h" 1 3 4
# 69 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_time.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_clock_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_clock_t.h" 3 4
typedef __darwin_clock_t clock_t;
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_time.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_null.h" 1 3 4
# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_time.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 72 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_time.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_time_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_time_t.h" 3 4
typedef __darwin_time_t time_t;
# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_time.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_timespec.h" 1 3 4
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_timespec.h" 3 4
struct timespec
{
 __darwin_time_t tv_sec;
 long tv_nsec;
};
# 74 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_time.h" 2 3 4

struct tm {
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;
 long tm_gmtoff;
 char *tm_zone;
};
# 98 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_time.h" 3 4
extern char *tzname[];


extern int getdate_err;

extern long timezone __asm("_" "timezone" );

extern int daylight;

extern "C" {
char *asctime(const struct tm *);
clock_t clock(void) __asm("_" "clock" );
char *ctime(const time_t *);
double difftime(time_t, time_t);
struct tm *getdate(const char *);
struct tm *gmtime(const time_t *);
struct tm *localtime(const time_t *);
time_t mktime(struct tm *) __asm("_" "mktime" );
size_t strftime(char * , size_t, const char * , const struct tm * ) __asm("_" "strftime" );
char *strptime(const char * , const char * , struct tm * ) __asm("_" "strptime" );
time_t time(time_t *);


void tzset(void);



char *asctime_r(const struct tm * , char * );
char *ctime_r(const time_t *, char *);
struct tm *gmtime_r(const time_t * , struct tm * );
struct tm *localtime_r(const time_t * , struct tm * );


time_t posix2time(time_t);



void tzsetwall(void);
time_t time2posix(time_t);
time_t timelocal(struct tm * const);
time_t timegm(struct tm * const);



int nanosleep(const struct timespec *__rqtp, struct timespec *__rmtp) __asm("_" "nanosleep" );
# 153 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_time.h" 3 4
typedef enum {
_CLOCK_REALTIME __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 0,

_CLOCK_MONOTONIC __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 6,


_CLOCK_MONOTONIC_RAW __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 4,

_CLOCK_MONOTONIC_RAW_APPROX __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 5,

_CLOCK_UPTIME_RAW __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 8,

_CLOCK_UPTIME_RAW_APPROX __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 9,


_CLOCK_PROCESS_CPUTIME_ID __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 12,

_CLOCK_THREAD_CPUTIME_ID __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 16

} clockid_t;

__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
int clock_getres(clockid_t __clock_id, struct timespec *__res);

__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
int clock_gettime(clockid_t __clock_id, struct timespec *__tp);


__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
__uint64_t clock_gettime_nsec_np(clockid_t __clock_id);


__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,unavailable)))
__attribute__((availability(tvos,unavailable))) __attribute__((availability(watchos,unavailable)))
int clock_settime(clockid_t __clock_id, const struct timespec *__tp);
# 198 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_time.h" 3 4
__attribute__((availability(macos,introduced=10.15))) __attribute__((availability(ios,introduced=13.0))) __attribute__((availability(tvos,introduced=13.0))) __attribute__((availability(watchos,introduced=6.0)))
int timespec_get(struct timespec *ts, int base);


}
# 64 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/time.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_time.h" 1 3 4
# 28 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_time.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_time.h" 2 3 4



extern "C" {
size_t strftime_l(char * , size_t, const char * ,
  const struct tm * , locale_t)
  __asm("_" "strftime_l" ) __attribute__((__format__ (__strftime__, 3, 0)));
char *strptime_l(const char * , const char * ,
  struct tm * , locale_t)
  __asm("_" "strptime_l" ) __attribute__((__format__ (__strftime__, 2, 0)));
}
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/time.h" 2 3 4
# 92 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wchar.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/__wctype.h" 1 3 4
# 93 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wchar.h" 2 3 4



extern "C" {
wint_t btowc(int);
wint_t fgetwc(FILE *);
wchar_t *fgetws(wchar_t * , int, FILE * );
wint_t fputwc(wchar_t, FILE *);
int fputws(const wchar_t * , FILE * );
int fwide(FILE *, int);
int fwprintf(FILE * , const wchar_t * , ...);
int fwscanf(FILE * , const wchar_t * , ...);
wint_t getwc(FILE *);
wint_t getwchar(void);
size_t mbrlen(const char * , size_t, mbstate_t * );
size_t mbrtowc(wchar_t * , const char * , size_t,
     mbstate_t * );
int mbsinit(const mbstate_t *);
size_t mbsrtowcs(wchar_t * , const char ** , size_t,
     mbstate_t * );
wint_t putwc(wchar_t, FILE *);
wint_t putwchar(wchar_t);
int swprintf(wchar_t * , size_t, const wchar_t * , ...);
int swscanf(const wchar_t * , const wchar_t * , ...);
wint_t ungetwc(wint_t, FILE *);
int vfwprintf(FILE * , const wchar_t * ,
     __darwin_va_list);
int vswprintf(wchar_t * , size_t, const wchar_t * ,
     __darwin_va_list);
int vwprintf(const wchar_t * , __darwin_va_list);
size_t wcrtomb(char * , wchar_t, mbstate_t * );
wchar_t *wcscat(wchar_t * , const wchar_t * );
wchar_t *wcschr(const wchar_t *, wchar_t);
int wcscmp(const wchar_t *, const wchar_t *);
int wcscoll(const wchar_t *, const wchar_t *);
wchar_t *wcscpy(wchar_t * , const wchar_t * );
size_t wcscspn(const wchar_t *, const wchar_t *);
size_t wcsftime(wchar_t * , size_t, const wchar_t * ,
     const struct tm * ) __asm("_" "wcsftime" );
size_t wcslen(const wchar_t *);
wchar_t *wcsncat(wchar_t * , const wchar_t * , size_t);
int wcsncmp(const wchar_t *, const wchar_t *, size_t);
wchar_t *wcsncpy(wchar_t * , const wchar_t * , size_t);
wchar_t *wcspbrk(const wchar_t *, const wchar_t *);
wchar_t *wcsrchr(const wchar_t *, wchar_t);
size_t wcsrtombs(char * , const wchar_t ** , size_t,
     mbstate_t * );
size_t wcsspn(const wchar_t *, const wchar_t *);
wchar_t *wcsstr(const wchar_t * , const wchar_t * );
size_t wcsxfrm(wchar_t * , const wchar_t * , size_t);
int wctob(wint_t);
double wcstod(const wchar_t * , wchar_t ** );
wchar_t *wcstok(wchar_t * , const wchar_t * ,
     wchar_t ** );
long wcstol(const wchar_t * , wchar_t ** , int);
unsigned long
  wcstoul(const wchar_t * , wchar_t ** , int);
wchar_t *wmemchr(const wchar_t *, wchar_t, size_t);
int wmemcmp(const wchar_t *, const wchar_t *, size_t);
wchar_t *wmemcpy(wchar_t * , const wchar_t * , size_t);
wchar_t *wmemmove(wchar_t *, const wchar_t *, size_t);
wchar_t *wmemset(wchar_t *, wchar_t, size_t);
int wprintf(const wchar_t * , ...);
int wscanf(const wchar_t * , ...);
int wcswidth(const wchar_t *, size_t);
int wcwidth(wchar_t);
}
# 169 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wchar.h" 3 4
extern "C" {
int vfwscanf(FILE * , const wchar_t * ,
     __darwin_va_list);
int vswscanf(const wchar_t * , const wchar_t * ,
     __darwin_va_list);
int vwscanf(const wchar_t * , __darwin_va_list);
float wcstof(const wchar_t * , wchar_t ** );
long double
 wcstold(const wchar_t * , wchar_t ** );

long long
 wcstoll(const wchar_t * , wchar_t ** , int);
unsigned long long
 wcstoull(const wchar_t * , wchar_t ** , int);

}
# 194 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_wchar.h" 3 4
extern "C" {
size_t mbsnrtowcs(wchar_t * , const char ** , size_t,
            size_t, mbstate_t * );
wchar_t *wcpcpy(wchar_t * , const wchar_t * ) __attribute__((availability(macosx,introduced=10.7)));
wchar_t *wcpncpy(wchar_t * , const wchar_t * , size_t) __attribute__((availability(macosx,introduced=10.7)));
wchar_t *wcsdup(const wchar_t *) __attribute__((availability(macosx,introduced=10.7)));
int wcscasecmp(const wchar_t *, const wchar_t *) __attribute__((availability(macosx,introduced=10.7)));
int wcsncasecmp(const wchar_t *, const wchar_t *, size_t n) __attribute__((availability(macosx,introduced=10.7)));
size_t wcsnlen(const wchar_t *, size_t) __attribute__((availability(macosx,introduced=10.7)));
size_t wcsnrtombs(char * , const wchar_t ** , size_t,
            size_t, mbstate_t * );
FILE *open_wmemstream(wchar_t ** __bufp, size_t * __sizep) __attribute__((availability(macos,introduced=10.13))) __attribute__((availability(ios,introduced=11.0))) __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
}







extern "C" {
wchar_t *fgetwln(FILE * , size_t *) __attribute__((availability(macosx,introduced=10.7)));
size_t wcslcat(wchar_t *, const wchar_t *, size_t);
size_t wcslcpy(wchar_t *, const wchar_t *, size_t);
}
# 68 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/wchar.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_wchar.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_wchar.h" 3 4
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stddef.h" 1 3 4
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stddef.h" 3




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 1 3
# 88 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_ptrdiff_t.h" 1 3
# 89 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_size_t.h" 1 3
# 94 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_rsize_t.h" 1 3
# 99 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_wchar_t.h" 1 3
# 104 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3
# 113 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_nullptr_t.h" 1 3
# 114 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3
# 128 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/__stddef_offsetof.h" 1 3
# 129 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stddef.h" 2 3
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stddef.h" 2 3
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_wchar.h" 2 3 4


extern "C" {
wint_t btowc_l(int, locale_t);
wint_t fgetwc_l(FILE *, locale_t);
wchar_t *fgetws_l(wchar_t * , int, FILE * , locale_t);
wint_t fputwc_l(wchar_t, FILE *, locale_t);
int fputws_l(const wchar_t * , FILE * , locale_t);
int fwprintf_l(FILE * , locale_t, const wchar_t * , ...);
int fwscanf_l(FILE * , locale_t, const wchar_t * , ...);
wint_t getwc_l(FILE *, locale_t);
wint_t getwchar_l(locale_t);
size_t mbrlen_l(const char * , size_t, mbstate_t * ,
     locale_t);
size_t mbrtowc_l(wchar_t * , const char * , size_t,
     mbstate_t * , locale_t);
int mbsinit_l(const mbstate_t *, locale_t);
size_t mbsrtowcs_l(wchar_t * , const char ** , size_t,
     mbstate_t * , locale_t);
wint_t putwc_l(wchar_t, FILE *, locale_t);
wint_t putwchar_l(wchar_t, locale_t);
int swprintf_l(wchar_t * , size_t n, locale_t,
  const wchar_t * , ...);
int swscanf_l(const wchar_t * , locale_t,
  const wchar_t * , ...);
wint_t ungetwc_l(wint_t, FILE *, locale_t);
int vfwprintf_l(FILE * , locale_t, const wchar_t * ,
  __darwin_va_list);
int vswprintf_l(wchar_t * , size_t n, locale_t,
  const wchar_t * , __darwin_va_list);
int vwprintf_l(locale_t, const wchar_t * , __darwin_va_list);
size_t wcrtomb_l(char * , wchar_t, mbstate_t * ,
     locale_t);
int wcscoll_l(const wchar_t *, const wchar_t *, locale_t);
size_t wcsftime_l(wchar_t * , size_t, const wchar_t * ,
  const struct tm * , locale_t)
  __asm("_" "wcsftime_l" );
size_t wcsrtombs_l(char * , const wchar_t ** , size_t,
     mbstate_t * , locale_t);
double wcstod_l(const wchar_t * , wchar_t ** , locale_t);
long wcstol_l(const wchar_t * , wchar_t ** , int,
     locale_t);
unsigned long
 wcstoul_l(const wchar_t * , wchar_t ** , int,
     locale_t);
int wcswidth_l(const wchar_t *, size_t, locale_t);
size_t wcsxfrm_l(wchar_t * , const wchar_t * , size_t,
     locale_t);
int wctob_l(wint_t, locale_t);
int wcwidth_l(wchar_t, locale_t);
int wprintf_l(locale_t, const wchar_t * , ...);
int wscanf_l(locale_t, const wchar_t * , ...);
}
# 93 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_wchar.h" 3 4
extern "C" {
int vfwscanf_l(FILE * , locale_t, const wchar_t * ,
  __darwin_va_list);
int vswscanf_l(const wchar_t * , locale_t,
  const wchar_t * , __darwin_va_list);
int vwscanf_l(locale_t, const wchar_t * , __darwin_va_list);
float wcstof_l(const wchar_t * , wchar_t ** , locale_t);
long double
 wcstold_l(const wchar_t * , wchar_t ** , locale_t);

long long
 wcstoll_l(const wchar_t * , wchar_t ** , int,
     locale_t);
unsigned long long
 wcstoull_l(const wchar_t * , wchar_t ** , int,
     locale_t);

}
# 120 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale/_wchar.h" 3 4
extern "C" {
size_t mbsnrtowcs_l(wchar_t * , const char ** , size_t,
     size_t, mbstate_t * , locale_t);
int wcscasecmp_l(const wchar_t *, const wchar_t *, locale_t) __attribute__((availability(macosx,introduced=10.7)));
int wcsncasecmp_l(const wchar_t *, const wchar_t *, size_t n, locale_t) __attribute__((availability(macosx,introduced=10.7)));
size_t wcsnrtombs_l(char * , const wchar_t ** , size_t,
     size_t, mbstate_t * , locale_t);
}







extern "C" {
wchar_t *fgetwln_l(FILE * , size_t *, locale_t) __attribute__((availability(macosx,introduced=10.7)));
}
# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/wchar.h" 2 3 4
# 128 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/wchar.h" 2 3
# 146 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/wchar.h" 3
extern "C++" {
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) wchar_t* __libcpp_wcschr(const wchar_t* __s, wchar_t __c) {
  return (wchar_t*)wcschr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) const wchar_t* wcschr(const wchar_t* __s, wchar_t __c) {
  return __libcpp_wcschr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) wchar_t* wcschr(wchar_t* __s, wchar_t __c) {
  return __libcpp_wcschr(__s, __c);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) wchar_t* __libcpp_wcspbrk(const wchar_t* __s1, const wchar_t* __s2) {
  return (wchar_t*)wcspbrk(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) const wchar_t*
wcspbrk(const wchar_t* __s1, const wchar_t* __s2) {
  return __libcpp_wcspbrk(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) wchar_t* wcspbrk(wchar_t* __s1, const wchar_t* __s2) {
  return __libcpp_wcspbrk(__s1, __s2);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) wchar_t* __libcpp_wcsrchr(const wchar_t* __s, wchar_t __c) {
  return (wchar_t*)wcsrchr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) const wchar_t* wcsrchr(const wchar_t* __s, wchar_t __c) {
  return __libcpp_wcsrchr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) wchar_t* wcsrchr(wchar_t* __s, wchar_t __c) {
  return __libcpp_wcsrchr(__s, __c);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) wchar_t* __libcpp_wcsstr(const wchar_t* __s1, const wchar_t* __s2) {
  return (wchar_t*)wcsstr(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) const wchar_t*
wcsstr(const wchar_t* __s1, const wchar_t* __s2) {
  return __libcpp_wcsstr(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) wchar_t* wcsstr(wchar_t* __s1, const wchar_t* __s2) {
  return __libcpp_wcsstr(__s1, __s2);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) wchar_t* __libcpp_wmemchr(const wchar_t* __s, wchar_t __c, size_t __n) {
  return (wchar_t*)wmemchr(__s, __c, __n);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) const wchar_t*
wmemchr(const wchar_t* __s, wchar_t __c, size_t __n) {
  return __libcpp_wmemchr(__s, __c, __n);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__enable_if__(true, ""))) wchar_t* wmemchr(wchar_t* __s, wchar_t __c, size_t __n) {
  return __libcpp_wmemchr(__s, __c, __n);
}
}
# 114 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwchar" 2 3
# 125 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwchar" 3


#pragma clang diagnostic push
# 127 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwchar" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 127 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwchar" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 127 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwchar" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 127 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwchar" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 127 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwchar" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 127 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwchar" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

using ::mbstate_t __attribute__((__using_if_exists__));
using ::size_t __attribute__((__using_if_exists__));
using ::tm __attribute__((__using_if_exists__));
using ::wint_t __attribute__((__using_if_exists__));
using ::FILE __attribute__((__using_if_exists__));
using ::fwprintf __attribute__((__using_if_exists__));
using ::fwscanf __attribute__((__using_if_exists__));
using ::swprintf __attribute__((__using_if_exists__));
using ::vfwprintf __attribute__((__using_if_exists__));
using ::vswprintf __attribute__((__using_if_exists__));
using ::swscanf __attribute__((__using_if_exists__));
using ::vfwscanf __attribute__((__using_if_exists__));
using ::vswscanf __attribute__((__using_if_exists__));
using ::fgetwc __attribute__((__using_if_exists__));
using ::fgetws __attribute__((__using_if_exists__));
using ::fputwc __attribute__((__using_if_exists__));
using ::fputws __attribute__((__using_if_exists__));
using ::fwide __attribute__((__using_if_exists__));
using ::getwc __attribute__((__using_if_exists__));
using ::putwc __attribute__((__using_if_exists__));
using ::ungetwc __attribute__((__using_if_exists__));
using ::wcstod __attribute__((__using_if_exists__));
using ::wcstof __attribute__((__using_if_exists__));
using ::wcstold __attribute__((__using_if_exists__));
using ::wcstol __attribute__((__using_if_exists__));
using ::wcstoll __attribute__((__using_if_exists__));
using ::wcstoul __attribute__((__using_if_exists__));
using ::wcstoull __attribute__((__using_if_exists__));
using ::wcscpy __attribute__((__using_if_exists__));
using ::wcsncpy __attribute__((__using_if_exists__));
using ::wcscat __attribute__((__using_if_exists__));
using ::wcsncat __attribute__((__using_if_exists__));
using ::wcscmp __attribute__((__using_if_exists__));
using ::wcscoll __attribute__((__using_if_exists__));
using ::wcsncmp __attribute__((__using_if_exists__));
using ::wcsxfrm __attribute__((__using_if_exists__));
using ::wcschr __attribute__((__using_if_exists__));
using ::wcspbrk __attribute__((__using_if_exists__));
using ::wcsrchr __attribute__((__using_if_exists__));
using ::wcsstr __attribute__((__using_if_exists__));
using ::wmemchr __attribute__((__using_if_exists__));
using ::wcscspn __attribute__((__using_if_exists__));
using ::wcslen __attribute__((__using_if_exists__));
using ::wcsspn __attribute__((__using_if_exists__));
using ::wcstok __attribute__((__using_if_exists__));
using ::wmemcmp __attribute__((__using_if_exists__));
using ::wmemcpy __attribute__((__using_if_exists__));
using ::wmemmove __attribute__((__using_if_exists__));
using ::wmemset __attribute__((__using_if_exists__));
using ::wcsftime __attribute__((__using_if_exists__));
using ::btowc __attribute__((__using_if_exists__));
using ::wctob __attribute__((__using_if_exists__));
using ::mbsinit __attribute__((__using_if_exists__));
using ::mbrlen __attribute__((__using_if_exists__));
using ::mbrtowc __attribute__((__using_if_exists__));
using ::wcrtomb __attribute__((__using_if_exists__));
using ::mbsrtowcs __attribute__((__using_if_exists__));
using ::wcsrtombs __attribute__((__using_if_exists__));

using ::getwchar __attribute__((__using_if_exists__));
using ::vwscanf __attribute__((__using_if_exists__));
using ::wscanf __attribute__((__using_if_exists__));

using ::putwchar __attribute__((__using_if_exists__));
using ::vwprintf __attribute__((__using_if_exists__));
using ::wprintf __attribute__((__using_if_exists__));

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr size_t __constexpr_wcslen(const wchar_t* __str) {

  return __builtin_wcslen(__str);
# 208 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwchar" 3
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int
__constexpr_wmemcmp(const wchar_t* __lhs, const wchar_t* __rhs, size_t __count) {

  return __builtin_wmemcmp(__lhs, __rhs, __count);
# 226 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwchar" 3
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp* __constexpr_wmemchr(_Tp* __str, _Up __value, size_t __count) {
  static_assert(sizeof(_Tp) == sizeof(wchar_t)&& alignof(_Tp) >= alignof(wchar_t) &&
                    __libcpp_is_trivially_equality_comparable<_Tp, _Tp>::value,
                "Calling wmemchr on non-trivially equality comparable types is unsafe.");


  if (!__libcpp_is_constant_evaluated()) {
    wchar_t __value_buffer = 0;
    __builtin_memcpy(&__value_buffer, &__value, sizeof(wchar_t));
    return reinterpret_cast<_Tp*>(
        __builtin_wmemchr(reinterpret_cast<__copy_cv_t<_Tp, wchar_t>*>(__str), __value_buffer, __count));
  }

  else if constexpr (is_same_v<remove_cv_t<_Tp>, wchar_t>)
    return __builtin_wmemchr(__str, __value, __count);



  for (; __count; --__count) {
    if (*__str == __value)
      return __str;
    ++__str;
  }
  return nullptr;
}

}}
# 255 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cwchar" 3
#pragma clang diagnostic pop
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 2 3
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 2 3

#pragma clang diagnostic push
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Iter, class _Sent, class _Tp, class _Proj>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Iter
__find(_Iter __first, _Sent __last, const _Tp& __value, _Proj& __proj) {
  for (; __first != __last; ++__first)
    if (std::__invoke(__proj, *__first) == __value)
      break;
  return __first;
}


template <class _Tp,
          class _Up,
          class _Proj,
          __enable_if_t<__is_identity<_Proj>::value && __libcpp_is_trivially_equality_comparable<_Tp, _Up>::value &&
                            sizeof(_Tp) == 1,
                        int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp* __find(_Tp* __first, _Tp* __last, const _Up& __value, _Proj&) {
  if (auto __ret = std::__constexpr_memchr(__first, __value, __last - __first))
    return __ret;
  return __last;
}


template <class _Tp,
          class _Up,
          class _Proj,
          __enable_if_t<__is_identity<_Proj>::value && __libcpp_is_trivially_equality_comparable<_Tp, _Up>::value &&
                            sizeof(_Tp) == sizeof(wchar_t) && alignof(_Tp) >= alignof(wchar_t),
                        int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp* __find(_Tp* __first, _Tp* __last, const _Up& __value, _Proj&) {
  if (auto __ret = std::__constexpr_wmemchr(__first, __value, __last - __first))
    return __ret;
  return __last;
}




template <class _Tp,
          class _Up,
          class _Proj,
          __enable_if_t<__is_identity<_Proj>::value && !__libcpp_is_trivially_equality_comparable<_Tp, _Up>::value &&
                            is_integral<_Tp>::value && is_integral<_Up>::value &&
                            is_signed<_Tp>::value == is_signed<_Up>::value,
                        int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp*
__find(_Tp* __first, _Tp* __last, const _Up& __value, _Proj& __proj) {
  if (__value < numeric_limits<_Tp>::min() || __value > numeric_limits<_Tp>::max())
    return __last;
  return std::__find(__first, __last, _Tp(__value), __proj);
}


template <bool _ToFind, class _Cp, bool _IsConst>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cp, _IsConst>
__find_bool(__bit_iterator<_Cp, _IsConst> __first, typename _Cp::size_type __n) {
  using _It = __bit_iterator<_Cp, _IsConst>;
  using __storage_type = typename _It::__storage_type;

  const int __bits_per_word = _It::__bits_per_word;

  if (__first.__ctz_ != 0) {
    __storage_type __clz_f = static_cast<__storage_type>(__bits_per_word - __first.__ctz_);
    __storage_type __dn = std::min(__clz_f, __n);
    __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));
    __storage_type __b = std::__invert_if<!_ToFind>(*__first.__seg_) & __m;
    if (__b)
      return _It(__first.__seg_, static_cast<unsigned>(std::__libcpp_ctz(__b)));
    if (__n == __dn)
      return __first + __n;
    __n -= __dn;
    ++__first.__seg_;
  }

  for (; __n >= __bits_per_word; ++__first.__seg_, __n -= __bits_per_word) {
    __storage_type __b = std::__invert_if<!_ToFind>(*__first.__seg_);
    if (__b)
      return _It(__first.__seg_, static_cast<unsigned>(std::__libcpp_ctz(__b)));
  }

  if (__n > 0) {
    __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
    __storage_type __b = std::__invert_if<!_ToFind>(*__first.__seg_) & __m;
    if (__b)
      return _It(__first.__seg_, static_cast<unsigned>(std::__libcpp_ctz(__b)));
  }
  return _It(__first.__seg_, static_cast<unsigned>(__n));
}

template <class _Cp, bool _IsConst, class _Tp, class _Proj, __enable_if_t<__is_identity<_Proj>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cp, _IsConst>
__find(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, const _Tp& __value, _Proj&) {
  if (static_cast<bool>(__value))
    return std::__find_bool<true>(__first, static_cast<typename _Cp::size_type>(__last - __first));
  return std::__find_bool<false>(__first, static_cast<typename _Cp::size_type>(__last - __first));
}



template <class>
struct __find_segment;

template <class _SegmentedIterator,
          class _Tp,
          class _Proj,
          __enable_if_t<__is_segmented_iterator<_SegmentedIterator>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _SegmentedIterator
__find(_SegmentedIterator __first, _SegmentedIterator __last, const _Tp& __value, _Proj& __proj) {
  return std::__find_segment_if(std::move(__first), std::move(__last), __find_segment<_Tp>(__value), __proj);
}

template <class _Tp>
struct __find_segment {
  const _Tp& __value_;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __find_segment(const _Tp& __value) : __value_(__value) {}

  template <class _InputIterator, class _Proj>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _InputIterator
  operator()(_InputIterator __first, _InputIterator __last, _Proj& __proj) const {
    return std::__find(__first, __last, __value_, __proj);
  }
};


template <class _InputIterator, class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _InputIterator
find(_InputIterator __first, _InputIterator __last, const _Tp& __value) {
  __identity __proj;
  return std::__rewrap_iter(
      __first, std::__find(std::__unwrap_iter(__first), std::__unwrap_iter(__last), __value, __proj));
}

}}
# 177 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator, class _Predicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _InputIterator
find_if(_InputIterator __first, _InputIterator __last, _Predicate __pred) {
  for (; __first != __last; ++__first)
    if (__pred(*__first))
      break;
  return __first;
}

}}
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove.h" 2 3

#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _ForwardIterator, class _Tp>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
remove(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value) {
  __first = std::find(__first, __last, __value);
  if (__first != __last) {
    _ForwardIterator __i = __first;
    while (++__i != __last) {
      if (!(*__i == __value)) {
        *__first = std::move(*__i);
        ++__first;
      }
    }
  }
  return __first;
}

}}
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove.h" 3
#pragma clang diagnostic pop
# 592 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_if.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_if.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_if.h" 2 3

#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_if.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_if.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_if.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_if.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_if.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_if.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _ForwardIterator, class _Predicate>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred) {
  __first = std::find_if<_ForwardIterator, _Predicate&>(__first, __last, __pred);
  if (__first != __last) {
    _ForwardIterator __i = __first;
    while (++__i != __last) {
      if (!__pred(*__i)) {
        *__first = std::move(*__i);
        ++__first;
      }
    }
  }
  return __first;
}

}}
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_if.h" 3
#pragma clang diagnostic pop
# 593 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/sanitizers.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/sanitizers.h" 3
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/sanitizers.h" 3
#pragma clang diagnostic push
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/sanitizers.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/sanitizers.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/sanitizers.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/sanitizers.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/sanitizers.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/sanitizers.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/sanitizers.h" 3
template <class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_double_ended_contiguous_container(
    const void* __first_storage,
    const void* __last_storage,
    const void* __first_old_contained,
    const void* __last_old_contained,
    const void* __first_new_contained,
    const void* __last_new_contained) {

  (void)__first_storage;
  (void)__last_storage;
  (void)__first_old_contained;
  (void)__last_old_contained;
  (void)__first_new_contained;
  (void)__last_new_contained;
# 77 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/sanitizers.h" 3
}





template <class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void __annotate_contiguous_container(
    const void* __first_storage,
    const void* __last_storage,
    const void* __old_last_contained,
    const void* __new_last_contained) {

  (void)__first_storage;
  (void)__last_storage;
  (void)__old_last_contained;
  (void)__new_last_contained;






}

}}
# 102 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/sanitizers.h" 3
#pragma clang diagnostic pop
# 596 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/enable_insertable.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/enable_insertable.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/enable_insertable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/enable_insertable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/enable_insertable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/enable_insertable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/enable_insertable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/enable_insertable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/enable_insertable.h" 3
}}
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/enable_insertable.h" 3
#pragma clang diagnostic pop
# 597 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/bounded_iter.h" 1 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/bounded_iter.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/bounded_iter.h" 2 3

#pragma clang diagnostic push
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/bounded_iter.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/bounded_iter.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/bounded_iter.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/bounded_iter.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/bounded_iter.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/bounded_iter.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/bounded_iter.h" 3
template <class _Iterator, class = __enable_if_t< __libcpp_is_contiguous_iterator<_Iterator>::value > >
struct __bounded_iter {
  using value_type = typename iterator_traits<_Iterator>::value_type;
  using difference_type = typename iterator_traits<_Iterator>::difference_type;
  using pointer = typename iterator_traits<_Iterator>::pointer;
  using reference = typename iterator_traits<_Iterator>::reference;
  using iterator_category = typename iterator_traits<_Iterator>::iterator_category;
# 65 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/bounded_iter.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bounded_iter() = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bounded_iter(__bounded_iter const&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bounded_iter(__bounded_iter&&) = default;

  template <class _OtherIterator, __enable_if_t< is_convertible<_OtherIterator, _Iterator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __bounded_iter(__bounded_iter<_OtherIterator> const& __other) noexcept
      : __current_(__other.__current_),
        __begin_(__other.__begin_),
        __end_(__other.__end_) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bounded_iter& operator=(__bounded_iter const&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bounded_iter& operator=(__bounded_iter&&) = default;

private:
# 89 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/bounded_iter.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  constexpr explicit __bounded_iter(_Iterator __current, _Iterator __begin, _Iterator __end)
      : __current_(__current), __begin_(__begin), __end_(__end) {
    ((void)0);

    ((void)0);

  }

  template <class _It>
  friend constexpr __bounded_iter<_It> __make_bounded_iter(_It, _It, _It);

public:







  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference operator*() const noexcept {
    ((void)0);

    return *__current_;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pointer operator->() const noexcept {
    ((void)0);

    return std::__to_address(__current_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference operator[](difference_type __n) const noexcept {
    ((void)0);

    ((void)0);

    return __current_[__n];
  }




  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __bounded_iter& operator++() noexcept {
    ((void)0);

    ++__current_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __bounded_iter operator++(int) noexcept {
    __bounded_iter __tmp(*this);
    ++*this;
    return __tmp;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __bounded_iter& operator--() noexcept {
    ((void)0);

    --__current_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __bounded_iter operator--(int) noexcept {
    __bounded_iter __tmp(*this);
    --*this;
    return __tmp;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __bounded_iter& operator+=(difference_type __n) noexcept {
    ((void)0);

    ((void)0);

    __current_ += __n;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr friend __bounded_iter
  operator+(__bounded_iter const& __self, difference_type __n) noexcept {
    __bounded_iter __tmp(__self);
    __tmp += __n;
    return __tmp;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr friend __bounded_iter
  operator+(difference_type __n, __bounded_iter const& __self) noexcept {
    __bounded_iter __tmp(__self);
    __tmp += __n;
    return __tmp;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __bounded_iter& operator-=(difference_type __n) noexcept {
    ((void)0);

    ((void)0);

    __current_ -= __n;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr friend __bounded_iter
  operator-(__bounded_iter const& __self, difference_type __n) noexcept {
    __bounded_iter __tmp(__self);
    __tmp -= __n;
    return __tmp;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr friend difference_type
  operator-(__bounded_iter const& __x, __bounded_iter const& __y) noexcept {
    return __x.__current_ - __y.__current_;
  }







  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr friend bool
  operator==(__bounded_iter const& __x, __bounded_iter const& __y) noexcept {
    return __x.__current_ == __y.__current_;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr friend bool
  operator!=(__bounded_iter const& __x, __bounded_iter const& __y) noexcept {
    return __x.__current_ != __y.__current_;
  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr friend bool
  operator<(__bounded_iter const& __x, __bounded_iter const& __y) noexcept {
    return __x.__current_ < __y.__current_;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr friend bool
  operator>(__bounded_iter const& __x, __bounded_iter const& __y) noexcept {
    return __x.__current_ > __y.__current_;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr friend bool
  operator<=(__bounded_iter const& __x, __bounded_iter const& __y) noexcept {
    return __x.__current_ <= __y.__current_;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr friend bool
  operator>=(__bounded_iter const& __x, __bounded_iter const& __y) noexcept {
    return __x.__current_ >= __y.__current_;
  }
# 249 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/bounded_iter.h" 3
private:
  template <class>
  friend struct pointer_traits;
  template <class, class>
  friend struct __bounded_iter;
  _Iterator __current_;
  _Iterator __begin_, __end_;
};

template <class _It>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __bounded_iter<_It> __make_bounded_iter(_It __it, _It __begin, _It __end) {
  return __bounded_iter<_It>(std::move(__it), std::move(__begin), std::move(__end));
}


template <class _Iterator>
struct __libcpp_is_contiguous_iterator<__bounded_iter<_Iterator> > : true_type {};


template <class _Iterator>
struct pointer_traits<__bounded_iter<_Iterator> > {
  using pointer = __bounded_iter<_Iterator>;
  using element_type = typename pointer_traits<_Iterator>::element_type;
  using difference_type = typename pointer_traits<_Iterator>::difference_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr static element_type* to_address(pointer __it) noexcept {
    return std::__to_address(__it.__current_);
  }
};

}}
# 279 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/bounded_iter.h" 3
#pragma clang diagnostic pop
# 602 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/wrap_iter.h" 1 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/wrap_iter.h" 3


#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/wrap_iter.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/wrap_iter.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/wrap_iter.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/wrap_iter.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/wrap_iter.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/wrap_iter.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Iter>
class __wrap_iter {
public:
  typedef _Iter iterator_type;
  typedef typename iterator_traits<iterator_type>::value_type value_type;
  typedef typename iterator_traits<iterator_type>::difference_type difference_type;
  typedef typename iterator_traits<iterator_type>::pointer pointer;
  typedef typename iterator_traits<iterator_type>::reference reference;
  typedef typename iterator_traits<iterator_type>::iterator_category iterator_category;




private:
  iterator_type __i_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __wrap_iter() noexcept : __i_() {}
  template <class _Up, __enable_if_t<is_convertible<_Up, iterator_type>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __wrap_iter(const __wrap_iter<_Up>& __u) noexcept
      : __i_(__u.base()) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference operator*() const noexcept { return *__i_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pointer operator->() const noexcept {
    return std::__to_address(__i_);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __wrap_iter& operator++() noexcept {
    ++__i_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __wrap_iter operator++(int) noexcept {
    __wrap_iter __tmp(*this);
    ++(*this);
    return __tmp;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __wrap_iter& operator--() noexcept {
    --__i_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __wrap_iter operator--(int) noexcept {
    __wrap_iter __tmp(*this);
    --(*this);
    return __tmp;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __wrap_iter operator+(difference_type __n) const noexcept {
    __wrap_iter __w(*this);
    __w += __n;
    return __w;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __wrap_iter& operator+=(difference_type __n) noexcept {
    __i_ += __n;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __wrap_iter operator-(difference_type __n) const noexcept {
    return *this + (-__n);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __wrap_iter& operator-=(difference_type __n) noexcept {
    *this += -__n;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference operator[](difference_type __n) const noexcept {
    return __i_[__n];
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr iterator_type base() const noexcept { return __i_; }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __wrap_iter(iterator_type __x) noexcept : __i_(__x) {}

  template <class _Up>
  friend class __wrap_iter;
  template <class _CharT, class _Traits, class _Alloc>
  friend class basic_string;
  template <class _CharT, class _Traits>
  friend class basic_string_view;
  template <class _Tp, class _Alloc>
  friend class vector;
  template <class _Tp, size_t>
  friend class span;
  template <class _Tp, size_t _Size>
  friend struct array;
};

template <class _Iter1>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator==(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) noexcept {
  return __x.base() == __y.base();
}

template <class _Iter1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator==(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) noexcept {
  return __x.base() == __y.base();
}

template <class _Iter1>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator<(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) noexcept {
  return __x.base() < __y.base();
}

template <class _Iter1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator<(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) noexcept {
  return __x.base() < __y.base();
}


template <class _Iter1>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator!=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) noexcept {
  return !(__x == __y);
}

template <class _Iter1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator!=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) noexcept {
  return !(__x == __y);
}



template <class _Iter1>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator>(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) noexcept {
  return __y < __x;
}

template <class _Iter1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator>(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) noexcept {
  return __y < __x;
}

template <class _Iter1>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator>=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) noexcept {
  return !(__x < __y);
}

template <class _Iter1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator>=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) noexcept {
  return !(__x < __y);
}

template <class _Iter1>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator<=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) noexcept {
  return !(__y < __x);
}

template <class _Iter1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator<=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) noexcept {
  return !(__y < __x);
}
# 205 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/wrap_iter.h" 3
template <class _Iter1, class _Iter2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr

    auto
    operator-(const __wrap_iter<_Iter1>& __x,
              const __wrap_iter<_Iter2>& __y) noexcept->decltype(__x.base() - __y.base())




{
  return __x.base() - __y.base();
}

template <class _Iter1>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __wrap_iter<_Iter1>
operator+(typename __wrap_iter<_Iter1>::difference_type __n, __wrap_iter<_Iter1> __x) noexcept {
  __x += __n;
  return __x;
}


template <class _It>
struct __libcpp_is_contiguous_iterator<__wrap_iter<_It> > : true_type {};


template <class _It>
struct pointer_traits<__wrap_iter<_It> > {
  typedef __wrap_iter<_It> pointer;
  typedef typename pointer_traits<_It>::element_type element_type;
  typedef typename pointer_traits<_It>::difference_type difference_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr static element_type* to_address(pointer __w) noexcept {
    return std::__to_address(__w.base());
  }
};

}}
# 242 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/wrap_iter.h" 3
#pragma clang diagnostic pop
# 606 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3







# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/swap_allocator.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/swap_allocator.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/swap_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/swap_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/swap_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/swap_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/swap_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/swap_allocator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <typename _Alloc>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void __swap_allocator(_Alloc& __a1, _Alloc& __a2, true_type)

    noexcept



{
  using std::swap;
  swap(__a1, __a2);
}

template <typename _Alloc>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__swap_allocator(_Alloc&, _Alloc&, false_type) noexcept {}

template <typename _Alloc>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void __swap_allocator(_Alloc& __a1, _Alloc& __a2)

    noexcept



{
  std::__swap_allocator(
      __a1, __a2, integral_constant<bool, allocator_traits<_Alloc>::propagate_on_container_swap::value>());
}

}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/swap_allocator.h" 3
#pragma clang diagnostic pop
# 614 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/polymorphic_allocator.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/polymorphic_allocator.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/memory_resource.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/memory_resource.h" 3




#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/memory_resource.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/memory_resource.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/memory_resource.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/memory_resource.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/memory_resource.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/memory_resource.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace pmr {



class __attribute__((__visibility__("default"))) memory_resource {
  static const size_t __max_align = alignof(max_align_t);

public:
  virtual ~memory_resource();

  [[nodiscard]] [[using __gnu__: __returns_nonnull__, __alloc_size__(2), __alloc_align__(3)]]
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void* allocate(size_t __bytes, size_t __align = __max_align) {
    return do_allocate(__bytes, __align);
  }

  [[__gnu__::__nonnull__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  deallocate(void* __p, size_t __bytes, size_t __align = __max_align) {
    do_deallocate(__p, __bytes, __align);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool is_equal(const memory_resource& __other) const noexcept { return do_is_equal(__other); }

private:
  virtual void* do_allocate(size_t, size_t) = 0;
  virtual void do_deallocate(void*, size_t, size_t) = 0;
  virtual bool do_is_equal(memory_resource const&) const noexcept = 0;
};



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator==(const memory_resource& __lhs, const memory_resource& __rhs) noexcept {
  return &__lhs == &__rhs || __lhs.is_equal(__rhs);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator!=(const memory_resource& __lhs, const memory_resource& __rhs) noexcept {
  return !(__lhs == __rhs);
}





[[__gnu__::__returns_nonnull__]] __attribute__((__visibility__("default"))) memory_resource*
get_default_resource() noexcept;

[[__gnu__::__returns_nonnull__]] __attribute__((__visibility__("default"))) memory_resource*
set_default_resource(memory_resource*) noexcept;

[[using __gnu__: __returns_nonnull__, __const__]] __attribute__((__visibility__("default"))) memory_resource*
new_delete_resource() noexcept;

[[using __gnu__: __returns_nonnull__, __const__]] __attribute__((__visibility__("default"))) memory_resource*
null_memory_resource() noexcept;

}

}}
# 84 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/memory_resource.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/polymorphic_allocator.h" 2 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/polymorphic_allocator.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/polymorphic_allocator.h" 2 3



#pragma clang diagnostic push
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/polymorphic_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/polymorphic_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/polymorphic_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/polymorphic_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/polymorphic_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/polymorphic_allocator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace pmr {



template <class _ValueType



          >
class polymorphic_allocator {

public:
  using value_type = _ValueType;



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) polymorphic_allocator() noexcept : __res_(std::pmr::get_default_resource()) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) polymorphic_allocator(memory_resource* __r) noexcept : __res_(__r) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) polymorphic_allocator(const polymorphic_allocator&) = default;

  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) polymorphic_allocator(const polymorphic_allocator<_Tp>& __other) noexcept
      : __res_(__other.resource()) {}

  polymorphic_allocator& operator=(const polymorphic_allocator&) = delete;



  [[nodiscard]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ValueType* allocate(size_t __n) {
    if (__n > __max_size()) {
      __throw_bad_array_new_length();
    }
    return static_cast<_ValueType*>(__res_->allocate(__n * sizeof(_ValueType), alignof(_ValueType)));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void deallocate(_ValueType* __p, size_t __n) {
    ((void)0);



    __res_->deallocate(__p, __n * sizeof(_ValueType), alignof(_ValueType));
  }
# 118 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/polymorphic_allocator.h" 3
  template <class _Tp, class... _Ts>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void construct(_Tp* __p, _Ts&&... __args) {
    std::__user_alloc_construct_impl(
        typename __uses_alloc_ctor<_Tp, polymorphic_allocator&, _Ts...>::type(),
        __p,
        *this,
        std::forward<_Ts>(__args)...);
  }

  template <class _T1, class _T2, class... _Args1, class... _Args2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  construct(pair<_T1, _T2>* __p, piecewise_construct_t, tuple<_Args1...> __x, tuple<_Args2...> __y) {
    ::new ((void*)__p) pair<_T1, _T2>(
        piecewise_construct,
        __transform_tuple(typename __uses_alloc_ctor< _T1, polymorphic_allocator&, _Args1... >::type(),
                          std::move(__x),
                          typename __make_tuple_indices<sizeof...(_Args1)>::type{}),
        __transform_tuple(typename __uses_alloc_ctor< _T2, polymorphic_allocator&, _Args2... >::type(),
                          std::move(__y),
                          typename __make_tuple_indices<sizeof...(_Args2)>::type{}));
  }

  template <class _T1, class _T2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void construct(pair<_T1, _T2>* __p) {
    construct(__p, piecewise_construct, tuple<>(), tuple<>());
  }

  template <class _T1, class _T2, class _Up, class _Vp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void construct(pair<_T1, _T2>* __p, _Up&& __u, _Vp&& __v) {
    construct(__p,
              piecewise_construct,
              std::forward_as_tuple(std::forward<_Up>(__u)),
              std::forward_as_tuple(std::forward<_Vp>(__v)));
  }

  template <class _T1, class _T2, class _U1, class _U2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void construct(pair<_T1, _T2>* __p, const pair<_U1, _U2>& __pr) {
    construct(__p, piecewise_construct, std::forward_as_tuple(__pr.first), std::forward_as_tuple(__pr.second));
  }

  template <class _T1, class _T2, class _U1, class _U2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void construct(pair<_T1, _T2>* __p, pair<_U1, _U2>&& __pr) {
    construct(__p,
              piecewise_construct,
              std::forward_as_tuple(std::forward<_U1>(__pr.first)),
              std::forward_as_tuple(std::forward<_U2>(__pr.second)));
  }

  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void destroy(_Tp* __p) {
    __p->~_Tp();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) polymorphic_allocator select_on_container_copy_construction() const noexcept {
    return polymorphic_allocator();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) memory_resource* resource() const noexcept { return __res_; }

private:
  template <class... _Args, size_t... _Is>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple<_Args&&...>
  __transform_tuple(integral_constant<int, 0>, tuple<_Args...>&& __t, __tuple_indices<_Is...>) {
    return std::forward_as_tuple(std::get<_Is>(std::move(__t))...);
  }

  template <class... _Args, size_t... _Is>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple<allocator_arg_t const&, polymorphic_allocator&, _Args&&...>
  __transform_tuple(integral_constant<int, 1>, tuple<_Args...>&& __t, __tuple_indices<_Is...>) {
    using _Tup = tuple<allocator_arg_t const&, polymorphic_allocator&, _Args&&...>;
    return _Tup(allocator_arg, *this, std::get<_Is>(std::move(__t))...);
  }

  template <class... _Args, size_t... _Is>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) tuple<_Args&&..., polymorphic_allocator&>
  __transform_tuple(integral_constant<int, 2>, tuple<_Args...>&& __t, __tuple_indices<_Is...>) {
    using _Tup = tuple<_Args&&..., polymorphic_allocator&>;
    return _Tup(std::get<_Is>(std::move(__t))..., *this);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t __max_size() const noexcept {
    return numeric_limits<size_t>::max() / sizeof(value_type);
  }

  memory_resource* __res_;
};



template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator==(const polymorphic_allocator<_Tp>& __lhs, const polymorphic_allocator<_Up>& __rhs) noexcept {
  return *__lhs.resource() == *__rhs.resource();
}



template <class _Tp, class _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator!=(const polymorphic_allocator<_Tp>& __lhs, const polymorphic_allocator<_Up>& __rhs) noexcept {
  return !(__lhs == __rhs);
}



}

}}
# 225 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory_resource/polymorphic_allocator.h" 3
#pragma clang diagnostic pop
# 615 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/container_compatible_range.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/container_compatible_range.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/container_compatible_range.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/container_compatible_range.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/container_compatible_range.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/container_compatible_range.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/container_compatible_range.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/container_compatible_range.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/container_compatible_range.h" 3
}}
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/container_compatible_range.h" 3
#pragma clang diagnostic pop
# 618 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/from_range.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/from_range.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/from_range.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/from_range.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/from_range.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/from_range.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/from_range.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/from_range.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/from_range.h" 3
}}
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/from_range.h" 3
#pragma clang diagnostic pop
# 619 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill_n.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill_n.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill_n.h" 2 3

#pragma clang diagnostic push
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill_n.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill_n.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill_n.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill_n.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill_n.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill_n.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _OutputIterator, class _Size, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
__fill_n(_OutputIterator __first, _Size __n, const _Tp& __value);

template <bool _FillVal, class _Cp>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__fill_n_bool(__bit_iterator<_Cp, false> __first, typename _Cp::size_type __n) {
  using _It = __bit_iterator<_Cp, false>;
  using __storage_type = typename _It::__storage_type;

  const int __bits_per_word = _It::__bits_per_word;

  if (__first.__ctz_ != 0) {
    __storage_type __clz_f = static_cast<__storage_type>(__bits_per_word - __first.__ctz_);
    __storage_type __dn = std::min(__clz_f, __n);
    __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));
    if (_FillVal)
      *__first.__seg_ |= __m;
    else
      *__first.__seg_ &= ~__m;
    __n -= __dn;
    ++__first.__seg_;
  }

  __storage_type __nw = __n / __bits_per_word;
  std::__fill_n(std::__to_address(__first.__seg_), __nw, _FillVal ? static_cast<__storage_type>(-1) : 0);
  __n -= __nw * __bits_per_word;

  if (__n > 0) {
    __first.__seg_ += __nw;
    __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
    if (_FillVal)
      *__first.__seg_ |= __m;
    else
      *__first.__seg_ &= ~__m;
  }
}

template <class _Cp, class _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cp, false>
__fill_n(__bit_iterator<_Cp, false> __first, _Size __n, const bool& __value) {
  if (__n > 0) {
    if (__value)
      std::__fill_n_bool<true>(__first, __n);
    else
      std::__fill_n_bool<false>(__first, __n);
  }
  return __first + __n;
}

template <class _OutputIterator, class _Size, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
__fill_n(_OutputIterator __first, _Size __n, const _Tp& __value) {
  for (; __n > 0; ++__first, (void)--__n)
    *__first = __value;
  return __first;
}

template <class _OutputIterator, class _Size, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
fill_n(_OutputIterator __first, _Size __n, const _Tp& __value) {
  return std::__fill_n(__first, std::__convert_to_integral(__n), __value);
}

}}
# 94 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill_n.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_end.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_end.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search.h" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search.h" 3


#pragma clang diagnostic push
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy,
          class _Iter1,
          class _Sent1,
          class _Iter2,
          class _Sent2,
          class _Pred,
          class _Proj1,
          class _Proj2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_Iter1, _Iter1> __search_forward_impl(
    _Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred& __pred, _Proj1& __proj1, _Proj2& __proj2) {
  if (__first2 == __last2)
    return std::make_pair(__first1, __first1);
  while (true) {

    while (true) {
      if (__first1 == __last1) {
        _IterOps<_AlgPolicy>::__advance_to(__first1, __last1);
        return std::make_pair(__first1, __first1);
      }
      if (std::__invoke(__pred, std::__invoke(__proj1, *__first1), std::__invoke(__proj2, *__first2)))
        break;
      ++__first1;
    }

    _Iter1 __m1 = __first1;
    _Iter2 __m2 = __first2;
    while (true) {
      if (++__m2 == __last2)
        return std::make_pair(__first1, ++__m1);
      if (++__m1 == __last1) {
        return std::make_pair(__m1, __m1);
      }


      if (!std::__invoke(__pred, std::__invoke(__proj1, *__m1), std::__invoke(__proj2, *__m2))) {
        ++__first1;
        break;
      }
    }
  }
}

template <class _AlgPolicy,
          class _Iter1,
          class _Sent1,
          class _Iter2,
          class _Sent2,
          class _Pred,
          class _Proj1,
          class _Proj2,
          class _DiffT1,
          class _DiffT2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_Iter1, _Iter1> __search_random_access_impl(
    _Iter1 __first1,
    _Sent1 __last1,
    _Iter2 __first2,
    _Sent2 __last2,
    _Pred& __pred,
    _Proj1& __proj1,
    _Proj2& __proj2,
    _DiffT1 __size1,
    _DiffT2 __size2) {
  const _Iter1 __s = __first1 + __size1 - _DiffT1(__size2 - 1);

  while (true) {
    while (true) {
      if (__first1 == __s) {
        _IterOps<_AlgPolicy>::__advance_to(__first1, __last1);
        return std::make_pair(__first1, __first1);
      }
      if (std::__invoke(__pred, std::__invoke(__proj1, *__first1), std::__invoke(__proj2, *__first2)))
        break;
      ++__first1;
    }

    _Iter1 __m1 = __first1;
    _Iter2 __m2 = __first2;
    while (true) {
      if (++__m2 == __last2)
        return std::make_pair(__first1, __first1 + _DiffT1(__size2));
      ++__m1;
      if (!std::__invoke(__pred, std::__invoke(__proj1, *__m1), std::__invoke(__proj2, *__m2))) {
        ++__first1;
        break;
      }
    }
  }
}

template <class _Iter1,
          class _Sent1,
          class _Iter2,
          class _Sent2,
          class _Pred,
          class _Proj1,
          class _Proj2,
          __enable_if_t<__has_random_access_iterator_category<_Iter1>::value &&
                            __has_random_access_iterator_category<_Iter2>::value,
                        int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_Iter1, _Iter1> __search_impl(
    _Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred& __pred, _Proj1& __proj1, _Proj2& __proj2) {
  auto __size2 = __last2 - __first2;
  if (__size2 == 0)
    return std::make_pair(__first1, __first1);

  auto __size1 = __last1 - __first1;
  if (__size1 < __size2) {
    return std::make_pair(__last1, __last1);
  }

  return std::__search_random_access_impl<_ClassicAlgPolicy>(
      __first1, __last1, __first2, __last2, __pred, __proj1, __proj2, __size1, __size2);
}

template <
    class _Iter1,
    class _Sent1,
    class _Iter2,
    class _Sent2,
    class _Pred,
    class _Proj1,
    class _Proj2,
    __enable_if_t<__has_forward_iterator_category<_Iter1>::value && __has_forward_iterator_category<_Iter2>::value &&
                      !(__has_random_access_iterator_category<_Iter1>::value &&
                        __has_random_access_iterator_category<_Iter2>::value),
                  int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_Iter1, _Iter1> __search_impl(
    _Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred& __pred, _Proj1& __proj1, _Proj2& __proj2) {
  return std::__search_forward_impl<_ClassicAlgPolicy>(__first1, __last1, __first2, __last2, __pred, __proj1, __proj2);
}

template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator1
search(_ForwardIterator1 __first1,
       _ForwardIterator1 __last1,
       _ForwardIterator2 __first2,
       _ForwardIterator2 __last2,
       _BinaryPredicate __pred) {
  static_assert(__is_callable<_BinaryPredicate, decltype(*__first1), decltype(*__first2)>::value,
                "BinaryPredicate has to be callable");
  auto __proj = __identity();
  return std::__search_impl(__first1, __last1, __first2, __last2, __pred, __proj, __proj).first;
}

template <class _ForwardIterator1, class _ForwardIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator1
search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2) {
  return std::search(__first1, __last1, __first2, __last2, __equal_to());
}


template <class _ForwardIterator, class _Searcher>
[[nodiscard]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
search(_ForwardIterator __f, _ForwardIterator __l, const _Searcher& __s) {
  return __s(__f, __l).first;
}



}}
# 190 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_end.h" 2 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_end.h" 3


#pragma clang diagnostic push
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_end.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_end.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_end.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_end.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_end.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_end.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template < class _AlgPolicy,
           class _Iter1,
           class _Sent1,
           class _Iter2,
           class _Sent2,
           class _Pred,
           class _Proj1,
           class _Proj2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr pair<_Iter1, _Iter1> __find_end_impl(
    _Iter1 __first1,
    _Sent1 __last1,
    _Iter2 __first2,
    _Sent2 __last2,
    _Pred& __pred,
    _Proj1& __proj1,
    _Proj2& __proj2,
    forward_iterator_tag,
    forward_iterator_tag) {

  _Iter1 __match_first = _IterOps<_AlgPolicy>::next(__first1, __last1);
  _Iter1 __match_last = __match_first;
  if (__first2 == __last2)
    return pair<_Iter1, _Iter1>(__match_last, __match_last);
  while (true) {
    while (true) {
      if (__first1 == __last1)
        return pair<_Iter1, _Iter1>(__match_first, __match_last);
      if (std::__invoke(__pred, std::__invoke(__proj1, *__first1), std::__invoke(__proj2, *__first2)))
        break;
      ++__first1;
    }

    _Iter1 __m1 = __first1;
    _Iter2 __m2 = __first2;
    while (true) {
      if (++__m2 == __last2) {
        __match_first = __first1;
        __match_last = ++__m1;
        ++__first1;
        break;
      }
      if (++__m1 == __last1)
        return pair<_Iter1, _Iter1>(__match_first, __match_last);

      if (!std::__invoke(__pred, std::__invoke(__proj1, *__m1), std::__invoke(__proj2, *__m2))) {
        ++__first1;
        break;
      }
    }
  }
}

template < class _IterOps,
           class _Pred,
           class _Iter1,
           class _Sent1,
           class _Iter2,
           class _Sent2,
           class _Proj1,
           class _Proj2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Iter1 __find_end(
    _Iter1 __first1,
    _Sent1 __sent1,
    _Iter2 __first2,
    _Sent2 __sent2,
    _Pred& __pred,
    _Proj1& __proj1,
    _Proj2& __proj2,
    bidirectional_iterator_tag,
    bidirectional_iterator_tag) {
  auto __last1 = _IterOps::next(__first1, __sent1);
  auto __last2 = _IterOps::next(__first2, __sent2);

  if (__first2 == __last2)
    return __last1;
  _Iter1 __l1 = __last1;
  _Iter2 __l2 = __last2;
  --__l2;
  while (true) {

    while (true) {
      if (__first1 == __l1)
        return __last1;
      if (std::__invoke(__pred, std::__invoke(__proj1, *--__l1), std::__invoke(__proj2, *__l2)))
        break;
    }

    _Iter1 __m1 = __l1;
    _Iter2 __m2 = __l2;
    while (true) {
      if (__m2 == __first2)
        return __m1;
      if (__m1 == __first1)
        return __last1;


      if (!std::__invoke(__pred, std::__invoke(__proj1, *--__m1), std::__invoke(__proj2, *--__m2))) {
        break;
      }
    }
  }
}

template < class _AlgPolicy,
           class _Pred,
           class _Iter1,
           class _Sent1,
           class _Iter2,
           class _Sent2,
           class _Proj1,
           class _Proj2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Iter1 __find_end(
    _Iter1 __first1,
    _Sent1 __sent1,
    _Iter2 __first2,
    _Sent2 __sent2,
    _Pred& __pred,
    _Proj1& __proj1,
    _Proj2& __proj2,
    random_access_iterator_tag,
    random_access_iterator_tag) {
  typedef typename iterator_traits<_Iter1>::difference_type _D1;
  auto __last1 = _IterOps<_AlgPolicy>::next(__first1, __sent1);
  auto __last2 = _IterOps<_AlgPolicy>::next(__first2, __sent2);

  auto __len2 = __last2 - __first2;
  if (__len2 == 0)
    return __last1;
  auto __len1 = __last1 - __first1;
  if (__len1 < __len2)
    return __last1;
  const _Iter1 __s = __first1 + _D1(__len2 - 1);
  _Iter1 __l1 = __last1;
  _Iter2 __l2 = __last2;
  --__l2;
  while (true) {
    while (true) {
      if (__s == __l1)
        return __last1;
      if (std::__invoke(__pred, std::__invoke(__proj1, *--__l1), std::__invoke(__proj2, *__l2)))
        break;
    }
    _Iter1 __m1 = __l1;
    _Iter2 __m2 = __l2;
    while (true) {
      if (__m2 == __first2)
        return __m1;

      if (!std::__invoke(__pred, std::__invoke(__proj1, *--__m1), std::__invoke(*--__m2))) {
        break;
      }
    }
  }
}

template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ForwardIterator1 __find_end_classic(
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _BinaryPredicate& __pred) {
  auto __proj = __identity();
  return std::__find_end_impl<_ClassicAlgPolicy>(
             __first1,
             __last1,
             __first2,
             __last2,
             __pred,
             __proj,
             __proj,
             typename iterator_traits<_ForwardIterator1>::iterator_category(),
             typename iterator_traits<_ForwardIterator2>::iterator_category())
      .first;
}

template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator1 find_end(
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _BinaryPredicate __pred) {
  return std::__find_end_classic(__first1, __last1, __first2, __last2, __pred);
}

template <class _ForwardIterator1, class _ForwardIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator1
find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2) {
  return std::find_end(__first1, __last1, __first2, __last2, __equal_to());
}

}}
# 223 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_end.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_first_of.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_first_of.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_first_of.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_first_of.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_first_of.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_first_of.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_first_of.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_first_of.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ForwardIterator1 __find_first_of_ce(
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _BinaryPredicate&& __pred) {
  for (; __first1 != __last1; ++__first1)
    for (_ForwardIterator2 __j = __first2; __j != __last2; ++__j)
      if (__pred(*__first1, *__j))
        return __first1;
  return __last1;
}

template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator1 find_first_of(
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _BinaryPredicate __pred) {
  return std::__find_first_of_ce(__first1, __last1, __first2, __last2, __pred);
}

template <class _ForwardIterator1, class _ForwardIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator1 find_first_of(
    _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2) {
  return std::__find_first_of_ce(__first1, __last1, __first2, __last2, __equal_to());
}

}}
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_first_of.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 2 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdio" 1 3
# 100 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdio" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdio.h" 1 3
# 101 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdio" 2 3
# 112 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdio" 3


#pragma clang diagnostic push
# 114 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdio" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 114 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdio" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 114 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdio" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 114 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdio" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 114 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdio" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 114 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdio" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

using ::FILE __attribute__((__using_if_exists__));
using ::fpos_t __attribute__((__using_if_exists__));
using ::size_t __attribute__((__using_if_exists__));

using ::fclose __attribute__((__using_if_exists__));
using ::fflush __attribute__((__using_if_exists__));
using ::setbuf __attribute__((__using_if_exists__));
using ::setvbuf __attribute__((__using_if_exists__));
using ::fprintf __attribute__((__using_if_exists__));
using ::fscanf __attribute__((__using_if_exists__));
using ::snprintf __attribute__((__using_if_exists__));
using ::sprintf __attribute__((__using_if_exists__));
using ::sscanf __attribute__((__using_if_exists__));
using ::vfprintf __attribute__((__using_if_exists__));
using ::vfscanf __attribute__((__using_if_exists__));
using ::vsscanf __attribute__((__using_if_exists__));
using ::vsnprintf __attribute__((__using_if_exists__));
using ::vsprintf __attribute__((__using_if_exists__));
using ::fgetc __attribute__((__using_if_exists__));
using ::fgets __attribute__((__using_if_exists__));
using ::fputc __attribute__((__using_if_exists__));
using ::fputs __attribute__((__using_if_exists__));
using ::getc __attribute__((__using_if_exists__));
using ::putc __attribute__((__using_if_exists__));
using ::ungetc __attribute__((__using_if_exists__));
using ::fread __attribute__((__using_if_exists__));
using ::fwrite __attribute__((__using_if_exists__));
using ::fgetpos __attribute__((__using_if_exists__));
using ::fseek __attribute__((__using_if_exists__));
using ::fsetpos __attribute__((__using_if_exists__));
using ::ftell __attribute__((__using_if_exists__));
using ::rewind __attribute__((__using_if_exists__));
using ::clearerr __attribute__((__using_if_exists__));
using ::feof __attribute__((__using_if_exists__));
using ::ferror __attribute__((__using_if_exists__));
using ::perror __attribute__((__using_if_exists__));

using ::fopen __attribute__((__using_if_exists__));
using ::freopen __attribute__((__using_if_exists__));
using ::remove __attribute__((__using_if_exists__));
using ::rename __attribute__((__using_if_exists__));
using ::tmpfile __attribute__((__using_if_exists__));
using ::tmpnam __attribute__((__using_if_exists__));

using ::getchar __attribute__((__using_if_exists__));



using ::scanf __attribute__((__using_if_exists__));
using ::vscanf __attribute__((__using_if_exists__));

using ::printf __attribute__((__using_if_exists__));
using ::putchar __attribute__((__using_if_exists__));
using ::puts __attribute__((__using_if_exists__));
using ::vprintf __attribute__((__using_if_exists__));

}}
# 172 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdio" 3
#pragma clang diagnostic pop
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 2 3
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 2 3

#pragma clang diagnostic push
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _CharT>
struct char_traits;
# 79 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 3
template <>
struct char_traits<char> {
  using char_type = char;
  using int_type = int;
  using off_type = streamoff;
  using pos_type = streampos;
  using state_type = mbstate_t;




  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
  assign(char_type& __c1, const char_type& __c2) noexcept {
    __c1 = __c2;
  }


  static inline __attribute__((__visibility__("hidden"))) constexpr bool eq(char_type __c1, char_type __c2) noexcept {
    return __c1 == __c2;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool lt(char_type __c1, char_type __c2) noexcept {
    return (unsigned char)__c1 < (unsigned char)__c2;
  }



  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int
  compare(const char_type* __lhs, const char_type* __rhs, size_t __count) noexcept {
    if (__libcpp_is_constant_evaluated()) {

      return __builtin_memcmp(__lhs, __rhs, __count);
# 123 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 3
    } else {
      return __builtin_memcmp(__lhs, __rhs, __count);
    }
  }

  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t constexpr length(const char_type* __s) noexcept {
    return std::__constexpr_strlen(__s);
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const char_type*
  find(const char_type* __s, size_t __n, const char_type& __a) noexcept {
    if (__n == 0)
      return nullptr;
    return std::__constexpr_memchr(__s, __a, __n);
  }

  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type*
  move(char_type* __s1, const char_type* __s2, size_t __n) noexcept {
    return std::__constexpr_memmove(__s1, __s2, __element_count(__n));
  }

  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type*
  copy(char_type* __s1, const char_type* __s2, size_t __n) noexcept {
    ((void)0);

    std::__constexpr_memmove(__s1, __s2, __element_count(__n));
    return __s1;
  }

  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type*
  assign(char_type* __s, size_t __n, char_type __a) noexcept {
    std::fill_n(__s, __n, __a);
    return __s;
  }

  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int_type not_eof(int_type __c) noexcept {
    return eq_int_type(__c, eof()) ? ~eof() : __c;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr char_type to_char_type(int_type __c) noexcept {
    return char_type(__c);
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int_type to_int_type(char_type __c) noexcept {
    return int_type((unsigned char)__c);
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool eq_int_type(int_type __c1, int_type __c2) noexcept {
    return __c1 == __c2;
  }
  static inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int_type eof() noexcept { return int_type((-1)); }
};

template <class _CharT, class _IntT, _IntT _EOFVal>
struct __char_traits_base {
  using char_type = _CharT;
  using int_type = _IntT;
  using off_type = streamoff;
  using state_type = mbstate_t;





  using pos_type = fpos<mbstate_t>;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static inline constexpr void
  assign(char_type& __lhs, const char_type& __rhs) noexcept {
    __lhs = __rhs;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr bool eq(char_type __lhs, char_type __rhs) noexcept {
    return __lhs == __rhs;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr bool lt(char_type __lhs, char_type __rhs) noexcept {
    return __lhs < __rhs;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static char_type*
  move(char_type* __dest, const char_type* __src, size_t __n) noexcept {
    return std::__constexpr_memmove(__dest, __src, __element_count(__n));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static char_type*
  copy(char_type* __dest, const char_type* __src, size_t __n) noexcept {
    ((void)0);

    return std::__constexpr_memmove(__dest, __src, __element_count(__n));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static char_type*
  assign(char_type* __str, size_t __n, char_type __fill_char) noexcept {
    std::fill_n(__str, __n, __fill_char);
    return __str;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr char_type to_char_type(int_type __c) noexcept {
    return char_type(__c);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr int_type to_int_type(char_type __c) noexcept { return int_type(__c); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr bool eq_int_type(int_type __lhs, int_type __rhs) noexcept {
    return __lhs == __rhs;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr int_type eof() noexcept { return _EOFVal; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr int_type not_eof(int_type __c) noexcept {
    return eq_int_type(__c, eof()) ? static_cast<int_type>(~eof()) : __c;
  }
};




template <>
struct char_traits<wchar_t> : __char_traits_base<wchar_t, wint_t, static_cast<wint_t>(((__darwin_wint_t)-1))> {
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int
  compare(const char_type* __s1, const char_type* __s2, size_t __n) noexcept {
    if (__n == 0)
      return 0;
    return std::__constexpr_wmemcmp(__s1, __s2, __n);
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr size_t length(const char_type* __s) noexcept {
    return std::__constexpr_wcslen(__s);
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const char_type*
  find(const char_type* __s, size_t __n, const char_type& __a) noexcept {
    if (__n == 0)
      return nullptr;
    return std::__constexpr_wmemchr(__s, __a, __n);
  }
};
# 281 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 3
template <>
struct char_traits<char16_t>
    : __char_traits_base<char16_t, uint_least16_t, static_cast<uint_least16_t>(0xFFFF)> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr int
  compare(const char_type* __s1, const char_type* __s2, size_t __n) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr size_t length(const char_type* __s) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr const char_type*
  find(const char_type* __s, size_t __n, const char_type& __a) noexcept {
    __identity __proj;
    const char_type* __match = std::__find(__s, __s + __n, __a, __proj);
    if (__match == __s + __n)
      return nullptr;
    return __match;
  }
};

inline constexpr int
char_traits<char16_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n) noexcept {
  for (; __n; --__n, ++__s1, ++__s2) {
    if (lt(*__s1, *__s2))
      return -1;
    if (lt(*__s2, *__s1))
      return 1;
  }
  return 0;
}

inline constexpr size_t char_traits<char16_t>::length(const char_type* __s) noexcept {
  size_t __len = 0;
  for (; !eq(*__s, char_type(0)); ++__s)
    ++__len;
  return __len;
}

template <>
struct char_traits<char32_t>
    : __char_traits_base<char32_t, uint_least32_t, static_cast<uint_least32_t>(0xFFFFFFFF)> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr int
  compare(const char_type* __s1, const char_type* __s2, size_t __n) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr size_t length(const char_type* __s) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr const char_type*
  find(const char_type* __s, size_t __n, const char_type& __a) noexcept {
    __identity __proj;
    const char_type* __match = std::__find(__s, __s + __n, __a, __proj);
    if (__match == __s + __n)
      return nullptr;
    return __match;
  }
};

inline constexpr int
char_traits<char32_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n) noexcept {
  for (; __n; --__n, ++__s1, ++__s2) {
    if (lt(*__s1, *__s2))
      return -1;
    if (lt(*__s2, *__s1))
      return 1;
  }
  return 0;
}

inline constexpr size_t char_traits<char32_t>::length(const char_type* __s) noexcept {
  size_t __len = 0;
  for (; !eq(*__s, char_type(0)); ++__s)
    ++__len;
  return __len;
}




template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
__str_find(const _CharT* __p, _SizeT __sz, _CharT __c, _SizeT __pos) noexcept {
  if (__pos >= __sz)
    return __npos;
  const _CharT* __r = _Traits::find(__p + __pos, __sz - __pos, __c);
  if (__r == nullptr)
    return __npos;
  return static_cast<_SizeT>(__r - __p);
}

template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr const _CharT* __search_substring(
    const _CharT* __first1, const _CharT* __last1, const _CharT* __first2, const _CharT* __last2) noexcept {


  const ptrdiff_t __len2 = __last2 - __first2;
  if (__len2 == 0)
    return __first1;

  ptrdiff_t __len1 = __last1 - __first1;
  if (__len1 < __len2)
    return __last1;


  _CharT __f2 = *__first2;
  while (true) {
    __len1 = __last1 - __first1;

    if (__len1 < __len2)
      return __last1;


    __first1 = _Traits::find(__first1, __len1 - __len2 + 1, __f2);
    if (__first1 == nullptr)
      return __last1;






    if (_Traits::compare(__first1, __first2, __len2) == 0)
      return __first1;

    ++__first1;
  }
}

template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
__str_find(const _CharT* __p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n) noexcept {
  if (__pos > __sz)
    return __npos;

  if (__n == 0)
    return __pos;

  const _CharT* __r = std::__search_substring<_CharT, _Traits>(__p + __pos, __p + __sz, __s, __s + __n);

  if (__r == __p + __sz)
    return __npos;
  return static_cast<_SizeT>(__r - __p);
}



template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
__str_rfind(const _CharT* __p, _SizeT __sz, _CharT __c, _SizeT __pos) noexcept {
  if (__sz < 1)
    return __npos;
  if (__pos < __sz)
    ++__pos;
  else
    __pos = __sz;
  for (const _CharT* __ps = __p + __pos; __ps != __p;) {
    if (_Traits::eq(*--__ps, __c))
      return static_cast<_SizeT>(__ps - __p);
  }
  return __npos;
}

template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
__str_rfind(const _CharT* __p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n) noexcept {
  __pos = std::min(__pos, __sz);
  if (__n < __sz - __pos)
    __pos += __n;
  else
    __pos = __sz;
  const _CharT* __r = std::__find_end_classic(__p, __p + __pos, __s, __s + __n, _Traits::eq);
  if (__n > 0 && __r == __p + __pos)
    return __npos;
  return static_cast<_SizeT>(__r - __p);
}


template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
__str_find_first_of(const _CharT* __p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n) noexcept {
  if (__pos >= __sz || __n == 0)
    return __npos;
  const _CharT* __r = std::__find_first_of_ce(__p + __pos, __p + __sz, __s, __s + __n, _Traits::eq);
  if (__r == __p + __sz)
    return __npos;
  return static_cast<_SizeT>(__r - __p);
}


template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
__str_find_last_of(const _CharT* __p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n) noexcept {
  if (__n != 0) {
    if (__pos < __sz)
      ++__pos;
    else
      __pos = __sz;
    for (const _CharT* __ps = __p + __pos; __ps != __p;) {
      const _CharT* __r = _Traits::find(__s, __n, *--__ps);
      if (__r)
        return static_cast<_SizeT>(__ps - __p);
    }
  }
  return __npos;
}


template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
__str_find_first_not_of(const _CharT* __p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n) noexcept {
  if (__pos < __sz) {
    const _CharT* __pe = __p + __sz;
    for (const _CharT* __ps = __p + __pos; __ps != __pe; ++__ps)
      if (_Traits::find(__s, __n, *__ps) == nullptr)
        return static_cast<_SizeT>(__ps - __p);
  }
  return __npos;
}

template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
__str_find_first_not_of(const _CharT* __p, _SizeT __sz, _CharT __c, _SizeT __pos) noexcept {
  if (__pos < __sz) {
    const _CharT* __pe = __p + __sz;
    for (const _CharT* __ps = __p + __pos; __ps != __pe; ++__ps)
      if (!_Traits::eq(*__ps, __c))
        return static_cast<_SizeT>(__ps - __p);
  }
  return __npos;
}


template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
__str_find_last_not_of(const _CharT* __p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n) noexcept {
  if (__pos < __sz)
    ++__pos;
  else
    __pos = __sz;
  for (const _CharT* __ps = __p + __pos; __ps != __p;)
    if (_Traits::find(__s, __n, *--__ps) == nullptr)
      return static_cast<_SizeT>(__ps - __p);
  return __npos;
}

template <class _CharT, class _SizeT, class _Traits, _SizeT __npos>
inline _SizeT constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
__str_find_last_not_of(const _CharT* __p, _SizeT __sz, _CharT __c, _SizeT __pos) noexcept {
  if (__pos < __sz)
    ++__pos;
  else
    __pos = __sz;
  for (const _CharT* __ps = __p + __pos; __ps != __p;)
    if (!_Traits::eq(*--__ps, __c))
      return static_cast<_SizeT>(__ps - __p);
  return __npos;
}

template <class _Ptr>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t __do_string_hash(_Ptr __p, _Ptr __e) {
  typedef typename iterator_traits<_Ptr>::value_type value_type;
  return __murmur2_or_cityhash<size_t>()(__p, (__e - __p) * sizeof(value_type));
}

}}
# 539 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/char_traits.h" 3
#pragma clang diagnostic pop
# 621 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/extern_template_lists.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__string/extern_template_lists.h" 3
# 622 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_allocator.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_allocator.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_allocator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <typename _Alloc, typename = void, typename = void>
struct __is_allocator : false_type {};

template <typename _Alloc>
struct __is_allocator<_Alloc,
                      __void_t<typename _Alloc::value_type>,
                      __void_t<decltype(std::declval<_Alloc&>().allocate(size_t(0)))> > : true_type {};

}}
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_allocator.h" 3
#pragma clang diagnostic pop
# 624 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3








# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/noexcept_move_assign_container.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/noexcept_move_assign_container.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/noexcept_move_assign_container.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/noexcept_move_assign_container.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/noexcept_move_assign_container.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/noexcept_move_assign_container.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/noexcept_move_assign_container.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/noexcept_move_assign_container.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <typename _Alloc, typename _Traits = allocator_traits<_Alloc> >
struct __noexcept_move_assign_container
    : public integral_constant<bool,
                               _Traits::propagate_on_container_move_assignment::value

                                   || _Traits::is_always_equal::value



                               > {
};

}}
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/noexcept_move_assign_container.h" 3
#pragma clang diagnostic pop
# 633 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3
# 642 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/climits" 1 3
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/climits" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/limits.h" 1 3
# 25 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/limits.h" 3
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/limits.h" 1 3 4
# 64 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/limits.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/limits.h" 1 3 4








# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/limits.h" 1 3 4
# 42 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/limits.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/_limits.h" 1 3 4
# 43 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/i386/limits.h" 2 3 4
# 10 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/machine/limits.h" 2 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/limits.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/syslimits.h" 1 3 4
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/limits.h" 2 3 4
# 26 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/limits.h" 2 3
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/climits" 2 3
# 46 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/climits" 3
# 643 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdexcept" 1 3
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdexcept" 3


#pragma clang diagnostic push
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdexcept" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdexcept" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdexcept" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdexcept" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdexcept" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdexcept" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


class __attribute__((__visibility__("hidden"))) __libcpp_refstring {
  const char* __imp_;

  bool __uses_refcount() const;

public:
  explicit __libcpp_refstring(const char* __msg);
  __libcpp_refstring(const __libcpp_refstring& __s) noexcept;
  __libcpp_refstring& operator=(const __libcpp_refstring& __s) noexcept;
  ~__libcpp_refstring();

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const char* c_str() const noexcept { return __imp_; }
};


}}
# 71 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdexcept" 3
#pragma clang diagnostic pop

namespace std
{

class __attribute__((__visibility__("default"))) logic_error : public exception {


private:
  std::__libcpp_refstring __imp_;

public:
  explicit logic_error(const string&);
  explicit logic_error(const char*);

  logic_error(const logic_error&) noexcept;
  logic_error& operator=(const logic_error&) noexcept;

  ~logic_error() noexcept override;

  const char* what() const noexcept override;






};

class __attribute__((__visibility__("default"))) runtime_error : public exception {


private:
  std::__libcpp_refstring __imp_;

public:
  explicit runtime_error(const string&);
  explicit runtime_error(const char*);

  runtime_error(const runtime_error&) noexcept;
  runtime_error& operator=(const runtime_error&) noexcept;

  ~runtime_error() noexcept override;

  const char* what() const noexcept override;






};

class __attribute__((__visibility__("default"))) domain_error : public logic_error {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit domain_error(const string& __s) : logic_error(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit domain_error(const char* __s) : logic_error(__s) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) domain_error(const domain_error&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) domain_error& operator=(const domain_error&) noexcept = default;
  ~domain_error() noexcept override;

};

class __attribute__((__visibility__("default"))) invalid_argument : public logic_error {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit invalid_argument(const string& __s) : logic_error(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit invalid_argument(const char* __s) : logic_error(__s) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) invalid_argument(const invalid_argument&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) invalid_argument& operator=(const invalid_argument&) noexcept = default;
  ~invalid_argument() noexcept override;

};

class __attribute__((__visibility__("default"))) length_error : public logic_error {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit length_error(const string& __s) : logic_error(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit length_error(const char* __s) : logic_error(__s) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) length_error(const length_error&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) length_error& operator=(const length_error&) noexcept = default;
  ~length_error() noexcept override;

};

class __attribute__((__visibility__("default"))) out_of_range : public logic_error {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit out_of_range(const string& __s) : logic_error(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit out_of_range(const char* __s) : logic_error(__s) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) out_of_range(const out_of_range&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) out_of_range& operator=(const out_of_range&) noexcept = default;
  ~out_of_range() noexcept override;

};

class __attribute__((__visibility__("default"))) range_error : public runtime_error {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit range_error(const string& __s) : runtime_error(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit range_error(const char* __s) : runtime_error(__s) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) range_error(const range_error&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) range_error& operator=(const range_error&) noexcept = default;
  ~range_error() noexcept override;

};

class __attribute__((__visibility__("default"))) overflow_error : public runtime_error {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit overflow_error(const string& __s) : runtime_error(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit overflow_error(const char* __s) : runtime_error(__s) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) overflow_error(const overflow_error&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) overflow_error& operator=(const overflow_error&) noexcept = default;
  ~overflow_error() noexcept override;

};

class __attribute__((__visibility__("default"))) underflow_error : public runtime_error {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit underflow_error(const string& __s) : runtime_error(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit underflow_error(const char* __s) : runtime_error(__s) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) underflow_error(const underflow_error&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) underflow_error& operator=(const underflow_error&) noexcept = default;
  ~underflow_error() noexcept override;

};

}

#pragma clang diagnostic push
# 209 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdexcept" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 209 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdexcept" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 209 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdexcept" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 209 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdexcept" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 209 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdexcept" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 209 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdexcept" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


[[noreturn]] __attribute__((__visibility__("default"))) void __throw_runtime_error(const char*);

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_logic_error(const char* __msg) {

  throw logic_error(__msg);



}

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_domain_error(const char* __msg) {

  throw domain_error(__msg);



}

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_invalid_argument(const char* __msg) {

  throw invalid_argument(__msg);



}

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_length_error(const char* __msg) {

  throw length_error(__msg);



}

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_out_of_range(const char* __msg) {

  throw out_of_range(__msg);



}

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_range_error(const char* __msg) {

  throw range_error(__msg);



}

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_overflow_error(const char* __msg) {

  throw overflow_error(__msg);



}

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_underflow_error(const char* __msg) {

  throw underflow_error(__msg);



}

}}
# 278 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stdexcept" 3
#pragma clang diagnostic pop
# 647 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 1 3
# 214 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string_view.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string_view.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string_view.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string_view.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string_view.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string_view.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string_view.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string_view.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_string_view;

typedef basic_string_view<char> string_view;



typedef basic_string_view<char16_t> u16string_view;
typedef basic_string_view<char32_t> u32string_view;

typedef basic_string_view<wchar_t> wstring_view;



template <class _CharT, class _Traits>
class __attribute__((__preferred_name__(string_view)))

      __attribute__((__preferred_name__(wstring_view)))




      __attribute__((__preferred_name__(u16string_view)))
      __attribute__((__preferred_name__(u32string_view)))
      basic_string_view;

}}
# 48 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/string_view.h" 3
#pragma clang diagnostic pop
# 215 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 2 3
# 245 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/data.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/data.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/data.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/data.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/data.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/data.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/data.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/data.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Cont>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto data(_Cont& __c) noexcept(noexcept(__c.data())) -> decltype(__c.data()) {
  return __c.data();
}

template <class _Cont>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto data(const _Cont& __c) noexcept(noexcept(__c.data())) -> decltype(__c.data()) {
  return __c.data();
}

template <class _Tp, size_t _Sz>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp* data(_Tp (&__array)[_Sz]) noexcept {
  return __array;
}

template <class _Ep>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Ep* data(initializer_list<_Ep> __il) noexcept {
  return __il.begin();
}



}}
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/data.h" 3
#pragma clang diagnostic pop
# 246 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/empty.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/empty.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/empty.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/empty.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/empty.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/empty.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/empty.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/empty.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Cont>
[[nodiscard]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto
empty(const _Cont& __c) noexcept(noexcept(__c.empty())) -> decltype(__c.empty()) {
  return __c.empty();
}

template <class _Tp, size_t _Sz>
[[nodiscard]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool empty(const _Tp (&)[_Sz]) noexcept {
  return false;
}

template <class _Ep>
[[nodiscard]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool empty(initializer_list<_Ep> __il) noexcept {
  return __il.size() == 0;
}



}}
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/empty.h" 3
#pragma clang diagnostic pop
# 247 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_access.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_access.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_access.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_access.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_access.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_access.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_access.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_access.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp, size_t _Np>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator<_Tp*> rbegin(_Tp (&__array)[_Np]) {
  return reverse_iterator<_Tp*>(__array + _Np);
}

template <class _Tp, size_t _Np>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator<_Tp*> rend(_Tp (&__array)[_Np]) {
  return reverse_iterator<_Tp*>(__array);
}

template <class _Ep>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator<const _Ep*> rbegin(initializer_list<_Ep> __il) {
  return reverse_iterator<const _Ep*>(__il.end());
}

template <class _Ep>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator<const _Ep*> rend(initializer_list<_Ep> __il) {
  return reverse_iterator<const _Ep*>(__il.begin());
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto rbegin(_Cp& __c) -> decltype(__c.rbegin()) {
  return __c.rbegin();
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto rbegin(const _Cp& __c) -> decltype(__c.rbegin()) {
  return __c.rbegin();
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto rend(_Cp& __c) -> decltype(__c.rend()) {
  return __c.rend();
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto rend(const _Cp& __c) -> decltype(__c.rend()) {
  return __c.rend();
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto crbegin(const _Cp& __c) -> decltype(std::rbegin(__c)) {
  return std::rbegin(__c);
}

template <class _Cp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto crend(const _Cp& __c) -> decltype(std::rend(__c)) {
  return std::rend(__c);
}



}}
# 78 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/reverse_access.h" 3
#pragma clang diagnostic pop
# 248 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/size.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/size.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/size.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/size.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/size.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/size.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/size.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/size.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Cont>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto size(const _Cont& __c) noexcept(noexcept(__c.size())) -> decltype(__c.size()) {
  return __c.size();
}

template <class _Tp, size_t _Sz>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr size_t size(const _Tp (&)[_Sz]) noexcept {
  return _Sz;
}
# 57 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/size.h" 3
}}
# 57 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/size.h" 3
#pragma clang diagnostic pop
# 249 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 2 3
# 255 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 259 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 2 3

#pragma clang diagnostic push
# 260 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 260 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 260 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 260 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 260 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 260 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr inline size_t
__char_traits_length_checked(const typename _Traits::char_type* __s) noexcept {

  return ((void)0),

         _Traits::length(__s);
}

template <class _CharT, class _Traits>
class basic_string_view {
public:

  using traits_type = _Traits;
  using value_type = _CharT;
  using pointer = _CharT*;
  using const_pointer = const _CharT*;
  using reference = _CharT&;
  using const_reference = const _CharT&;





  using const_iterator = const_pointer;

  using iterator = const_iterator;
  using const_reverse_iterator = std::reverse_iterator<const_iterator>;
  using reverse_iterator = const_reverse_iterator;
  using size_type = size_t;
  using difference_type = ptrdiff_t;
  static constexpr const size_type npos = -1;

  static_assert(!is_array<value_type>::value, "Character type of basic_string_view must not be an array");
  static_assert(is_standard_layout<value_type>::value, "Character type of basic_string_view must be standard-layout");
  static_assert(is_trivial<value_type>::value, "Character type of basic_string_view must be trivial");
  static_assert(is_same<_CharT, typename traits_type::char_type>::value,
                "traits_type::char_type must be the same type as CharT");


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string_view() noexcept : __data_(nullptr), __size_(0) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string_view(const basic_string_view&) noexcept = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string_view& operator=(const basic_string_view&) noexcept = default;

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string_view(const _CharT* __s, size_type __len) noexcept
      : __data_(__s),
        __size_(__len) {




    ((void)0);


    ((void)0);


  }
# 345 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 3
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string_view(const _CharT* __s)
      : __data_(__s), __size_(std::__char_traits_length_checked<_Traits>(__s)) {}






  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator begin() const noexcept { return cbegin(); }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator end() const noexcept { return cend(); }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator cbegin() const noexcept {



    return const_iterator(__data_);

  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator cend() const noexcept {



    return const_iterator(__data_ + __size_);

  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator rbegin() const noexcept {
    return const_reverse_iterator(cend());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator rend() const noexcept {
    return const_reverse_iterator(cbegin());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator crbegin() const noexcept {
    return const_reverse_iterator(cend());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator crend() const noexcept {
    return const_reverse_iterator(cbegin());
  }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type size() const noexcept { return __size_; }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type length() const noexcept { return __size_; }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type max_size() const noexcept {
    return numeric_limits<size_type>::max() / sizeof(value_type);
  }

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool empty() const noexcept { return __size_ == 0; }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference operator[](size_type __pos) const noexcept {
    return ((void)0), __data_[__pos];
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference at(size_type __pos) const {
    return __pos >= size() ? (__throw_out_of_range("string_view::at"), __data_[0]) : __data_[__pos];
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference front() const noexcept {
    return ((void)0), __data_[0];
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference back() const noexcept {
    return ((void)0), __data_[__size_ - 1];
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_pointer data() const noexcept { return __data_; }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void remove_prefix(size_type __n) noexcept {
    ((void)0);
    __data_ += __n;
    __size_ -= __n;
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void remove_suffix(size_type __n) noexcept {
    ((void)0);
    __size_ -= __n;
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(basic_string_view& __other) noexcept {
    const value_type* __p = __data_;
    __data_ = __other.__data_;
    __other.__data_ = __p;

    size_type __sz = __size_;
    __size_ = __other.__size_;
    __other.__size_ = __sz;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  copy(_CharT* __s, size_type __n, size_type __pos = 0) const {
    if (__pos > size())
      __throw_out_of_range("string_view::copy");
    size_type __rlen = std::min(__n, size() - __pos);
    _Traits::copy(__s, data() + __pos, __rlen);
    return __rlen;
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string_view substr(size_type __pos = 0, size_type __n = npos) const {
    return __pos > size() ? (__throw_out_of_range("string_view::substr"), basic_string_view())
                          : basic_string_view(data() + __pos, std::min(__n, size() - __pos));
  }

  constexpr int compare(basic_string_view __sv) const noexcept {
    size_type __rlen = std::min(size(), __sv.size());
    int __retval = _Traits::compare(data(), __sv.data(), __rlen);
    if (__retval == 0)
      __retval = size() == __sv.size() ? 0 : (size() < __sv.size() ? -1 : 1);
    return __retval;
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int
  compare(size_type __pos1, size_type __n1, basic_string_view __sv) const {
    return substr(__pos1, __n1).compare(__sv);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int
  compare(size_type __pos1, size_type __n1, basic_string_view __sv, size_type __pos2, size_type __n2) const {
    return substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int compare(const _CharT* __s) const noexcept {
    return compare(basic_string_view(__s));
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int
  compare(size_type __pos1, size_type __n1, const _CharT* __s) const {
    return substr(__pos1, __n1).compare(basic_string_view(__s));
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int
  compare(size_type __pos1, size_type __n1, const _CharT* __s, size_type __n2) const {
    return substr(__pos1, __n1).compare(basic_string_view(__s, __n2));
  }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find(basic_string_view __s, size_type __pos = 0) const noexcept {
    ((void)0);
    return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __s.data(), __pos, __s.size());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type find(_CharT __c, size_type __pos = 0) const noexcept {
    return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find(const _CharT* __s, size_type __pos, size_type __n) const noexcept {
    ((void)0);
    return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find(const _CharT* __s, size_type __pos = 0) const noexcept {
    ((void)0);
    return std::__str_find<value_type, size_type, traits_type, npos>(
        data(), size(), __s, __pos, traits_type::length(__s));
  }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  rfind(basic_string_view __s, size_type __pos = npos) const noexcept {
    ((void)0);
    return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __s.data(), __pos, __s.size());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  rfind(_CharT __c, size_type __pos = npos) const noexcept {
    return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  rfind(const _CharT* __s, size_type __pos, size_type __n) const noexcept {
    ((void)0);
    return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  rfind(const _CharT* __s, size_type __pos = npos) const noexcept {
    ((void)0);
    return std::__str_rfind<value_type, size_type, traits_type, npos>(
        data(), size(), __s, __pos, traits_type::length(__s));
  }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_first_of(basic_string_view __s, size_type __pos = 0) const noexcept {
    ((void)0);
    return std::__str_find_first_of<value_type, size_type, traits_type, npos>(
        data(), size(), __s.data(), __pos, __s.size());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_first_of(_CharT __c, size_type __pos = 0) const noexcept {
    return find(__c, __pos);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_first_of(const _CharT* __s, size_type __pos, size_type __n) const noexcept {
    ((void)0);
    return std::__str_find_first_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_first_of(const _CharT* __s, size_type __pos = 0) const noexcept {
    ((void)0);
    return std::__str_find_first_of<value_type, size_type, traits_type, npos>(
        data(), size(), __s, __pos, traits_type::length(__s));
  }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_last_of(basic_string_view __s, size_type __pos = npos) const noexcept {
    ((void)0);
    return std::__str_find_last_of<value_type, size_type, traits_type, npos>(
        data(), size(), __s.data(), __pos, __s.size());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_last_of(_CharT __c, size_type __pos = npos) const noexcept {
    return rfind(__c, __pos);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_last_of(const _CharT* __s, size_type __pos, size_type __n) const noexcept {
    ((void)0);
    return std::__str_find_last_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_last_of(const _CharT* __s, size_type __pos = npos) const noexcept {
    ((void)0);
    return std::__str_find_last_of<value_type, size_type, traits_type, npos>(
        data(), size(), __s, __pos, traits_type::length(__s));
  }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_first_not_of(basic_string_view __s, size_type __pos = 0) const noexcept {
    ((void)0);

    return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(
        data(), size(), __s.data(), __pos, __s.size());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept {
    return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const noexcept {
    ((void)0);
    return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_first_not_of(const _CharT* __s, size_type __pos = 0) const noexcept {
    ((void)0);
    return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(
        data(), size(), __s, __pos, traits_type::length(__s));
  }


  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_last_not_of(basic_string_view __s, size_type __pos = npos) const noexcept {
    ((void)0);

    return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(
        data(), size(), __s.data(), __pos, __s.size());
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept {
    return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const noexcept {
    ((void)0);
    return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_last_not_of(const _CharT* __s, size_type __pos = npos) const noexcept {
    ((void)0);
    return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(
        data(), size(), __s, __pos, traits_type::length(__s));
  }
# 676 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 3
private:
  const value_type* __data_;
  size_type __size_;
};
template <class... _Tag> [[maybe_unused]] basic_string_view(typename _Tag::__allow_ctad...)->basic_string_view<_Tag...>;
# 731 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 3
template <class _CharT, class _Traits>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator==(basic_string_view<_CharT, _Traits> __lhs, basic_string_view<_CharT, _Traits> __rhs) noexcept {
  if (__lhs.size() != __rhs.size())
    return false;
  return __lhs.compare(__rhs) == 0;
}



template <class _CharT, class _Traits, int = 1>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator==(basic_string_view<_CharT, _Traits> __lhs,
           __type_identity_t<basic_string_view<_CharT, _Traits> > __rhs) noexcept {
  if (__lhs.size() != __rhs.size())
    return false;
  return __lhs.compare(__rhs) == 0;
}

template <class _CharT, class _Traits, int = 2>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator==(__type_identity_t<basic_string_view<_CharT, _Traits> > __lhs,
           basic_string_view<_CharT, _Traits> __rhs) noexcept {
  if (__lhs.size() != __rhs.size())
    return false;
  return __lhs.compare(__rhs) == 0;
}


template <class _CharT, class _Traits>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator!=(basic_string_view<_CharT, _Traits> __lhs, basic_string_view<_CharT, _Traits> __rhs) noexcept {
  if (__lhs.size() != __rhs.size())
    return true;
  return __lhs.compare(__rhs) != 0;
}

template <class _CharT, class _Traits, int = 1>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator!=(basic_string_view<_CharT, _Traits> __lhs,
           __type_identity_t<basic_string_view<_CharT, _Traits> > __rhs) noexcept {
  if (__lhs.size() != __rhs.size())
    return true;
  return __lhs.compare(__rhs) != 0;
}

template <class _CharT, class _Traits, int = 2>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator!=(__type_identity_t<basic_string_view<_CharT, _Traits> > __lhs,
           basic_string_view<_CharT, _Traits> __rhs) noexcept {
  if (__lhs.size() != __rhs.size())
    return true;
  return __lhs.compare(__rhs) != 0;
}


template <class _CharT, class _Traits>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator<(basic_string_view<_CharT, _Traits> __lhs, basic_string_view<_CharT, _Traits> __rhs) noexcept {
  return __lhs.compare(__rhs) < 0;
}

template <class _CharT, class _Traits, int = 1>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator<(basic_string_view<_CharT, _Traits> __lhs,
          __type_identity_t<basic_string_view<_CharT, _Traits> > __rhs) noexcept {
  return __lhs.compare(__rhs) < 0;
}

template <class _CharT, class _Traits, int = 2>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator<(__type_identity_t<basic_string_view<_CharT, _Traits> > __lhs,
          basic_string_view<_CharT, _Traits> __rhs) noexcept {
  return __lhs.compare(__rhs) < 0;
}


template <class _CharT, class _Traits>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator>(basic_string_view<_CharT, _Traits> __lhs, basic_string_view<_CharT, _Traits> __rhs) noexcept {
  return __lhs.compare(__rhs) > 0;
}

template <class _CharT, class _Traits, int = 1>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator>(basic_string_view<_CharT, _Traits> __lhs,
          __type_identity_t<basic_string_view<_CharT, _Traits> > __rhs) noexcept {
  return __lhs.compare(__rhs) > 0;
}

template <class _CharT, class _Traits, int = 2>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator>(__type_identity_t<basic_string_view<_CharT, _Traits> > __lhs,
          basic_string_view<_CharT, _Traits> __rhs) noexcept {
  return __lhs.compare(__rhs) > 0;
}


template <class _CharT, class _Traits>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator<=(basic_string_view<_CharT, _Traits> __lhs, basic_string_view<_CharT, _Traits> __rhs) noexcept {
  return __lhs.compare(__rhs) <= 0;
}

template <class _CharT, class _Traits, int = 1>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator<=(basic_string_view<_CharT, _Traits> __lhs,
           __type_identity_t<basic_string_view<_CharT, _Traits> > __rhs) noexcept {
  return __lhs.compare(__rhs) <= 0;
}

template <class _CharT, class _Traits, int = 2>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator<=(__type_identity_t<basic_string_view<_CharT, _Traits> > __lhs,
           basic_string_view<_CharT, _Traits> __rhs) noexcept {
  return __lhs.compare(__rhs) <= 0;
}


template <class _CharT, class _Traits>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator>=(basic_string_view<_CharT, _Traits> __lhs, basic_string_view<_CharT, _Traits> __rhs) noexcept {
  return __lhs.compare(__rhs) >= 0;
}

template <class _CharT, class _Traits, int = 1>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator>=(basic_string_view<_CharT, _Traits> __lhs,
           __type_identity_t<basic_string_view<_CharT, _Traits> > __rhs) noexcept {
  return __lhs.compare(__rhs) >= 0;
}

template <class _CharT, class _Traits, int = 2>
constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator>=(__type_identity_t<basic_string_view<_CharT, _Traits> > __lhs,
           basic_string_view<_CharT, _Traits> __rhs) noexcept {
  return __lhs.compare(__rhs) >= 0;
}



template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, basic_string_view<_CharT, _Traits> __str);


template <class _CharT>
struct __string_view_hash : public __unary_function<basic_string_view<_CharT, char_traits<_CharT> >, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(const basic_string_view<_CharT, char_traits<_CharT> > __val) const noexcept {
    return std::__do_string_hash(__val.data(), __val.data() + __val.size());
  }
};

template <>
struct hash<basic_string_view<char, char_traits<char> > > : __string_view_hash<char> {};






template <>
struct hash<basic_string_view<char16_t, char_traits<char16_t> > > : __string_view_hash<char16_t> {};

template <>
struct hash<basic_string_view<char32_t, char_traits<char32_t> > > : __string_view_hash<char32_t> {};


template <>
struct hash<basic_string_view<wchar_t, char_traits<wchar_t> > > : __string_view_hash<wchar_t> {};



inline namespace literals {
inline namespace string_view_literals {
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr basic_string_view<char> operator""sv(const char* __str, size_t __len) noexcept {
  return basic_string_view<char>(__str, __len);
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr basic_string_view<wchar_t>
operator""sv(const wchar_t* __str, size_t __len) noexcept {
  return basic_string_view<wchar_t>(__str, __len);
}
# 924 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 3
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr basic_string_view<char16_t>
operator""sv(const char16_t* __str, size_t __len) noexcept {
  return basic_string_view<char16_t>(__str, __len);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr basic_string_view<char32_t>
operator""sv(const char32_t* __str, size_t __len) noexcept {
  return basic_string_view<char32_t>(__str, __len);
}
}
}

}}
# 936 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 3
#pragma clang diagnostic pop




# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 1 3
# 1823 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/adjacent_find.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/adjacent_find.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/adjacent_find.h" 2 3

#pragma clang diagnostic push
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/adjacent_find.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/adjacent_find.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/adjacent_find.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/adjacent_find.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/adjacent_find.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/adjacent_find.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Iter, class _Sent, class _BinaryPredicate>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Iter
__adjacent_find(_Iter __first, _Sent __last, _BinaryPredicate&& __pred) {
  if (__first == __last)
    return __first;
  _Iter __i = __first;
  while (++__i != __last) {
    if (__pred(*__first, *__i))
      return __first;
    __first = __i;
  }
  return __i;
}

template <class _ForwardIterator, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred) {
  return std::__adjacent_find(std::move(__first), std::move(__last), __pred);
}

template <class _ForwardIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
adjacent_find(_ForwardIterator __first, _ForwardIterator __last) {
  return std::adjacent_find(std::move(__first), std::move(__last), __equal_to());
}

}}
# 54 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/adjacent_find.h" 3
#pragma clang diagnostic pop
# 1824 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/all_of.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/all_of.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/all_of.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/all_of.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/all_of.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/all_of.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/all_of.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/all_of.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator, class _Predicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) {
  for (; __first != __last; ++__first)
    if (!__pred(*__first))
      return false;
  return true;
}

}}
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/all_of.h" 3
#pragma clang diagnostic pop
# 1825 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/any_of.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/any_of.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/any_of.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/any_of.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/any_of.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/any_of.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/any_of.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/any_of.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator, class _Predicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) {
  for (; __first != __last; ++__first)
    if (__pred(*__first))
      return true;
  return false;
}

}}
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/any_of.h" 3
#pragma clang diagnostic pop
# 1826 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/binary_search.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/binary_search.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lower_bound.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lower_bound.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/half_positive.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/half_positive.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/half_positive.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/half_positive.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/half_positive.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/half_positive.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/half_positive.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/half_positive.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <typename _Integral, __enable_if_t<is_integral<_Integral>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Integral __half_positive(_Integral __value) {
  return static_cast<_Integral>(static_cast<__make_unsigned_t<_Integral> >(__value) / 2);
}

template <typename _Tp, __enable_if_t<!is_integral<_Tp>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp __half_positive(_Tp __value) {
  return __value / 2;
}

}}
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/half_positive.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lower_bound.h" 2 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lower_bound.h" 3


#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lower_bound.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lower_bound.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lower_bound.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lower_bound.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lower_bound.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lower_bound.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _Iter, class _Type, class _Proj, class _Comp>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Iter __lower_bound_bisecting(
    _Iter __first,
    const _Type& __value,
    typename iterator_traits<_Iter>::difference_type __len,
    _Comp& __comp,
    _Proj& __proj) {
  while (__len != 0) {
    auto __l2 = std::__half_positive(__len);
    _Iter __m = __first;
    _IterOps<_AlgPolicy>::advance(__m, __l2);
    if (std::__invoke(__comp, std::__invoke(__proj, *__m), __value)) {
      __first = ++__m;
      __len -= __l2 + 1;
    } else {
      __len = __l2;
    }
  }
  return __first;
}
# 60 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lower_bound.h" 3
template <class _AlgPolicy, class _ForwardIterator, class _Sent, class _Type, class _Proj, class _Comp>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
__lower_bound_onesided(_ForwardIterator __first, _Sent __last, const _Type& __value, _Comp& __comp, _Proj& __proj) {

  if (__first == __last || !std::__invoke(__comp, std::__invoke(__proj, *__first), __value))
    return __first;

  using _Distance = typename iterator_traits<_ForwardIterator>::difference_type;
  for (_Distance __step = 1; __first != __last; __step <<= 1) {
    auto __it = __first;
    auto __dist = __step - _IterOps<_AlgPolicy>::__advance_to(__it, __step, __last);


    if (__it == __last || !std::__invoke(__comp, std::__invoke(__proj, *__it), __value)) {


      if (__dist == 1)
        return __it;
      return std::__lower_bound_bisecting<_AlgPolicy>(__first, __value, __dist, __comp, __proj);
    }

    __first = __it;
  }
  return __first;
}

template <class _AlgPolicy, class _ForwardIterator, class _Sent, class _Type, class _Proj, class _Comp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
__lower_bound(_ForwardIterator __first, _Sent __last, const _Type& __value, _Comp& __comp, _Proj& __proj) {
  const auto __dist = _IterOps<_AlgPolicy>::distance(__first, __last);
  return std::__lower_bound_bisecting<_AlgPolicy>(__first, __value, __dist, __comp, __proj);
}

template <class _ForwardIterator, class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value, _Compare __comp) {
  static_assert(__is_callable<_Compare, decltype(*__first), const _Tp&>::value, "The comparator has to be callable");
  auto __proj = std::__identity();
  return std::__lower_bound<_ClassicAlgPolicy>(__first, __last, __value, __comp, __proj);
}

template <class _ForwardIterator, class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value) {
  return std::lower_bound(__first, __last, __value, __less<>());
}

}}
# 107 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lower_bound.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/binary_search.h" 2 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/binary_search.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/binary_search.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/binary_search.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/binary_search.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/binary_search.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/binary_search.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/binary_search.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _ForwardIterator, class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value, _Compare __comp) {
  __first = std::lower_bound<_ForwardIterator, _Tp, __comp_ref_type<_Compare> >(__first, __last, __value, __comp);
  return __first != __last && !__comp(__value, *__first);
}

template <class _ForwardIterator, class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value) {
  return std::binary_search(__first, __last, __value, __less<>());
}

}}
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/binary_search.h" 3
#pragma clang diagnostic pop
# 1827 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_backward.h" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_backward.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_backward.h" 2 3

#pragma clang diagnostic push
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_backward.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_backward.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_backward.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_backward.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_backward.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_backward.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _InIter, class _Sent, class _OutIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_InIter, _OutIter>
__copy_backward(_InIter __first, _Sent __last, _OutIter __result);

template <class _AlgPolicy>
struct __copy_backward_impl {
  template <class _InIter, class _Sent, class _OutIter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _Sent __last, _OutIter __result) const {
    auto __last_iter = _IterOps<_AlgPolicy>::next(__first, __last);
    auto __original_last_iter = __last_iter;

    while (__first != __last_iter) {
      *--__result = *--__last_iter;
    }

    return std::make_pair(std::move(__original_last_iter), std::move(__result));
  }

  template <class _InIter, class _OutIter, __enable_if_t<__is_segmented_iterator<_InIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _InIter __last, _OutIter __result) const {
    using _Traits = __segmented_iterator_traits<_InIter>;
    auto __sfirst = _Traits::__segment(__first);
    auto __slast = _Traits::__segment(__last);
    if (__sfirst == __slast) {
      auto __iters =
          std::__copy_backward<_AlgPolicy>(_Traits::__local(__first), _Traits::__local(__last), std::move(__result));
      return std::make_pair(__last, __iters.second);
    }

    __result =
        std::__copy_backward<_AlgPolicy>(_Traits::__begin(__slast), _Traits::__local(__last), std::move(__result))
            .second;
    --__slast;
    while (__sfirst != __slast) {
      __result =
          std::__copy_backward<_AlgPolicy>(_Traits::__begin(__slast), _Traits::__end(__slast), std::move(__result))
              .second;
      --__slast;
    }
    __result = std::__copy_backward<_AlgPolicy>(_Traits::__local(__first), _Traits::__end(__slast), std::move(__result))
                   .second;
    return std::make_pair(__last, std::move(__result));
  }

  template <class _InIter,
            class _OutIter,
            __enable_if_t<__has_random_access_iterator_category<_InIter>::value &&
                              !__is_segmented_iterator<_InIter>::value && __is_segmented_iterator<_OutIter>::value,
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _InIter __last, _OutIter __result) const {
    using _Traits = __segmented_iterator_traits<_OutIter>;
    auto __orig_last = __last;
    auto __segment_iterator = _Traits::__segment(__result);


    if (__first == __last)
      return std::make_pair(__first, __result);

    auto __local_last = _Traits::__local(__result);
    while (true) {
      using _DiffT = typename common_type<__iter_diff_t<_InIter>, __iter_diff_t<_OutIter> >::type;

      auto __local_first = _Traits::__begin(__segment_iterator);
      auto __size = std::min<_DiffT>(__local_last - __local_first, __last - __first);
      auto __iter = std::__copy_backward<_AlgPolicy>(__last - __size, __last, __local_last).second;
      __last -= __size;

      if (__first == __last)
        return std::make_pair(std::move(__orig_last), _Traits::__compose(__segment_iterator, std::move(__iter)));
      --__segment_iterator;
      __local_last = _Traits::__end(__segment_iterator);
    }
  }


  template <class _In, class _Out, __enable_if_t<__can_lower_copy_assignment_to_memmove<_In, _Out>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_In*, _Out*>
  operator()(_In* __first, _In* __last, _Out* __result) const {
    return std::__copy_backward_trivial_impl(__first, __last, __result);
  }
};

template <class _AlgPolicy, class _BidirectionalIterator1, class _Sentinel, class _BidirectionalIterator2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_BidirectionalIterator1, _BidirectionalIterator2>
__copy_backward(_BidirectionalIterator1 __first, _Sentinel __last, _BidirectionalIterator2 __result) {
  return std::__copy_move_unwrap_iters<__copy_backward_impl<_AlgPolicy> >(
      std::move(__first), std::move(__last), std::move(__result));
}

template <class _BidirectionalIterator1, class _BidirectionalIterator2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _BidirectionalIterator2
copy_backward(_BidirectionalIterator1 __first, _BidirectionalIterator1 __last, _BidirectionalIterator2 __result) {
  static_assert(std::is_copy_constructible<_BidirectionalIterator1>::value &&
                    std::is_copy_constructible<_BidirectionalIterator1>::value,
                "Iterators must be copy constructible.");

  return std::__copy_backward<_ClassicAlgPolicy>(std::move(__first), std::move(__last), std::move(__result)).second;
}

}}
# 133 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_backward.h" 3
#pragma clang diagnostic pop
# 1829 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_if.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_if.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_if.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_if.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_if.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_if.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_if.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_if.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator, class _OutputIterator, class _Predicate>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred) {
  for (; __first != __last; ++__first) {
    if (__pred(*__first)) {
      *__result = *__first;
      ++__result;
    }
  }
  return __result;
}

}}
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_if.h" 3
#pragma clang diagnostic pop
# 1830 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_n.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_n.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_n.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_n.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_n.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_n.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_n.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_n.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator,
          class _Size,
          class _OutputIterator,
          __enable_if_t<__has_input_iterator_category<_InputIterator>::value &&
                            !__has_random_access_iterator_category<_InputIterator>::value,
                        int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
copy_n(_InputIterator __first, _Size __orig_n, _OutputIterator __result) {
  typedef decltype(std::__convert_to_integral(__orig_n)) _IntegralSize;
  _IntegralSize __n = __orig_n;
  if (__n > 0) {
    *__result = *__first;
    ++__result;
    for (--__n; __n > 0; --__n) {
      ++__first;
      *__result = *__first;
      ++__result;
    }
  }
  return __result;
}

template <class _InputIterator,
          class _Size,
          class _OutputIterator,
          __enable_if_t<__has_random_access_iterator_category<_InputIterator>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
copy_n(_InputIterator __first, _Size __orig_n, _OutputIterator __result) {
  typedef typename iterator_traits<_InputIterator>::difference_type difference_type;
  typedef decltype(std::__convert_to_integral(__orig_n)) _IntegralSize;
  _IntegralSize __n = __orig_n;
  return std::copy(__first, __first + difference_type(__n), __result);
}

}}
# 58 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/copy_n.h" 3
#pragma clang diagnostic pop
# 1831 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/popcount.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/popcount.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/popcount.h" 2 3

#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/popcount.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/popcount.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/popcount.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/popcount.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/popcount.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/popcount.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int __libcpp_popcount(unsigned __x) noexcept {
  return __builtin_popcount(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int __libcpp_popcount(unsigned long __x) noexcept {
  return __builtin_popcountl(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int __libcpp_popcount(unsigned long long __x) noexcept {
  return __builtin_popcountll(__x);
}
# 67 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/popcount.h" 3
}}
# 67 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/popcount.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count.h" 2 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count.h" 2 3

#pragma clang diagnostic push
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _AlgPolicy, class _Iter, class _Sent, class _Tp, class _Proj>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename _IterOps<_AlgPolicy>::template __difference_type<_Iter>
__count(_Iter __first, _Sent __last, const _Tp& __value, _Proj& __proj) {
  typename _IterOps<_AlgPolicy>::template __difference_type<_Iter> __r(0);
  for (; __first != __last; ++__first)
    if (std::__invoke(__proj, *__first) == __value)
      ++__r;
  return __r;
}


template <bool _ToCount, class _Cp, bool _IsConst>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __bit_iterator<_Cp, _IsConst>::difference_type
__count_bool(__bit_iterator<_Cp, _IsConst> __first, typename _Cp::size_type __n) {
  using _It = __bit_iterator<_Cp, _IsConst>;
  using __storage_type = typename _It::__storage_type;
  using difference_type = typename _It::difference_type;

  const int __bits_per_word = _It::__bits_per_word;
  difference_type __r = 0;

  if (__first.__ctz_ != 0) {
    __storage_type __clz_f = static_cast<__storage_type>(__bits_per_word - __first.__ctz_);
    __storage_type __dn = std::min(__clz_f, __n);
    __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));
    __r = std::__libcpp_popcount(std::__invert_if<!_ToCount>(*__first.__seg_) & __m);
    __n -= __dn;
    ++__first.__seg_;
  }

  for (; __n >= __bits_per_word; ++__first.__seg_, __n -= __bits_per_word)
    __r += std::__libcpp_popcount(std::__invert_if<!_ToCount>(*__first.__seg_));

  if (__n > 0) {
    __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
    __r += std::__libcpp_popcount(std::__invert_if<!_ToCount>(*__first.__seg_) & __m);
  }
  return __r;
}

template <class, class _Cp, bool _IsConst, class _Tp, class _Proj, __enable_if_t<__is_identity<_Proj>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __iter_diff_t<__bit_iterator<_Cp, _IsConst> >
__count(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, const _Tp& __value, _Proj&) {
  if (__value)
    return std::__count_bool<true>(__first, static_cast<typename _Cp::size_type>(__last - __first));
  return std::__count_bool<false>(__first, static_cast<typename _Cp::size_type>(__last - __first));
}

template <class _InputIterator, class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __iter_diff_t<_InputIterator>
count(_InputIterator __first, _InputIterator __last, const _Tp& __value) {
  __identity __proj;
  return std::__count<_ClassicAlgPolicy>(__first, __last, __value, __proj);
}

}}
# 88 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count.h" 3
#pragma clang diagnostic pop
# 1832 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count_if.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count_if.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count_if.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count_if.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count_if.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count_if.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count_if.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count_if.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator, class _Predicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
typename iterator_traits<_InputIterator>::difference_type
count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred) {
  typename iterator_traits<_InputIterator>::difference_type __r(0);
  for (; __first != __last; ++__first)
    if (__pred(*__first))
      ++__r;
  return __r;
}

}}
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/count_if.h" 3
#pragma clang diagnostic pop
# 1833 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal.h" 1 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal.h" 2 3

#pragma clang diagnostic push
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator1, class _InputIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __equal_iter_impl(
    _InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate& __pred) {
  for (; __first1 != __last1; ++__first1, (void)++__first2)
    if (!__pred(*__first1, *__first2))
      return false;
  return true;
}

template <class _Tp,
          class _Up,
          class _BinaryPredicate,
          __enable_if_t<__desugars_to_v<__equal_tag, _BinaryPredicate, _Tp, _Up> && !is_volatile<_Tp>::value &&
                            !is_volatile<_Up>::value && __libcpp_is_trivially_equality_comparable<_Tp, _Up>::value,
                        int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
__equal_iter_impl(_Tp* __first1, _Tp* __last1, _Up* __first2, _BinaryPredicate&) {
  return std::__constexpr_memcmp_equal(__first1, __first2, __element_count(__last1 - __first1));
}

template <class _InputIterator1, class _InputIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __pred) {
  return std::__equal_iter_impl(
      std::__unwrap_iter(__first1), std::__unwrap_iter(__last1), std::__unwrap_iter(__first2), __pred);
}

template <class _InputIterator1, class _InputIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2) {
  return std::equal(__first1, __last1, __first2, __equal_to());
}



template <class _Iter1, class _Sent1, class _Iter2, class _Sent2, class _Pred, class _Proj1, class _Proj2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __equal_impl(
    _Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred& __comp, _Proj1& __proj1, _Proj2& __proj2) {
  while (__first1 != __last1 && __first2 != __last2) {
    if (!std::__invoke(__comp, std::__invoke(__proj1, *__first1), std::__invoke(__proj2, *__first2)))
      return false;
    ++__first1;
    ++__first2;
  }
  return __first1 == __last1 && __first2 == __last2;
}

template <class _Tp,
          class _Up,
          class _Pred,
          class _Proj1,
          class _Proj2,
          __enable_if_t<__desugars_to_v<__equal_tag, _Pred, _Tp, _Up> && __is_identity<_Proj1>::value &&
                            __is_identity<_Proj2>::value && !is_volatile<_Tp>::value && !is_volatile<_Up>::value &&
                            __libcpp_is_trivially_equality_comparable<_Tp, _Up>::value,
                        int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
__equal_impl(_Tp* __first1, _Tp* __last1, _Up* __first2, _Up*, _Pred&, _Proj1&, _Proj2&) {
  return std::__constexpr_memcmp_equal(__first1, __first2, __element_count(__last1 - __first1));
}

template <class _InputIterator1, class _InputIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
equal(_InputIterator1 __first1,
      _InputIterator1 __last1,
      _InputIterator2 __first2,
      _InputIterator2 __last2,
      _BinaryPredicate __pred) {
  if constexpr (__has_random_access_iterator_category<_InputIterator1>::value &&
                __has_random_access_iterator_category<_InputIterator2>::value) {
    if (std::distance(__first1, __last1) != std::distance(__first2, __last2))
      return false;
  }
  __identity __proj;
  return std::__equal_impl(
      std::__unwrap_iter(__first1),
      std::__unwrap_iter(__last1),
      std::__unwrap_iter(__first2),
      std::__unwrap_iter(__last2),
      __pred,
      __proj,
      __proj);
}

template <class _InputIterator1, class _InputIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2) {
  return std::equal(__first1, __last1, __first2, __last2, __equal_to());
}



}}
# 129 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal.h" 3
#pragma clang diagnostic pop
# 1834 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal_range.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal_range.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/upper_bound.h" 1 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/upper_bound.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/upper_bound.h" 2 3

#pragma clang diagnostic push
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/upper_bound.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/upper_bound.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/upper_bound.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/upper_bound.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/upper_bound.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/upper_bound.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _Compare, class _Iter, class _Sent, class _Tp, class _Proj>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Iter
__upper_bound(_Iter __first, _Sent __last, const _Tp& __value, _Compare&& __comp, _Proj&& __proj) {
  auto __len = _IterOps<_AlgPolicy>::distance(__first, __last);
  while (__len != 0) {
    auto __half_len = std::__half_positive(__len);
    auto __mid = _IterOps<_AlgPolicy>::next(__first, __half_len);
    if (std::__invoke(__comp, __value, std::__invoke(__proj, *__mid)))
      __len = __half_len;
    else {
      __first = ++__mid;
      __len -= __half_len + 1;
    }
  }
  return __first;
}

template <class _ForwardIterator, class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value, _Compare __comp) {
  static_assert(is_copy_constructible<_ForwardIterator>::value, "Iterator has to be copy constructible");
  return std::__upper_bound<_ClassicAlgPolicy>(
      std::move(__first), std::move(__last), __value, std::move(__comp), std::__identity());
}

template <class _ForwardIterator, class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value) {
  return std::upper_bound(std::move(__first), std::move(__last), __value, __less<>());
}

}}
# 64 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/upper_bound.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal_range.h" 2 3
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal_range.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal_range.h" 2 3

#pragma clang diagnostic push
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal_range.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal_range.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal_range.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal_range.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal_range.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal_range.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _Compare, class _Iter, class _Sent, class _Tp, class _Proj>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_Iter, _Iter>
__equal_range(_Iter __first, _Sent __last, const _Tp& __value, _Compare&& __comp, _Proj&& __proj) {
  auto __len = _IterOps<_AlgPolicy>::distance(__first, __last);
  _Iter __end = _IterOps<_AlgPolicy>::next(__first, __last);
  while (__len != 0) {
    auto __half_len = std::__half_positive(__len);
    _Iter __mid = _IterOps<_AlgPolicy>::next(__first, __half_len);
    if (std::__invoke(__comp, std::__invoke(__proj, *__mid), __value)) {
      __first = ++__mid;
      __len -= __half_len + 1;
    } else if (std::__invoke(__comp, __value, std::__invoke(__proj, *__mid))) {
      __end = __mid;
      __len = __half_len;
    } else {
      _Iter __mp1 = __mid;
      return pair<_Iter, _Iter>(std::__lower_bound<_AlgPolicy>(__first, __mid, __value, __comp, __proj),
                                std::__upper_bound<_AlgPolicy>(++__mp1, __end, __value, __comp, __proj));
    }
  }
  return pair<_Iter, _Iter>(__first, __first);
}

template <class _ForwardIterator, class _Tp, class _Compare>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_ForwardIterator, _ForwardIterator>
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value, _Compare __comp) {
  static_assert(__is_callable<_Compare, decltype(*__first), const _Tp&>::value, "The comparator has to be callable");
  static_assert(is_copy_constructible<_ForwardIterator>::value, "Iterator has to be copy constructible");
  return std::__equal_range<_ClassicAlgPolicy>(
      std::move(__first),
      std::move(__last),
      __value,
      static_cast<__comp_ref_type<_Compare> >(__comp),
      std::__identity());
}

template <class _ForwardIterator, class _Tp>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_ForwardIterator, _ForwardIterator>
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value) {
  return std::equal_range(std::move(__first), std::move(__last), __value, __less<>());
}

}}
# 81 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/equal_range.h" 3
#pragma clang diagnostic pop
# 1835 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _ForwardIterator, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value, forward_iterator_tag) {
  for (; __first != __last; ++__first)
    *__first = __value;
}

template <class _RandomAccessIterator, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__fill(_RandomAccessIterator __first, _RandomAccessIterator __last, const _Tp& __value, random_access_iterator_tag) {
  std::fill_n(__first, __last - __first, __value);
}

template <class _ForwardIterator, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value) {
  std::__fill(__first, __last, __value, typename iterator_traits<_ForwardIterator>::iterator_category());
}

}}
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/fill.h" 3
#pragma clang diagnostic pop
# 1836 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3





# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if_not.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if_not.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if_not.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if_not.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if_not.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if_not.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if_not.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if_not.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator, class _Predicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _InputIterator
find_if_not(_InputIterator __first, _InputIterator __last, _Predicate __pred) {
  for (; __first != __last; ++__first)
    if (!__pred(*__first))
      break;
  return __first;
}

}}
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/find_if_not.h" 3
#pragma clang diagnostic pop
# 1842 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/movable_box.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/movable_box.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 1 3
# 234 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 238 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 2 3

namespace std
{

class __attribute__((__visibility__("default"))) bad_optional_access : public exception {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_optional_access() noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_optional_access(const bad_optional_access&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_optional_access& operator=(const bad_optional_access&) noexcept = default;

  ~bad_optional_access() noexcept override;
  const char* what() const noexcept override;
};

}



#pragma clang diagnostic push
# 256 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 256 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 256 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 256 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 256 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 256 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__throw_bad_optional_access() {

  throw bad_optional_access();



}

struct nullopt_t {
  struct __secret_tag {
    explicit __secret_tag() = default;
  };
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit nullopt_t(__secret_tag, __secret_tag) noexcept {}
};

inline constexpr nullopt_t nullopt{nullopt_t::__secret_tag{}, nullopt_t::__secret_tag{}};

struct __optional_construct_from_invoke_tag {};

template <class _Tp, bool = is_trivially_destructible<_Tp>::value>
struct __optional_destruct_base;

template <class _Tp>
struct __optional_destruct_base<_Tp, false> {
  typedef _Tp value_type;
  static_assert(is_object_v<value_type>, "instantiation of optional with a non-object type is undefined behavior");
  union {
    char __null_state_;
    value_type __val_;
  };
  bool __engaged_;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__optional_destruct_base() {
    if (__engaged_)
      __val_.~value_type();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __optional_destruct_base() noexcept : __null_state_(), __engaged_(false) {}

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __optional_destruct_base(in_place_t, _Args&&... __args)
      : __val_(std::forward<_Args>(__args)...), __engaged_(true) {}
# 309 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reset() noexcept {
    if (__engaged_) {
      __val_.~value_type();
      __engaged_ = false;
    }
  }
};

template <class _Tp>
struct __optional_destruct_base<_Tp, true> {
  typedef _Tp value_type;
  static_assert(is_object_v<value_type>, "instantiation of optional with a non-object type is undefined behavior");
  union {
    char __null_state_;
    value_type __val_;
  };
  bool __engaged_;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __optional_destruct_base() noexcept : __null_state_(), __engaged_(false) {}

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __optional_destruct_base(in_place_t, _Args&&... __args)
      : __val_(std::forward<_Args>(__args)...), __engaged_(true) {}
# 340 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reset() noexcept {
    if (__engaged_) {
      __engaged_ = false;
    }
  }
};

template <class _Tp, bool = is_reference<_Tp>::value>
struct __optional_storage_base : __optional_destruct_base<_Tp> {
  using __base = __optional_destruct_base<_Tp>;
  using value_type = _Tp;
  using __base::__base;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool has_value() const noexcept { return this->__engaged_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr value_type& __get() & noexcept { return this->__val_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const value_type& __get() const& noexcept { return this->__val_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr value_type&& __get() && noexcept { return std::move(this->__val_); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const value_type&& __get() const&& noexcept { return std::move(this->__val_); }

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __construct(_Args&&... __args) {
    ((void)0);
    std::__construct_at(std::addressof(this->__val_), std::forward<_Args>(__args)...);
    this->__engaged_ = true;
  }

  template <class _That>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __construct_from(_That&& __opt) {
    if (__opt.has_value())
      __construct(std::forward<_That>(__opt).__get());
  }

  template <class _That>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __assign_from(_That&& __opt) {
    if (this->__engaged_ == __opt.has_value()) {
      if (this->__engaged_)
        this->__val_ = std::forward<_That>(__opt).__get();
    } else {
      if (this->__engaged_)
        this->reset();
      else
        __construct(std::forward<_That>(__opt).__get());
    }
  }
};




template <class _Tp>
struct __optional_storage_base<_Tp, true> {
  using value_type = _Tp;
  using __raw_type = remove_reference_t<_Tp>;
  __raw_type* __value_;

  template <class _Up>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __can_bind_reference() {
    using _RawUp = __libcpp_remove_reference_t<_Up>;
    using _UpPtr = _RawUp*;
    using _RawTp = __libcpp_remove_reference_t<_Tp>;
    using _TpPtr = _RawTp*;
    using _CheckLValueArg =
        integral_constant<bool,
                          (is_lvalue_reference<_Up>::value && is_convertible<_UpPtr, _TpPtr>::value) ||
                              is_same<_RawUp, reference_wrapper<_RawTp>>::value ||
                              is_same<_RawUp, reference_wrapper<__remove_const_t<_RawTp>>>::value >;
    return (is_lvalue_reference<_Tp>::value && _CheckLValueArg::value) ||
           (is_rvalue_reference<_Tp>::value && !is_lvalue_reference<_Up>::value &&
            is_convertible<_UpPtr, _TpPtr>::value);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __optional_storage_base() noexcept : __value_(nullptr) {}

  template <class _UArg>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __optional_storage_base(in_place_t, _UArg&& __uarg)
      : __value_(std::addressof(__uarg)) {
    static_assert(__can_bind_reference<_UArg>(),
                  "Attempted to construct a reference element in tuple from a "
                  "possible temporary");
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reset() noexcept { __value_ = nullptr; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool has_value() const noexcept { return __value_ != nullptr; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr value_type& __get() const& noexcept { return *__value_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr value_type&& __get() const&& noexcept { return std::forward<value_type>(*__value_); }

  template <class _UArg>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __construct(_UArg&& __val) {
    ((void)0);
    static_assert(__can_bind_reference<_UArg>(),
                  "Attempted to construct a reference element in tuple from a "
                  "possible temporary");
    __value_ = std::addressof(__val);
  }

  template <class _That>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __construct_from(_That&& __opt) {
    if (__opt.has_value())
      __construct(std::forward<_That>(__opt).__get());
  }

  template <class _That>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __assign_from(_That&& __opt) {
    if (has_value() == __opt.has_value()) {
      if (has_value())
        *__value_ = std::forward<_That>(__opt).__get();
    } else {
      if (has_value())
        reset();
      else
        __construct(std::forward<_That>(__opt).__get());
    }
  }
};

template <class _Tp, bool = is_trivially_copy_constructible<_Tp>::value>
struct __optional_copy_base : __optional_storage_base<_Tp> {
  using __optional_storage_base<_Tp>::__optional_storage_base;
};

template <class _Tp>
struct __optional_copy_base<_Tp, false> : __optional_storage_base<_Tp> {
  using __optional_storage_base<_Tp>::__optional_storage_base;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_copy_base() = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_copy_base(const __optional_copy_base& __opt) {
    this->__construct_from(__opt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_copy_base(__optional_copy_base&&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_copy_base& operator=(const __optional_copy_base&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_copy_base& operator=(__optional_copy_base&&) = default;
};

template <class _Tp, bool = is_trivially_move_constructible<_Tp>::value>
struct __optional_move_base : __optional_copy_base<_Tp> {
  using __optional_copy_base<_Tp>::__optional_copy_base;
};

template <class _Tp>
struct __optional_move_base<_Tp, false> : __optional_copy_base<_Tp> {
  using value_type = _Tp;
  using __optional_copy_base<_Tp>::__optional_copy_base;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_move_base() = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_move_base(const __optional_move_base&) = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  __optional_move_base(__optional_move_base&& __opt) noexcept(is_nothrow_move_constructible_v<value_type>) {
    this->__construct_from(std::move(__opt));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_move_base& operator=(const __optional_move_base&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_move_base& operator=(__optional_move_base&&) = default;
};

template <class _Tp,
          bool = is_trivially_destructible<_Tp>::value && is_trivially_copy_constructible<_Tp>::value &&
                 is_trivially_copy_assignable<_Tp>::value>
struct __optional_copy_assign_base : __optional_move_base<_Tp> {
  using __optional_move_base<_Tp>::__optional_move_base;
};

template <class _Tp>
struct __optional_copy_assign_base<_Tp, false> : __optional_move_base<_Tp> {
  using __optional_move_base<_Tp>::__optional_move_base;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_copy_assign_base() = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_copy_assign_base(const __optional_copy_assign_base&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_copy_assign_base(__optional_copy_assign_base&&) = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_copy_assign_base&
  operator=(const __optional_copy_assign_base& __opt) {
    this->__assign_from(__opt);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_copy_assign_base& operator=(__optional_copy_assign_base&&) = default;
};

template <class _Tp,
          bool = is_trivially_destructible<_Tp>::value && is_trivially_move_constructible<_Tp>::value &&
                 is_trivially_move_assignable<_Tp>::value>
struct __optional_move_assign_base : __optional_copy_assign_base<_Tp> {
  using __optional_copy_assign_base<_Tp>::__optional_copy_assign_base;
};

template <class _Tp>
struct __optional_move_assign_base<_Tp, false> : __optional_copy_assign_base<_Tp> {
  using value_type = _Tp;
  using __optional_copy_assign_base<_Tp>::__optional_copy_assign_base;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_move_assign_base() = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_move_assign_base(const __optional_move_assign_base& __opt) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_move_assign_base(__optional_move_assign_base&&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_move_assign_base& operator=(const __optional_move_assign_base&) = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __optional_move_assign_base&
  operator=(__optional_move_assign_base&& __opt) noexcept(
      is_nothrow_move_assignable_v<value_type> && is_nothrow_move_constructible_v<value_type>) {
    this->__assign_from(std::move(__opt));
    return *this;
  }
};

template <class _Tp>
using __optional_sfinae_ctor_base_t =
    __sfinae_ctor_base< is_copy_constructible<_Tp>::value, is_move_constructible<_Tp>::value >;

template <class _Tp>
using __optional_sfinae_assign_base_t =
    __sfinae_assign_base< (is_copy_constructible<_Tp>::value && is_copy_assignable<_Tp>::value),
                          (is_move_constructible<_Tp>::value && is_move_assignable<_Tp>::value) >;

template <class _Tp>
class optional;
# 569 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 3
template <class _Tp>
struct __is_std_optional : false_type {};
template <class _Tp>
struct __is_std_optional<optional<_Tp>> : true_type {};

template <class _Tp>
class optional
    : private __optional_move_assign_base<_Tp>,
      private __optional_sfinae_ctor_base_t<_Tp>,
      private __optional_sfinae_assign_base_t<_Tp> {
  using __base = __optional_move_assign_base<_Tp>;

public:
  using value_type = _Tp;

  using __trivially_relocatable = conditional_t<__libcpp_is_trivially_relocatable<_Tp>::value, optional, void>;

private:

  static_assert(!is_same_v<__remove_cvref_t<value_type>, in_place_t>,
                "instantiation of optional with in_place_t is ill-formed");
  static_assert(!is_same_v<__remove_cvref_t<value_type>, nullopt_t>,
                "instantiation of optional with nullopt_t is ill-formed");
  static_assert(!is_reference_v<value_type>, "instantiation of optional with a reference type is ill-formed");
  static_assert(is_destructible_v<value_type>, "instantiation of optional with a non-destructible type is ill-formed");
  static_assert(!is_array_v<value_type>, "instantiation of optional with an array type is ill-formed");


  struct _CheckOptionalArgsConstructor {
    template <class _Up>
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr bool __enable_implicit() {
      return is_constructible_v<_Tp, _Up&&> && is_convertible_v<_Up&&, _Tp>;
    }

    template <class _Up>
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr bool __enable_explicit() {
      return is_constructible_v<_Tp, _Up&&> && !is_convertible_v<_Up&&, _Tp>;
    }
  };
  template <class _Up>
  using _CheckOptionalArgsCtor =
      _If< _IsNotSame<__remove_cvref_t<_Up>, in_place_t>::value && _IsNotSame<__remove_cvref_t<_Up>, optional>::value &&
               (!is_same_v<remove_cv_t<_Tp>, bool> || !__is_std_optional<__remove_cvref_t<_Up>>::value),
           _CheckOptionalArgsConstructor,
           __check_tuple_constructor_fail >;
  template <class _QualUp>
  struct _CheckOptionalLikeConstructor {
    template <class _Up, class _Opt = optional<_Up>>
    using __check_constructible_from_opt =
        _Or< is_constructible<_Tp, _Opt&>,
             is_constructible<_Tp, _Opt const&>,
             is_constructible<_Tp, _Opt&&>,
             is_constructible<_Tp, _Opt const&&>,
             is_convertible<_Opt&, _Tp>,
             is_convertible<_Opt const&, _Tp>,
             is_convertible<_Opt&&, _Tp>,
             is_convertible<_Opt const&&, _Tp> >;
    template <class _Up, class _Opt = optional<_Up>>
    using __check_assignable_from_opt =
        _Or< is_assignable<_Tp&, _Opt&>,
             is_assignable<_Tp&, _Opt const&>,
             is_assignable<_Tp&, _Opt&&>,
             is_assignable<_Tp&, _Opt const&&> >;
    template <class _Up, class _QUp = _QualUp>
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr bool __enable_implicit() {
      return is_convertible<_QUp, _Tp>::value &&
             (is_same_v<remove_cv_t<_Tp>, bool> || !__check_constructible_from_opt<_Up>::value);
    }
    template <class _Up, class _QUp = _QualUp>
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr bool __enable_explicit() {
      return !is_convertible<_QUp, _Tp>::value &&
             (is_same_v<remove_cv_t<_Tp>, bool> || !__check_constructible_from_opt<_Up>::value);
    }
    template <class _Up, class _QUp = _QualUp>
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr bool __enable_assign() {


      return !__check_constructible_from_opt<_Up>::value && !__check_assignable_from_opt<_Up>::value;
    }
  };

  template <class _Up, class _QualUp>
  using _CheckOptionalLikeCtor =
      _If< _And< _IsNotSame<_Up, _Tp>, is_constructible<_Tp, _QualUp> >::value,
           _CheckOptionalLikeConstructor<_QualUp>,
           __check_tuple_constructor_fail >;
  template <class _Up, class _QualUp>
  using _CheckOptionalLikeAssign =
      _If< _And< _IsNotSame<_Up, _Tp>, is_constructible<_Tp, _QualUp>, is_assignable<_Tp&, _QualUp> >::value,
           _CheckOptionalLikeConstructor<_QualUp>,
           __check_tuple_constructor_fail >;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr optional() noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr optional(const optional&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr optional(optional&&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr optional(nullopt_t) noexcept {}

  template <
      class _InPlaceT,
      class... _Args,
      class = enable_if_t< _And< _IsSame<_InPlaceT, in_place_t>, is_constructible<value_type, _Args...> >::value > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit optional(_InPlaceT, _Args&&... __args)
      : __base(in_place, std::forward<_Args>(__args)...) {}

  template <class _Up,
            class... _Args,
            class = enable_if_t< is_constructible_v<value_type, initializer_list<_Up>&, _Args...>> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit optional(in_place_t, initializer_list<_Up> __il, _Args&&... __args)
      : __base(in_place, __il, std::forward<_Args>(__args)...) {}

  template <class _Up = value_type,
            enable_if_t< _CheckOptionalArgsCtor<_Up>::template __enable_implicit<_Up>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr optional(_Up&& __v) : __base(in_place, std::forward<_Up>(__v)) {}

  template <class _Up, enable_if_t< _CheckOptionalArgsCtor<_Up>::template __enable_explicit<_Up>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit optional(_Up&& __v) : __base(in_place, std::forward<_Up>(__v)) {}


  template <class _Up,
            enable_if_t< _CheckOptionalLikeCtor<_Up, _Up const&>::template __enable_implicit<_Up>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) optional(const optional<_Up>& __v) {
    this->__construct_from(__v);
  }
  template <class _Up,
            enable_if_t< _CheckOptionalLikeCtor<_Up, _Up const&>::template __enable_explicit<_Up>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit optional(const optional<_Up>& __v) {
    this->__construct_from(__v);
  }


  template <class _Up, enable_if_t< _CheckOptionalLikeCtor<_Up, _Up&&>::template __enable_implicit<_Up>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) optional(optional<_Up>&& __v) {
    this->__construct_from(std::move(__v));
  }
  template <class _Up, enable_if_t< _CheckOptionalLikeCtor<_Up, _Up&&>::template __enable_explicit<_Up>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit optional(optional<_Up>&& __v) {
    this->__construct_from(std::move(__v));
  }
# 718 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) optional& operator=(nullopt_t) noexcept {
    reset();
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr optional& operator=(const optional&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr optional& operator=(optional&&) = default;


  template <
      class _Up = value_type,
      class = enable_if_t< _And< _IsNotSame<__remove_cvref_t<_Up>, optional>,
                                     _Or< _IsNotSame<__remove_cvref_t<_Up>, value_type>, _Not<is_scalar<value_type>> >,
                                     is_constructible<value_type, _Up>,
                                     is_assignable<value_type&, _Up> >::value> >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) optional& operator=(_Up&& __v) {
    if (this->has_value())
      this->__get() = std::forward<_Up>(__v);
    else
      this->__construct(std::forward<_Up>(__v));
    return *this;
  }


  template <class _Up,
            enable_if_t< _CheckOptionalLikeAssign<_Up, _Up const&>::template __enable_assign<_Up>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) optional& operator=(const optional<_Up>& __v) {
    this->__assign_from(__v);
    return *this;
  }


  template <class _Up, enable_if_t< _CheckOptionalLikeCtor<_Up, _Up&&>::template __enable_assign<_Up>(), int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) optional& operator=(optional<_Up>&& __v) {
    this->__assign_from(std::move(__v));
    return *this;
  }

  template <class... _Args, class = enable_if_t< is_constructible_v<value_type, _Args...> > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp& emplace(_Args&&... __args) {
    reset();
    this->__construct(std::forward<_Args>(__args)...);
    return this->__get();
  }

  template <class _Up,
            class... _Args,
            class = enable_if_t< is_constructible_v<value_type, initializer_list<_Up>&, _Args...> > >
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp& emplace(initializer_list<_Up> __il, _Args&&... __args) {
    reset();
    this->__construct(__il, std::forward<_Args>(__args)...);
    return this->__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  swap(optional& __opt) noexcept(is_nothrow_move_constructible_v<value_type> && is_nothrow_swappable_v<value_type>) {
    if (this->has_value() == __opt.has_value()) {
      using std::swap;
      if (this->has_value())
        swap(this->__get(), __opt.__get());
    } else {
      if (this->has_value()) {
        __opt.__construct(std::move(this->__get()));
        reset();
      } else {
        this->__construct(std::move(__opt.__get()));
        __opt.reset();
      }
    }
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr add_pointer_t<value_type const> operator->() const noexcept {
    ((void)0);
    return std::addressof(this->__get());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr add_pointer_t<value_type> operator->() noexcept {
    ((void)0);
    return std::addressof(this->__get());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const value_type& operator*() const& noexcept {
    ((void)0);
    return this->__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr value_type& operator*() & noexcept {
    ((void)0);
    return this->__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr value_type&& operator*() && noexcept {
    ((void)0);
    return std::move(this->__get());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const value_type&& operator*() const&& noexcept {
    ((void)0);
    return std::move(this->__get());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit operator bool() const noexcept { return has_value(); }

  using __base::__get;
  using __base::has_value;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr value_type const& value() const& {
    if (!this->has_value())
      __throw_bad_optional_access();
    return this->__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr value_type& value() & {
    if (!this->has_value())
      __throw_bad_optional_access();
    return this->__get();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr value_type&& value() && {
    if (!this->has_value())
      __throw_bad_optional_access();
    return std::move(this->__get());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr value_type const&& value() const&& {
    if (!this->has_value())
      __throw_bad_optional_access();
    return std::move(this->__get());
  }

  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr value_type value_or(_Up&& __v) const& {
    static_assert(is_copy_constructible_v<value_type>, "optional<T>::value_or: T must be copy constructible");
    static_assert(is_convertible_v<_Up, value_type>, "optional<T>::value_or: U must be convertible to T");
    return this->has_value() ? this->__get() : static_cast<value_type>(std::forward<_Up>(__v));
  }

  template <class _Up>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr value_type value_or(_Up&& __v) && {
    static_assert(is_move_constructible_v<value_type>, "optional<T>::value_or: T must be move constructible");
    static_assert(is_convertible_v<_Up, value_type>, "optional<T>::value_or: U must be convertible to T");
    return this->has_value() ? std::move(this->__get()) : static_cast<value_type>(std::forward<_Up>(__v));
  }
# 974 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 3
  using __base::reset;
};


template <class _Tp>
optional(_Tp) -> optional<_Tp>;



template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() == std::declval<const _Up&>()), bool>,
    bool >
operator==(const optional<_Tp>& __x, const optional<_Up>& __y) {
  if (static_cast<bool>(__x) != static_cast<bool>(__y))
    return false;
  if (!static_cast<bool>(__x))
    return true;
  return *__x == *__y;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() != std::declval<const _Up&>()), bool>,
    bool >
operator!=(const optional<_Tp>& __x, const optional<_Up>& __y) {
  if (static_cast<bool>(__x) != static_cast<bool>(__y))
    return true;
  if (!static_cast<bool>(__x))
    return false;
  return *__x != *__y;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() < std::declval<const _Up&>()), bool>,
    bool >
operator<(const optional<_Tp>& __x, const optional<_Up>& __y) {
  if (!static_cast<bool>(__y))
    return false;
  if (!static_cast<bool>(__x))
    return true;
  return *__x < *__y;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() > std::declval<const _Up&>()), bool>,
    bool >
operator>(const optional<_Tp>& __x, const optional<_Up>& __y) {
  if (!static_cast<bool>(__x))
    return false;
  if (!static_cast<bool>(__y))
    return true;
  return *__x > *__y;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() <= std::declval<const _Up&>()), bool>,
    bool >
operator<=(const optional<_Tp>& __x, const optional<_Up>& __y) {
  if (!static_cast<bool>(__x))
    return true;
  if (!static_cast<bool>(__y))
    return false;
  return *__x <= *__y;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() >= std::declval<const _Up&>()), bool>,
    bool >
operator>=(const optional<_Tp>& __x, const optional<_Up>& __y) {
  if (!static_cast<bool>(__y))
    return true;
  if (!static_cast<bool>(__x))
    return false;
  return *__x >= *__y;
}
# 1068 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 3
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator==(const optional<_Tp>& __x, nullopt_t) noexcept {
  return !static_cast<bool>(__x);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator==(nullopt_t, const optional<_Tp>& __x) noexcept {
  return !static_cast<bool>(__x);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator!=(const optional<_Tp>& __x, nullopt_t) noexcept {
  return static_cast<bool>(__x);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator!=(nullopt_t, const optional<_Tp>& __x) noexcept {
  return static_cast<bool>(__x);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator<(const optional<_Tp>&, nullopt_t) noexcept {
  return false;
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator<(nullopt_t, const optional<_Tp>& __x) noexcept {
  return static_cast<bool>(__x);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator<=(const optional<_Tp>& __x, nullopt_t) noexcept {
  return !static_cast<bool>(__x);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator<=(nullopt_t, const optional<_Tp>&) noexcept {
  return true;
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator>(const optional<_Tp>& __x, nullopt_t) noexcept {
  return static_cast<bool>(__x);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator>(nullopt_t, const optional<_Tp>&) noexcept {
  return false;
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator>=(const optional<_Tp>&, nullopt_t) noexcept {
  return true;
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator>=(nullopt_t, const optional<_Tp>& __x) noexcept {
  return !static_cast<bool>(__x);
}
# 1140 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 3
template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() == std::declval<const _Up&>()), bool>,
    bool >
operator==(const optional<_Tp>& __x, const _Up& __v) {
  return static_cast<bool>(__x) ? *__x == __v : false;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() == std::declval<const _Up&>()), bool>,
    bool >
operator==(const _Tp& __v, const optional<_Up>& __x) {
  return static_cast<bool>(__x) ? __v == *__x : false;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() != std::declval<const _Up&>()), bool>,
    bool >
operator!=(const optional<_Tp>& __x, const _Up& __v) {
  return static_cast<bool>(__x) ? *__x != __v : true;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() != std::declval<const _Up&>()), bool>,
    bool >
operator!=(const _Tp& __v, const optional<_Up>& __x) {
  return static_cast<bool>(__x) ? __v != *__x : true;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() < std::declval<const _Up&>()), bool>,
    bool >
operator<(const optional<_Tp>& __x, const _Up& __v) {
  return static_cast<bool>(__x) ? *__x < __v : true;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() < std::declval<const _Up&>()), bool>,
    bool >
operator<(const _Tp& __v, const optional<_Up>& __x) {
  return static_cast<bool>(__x) ? __v < *__x : false;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() <= std::declval<const _Up&>()), bool>,
    bool >
operator<=(const optional<_Tp>& __x, const _Up& __v) {
  return static_cast<bool>(__x) ? *__x <= __v : true;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() <= std::declval<const _Up&>()), bool>,
    bool >
operator<=(const _Tp& __v, const optional<_Up>& __x) {
  return static_cast<bool>(__x) ? __v <= *__x : false;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() > std::declval<const _Up&>()), bool>,
    bool >
operator>(const optional<_Tp>& __x, const _Up& __v) {
  return static_cast<bool>(__x) ? *__x > __v : false;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() > std::declval<const _Up&>()), bool>,
    bool >
operator>(const _Tp& __v, const optional<_Up>& __x) {
  return static_cast<bool>(__x) ? __v > *__x : true;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() >= std::declval<const _Up&>()), bool>,
    bool >
operator>=(const optional<_Tp>& __x, const _Up& __v) {
  return static_cast<bool>(__x) ? *__x >= __v : false;
}

template <class _Tp, class _Up>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr enable_if_t<
    is_convertible_v<decltype(std::declval<const _Tp&>() >= std::declval<const _Up&>()), bool>,
    bool >
operator>=(const _Tp& __v, const optional<_Up>& __x) {
  return static_cast<bool>(__x) ? __v >= *__x : true;
}
# 1247 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 3
template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                              enable_if_t< is_move_constructible_v<_Tp> && is_swappable_v<_Tp>, void >
swap(optional<_Tp>& __x, optional<_Tp>& __y) noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr optional<decay_t<_Tp>> make_optional(_Tp&& __v) {
  return optional<decay_t<_Tp>>(std::forward<_Tp>(__v));
}

template <class _Tp, class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr optional<_Tp> make_optional(_Args&&... __args) {
  return optional<_Tp>(in_place, std::forward<_Args>(__args)...);
}

template <class _Tp, class _Up, class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr optional<_Tp> make_optional(initializer_list<_Up> __il, _Args&&... __args) {
  return optional<_Tp>(in_place, __il, std::forward<_Args>(__args)...);
}

template <class _Tp>
struct hash< __enable_hash_helper<optional<_Tp>, remove_const_t<_Tp>> > {

  __attribute__((__deprecated__)) typedef optional<_Tp> argument_type;
  __attribute__((__deprecated__)) typedef size_t result_type;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(const optional<_Tp>& __opt) const {
    return static_cast<bool>(__opt) ? hash<remove_const_t<_Tp>>()(*__opt) : 0;
  }
};

}}
# 1281 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 3
#pragma clang diagnostic pop






# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/atomic" 1 3
# 596 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/atomic" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/aliases.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/aliases.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_base.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_base.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/contention_t.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/contention_t.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/cxx_atomic_impl.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/cxx_atomic_impl.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/to_gcc_order.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/to_gcc_order.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/to_gcc_order.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/to_gcc_order.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/to_gcc_order.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/to_gcc_order.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/to_gcc_order.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/to_gcc_order.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {




__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr int __to_gcc_order(memory_order __order) {

  return __order == memory_order_relaxed
           ? 0
           : (__order == memory_order_acquire
                  ? 2
                  : (__order == memory_order_release
                         ? 3
                         : (__order == memory_order_seq_cst
                                ? 5
                                : (__order == memory_order_acq_rel ? 4 : 1))));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr int __to_gcc_failure_order(memory_order __order) {

  return __order == memory_order_relaxed
           ? 0
           : (__order == memory_order_acquire
                  ? 2
                  : (__order == memory_order_release
                         ? 0
                         : (__order == memory_order_seq_cst
                                ? 5
                                : (__order == memory_order_acq_rel ? 2 : 1))));
}



}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/to_gcc_order.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/cxx_atomic_impl.h" 2 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/cxx_atomic_impl.h" 3


#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/cxx_atomic_impl.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/cxx_atomic_impl.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/cxx_atomic_impl.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/cxx_atomic_impl.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/cxx_atomic_impl.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/cxx_atomic_impl.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 264 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/cxx_atomic_impl.h" 3
template <typename _Tp>
struct __cxx_atomic_base_impl {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))

  __cxx_atomic_base_impl() noexcept = default;




  constexpr explicit __cxx_atomic_base_impl(_Tp __value) noexcept : __a_value(__value) {}
  __extension__ _Atomic(_Tp) __a_value;
};



__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline void __cxx_atomic_thread_fence(memory_order __order) noexcept {
  __c11_atomic_thread_fence(static_cast<__memory_order_underlying_t>(__order));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline void __cxx_atomic_signal_fence(memory_order __order) noexcept {
  __c11_atomic_signal_fence(static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __cxx_atomic_init(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __val) noexcept {
  __c11_atomic_init(std::addressof(__a->__a_value), __val);
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __cxx_atomic_init(__cxx_atomic_base_impl<_Tp>* __a, _Tp __val) noexcept {
  __c11_atomic_init(std::addressof(__a->__a_value), __val);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__cxx_atomic_store(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __val, memory_order __order) noexcept {
  __c11_atomic_store(std::addressof(__a->__a_value), __val, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__cxx_atomic_store(__cxx_atomic_base_impl<_Tp>* __a, _Tp __val, memory_order __order) noexcept {
  __c11_atomic_store(std::addressof(__a->__a_value), __val, static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
__cxx_atomic_load(__cxx_atomic_base_impl<_Tp> const volatile* __a, memory_order __order) noexcept {
  using __ptr_type = __remove_const_t<decltype(__a->__a_value)>*;
  return __c11_atomic_load(
      const_cast<__ptr_type>(std::addressof(__a->__a_value)), static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp __cxx_atomic_load(__cxx_atomic_base_impl<_Tp> const* __a, memory_order __order) noexcept {
  using __ptr_type = __remove_const_t<decltype(__a->__a_value)>*;
  return __c11_atomic_load(
      const_cast<__ptr_type>(std::addressof(__a->__a_value)), static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__cxx_atomic_load_inplace(__cxx_atomic_base_impl<_Tp> const volatile* __a, _Tp* __dst, memory_order __order) noexcept {
  using __ptr_type = __remove_const_t<decltype(__a->__a_value)>*;
  *__dst = __c11_atomic_load(
      const_cast<__ptr_type>(std::addressof(__a->__a_value)), static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__cxx_atomic_load_inplace(__cxx_atomic_base_impl<_Tp> const* __a, _Tp* __dst, memory_order __order) noexcept {
  using __ptr_type = __remove_const_t<decltype(__a->__a_value)>*;
  *__dst = __c11_atomic_load(
      const_cast<__ptr_type>(std::addressof(__a->__a_value)), static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
__cxx_atomic_exchange(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __value, memory_order __order) noexcept {
  return __c11_atomic_exchange(
      std::addressof(__a->__a_value), __value, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
__cxx_atomic_exchange(__cxx_atomic_base_impl<_Tp>* __a, _Tp __value, memory_order __order) noexcept {
  return __c11_atomic_exchange(
      std::addressof(__a->__a_value), __value, static_cast<__memory_order_underlying_t>(__order));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr memory_order __to_failure_order(memory_order __order) {

  return __order == memory_order_release
           ? memory_order_relaxed
           : (__order == memory_order_acq_rel ? memory_order_acquire : __order);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __cxx_atomic_compare_exchange_strong(
    __cxx_atomic_base_impl<_Tp> volatile* __a,
    _Tp* __expected,
    _Tp __value,
    memory_order __success,
    memory_order __failure) noexcept {
  return __c11_atomic_compare_exchange_strong(
      std::addressof(__a->__a_value),
      __expected,
      __value,
      static_cast<__memory_order_underlying_t>(__success),
      static_cast<__memory_order_underlying_t>(__to_failure_order(__failure)));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __cxx_atomic_compare_exchange_strong(
    __cxx_atomic_base_impl<_Tp>* __a, _Tp* __expected, _Tp __value, memory_order __success, memory_order __failure)
    noexcept {
  return __c11_atomic_compare_exchange_strong(
      std::addressof(__a->__a_value),
      __expected,
      __value,
      static_cast<__memory_order_underlying_t>(__success),
      static_cast<__memory_order_underlying_t>(__to_failure_order(__failure)));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __cxx_atomic_compare_exchange_weak(
    __cxx_atomic_base_impl<_Tp> volatile* __a,
    _Tp* __expected,
    _Tp __value,
    memory_order __success,
    memory_order __failure) noexcept {
  return __c11_atomic_compare_exchange_weak(
      std::addressof(__a->__a_value),
      __expected,
      __value,
      static_cast<__memory_order_underlying_t>(__success),
      static_cast<__memory_order_underlying_t>(__to_failure_order(__failure)));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __cxx_atomic_compare_exchange_weak(
    __cxx_atomic_base_impl<_Tp>* __a, _Tp* __expected, _Tp __value, memory_order __success, memory_order __failure)
    noexcept {
  return __c11_atomic_compare_exchange_weak(
      std::addressof(__a->__a_value),
      __expected,
      __value,
      static_cast<__memory_order_underlying_t>(__success),
      static_cast<__memory_order_underlying_t>(__to_failure_order(__failure)));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
__cxx_atomic_fetch_add(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __delta, memory_order __order) noexcept {
  return __c11_atomic_fetch_add(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
__cxx_atomic_fetch_add(__cxx_atomic_base_impl<_Tp>* __a, _Tp __delta, memory_order __order) noexcept {
  return __c11_atomic_fetch_add(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp*
__cxx_atomic_fetch_add(__cxx_atomic_base_impl<_Tp*> volatile* __a, ptrdiff_t __delta, memory_order __order) noexcept {
  return __c11_atomic_fetch_add(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp*
__cxx_atomic_fetch_add(__cxx_atomic_base_impl<_Tp*>* __a, ptrdiff_t __delta, memory_order __order) noexcept {
  return __c11_atomic_fetch_add(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
__cxx_atomic_fetch_sub(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __delta, memory_order __order) noexcept {
  return __c11_atomic_fetch_sub(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
__cxx_atomic_fetch_sub(__cxx_atomic_base_impl<_Tp>* __a, _Tp __delta, memory_order __order) noexcept {
  return __c11_atomic_fetch_sub(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp*
__cxx_atomic_fetch_sub(__cxx_atomic_base_impl<_Tp*> volatile* __a, ptrdiff_t __delta, memory_order __order) noexcept {
  return __c11_atomic_fetch_sub(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp*
__cxx_atomic_fetch_sub(__cxx_atomic_base_impl<_Tp*>* __a, ptrdiff_t __delta, memory_order __order) noexcept {
  return __c11_atomic_fetch_sub(
      std::addressof(__a->__a_value), __delta, static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
__cxx_atomic_fetch_and(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __pattern, memory_order __order) noexcept {
  return __c11_atomic_fetch_and(
      std::addressof(__a->__a_value), __pattern, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
__cxx_atomic_fetch_and(__cxx_atomic_base_impl<_Tp>* __a, _Tp __pattern, memory_order __order) noexcept {
  return __c11_atomic_fetch_and(
      std::addressof(__a->__a_value), __pattern, static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
__cxx_atomic_fetch_or(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __pattern, memory_order __order) noexcept {
  return __c11_atomic_fetch_or(
      std::addressof(__a->__a_value), __pattern, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
__cxx_atomic_fetch_or(__cxx_atomic_base_impl<_Tp>* __a, _Tp __pattern, memory_order __order) noexcept {
  return __c11_atomic_fetch_or(
      std::addressof(__a->__a_value), __pattern, static_cast<__memory_order_underlying_t>(__order));
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
__cxx_atomic_fetch_xor(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __pattern, memory_order __order) noexcept {
  return __c11_atomic_fetch_xor(
      std::addressof(__a->__a_value), __pattern, static_cast<__memory_order_underlying_t>(__order));
}
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
__cxx_atomic_fetch_xor(__cxx_atomic_base_impl<_Tp>* __a, _Tp __pattern, memory_order __order) noexcept {
  return __c11_atomic_fetch_xor(
      std::addressof(__a->__a_value), __pattern, static_cast<__memory_order_underlying_t>(__order));
}



template <typename _Tp, typename _Base = __cxx_atomic_base_impl<_Tp> >
struct __cxx_atomic_impl : public _Base {
  static_assert(is_trivially_copyable<_Tp>::value, "std::atomic<T> requires that 'T' be a trivially copyable type");

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __cxx_atomic_impl() noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __cxx_atomic_impl(_Tp __value) noexcept : _Base(__value) {}
};

}}
# 508 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/cxx_atomic_impl.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/contention_t.h" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/contention_t.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/contention_t.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/contention_t.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/contention_t.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/contention_t.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/contention_t.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/contention_t.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {




using __cxx_contention_t = int64_t;


using __cxx_atomic_contention_t = __cxx_atomic_impl<__cxx_contention_t>;

}}
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/contention_t.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/duration.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/duration.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ratio" 1 3
# 92 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ratio" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 96 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ratio" 2 3

#pragma clang diagnostic push
# 97 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ratio" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 97 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ratio" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 97 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ratio" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 97 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ratio" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 97 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ratio" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 97 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ratio" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <intmax_t _Xp, intmax_t _Yp>
struct __static_gcd {
  static const intmax_t value = __static_gcd<_Yp, _Xp % _Yp>::value;
};

template <intmax_t _Xp>
struct __static_gcd<_Xp, 0> {
  static const intmax_t value = _Xp;
};

template <>
struct __static_gcd<0, 0> {
  static const intmax_t value = 1;
};



template <intmax_t _Xp, intmax_t _Yp>
struct __static_lcm {
  static const intmax_t value = _Xp / __static_gcd<_Xp, _Yp>::value * _Yp;
};

template <intmax_t _Xp>
struct __static_abs {
  static const intmax_t value = _Xp < 0 ? -_Xp : _Xp;
};

template <intmax_t _Xp>
struct __static_sign {
  static const intmax_t value = _Xp == 0 ? 0 : (_Xp < 0 ? -1 : 1);
};

template <intmax_t _Xp, intmax_t _Yp, intmax_t = __static_sign<_Yp>::value>
class __ll_add;

template <intmax_t _Xp, intmax_t _Yp>
class __ll_add<_Xp, _Yp, 1> {
  static const intmax_t min = (1LL << (sizeof(intmax_t) * 8 - 1)) + 1;
  static const intmax_t max = -min;

  static_assert(_Xp <= max - _Yp, "overflow in __ll_add");

public:
  static const intmax_t value = _Xp + _Yp;
};

template <intmax_t _Xp, intmax_t _Yp>
class __ll_add<_Xp, _Yp, 0> {
public:
  static const intmax_t value = _Xp;
};

template <intmax_t _Xp, intmax_t _Yp>
class __ll_add<_Xp, _Yp, -1> {
  static const intmax_t min = (1LL << (sizeof(intmax_t) * 8 - 1)) + 1;
  static const intmax_t max = -min;

  static_assert(min - _Yp <= _Xp, "overflow in __ll_add");

public:
  static const intmax_t value = _Xp + _Yp;
};

template <intmax_t _Xp, intmax_t _Yp, intmax_t = __static_sign<_Yp>::value>
class __ll_sub;

template <intmax_t _Xp, intmax_t _Yp>
class __ll_sub<_Xp, _Yp, 1> {
  static const intmax_t min = (1LL << (sizeof(intmax_t) * 8 - 1)) + 1;
  static const intmax_t max = -min;

  static_assert(min + _Yp <= _Xp, "overflow in __ll_sub");

public:
  static const intmax_t value = _Xp - _Yp;
};

template <intmax_t _Xp, intmax_t _Yp>
class __ll_sub<_Xp, _Yp, 0> {
public:
  static const intmax_t value = _Xp;
};

template <intmax_t _Xp, intmax_t _Yp>
class __ll_sub<_Xp, _Yp, -1> {
  static const intmax_t min = (1LL << (sizeof(intmax_t) * 8 - 1)) + 1;
  static const intmax_t max = -min;

  static_assert(_Xp <= max + _Yp, "overflow in __ll_sub");

public:
  static const intmax_t value = _Xp - _Yp;
};

template <intmax_t _Xp, intmax_t _Yp>
class __ll_mul {
  static const intmax_t nan = (1LL << (sizeof(intmax_t) * 8 - 1));
  static const intmax_t min = nan + 1;
  static const intmax_t max = -min;
  static const intmax_t __a_x = __static_abs<_Xp>::value;
  static const intmax_t __a_y = __static_abs<_Yp>::value;

  static_assert(_Xp != nan && _Yp != nan && __a_x <= max / __a_y, "overflow in __ll_mul");

public:
  static const intmax_t value = _Xp * _Yp;
};

template <intmax_t _Yp>
class __ll_mul<0, _Yp> {
public:
  static const intmax_t value = 0;
};

template <intmax_t _Xp>
class __ll_mul<_Xp, 0> {
public:
  static const intmax_t value = 0;
};

template <>
class __ll_mul<0, 0> {
public:
  static const intmax_t value = 0;
};


template <intmax_t _Xp, intmax_t _Yp>
class __ll_div {
  static const intmax_t nan = (1LL << (sizeof(intmax_t) * 8 - 1));
  static const intmax_t min = nan + 1;
  static const intmax_t max = -min;

  static_assert(_Xp != nan && _Yp != nan && _Yp != 0, "overflow in __ll_div");

public:
  static const intmax_t value = _Xp / _Yp;
};

template <intmax_t _Num, intmax_t _Den = 1>
class ratio {
  static_assert(__static_abs<_Num>::value >= 0, "ratio numerator is out of range");
  static_assert(_Den != 0, "ratio divide by 0");
  static_assert(__static_abs<_Den>::value > 0, "ratio denominator is out of range");
  static constexpr const intmax_t __na = __static_abs<_Num>::value;
  static constexpr const intmax_t __da = __static_abs<_Den>::value;
  static constexpr const intmax_t __s = __static_sign<_Num>::value * __static_sign<_Den>::value;
  static constexpr const intmax_t __gcd = __static_gcd<__na, __da>::value;

public:
  static constexpr const intmax_t num = __s * __na / __gcd;
  static constexpr const intmax_t den = __da / __gcd;

  typedef ratio<num, den> type;
};

template <intmax_t _Num, intmax_t _Den>
constexpr const intmax_t ratio<_Num, _Den>::num;

template <intmax_t _Num, intmax_t _Den>
constexpr const intmax_t ratio<_Num, _Den>::den;

template <class _Tp>
struct __is_ratio : false_type {};
template <intmax_t _Num, intmax_t _Den>
struct __is_ratio<ratio<_Num, _Den> > : true_type {};

typedef ratio<1LL, 1000000000000000000LL> atto;
typedef ratio<1LL, 1000000000000000LL> femto;
typedef ratio<1LL, 1000000000000LL> pico;
typedef ratio<1LL, 1000000000LL> nano;
typedef ratio<1LL, 1000000LL> micro;
typedef ratio<1LL, 1000LL> milli;
typedef ratio<1LL, 100LL> centi;
typedef ratio<1LL, 10LL> deci;
typedef ratio< 10LL, 1LL> deca;
typedef ratio< 100LL, 1LL> hecto;
typedef ratio< 1000LL, 1LL> kilo;
typedef ratio< 1000000LL, 1LL> mega;
typedef ratio< 1000000000LL, 1LL> giga;
typedef ratio< 1000000000000LL, 1LL> tera;
typedef ratio< 1000000000000000LL, 1LL> peta;
typedef ratio<1000000000000000000LL, 1LL> exa;

template <class _R1, class _R2>
struct __ratio_multiply {
private:
  static const intmax_t __gcd_n1_d2 = __static_gcd<_R1::num, _R2::den>::value;
  static const intmax_t __gcd_d1_n2 = __static_gcd<_R1::den, _R2::num>::value;

  static_assert(__is_ratio<_R1>::value, "[ratio.general]/2 requires R1 to be a specialisation of the ratio template");
  static_assert(__is_ratio<_R2>::value, "[ratio.general]/2 requires R2 to be a specialisation of the ratio template");

public:
  typedef typename ratio< __ll_mul<_R1::num / __gcd_n1_d2, _R2::num / __gcd_d1_n2>::value,
                          __ll_mul<_R2::den / __gcd_n1_d2, _R1::den / __gcd_d1_n2>::value >::type type;
};



template <class _R1, class _R2>
using ratio_multiply = typename __ratio_multiply<_R1, _R2>::type;
# 311 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ratio" 3
template <class _R1, class _R2>
struct __ratio_divide {
private:
  static const intmax_t __gcd_n1_n2 = __static_gcd<_R1::num, _R2::num>::value;
  static const intmax_t __gcd_d1_d2 = __static_gcd<_R1::den, _R2::den>::value;

  static_assert(__is_ratio<_R1>::value, "[ratio.general]/2 requires R1 to be a specialisation of the ratio template");
  static_assert(__is_ratio<_R2>::value, "[ratio.general]/2 requires R2 to be a specialisation of the ratio template");

public:
  typedef typename ratio< __ll_mul<_R1::num / __gcd_n1_n2, _R2::den / __gcd_d1_d2>::value,
                          __ll_mul<_R2::num / __gcd_n1_n2, _R1::den / __gcd_d1_d2>::value >::type type;
};



template <class _R1, class _R2>
using ratio_divide = typename __ratio_divide<_R1, _R2>::type;
# 337 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ratio" 3
template <class _R1, class _R2>
struct __ratio_add {
private:
  static const intmax_t __gcd_n1_n2 = __static_gcd<_R1::num, _R2::num>::value;
  static const intmax_t __gcd_d1_d2 = __static_gcd<_R1::den, _R2::den>::value;

  static_assert(__is_ratio<_R1>::value, "[ratio.general]/2 requires R1 to be a specialisation of the ratio template");
  static_assert(__is_ratio<_R2>::value, "[ratio.general]/2 requires R2 to be a specialisation of the ratio template");

public:
  typedef typename ratio_multiply<
      ratio<__gcd_n1_n2, _R1::den / __gcd_d1_d2>,
      ratio< __ll_add< __ll_mul<_R1::num / __gcd_n1_n2, _R2::den / __gcd_d1_d2>::value,
                       __ll_mul<_R2::num / __gcd_n1_n2, _R1::den / __gcd_d1_d2>::value >::value,
             _R2::den > >::type type;
};



template <class _R1, class _R2>
using ratio_add = typename __ratio_add<_R1, _R2>::type;
# 366 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ratio" 3
template <class _R1, class _R2>
struct __ratio_subtract {
private:
  static const intmax_t __gcd_n1_n2 = __static_gcd<_R1::num, _R2::num>::value;
  static const intmax_t __gcd_d1_d2 = __static_gcd<_R1::den, _R2::den>::value;

  static_assert(__is_ratio<_R1>::value, "[ratio.general]/2 requires R1 to be a specialisation of the ratio template");
  static_assert(__is_ratio<_R2>::value, "[ratio.general]/2 requires R2 to be a specialisation of the ratio template");

public:
  typedef typename ratio_multiply<
      ratio<__gcd_n1_n2, _R1::den / __gcd_d1_d2>,
      ratio< __ll_sub< __ll_mul<_R1::num / __gcd_n1_n2, _R2::den / __gcd_d1_d2>::value,
                       __ll_mul<_R2::num / __gcd_n1_n2, _R1::den / __gcd_d1_d2>::value >::value,
             _R2::den > >::type type;
};



template <class _R1, class _R2>
using ratio_subtract = typename __ratio_subtract<_R1, _R2>::type;
# 397 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ratio" 3
template <class _R1, class _R2>
struct ratio_equal : _BoolConstant<(_R1::num == _R2::num && _R1::den == _R2::den)> {
  static_assert(__is_ratio<_R1>::value, "[ratio.general]/2 requires R1 to be a specialisation of the ratio template");
  static_assert(__is_ratio<_R2>::value, "[ratio.general]/2 requires R2 to be a specialisation of the ratio template");
};

template <class _R1, class _R2>
struct ratio_not_equal : _BoolConstant<!ratio_equal<_R1, _R2>::value> {
  static_assert(__is_ratio<_R1>::value, "[ratio.general]/2 requires R1 to be a specialisation of the ratio template");
  static_assert(__is_ratio<_R2>::value, "[ratio.general]/2 requires R2 to be a specialisation of the ratio template");
};



template <class _R1,
          class _R2,
          bool _Odd = false,
          intmax_t _Q1 = _R1::num / _R1::den,
          intmax_t _M1 = _R1::num % _R1::den,
          intmax_t _Q2 = _R2::num / _R2::den,
          intmax_t _M2 = _R2::num % _R2::den>
struct __ratio_less1 {
  static const bool value = _Odd ? _Q2 < _Q1 : _Q1 < _Q2;
};

template <class _R1, class _R2, bool _Odd, intmax_t _Qp>
struct __ratio_less1<_R1, _R2, _Odd, _Qp, 0, _Qp, 0> {
  static const bool value = false;
};

template <class _R1, class _R2, bool _Odd, intmax_t _Qp, intmax_t _M2>
struct __ratio_less1<_R1, _R2, _Odd, _Qp, 0, _Qp, _M2> {
  static const bool value = !_Odd;
};

template <class _R1, class _R2, bool _Odd, intmax_t _Qp, intmax_t _M1>
struct __ratio_less1<_R1, _R2, _Odd, _Qp, _M1, _Qp, 0> {
  static const bool value = _Odd;
};

template <class _R1, class _R2, bool _Odd, intmax_t _Qp, intmax_t _M1, intmax_t _M2>
struct __ratio_less1<_R1, _R2, _Odd, _Qp, _M1, _Qp, _M2> {
  static const bool value = __ratio_less1<ratio<_R1::den, _M1>, ratio<_R2::den, _M2>, !_Odd>::value;
};

template <class _R1,
          class _R2,
          intmax_t _S1 = __static_sign<_R1::num>::value,
          intmax_t _S2 = __static_sign<_R2::num>::value>
struct __ratio_less {
  static const bool value = _S1 < _S2;
};

template <class _R1, class _R2>
struct __ratio_less<_R1, _R2, 1LL, 1LL> {
  static const bool value = __ratio_less1<_R1, _R2>::value;
};

template <class _R1, class _R2>
struct __ratio_less<_R1, _R2, -1LL, -1LL> {
  static const bool value = __ratio_less1<ratio<-_R2::num, _R2::den>, ratio<-_R1::num, _R1::den> >::value;
};

template <class _R1, class _R2>
struct ratio_less : _BoolConstant<__ratio_less<_R1, _R2>::value> {
  static_assert(__is_ratio<_R1>::value, "[ratio.general]/2 requires R1 to be a specialisation of the ratio template");
  static_assert(__is_ratio<_R2>::value, "[ratio.general]/2 requires R2 to be a specialisation of the ratio template");
};

template <class _R1, class _R2>
struct ratio_less_equal : _BoolConstant<!ratio_less<_R2, _R1>::value> {
  static_assert(__is_ratio<_R1>::value, "[ratio.general]/2 requires R1 to be a specialisation of the ratio template");
  static_assert(__is_ratio<_R2>::value, "[ratio.general]/2 requires R2 to be a specialisation of the ratio template");
};

template <class _R1, class _R2>
struct ratio_greater : _BoolConstant<ratio_less<_R2, _R1>::value> {
  static_assert(__is_ratio<_R1>::value, "[ratio.general]/2 requires R1 to be a specialisation of the ratio template");
  static_assert(__is_ratio<_R2>::value, "[ratio.general]/2 requires R2 to be a specialisation of the ratio template");
};

template <class _R1, class _R2>
struct ratio_greater_equal : _BoolConstant<!ratio_less<_R1, _R2>::value> {
  static_assert(__is_ratio<_R1>::value, "[ratio.general]/2 requires R1 to be a specialisation of the ratio template");
  static_assert(__is_ratio<_R2>::value, "[ratio.general]/2 requires R2 to be a specialisation of the ratio template");
};

template <class _R1, class _R2>
struct __ratio_gcd {
  typedef ratio<__static_gcd<_R1::num, _R2::num>::value, __static_lcm<_R1::den, _R2::den>::value> type;
};


template <class _R1, class _R2>
inline constexpr bool ratio_equal_v = ratio_equal<_R1, _R2>::value;

template <class _R1, class _R2>
inline constexpr bool ratio_not_equal_v = ratio_not_equal<_R1, _R2>::value;

template <class _R1, class _R2>
inline constexpr bool ratio_less_v = ratio_less<_R1, _R2>::value;

template <class _R1, class _R2>
inline constexpr bool ratio_less_equal_v = ratio_less_equal<_R1, _R2>::value;

template <class _R1, class _R2>
inline constexpr bool ratio_greater_v = ratio_greater<_R1, _R2>::value;

template <class _R1, class _R2>
inline constexpr bool ratio_greater_equal_v = ratio_greater_equal<_R1, _R2>::value;


}}
# 509 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ratio" 3
#pragma clang diagnostic pop
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/duration.h" 2 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/duration.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/duration.h" 2 3

#pragma clang diagnostic push
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/duration.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/duration.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/duration.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/duration.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/duration.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/duration.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace chrono {

template <class _Rep, class _Period = ratio<1> >
class duration;

template <class _Tp>
struct __is_duration : false_type {};

template <class _Rep, class _Period>
struct __is_duration<duration<_Rep, _Period> > : true_type {};

template <class _Rep, class _Period>
struct __is_duration<const duration<_Rep, _Period> > : true_type {};

template <class _Rep, class _Period>
struct __is_duration<volatile duration<_Rep, _Period> > : true_type {};

template <class _Rep, class _Period>
struct __is_duration<const volatile duration<_Rep, _Period> > : true_type {};

}

template <class _Rep1, class _Period1, class _Rep2, class _Period2>
struct common_type<chrono::duration<_Rep1, _Period1>, chrono::duration<_Rep2, _Period2> > {
  typedef chrono::duration<typename common_type<_Rep1, _Rep2>::type, typename __ratio_gcd<_Period1, _Period2>::type>
      type;
};

namespace chrono {



template <class _FromDuration,
          class _ToDuration,
          class _Period = typename ratio_divide<typename _FromDuration::period, typename _ToDuration::period>::type,
          bool = _Period::num == 1,
          bool = _Period::den == 1>
struct __duration_cast;

template <class _FromDuration, class _ToDuration, class _Period>
struct __duration_cast<_FromDuration, _ToDuration, _Period, true, true> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ToDuration operator()(const _FromDuration& __fd) const {
    return _ToDuration(static_cast<typename _ToDuration::rep>(__fd.count()));
  }
};

template <class _FromDuration, class _ToDuration, class _Period>
struct __duration_cast<_FromDuration, _ToDuration, _Period, true, false> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ToDuration operator()(const _FromDuration& __fd) const {
    typedef typename common_type<typename _ToDuration::rep, typename _FromDuration::rep, intmax_t>::type _Ct;
    return _ToDuration(
        static_cast<typename _ToDuration::rep>(static_cast<_Ct>(__fd.count()) / static_cast<_Ct>(_Period::den)));
  }
};

template <class _FromDuration, class _ToDuration, class _Period>
struct __duration_cast<_FromDuration, _ToDuration, _Period, false, true> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ToDuration operator()(const _FromDuration& __fd) const {
    typedef typename common_type<typename _ToDuration::rep, typename _FromDuration::rep, intmax_t>::type _Ct;
    return _ToDuration(
        static_cast<typename _ToDuration::rep>(static_cast<_Ct>(__fd.count()) * static_cast<_Ct>(_Period::num)));
  }
};

template <class _FromDuration, class _ToDuration, class _Period>
struct __duration_cast<_FromDuration, _ToDuration, _Period, false, false> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ToDuration operator()(const _FromDuration& __fd) const {
    typedef typename common_type<typename _ToDuration::rep, typename _FromDuration::rep, intmax_t>::type _Ct;
    return _ToDuration(static_cast<typename _ToDuration::rep>(
        static_cast<_Ct>(__fd.count()) * static_cast<_Ct>(_Period::num) / static_cast<_Ct>(_Period::den)));
  }
};

template <class _ToDuration, class _Rep, class _Period, __enable_if_t<__is_duration<_ToDuration>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ToDuration duration_cast(const duration<_Rep, _Period>& __fd) {
  return __duration_cast<duration<_Rep, _Period>, _ToDuration>()(__fd);
}

template <class _Rep>
struct treat_as_floating_point : is_floating_point<_Rep> {};


template <class _Rep>
inline constexpr bool treat_as_floating_point_v = treat_as_floating_point<_Rep>::value;


template <class _Rep>
struct duration_values {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr _Rep zero() noexcept { return _Rep(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr _Rep max() noexcept { return numeric_limits<_Rep>::max(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr _Rep min() noexcept { return numeric_limits<_Rep>::lowest(); }
};


template <class _ToDuration, class _Rep, class _Period, enable_if_t<__is_duration<_ToDuration>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ToDuration floor(const duration<_Rep, _Period>& __d) {
  _ToDuration __t = chrono::duration_cast<_ToDuration>(__d);
  if (__t > __d)
    __t = __t - _ToDuration{1};
  return __t;
}

template <class _ToDuration, class _Rep, class _Period, enable_if_t<__is_duration<_ToDuration>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ToDuration ceil(const duration<_Rep, _Period>& __d) {
  _ToDuration __t = chrono::duration_cast<_ToDuration>(__d);
  if (__t < __d)
    __t = __t + _ToDuration{1};
  return __t;
}

template <class _ToDuration, class _Rep, class _Period, enable_if_t<__is_duration<_ToDuration>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ToDuration round(const duration<_Rep, _Period>& __d) {
  _ToDuration __lower = chrono::floor<_ToDuration>(__d);
  _ToDuration __upper = __lower + _ToDuration{1};
  auto __lower_diff = __d - __lower;
  auto __upper_diff = __upper - __d;
  if (__lower_diff < __upper_diff)
    return __lower;
  if (__lower_diff > __upper_diff)
    return __upper;
  return __lower.count() & 1 ? __upper : __lower;
}




template <class _Rep, class _Period>
class duration {
  static_assert(!__is_duration<_Rep>::value, "A duration representation can not be a duration");
  static_assert(__is_ratio<_Period>::value, "Second template parameter of duration must be a std::ratio");
  static_assert(_Period::num > 0, "duration period must be positive");

  template <class _R1, class _R2>
  struct __no_overflow {
  private:
    static const intmax_t __gcd_n1_n2 = __static_gcd<_R1::num, _R2::num>::value;
    static const intmax_t __gcd_d1_d2 = __static_gcd<_R1::den, _R2::den>::value;
    static const intmax_t __n1 = _R1::num / __gcd_n1_n2;
    static const intmax_t __d1 = _R1::den / __gcd_d1_d2;
    static const intmax_t __n2 = _R2::num / __gcd_n1_n2;
    static const intmax_t __d2 = _R2::den / __gcd_d1_d2;
    static const intmax_t max = -((intmax_t(1) << (sizeof(intmax_t) * 8 - 1)) + 1);

    template <intmax_t _Xp, intmax_t _Yp, bool __overflow>
    struct __mul
    {
      static const intmax_t value = _Xp * _Yp;
    };

    template <intmax_t _Xp, intmax_t _Yp>
    struct __mul<_Xp, _Yp, true> {
      static const intmax_t value = 1;
    };

  public:
    static const bool value = (__n1 <= max / __d2) && (__n2 <= max / __d1);
    typedef ratio<__mul<__n1, __d2, !value>::value, __mul<__n2, __d1, !value>::value> type;
  };

public:
  typedef _Rep rep;
  typedef typename _Period::type period;

private:
  rep __rep_;

public:

  constexpr duration() = default;




  template <class _Rep2,
            __enable_if_t<is_convertible<const _Rep2&, rep>::value &&
                              (treat_as_floating_point<rep>::value || !treat_as_floating_point<_Rep2>::value),
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit duration(const _Rep2& __r) : __rep_(__r) {}


  template <class _Rep2,
            class _Period2,
            __enable_if_t<__no_overflow<_Period2, period>::value && (treat_as_floating_point<rep>::value ||
                                                                     (__no_overflow<_Period2, period>::type::den == 1 &&
                                                                      !treat_as_floating_point<_Rep2>::value)),
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration(const duration<_Rep2, _Period2>& __d)
      : __rep_(chrono::duration_cast<duration>(__d).count()) {}



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr rep count() const { return __rep_; }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename common_type<duration>::type operator+() const {
    return typename common_type<duration>::type(*this);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename common_type<duration>::type operator-() const {
    return typename common_type<duration>::type(-__rep_);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration& operator++() {
    ++__rep_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration operator++(int) { return duration(__rep_++); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration& operator--() {
    --__rep_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration operator--(int) { return duration(__rep_--); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration& operator+=(const duration& __d) {
    __rep_ += __d.count();
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration& operator-=(const duration& __d) {
    __rep_ -= __d.count();
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration& operator*=(const rep& __rhs) {
    __rep_ *= __rhs;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration& operator/=(const rep& __rhs) {
    __rep_ /= __rhs;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration& operator%=(const rep& __rhs) {
    __rep_ %= __rhs;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration& operator%=(const duration& __rhs) {
    __rep_ %= __rhs.count();
    return *this;
  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr duration zero() noexcept {
    return duration(duration_values<rep>::zero());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr duration min() noexcept {
    return duration(duration_values<rep>::min());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr duration max() noexcept {
    return duration(duration_values<rep>::max());
  }
};

typedef duration<long long, nano> nanoseconds;
typedef duration<long long, micro> microseconds;
typedef duration<long long, milli> milliseconds;
typedef duration<long long > seconds;
typedef duration< long, ratio< 60> > minutes;
typedef duration< long, ratio<3600> > hours;
# 298 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/duration.h" 3
template <class _LhsDuration, class _RhsDuration>
struct __duration_eq {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator()(const _LhsDuration& __lhs, const _RhsDuration& __rhs) const {
    typedef typename common_type<_LhsDuration, _RhsDuration>::type _Ct;
    return _Ct(__lhs).count() == _Ct(__rhs).count();
  }
};

template <class _LhsDuration>
struct __duration_eq<_LhsDuration, _LhsDuration> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator()(const _LhsDuration& __lhs, const _LhsDuration& __rhs) const {
    return __lhs.count() == __rhs.count();
  }
};

template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator==(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  return __duration_eq<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >()(__lhs, __rhs);
}





template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator!=(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  return !(__lhs == __rhs);
}





template <class _LhsDuration, class _RhsDuration>
struct __duration_lt {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator()(const _LhsDuration& __lhs, const _RhsDuration& __rhs) const {
    typedef typename common_type<_LhsDuration, _RhsDuration>::type _Ct;
    return _Ct(__lhs).count() < _Ct(__rhs).count();
  }
};

template <class _LhsDuration>
struct __duration_lt<_LhsDuration, _LhsDuration> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator()(const _LhsDuration& __lhs, const _LhsDuration& __rhs) const {
    return __lhs.count() < __rhs.count();
  }
};

template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator<(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  return __duration_lt<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >()(__lhs, __rhs);
}



template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator>(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  return __rhs < __lhs;
}



template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator<=(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  return !(__rhs < __lhs);
}



template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator>=(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  return !(__lhs < __rhs);
}
# 392 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/duration.h" 3
template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr
typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type
operator+(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  typedef typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _Cd;
  return _Cd(_Cd(__lhs).count() + _Cd(__rhs).count());
}



template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr
typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type
operator-(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  typedef typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _Cd;
  return _Cd(_Cd(__lhs).count() - _Cd(__rhs).count());
}



template <class _Rep1,
          class _Period,
          class _Rep2,
          __enable_if_t<is_convertible<const _Rep2&, typename common_type<_Rep1, _Rep2>::type>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration<typename common_type<_Rep1, _Rep2>::type, _Period>
operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s) {
  typedef typename common_type<_Rep1, _Rep2>::type _Cr;
  typedef duration<_Cr, _Period> _Cd;
  return _Cd(_Cd(__d).count() * static_cast<_Cr>(__s));
}

template <class _Rep1,
          class _Period,
          class _Rep2,
          __enable_if_t<is_convertible<const _Rep1&, typename common_type<_Rep1, _Rep2>::type>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration<typename common_type<_Rep1, _Rep2>::type, _Period>
operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d) {
  return __d * __s;
}



template <class _Rep1,
          class _Period,
          class _Rep2,
          __enable_if_t<!__is_duration<_Rep2>::value &&
                            is_convertible<const _Rep2&, typename common_type<_Rep1, _Rep2>::type>::value,
                        int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration<typename common_type<_Rep1, _Rep2>::type, _Period>
operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s) {
  typedef typename common_type<_Rep1, _Rep2>::type _Cr;
  typedef duration<_Cr, _Period> _Cd;
  return _Cd(_Cd(__d).count() / static_cast<_Cr>(__s));
}

template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename common_type<_Rep1, _Rep2>::type
operator/(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  typedef typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _Ct;
  return _Ct(__lhs).count() / _Ct(__rhs).count();
}



template <class _Rep1,
          class _Period,
          class _Rep2,
          __enable_if_t<!__is_duration<_Rep2>::value &&
                            is_convertible<const _Rep2&, typename common_type<_Rep1, _Rep2>::type>::value,
                        int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration<typename common_type<_Rep1, _Rep2>::type, _Period>
operator%(const duration<_Rep1, _Period>& __d, const _Rep2& __s) {
  typedef typename common_type<_Rep1, _Rep2>::type _Cr;
  typedef duration<_Cr, _Period> _Cd;
  return _Cd(_Cd(__d).count() % static_cast<_Cr>(__s));
}

template <class _Rep1, class _Period1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr
typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type
operator%(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  typedef typename common_type<_Rep1, _Rep2>::type _Cr;
  typedef typename common_type<duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _Cd;
  return _Cd(static_cast<_Cr>(_Cd(__lhs).count()) % static_cast<_Cr>(_Cd(__rhs).count()));
}

}



inline namespace literals {
inline namespace chrono_literals {

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr chrono::hours operator""h(unsigned long long __h) {
  return chrono::hours(static_cast<chrono::hours::rep>(__h));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr chrono::duration<long double, ratio<3600, 1>> operator""h(long double __h) {
  return chrono::duration<long double, ratio<3600, 1>>(__h);
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr chrono::minutes operator""min(unsigned long long __m) {
  return chrono::minutes(static_cast<chrono::minutes::rep>(__m));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr chrono::duration<long double, ratio<60, 1>> operator""min(long double __m) {
  return chrono::duration<long double, ratio<60, 1>>(__m);
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr chrono::seconds operator""s(unsigned long long __s) {
  return chrono::seconds(static_cast<chrono::seconds::rep>(__s));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr chrono::duration<long double> operator""s(long double __s) {
  return chrono::duration<long double>(__s);
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr chrono::milliseconds operator""ms(unsigned long long __ms) {
  return chrono::milliseconds(static_cast<chrono::milliseconds::rep>(__ms));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr chrono::duration<long double, milli> operator""ms(long double __ms) {
  return chrono::duration<long double, milli>(__ms);
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr chrono::microseconds operator""us(unsigned long long __us) {
  return chrono::microseconds(static_cast<chrono::microseconds::rep>(__us));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr chrono::duration<long double, micro> operator""us(long double __us) {
  return chrono::duration<long double, micro>(__us);
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr chrono::nanoseconds operator""ns(unsigned long long __ns) {
  return chrono::nanoseconds(static_cast<chrono::nanoseconds::rep>(__ns));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr chrono::duration<long double, nano> operator""ns(long double __ns) {
  return chrono::duration<long double, nano>(__ns);
}

}
}

namespace chrono {
using namespace literals::chrono_literals;
}



}}
# 542 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/duration.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/poll_with_backoff.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/poll_with_backoff.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/high_resolution_clock.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/high_resolution_clock.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/steady_clock.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/steady_clock.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/time_point.h" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/time_point.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/time_point.h" 2 3

#pragma clang diagnostic push
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/time_point.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/time_point.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/time_point.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/time_point.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/time_point.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/time_point.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace chrono {

template <class _Clock, class _Duration = typename _Clock::duration>
class time_point {
  static_assert(__is_duration<_Duration>::value,
                "Second template parameter of time_point must be a std::chrono::duration");

public:
  typedef _Clock clock;
  typedef _Duration duration;
  typedef typename duration::rep rep;
  typedef typename duration::period period;

private:
  duration __d_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr time_point() : __d_(duration::zero()) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit time_point(const duration& __d) : __d_(__d) {}


  template <class _Duration2, __enable_if_t<is_convertible<_Duration2, duration>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr time_point(const time_point<clock, _Duration2>& __t)
      : __d_(__t.time_since_epoch()) {}



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration time_since_epoch() const { return __d_; }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr time_point& operator+=(const duration& __d) {
    __d_ += __d;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr time_point& operator-=(const duration& __d) {
    __d_ -= __d;
    return *this;
  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr time_point min() noexcept { return time_point(duration::min()); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr time_point max() noexcept { return time_point(duration::max()); }
};

}

template <class _Clock, class _Duration1, class _Duration2>
struct
common_type<chrono::time_point<_Clock, _Duration1>, chrono::time_point<_Clock, _Duration2> > {
  typedef chrono::time_point<_Clock, typename common_type<_Duration1, _Duration2>::type> type;
};

namespace chrono {

template <class _ToDuration, class _Clock, class _Duration>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr time_point<_Clock, _ToDuration>
time_point_cast(const time_point<_Clock, _Duration>& __t) {
  return time_point<_Clock, _ToDuration>(chrono::duration_cast<_ToDuration>(__t.time_since_epoch()));
}


template <class _ToDuration, class _Clock, class _Duration, enable_if_t<__is_duration<_ToDuration>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr time_point<_Clock, _ToDuration> floor(const time_point<_Clock, _Duration>& __t) {
  return time_point<_Clock, _ToDuration>{chrono::floor<_ToDuration>(__t.time_since_epoch())};
}

template <class _ToDuration, class _Clock, class _Duration, enable_if_t<__is_duration<_ToDuration>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr time_point<_Clock, _ToDuration> ceil(const time_point<_Clock, _Duration>& __t) {
  return time_point<_Clock, _ToDuration>{chrono::ceil<_ToDuration>(__t.time_since_epoch())};
}

template <class _ToDuration, class _Clock, class _Duration, enable_if_t<__is_duration<_ToDuration>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr time_point<_Clock, _ToDuration> round(const time_point<_Clock, _Duration>& __t) {
  return time_point<_Clock, _ToDuration>{chrono::round<_ToDuration>(__t.time_since_epoch())};
}

template <class _Rep, class _Period, enable_if_t<numeric_limits<_Rep>::is_signed, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr duration<_Rep, _Period> abs(duration<_Rep, _Period> __d) {
  return __d >= __d.zero() ? +__d : -__d;
}




template <class _Clock, class _Duration1, class _Duration2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator==(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs) {
  return __lhs.time_since_epoch() == __rhs.time_since_epoch();
}





template <class _Clock, class _Duration1, class _Duration2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator!=(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs) {
  return !(__lhs == __rhs);
}





template <class _Clock, class _Duration1, class _Duration2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator<(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs) {
  return __lhs.time_since_epoch() < __rhs.time_since_epoch();
}



template <class _Clock, class _Duration1, class _Duration2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator>(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs) {
  return __rhs < __lhs;
}



template <class _Clock, class _Duration1, class _Duration2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator<=(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs) {
  return !(__rhs < __lhs);
}



template <class _Clock, class _Duration1, class _Duration2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator>=(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs) {
  return !(__lhs < __rhs);
}
# 179 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/time_point.h" 3
template <class _Clock, class _Duration1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
constexpr time_point<_Clock, typename common_type<_Duration1, duration<_Rep2, _Period2> >::type>
operator+(const time_point<_Clock, _Duration1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  typedef time_point<_Clock, typename common_type<_Duration1, duration<_Rep2, _Period2> >::type> _Tr;
  return _Tr(__lhs.time_since_epoch() + __rhs);
}



template <class _Rep1, class _Period1, class _Clock, class _Duration2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
constexpr time_point<_Clock, typename common_type<duration<_Rep1, _Period1>, _Duration2>::type>
operator+(const duration<_Rep1, _Period1>& __lhs, const time_point<_Clock, _Duration2>& __rhs) {
  return __rhs + __lhs;
}



template <class _Clock, class _Duration1, class _Rep2, class _Period2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
constexpr time_point<_Clock, typename common_type<_Duration1, duration<_Rep2, _Period2> >::type>
operator-(const time_point<_Clock, _Duration1>& __lhs, const duration<_Rep2, _Period2>& __rhs) {
  typedef time_point<_Clock, typename common_type<_Duration1, duration<_Rep2, _Period2> >::type> _Ret;
  return _Ret(__lhs.time_since_epoch() - __rhs);
}



template <class _Clock, class _Duration1, class _Duration2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr typename common_type<_Duration1, _Duration2>::type
operator-(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs) {
  return __lhs.time_since_epoch() - __rhs.time_since_epoch();
}

}

}}
# 216 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/time_point.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/steady_clock.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/steady_clock.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/steady_clock.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/steady_clock.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/steady_clock.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/steady_clock.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/steady_clock.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/steady_clock.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace chrono {


class __attribute__((__visibility__("default"))) steady_clock {
public:
  typedef nanoseconds duration;
  typedef duration::rep rep;
  typedef duration::period period;
  typedef chrono::time_point<steady_clock, duration> time_point;
  static constexpr const bool is_steady = true;

  static time_point now() noexcept;
};


}

}}
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/steady_clock.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/high_resolution_clock.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/system_clock.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/system_clock.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ctime" 1 3
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ctime" 3
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/time.h" 1 3 4
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ctime" 2 3
# 60 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ctime" 3


#pragma clang diagnostic push
# 62 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ctime" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 62 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ctime" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 62 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ctime" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 62 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ctime" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 62 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ctime" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 62 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ctime" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

using ::clock_t __attribute__((__using_if_exists__));
using ::size_t __attribute__((__using_if_exists__));
using ::time_t __attribute__((__using_if_exists__));
using ::tm __attribute__((__using_if_exists__));

using ::timespec __attribute__((__using_if_exists__));

using ::clock __attribute__((__using_if_exists__));
using ::difftime __attribute__((__using_if_exists__));
using ::mktime __attribute__((__using_if_exists__));
using ::time __attribute__((__using_if_exists__));
using ::asctime __attribute__((__using_if_exists__));
using ::ctime __attribute__((__using_if_exists__));
using ::gmtime __attribute__((__using_if_exists__));
using ::localtime __attribute__((__using_if_exists__));
using ::strftime __attribute__((__using_if_exists__));

using ::timespec_get __attribute__((__using_if_exists__));


}}
# 84 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ctime" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/system_clock.h" 2 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/system_clock.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/system_clock.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/system_clock.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/system_clock.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/system_clock.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/system_clock.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/system_clock.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace chrono {

class __attribute__((__visibility__("default"))) system_clock {
public:
  typedef microseconds duration;
  typedef duration::rep rep;
  typedef duration::period period;
  typedef chrono::time_point<system_clock> time_point;
  static constexpr const bool is_steady = false;

  static time_point now() noexcept;
  static time_t to_time_t(const time_point& __t) noexcept;
  static time_point from_time_t(time_t __t) noexcept;
};
# 48 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/system_clock.h" 3
}

}}
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/system_clock.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/high_resolution_clock.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/high_resolution_clock.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/high_resolution_clock.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/high_resolution_clock.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/high_resolution_clock.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/high_resolution_clock.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/high_resolution_clock.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/high_resolution_clock.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace chrono {


typedef steady_clock high_resolution_clock;




}

}}
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/high_resolution_clock.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/poll_with_backoff.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/poll_with_backoff.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/poll_with_backoff.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/poll_with_backoff.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/poll_with_backoff.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/poll_with_backoff.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/poll_with_backoff.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/poll_with_backoff.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

static constexpr const int __libcpp_polling_count = 64;
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/poll_with_backoff.h" 3
template <class _Poll, class _Backoff>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __libcpp_thread_poll_with_backoff(
    _Poll&& __poll, _Backoff&& __backoff, chrono::nanoseconds __max_elapsed = chrono::nanoseconds::zero()) {
  auto const __start = chrono::high_resolution_clock::now();
  for (int __count = 0;;) {
    if (__poll())
      return true;
    if (__count < __libcpp_polling_count) {
      __count += 1;
      continue;
    }
    chrono::nanoseconds const __elapsed = chrono::high_resolution_clock::now() - __start;
    if (__max_elapsed != chrono::nanoseconds::zero() && __max_elapsed < __elapsed)
      return false;
    if (__backoff(__elapsed))
      return false;
  }
}







struct __spinning_backoff_policy {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator()(chrono::nanoseconds const&) const { return false; }
};

}}
# 65 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/poll_with_backoff.h" 3
#pragma clang diagnostic pop
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support.h" 3
# 112 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support/pthread.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support/pthread.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/convert_to_timespec.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/convert_to_timespec.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/convert_to_timespec.h" 2 3

#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/convert_to_timespec.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/convert_to_timespec.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/convert_to_timespec.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/convert_to_timespec.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/convert_to_timespec.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/convert_to_timespec.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _TimeSpec>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline _TimeSpec __convert_to_timespec(const chrono::nanoseconds& __ns) {
  using namespace chrono;
  seconds __s = duration_cast<seconds>(__ns);
  _TimeSpec __ts;
  typedef decltype(__ts.tv_sec) __ts_sec;
  const __ts_sec __ts_sec_max = numeric_limits<__ts_sec>::max();

  if (__s.count() < __ts_sec_max) {
    __ts.tv_sec = static_cast<__ts_sec>(__s.count());
    __ts.tv_nsec = static_cast<decltype(__ts.tv_nsec)>((__ns - __s).count());
  } else {
    __ts.tv_sec = __ts_sec_max;
    __ts.tv_nsec = 999999999;
  }

  return __ts;
}

}}
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__chrono/convert_to_timespec.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support/pthread.h" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/errno.h" 1 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/errno.h" 3



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/errno.h" 1 3 4
# 23 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/errno.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/errno.h" 1 3 4
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/errno.h" 3 4
extern "C" {
extern int * __error(void);

}
# 24 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/errno.h" 2 3 4
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/errno.h" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support/pthread.h" 2 3
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 1 3 4
# 56 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/sched.h" 1 3 4
# 28 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/sched.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/pthread_impl.h" 1 3 4
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/pthread_impl.h" 3 4
#pragma clang assume_nonnull begin
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/pthread_impl.h" 3 4
#pragma clang assume_nonnull end
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/sched.h" 2 3 4

extern "C" {




struct sched_param { int sched_priority; char __opaque[4]; };




extern int sched_yield(void);
extern int sched_get_priority_min(int);
extern int sched_get_priority_max(int);
}
# 57 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/time.h" 1 3 4
# 58 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_cond_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_cond_t.h" 3 4
typedef __darwin_pthread_cond_t pthread_cond_t;
# 61 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_condattr_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_condattr_t.h" 3 4
typedef __darwin_pthread_condattr_t pthread_condattr_t;
# 62 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_key_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_key_t.h" 3 4
typedef __darwin_pthread_key_t pthread_key_t;
# 63 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_mutex_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_mutex_t.h" 3 4
typedef __darwin_pthread_mutex_t pthread_mutex_t;
# 64 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_mutexattr_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_mutexattr_t.h" 3 4
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_once_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_once_t.h" 3 4
typedef __darwin_pthread_once_t pthread_once_t;
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_rwlock_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_rwlock_t.h" 3 4
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_rwlockattr_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_rwlockattr_t.h" 3 4
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
# 68 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_pthread/_pthread_t.h" 3 4
typedef __darwin_pthread_t pthread_t;
# 69 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/qos.h" 1 3 4
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/qos.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/qos.h" 1 3 4
# 130 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/qos.h" 3 4
typedef enum : unsigned int { QOS_CLASS_USER_INTERACTIVE __attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0))) = 0x21, QOS_CLASS_USER_INITIATED __attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0))) = 0x19, QOS_CLASS_DEFAULT __attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0))) = 0x15, QOS_CLASS_UTILITY __attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0))) = 0x11, QOS_CLASS_BACKGROUND __attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0))) = 0x09, QOS_CLASS_UNSPECIFIED __attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0))) = 0x00, } qos_class_t;
# 159 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/qos.h" 3 4
extern "C" {
# 170 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/qos.h" 3 4
__attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0)))
qos_class_t
qos_class_self(void);
# 192 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/qos.h" 3 4
__attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0)))
qos_class_t
qos_class_main(void);

}
# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/qos.h" 2 3 4




#pragma clang assume_nonnull begin

extern "C" {
# 81 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0)))
int
pthread_attr_set_qos_class_np(pthread_attr_t *__attr,
  qos_class_t __qos_class, int __relative_priority);
# 112 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0)))
int
pthread_attr_get_qos_class_np(pthread_attr_t * __attr,
  qos_class_t * _Nullable __qos_class,
  int * _Nullable __relative_priority);
# 153 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0)))
int
pthread_set_qos_class_self_np(qos_class_t __qos_class,
  int __relative_priority);
# 184 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0)))
int
pthread_get_qos_class_np(pthread_t __pthread,
  qos_class_t * _Nullable __qos_class,
  int * _Nullable __relative_priority);
# 211 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/qos.h" 3 4
typedef struct pthread_override_s* pthread_override_t;
# 263 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0)))
pthread_override_t
pthread_override_qos_class_start_np(pthread_t __pthread,
  qos_class_t __qos_class, int __relative_priority);
# 291 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0)))
int
pthread_override_qos_class_end_np(pthread_override_t __override);

}
# 295 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread/qos.h" 3 4
#pragma clang assume_nonnull end
# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 2 3 4



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_mach_port_t.h" 1 3 4
# 50 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_mach_port_t.h" 3 4
typedef __darwin_mach_port_t mach_port_t;
# 75 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 2 3 4
# 103 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 3 4
#pragma clang assume_nonnull begin

extern "C" {
# 225 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 3 4
__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_atfork(void (* _Nullable)(void), void (* _Nullable)(void),
  void (* _Nullable)(void));

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_destroy(pthread_attr_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getdetachstate(const pthread_attr_t *, int *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getguardsize(const pthread_attr_t * , size_t * );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getinheritsched(const pthread_attr_t * , int * );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getschedparam(const pthread_attr_t * ,
  struct sched_param * );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getschedpolicy(const pthread_attr_t * , int * );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getscope(const pthread_attr_t * , int * );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getstack(const pthread_attr_t * ,
  void * _Nullable * _Nonnull , size_t * );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getstackaddr(const pthread_attr_t * ,
  void * _Nullable * _Nonnull );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getstacksize(const pthread_attr_t * , size_t * );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_init(pthread_attr_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setdetachstate(pthread_attr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setguardsize(pthread_attr_t *, size_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setinheritsched(pthread_attr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setschedparam(pthread_attr_t * ,
  const struct sched_param * );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setschedpolicy(pthread_attr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setscope(pthread_attr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setstack(pthread_attr_t *, void *, size_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setstackaddr(pthread_attr_t *, void *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setstacksize(pthread_attr_t *, size_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_cancel(pthread_t) __asm("_" "pthread_cancel" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_cond_broadcast(pthread_cond_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_cond_destroy(pthread_cond_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_cond_init(
  pthread_cond_t * ,
  const pthread_condattr_t * _Nullable )
  __asm("_" "pthread_cond_init" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_cond_signal(pthread_cond_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use an asynchronous wait instead of a synchronous wait" "\")")))
int pthread_cond_timedwait(
  pthread_cond_t * , pthread_mutex_t * ,
  const struct timespec * _Nullable )
  __asm("_" "pthread_cond_timedwait" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use an asynchronous wait instead of a synchronous wait" "\")")))
int pthread_cond_wait(pthread_cond_t * ,
  pthread_mutex_t * ) __asm("_" "pthread_cond_wait" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_condattr_destroy(pthread_condattr_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_condattr_init(pthread_condattr_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_condattr_getpshared(const pthread_condattr_t * ,
  int * );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_condattr_setpshared(pthread_condattr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))

int pthread_create(pthread_t _Nullable * _Nonnull ,
  const pthread_attr_t * _Nullable ,
  void * _Nullable (* _Nonnull)(void * _Nullable),
  void * _Nullable );






__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_detach(pthread_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_equal(pthread_t _Nullable, pthread_t _Nullable);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Thread lifecycle is owned by Swift Concurrency runtime" "\")")))
void pthread_exit(void * _Nullable) __attribute__((__noreturn__));

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_getconcurrency(void);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_getschedparam(pthread_t , int * _Nullable ,
  struct sched_param * _Nullable );

__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use Task Local Values instead" "\")")))
__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
void* _Nullable pthread_getspecific(pthread_key_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use an asynchronous wait instead of a synchronous wait" "\")")))
int pthread_join(pthread_t , void * _Nullable * _Nullable)
  __asm("_" "pthread_join" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_key_create(pthread_key_t *, void (* _Nullable)(void *));

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_key_delete(pthread_key_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutex_destroy(pthread_mutex_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutex_getprioceiling(const pthread_mutex_t * ,
  int * );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutex_init(pthread_mutex_t * ,
  const pthread_mutexattr_t * _Nullable );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use OSAllocatedUnfairLock's withLock or NSLock for async-safe scoped locking" "\")")))
int pthread_mutex_lock(pthread_mutex_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutex_setprioceiling(pthread_mutex_t * , int,
  int * );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use OSAllocatedUnfairLock's withLockIfAvailable or NSLock for async-safe scoped locking" "\")")))
int pthread_mutex_trylock(pthread_mutex_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use OSAllocatedUnfairLock's withLock or NSLock for async-safe scoped locking" "\")")))
int pthread_mutex_unlock(pthread_mutex_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_destroy(pthread_mutexattr_t *) __asm("_" "pthread_mutexattr_destroy" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t * ,
  int * );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_getprotocol(const pthread_mutexattr_t * ,
  int * );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_getpshared(const pthread_mutexattr_t * ,
  int * );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_gettype(const pthread_mutexattr_t * ,
  int * );

__attribute__((availability(macos,introduced=10.13.4))) __attribute__((availability(ios,introduced=11.3))) __attribute__((availability(watchos,introduced=4.3))) __attribute__((availability(tvos,introduced=11.3)))
int pthread_mutexattr_getpolicy_np(const pthread_mutexattr_t * ,
  int * );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_init(pthread_mutexattr_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_setprotocol(pthread_mutexattr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_setpshared(pthread_mutexattr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_settype(pthread_mutexattr_t *, int);

__attribute__((availability(macos,introduced=10.7))) __attribute__((availability(ios,introduced=5.0)))
int pthread_mutexattr_setpolicy_np(pthread_mutexattr_t *, int);

__attribute__((availability(swift,unavailable,message="Use lazily initialized globals instead")))
__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_once(pthread_once_t *, void (* _Nonnull)(void));

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_rwlock_destroy(pthread_rwlock_t * ) __asm("_" "pthread_rwlock_destroy" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_rwlock_init(pthread_rwlock_t * ,
  const pthread_rwlockattr_t * _Nullable )
  __asm("_" "pthread_rwlock_init" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use async-safe scoped locking instead" "\")")))
int pthread_rwlock_rdlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_rdlock" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use async-safe scoped locking instead" "\")")))
int pthread_rwlock_tryrdlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_tryrdlock" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use async-safe scoped locking instead" "\")")))
int pthread_rwlock_trywrlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_trywrlock" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use async-safe scoped locking instead" "\")")))
int pthread_rwlock_wrlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_wrlock" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use async-safe scoped locking instead" "\")")))
int pthread_rwlock_unlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_unlock" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_rwlockattr_destroy(pthread_rwlockattr_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t * ,
  int * );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_rwlockattr_init(pthread_rwlockattr_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
pthread_t pthread_self(void);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use Task cancellation instead" "\")")))
int pthread_setcancelstate(int , int * _Nullable)
  __asm("_" "pthread_setcancelstate" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use Task cancellation instead" "\")")))
int pthread_setcanceltype(int , int * _Nullable)
  __asm("_" "pthread_setcanceltype" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_setconcurrency(int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_setschedparam(pthread_t, int, const struct sched_param *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use Task Local Values instead" "\")")))
int pthread_setspecific(pthread_key_t , const void * _Nullable);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use Task cancellation instead" "\")")))
void pthread_testcancel(void) __asm("_" "pthread_testcancel" );




__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_is_threaded_np(void);

__attribute__((availability(macos,introduced=10.6))) __attribute__((availability(ios,introduced=3.2)))
int pthread_threadid_np(pthread_t _Nullable,__uint64_t* _Nullable);


__attribute__((availability(macos,introduced=10.6))) __attribute__((availability(ios,introduced=3.2)))
int pthread_getname_np(pthread_t,char*,size_t);

__attribute__((availability(macos,introduced=10.6))) __attribute__((availability(ios,introduced=3.2)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Thread lifecycle is owned by Swift Concurrency runtime" "\")")))
int pthread_setname_np(const char*);


__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_main_np(void);


__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
mach_port_t pthread_mach_thread_np(pthread_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
size_t pthread_get_stacksize_np(pthread_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
void* pthread_get_stackaddr_np(pthread_t);


__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_cond_signal_thread_np(pthread_cond_t *, pthread_t _Nullable);


__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use an asynchronous wait instead of a synchronous wait" "\")")))
int pthread_cond_timedwait_relative_np(pthread_cond_t *, pthread_mutex_t *,
  const struct timespec * _Nullable);


__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))

int pthread_create_suspended_np(
  pthread_t _Nullable * _Nonnull, const pthread_attr_t * _Nullable,
  void * _Nullable (* _Nonnull)(void * _Nullable), void * _Nullable);





__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_kill(pthread_t, int);

__attribute__((availability(macos,introduced=10.5))) __attribute__((availability(ios,introduced=2.0)))
_Nullable pthread_t pthread_from_mach_thread_np(mach_port_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_sigmask(int, const sigset_t * _Nullable, sigset_t * _Nullable)
  __asm("_" "pthread_sigmask" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use Task.yield(), or await a condition instead of spinning" "\")")))
void pthread_yield_np(void);

__attribute__((availability(macos,introduced=11.0)))
__attribute__((availability(ios,unavailable))) __attribute__((availability(tvos,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(driverkit,unavailable)))
void pthread_jit_write_protect_np(int enabled);

__attribute__((availability(macos,introduced=11.0))) __attribute__((availability(ios,introduced=17.4)))
__attribute__((availability(tvos,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(driverkit,unavailable))) __attribute__((availability(visionos,unavailable)))
int pthread_jit_write_protect_supported_np(void);
# 608 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 3 4
typedef int (*pthread_jit_write_callback_t)(void * _Nullable ctx);
# 694 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 3 4
__attribute__((availability(macos,introduced=11.4))) __attribute__((availability(ios,introduced=17.4)))
__attribute__((availability(tvos,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(driverkit,unavailable))) __attribute__((availability(visionos,unavailable)))
__attribute__((availability(swift,unavailable,message="This interface cannot be safely used from Swift")))
int pthread_jit_write_with_callback_np(
  pthread_jit_write_callback_t _Nonnull callback, void * _Nullable ctx);
# 725 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 3 4
__attribute__((availability(macos,introduced=12.1))) __attribute__((availability(ios,introduced=17.4)))
__attribute__((availability(tvos,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(driverkit,unavailable))) __attribute__((availability(visionos,unavailable)))
void pthread_jit_write_freeze_callbacks_np(void);
# 744 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 3 4
__attribute__((availability(macos,introduced=11.0))) __attribute__((availability(ios,introduced=14.2))) __attribute__((availability(tvos,introduced=14.2))) __attribute__((availability(watchos,introduced=7.1)))
int
pthread_cpu_number_np(size_t *cpu_number_out);


}
# 749 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/pthread.h" 3 4
#pragma clang assume_nonnull end
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support/pthread.h" 2 3
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support/pthread.h" 3


#pragma clang diagnostic push
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support/pthread.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support/pthread.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support/pthread.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support/pthread.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support/pthread.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support/pthread.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

using __libcpp_timespec_t = ::timespec;




typedef pthread_mutex_t __libcpp_mutex_t;


typedef pthread_mutex_t __libcpp_recursive_mutex_t;

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __libcpp_recursive_mutex_init(__libcpp_recursive_mutex_t* __m) {
  pthread_mutexattr_t __attr;
  int __ec = pthread_mutexattr_init(&__attr);
  if (__ec)
    return __ec;
  __ec = pthread_mutexattr_settype(&__attr, 2);
  if (__ec) {
    pthread_mutexattr_destroy(&__attr);
    return __ec;
  }
  __ec = pthread_mutex_init(__m, &__attr);
  if (__ec) {
    pthread_mutexattr_destroy(&__attr);
    return __ec;
  }
  __ec = pthread_mutexattr_destroy(&__attr);
  if (__ec) {
    pthread_mutex_destroy(__m);
    return __ec;
  }
  return 0;
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int
__libcpp_recursive_mutex_lock(__libcpp_recursive_mutex_t* __m) {
  return pthread_mutex_lock(__m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
__libcpp_recursive_mutex_trylock(__libcpp_recursive_mutex_t* __m) {
  return pthread_mutex_trylock(__m) == 0;
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int
__libcpp_recursive_mutex_unlock(__libcpp_recursive_mutex_t* __m) {
  return pthread_mutex_unlock(__m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __libcpp_recursive_mutex_destroy(__libcpp_recursive_mutex_t* __m) {
  return pthread_mutex_destroy(__m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __libcpp_mutex_lock(__libcpp_mutex_t* __m) {
  return pthread_mutex_lock(__m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __libcpp_mutex_trylock(__libcpp_mutex_t* __m) {
  return pthread_mutex_trylock(__m) == 0;
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __libcpp_mutex_unlock(__libcpp_mutex_t* __m) {
  return pthread_mutex_unlock(__m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __libcpp_mutex_destroy(__libcpp_mutex_t* __m) { return pthread_mutex_destroy(__m); }




typedef pthread_cond_t __libcpp_condvar_t;


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __libcpp_condvar_signal(__libcpp_condvar_t* __cv) { return pthread_cond_signal(__cv); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __libcpp_condvar_broadcast(__libcpp_condvar_t* __cv) {
  return pthread_cond_broadcast(__cv);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int
__libcpp_condvar_wait(__libcpp_condvar_t* __cv, __libcpp_mutex_t* __m) {
  return pthread_cond_wait(__cv, __m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int
__libcpp_condvar_timedwait(__libcpp_condvar_t* __cv, __libcpp_mutex_t* __m, __libcpp_timespec_t* __ts) {
  return pthread_cond_timedwait(__cv, __m, __ts);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __libcpp_condvar_destroy(__libcpp_condvar_t* __cv) {
  return pthread_cond_destroy(__cv);
}




typedef pthread_once_t __libcpp_exec_once_flag;


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __libcpp_execute_once(__libcpp_exec_once_flag* __flag, void (*__init_routine)()) {
  return pthread_once(__flag, __init_routine);
}







typedef pthread_t __libcpp_thread_id;



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __libcpp_thread_id_equal(__libcpp_thread_id __t1, __libcpp_thread_id __t2) {
  return __t1 == __t2;
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __libcpp_thread_id_less(__libcpp_thread_id __t1, __libcpp_thread_id __t2) {
  return __t1 < __t2;
}





typedef pthread_t __libcpp_thread_t;

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __libcpp_thread_id __libcpp_thread_get_id(const __libcpp_thread_t* __t) {



  return *__t;

}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __libcpp_thread_isnull(const __libcpp_thread_t* __t) {
  return __libcpp_thread_get_id(__t) == 0;
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __libcpp_thread_create(__libcpp_thread_t* __t, void* (*__func)(void*), void* __arg) {
  return pthread_create(__t, nullptr, __func, __arg);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __libcpp_thread_id __libcpp_thread_get_current_id() {
  const __libcpp_thread_t __current_thread = pthread_self();
  return __libcpp_thread_get_id(&__current_thread);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __libcpp_thread_join(__libcpp_thread_t* __t) { return pthread_join(*__t, nullptr); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __libcpp_thread_detach(__libcpp_thread_t* __t) { return pthread_detach(*__t); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __libcpp_thread_yield() { sched_yield(); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __libcpp_thread_sleep_for(const chrono::nanoseconds& __ns) {
  __libcpp_timespec_t __ts = std::__convert_to_timespec<__libcpp_timespec_t>(__ns);
  while (nanosleep(&__ts, &__ts) == -1 && (*__error()) == 4)
    ;
}






typedef pthread_key_t __libcpp_tls_key;

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __libcpp_tls_create(__libcpp_tls_key* __key, void (*__at_exit)(void*)) {
  return pthread_key_create(__key, __at_exit);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void* __libcpp_tls_get(__libcpp_tls_key __key) { return pthread_getspecific(__key); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __libcpp_tls_set(__libcpp_tls_key __key, void* __p) {
  return pthread_setspecific(__key, __p);
}

}}
# 219 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support/pthread.h" 3
#pragma clang diagnostic pop
# 113 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/support.h" 2 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 2 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 3


#pragma clang diagnostic push
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 3
template <class _Tp, class = void>
struct __atomic_waitable_traits {
  template <class _AtomicWaitable>
  static void __atomic_load(_AtomicWaitable&&, memory_order) = delete;

  template <class _AtomicWaitable>
  static void __atomic_contention_address(_AtomicWaitable&&) = delete;
};

template <class _Tp, class = void>
struct __atomic_waitable : false_type {};

template <class _Tp>
struct __atomic_waitable< _Tp,
                          __void_t<decltype(__atomic_waitable_traits<__decay_t<_Tp> >::__atomic_load(
                                       std::declval<const _Tp&>(), std::declval<memory_order>())),
                                   decltype(__atomic_waitable_traits<__decay_t<_Tp> >::__atomic_contention_address(
                                       std::declval<const _Tp&>()))> > : true_type {};

template <class _AtomicWaitable, class _Poll>
struct __atomic_wait_poll_impl {
  const _AtomicWaitable& __a_;
  _Poll __poll_;
  memory_order __order_;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()() const {
    auto __current_val = __atomic_waitable_traits<__decay_t<_AtomicWaitable> >::__atomic_load(__a_, __order_);
    return __poll_(__current_val);
  }
};



                          __attribute__((__visibility__("default"))) void __cxx_atomic_notify_one(void const volatile*) noexcept;
                          __attribute__((__visibility__("default"))) void __cxx_atomic_notify_all(void const volatile*) noexcept;
                          __attribute__((__visibility__("default"))) __cxx_contention_t
__libcpp_atomic_monitor(void const volatile*) noexcept;
                          __attribute__((__visibility__("default"))) void
__libcpp_atomic_wait(void const volatile*, __cxx_contention_t) noexcept;

                          __attribute__((__visibility__("default"))) void
__cxx_atomic_notify_one(__cxx_atomic_contention_t const volatile*) noexcept;
                          __attribute__((__visibility__("default"))) void
__cxx_atomic_notify_all(__cxx_atomic_contention_t const volatile*) noexcept;
                          __attribute__((__visibility__("default"))) __cxx_contention_t
__libcpp_atomic_monitor(__cxx_atomic_contention_t const volatile*) noexcept;
                          __attribute__((__visibility__("default"))) void
__libcpp_atomic_wait(__cxx_atomic_contention_t const volatile*, __cxx_contention_t) noexcept;

template <class _AtomicWaitable, class _Poll>
struct __atomic_wait_backoff_impl {
  const _AtomicWaitable& __a_;
  _Poll __poll_;
  memory_order __order_;

  using __waitable_traits = __atomic_waitable_traits<__decay_t<_AtomicWaitable> >;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  __update_monitor_val_and_poll(__cxx_atomic_contention_t const volatile*, __cxx_contention_t& __monitor_val) const {






    __monitor_val = __waitable_traits::__atomic_load(__a_, __order_);
    return __poll_(__monitor_val);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  __update_monitor_val_and_poll(void const volatile* __contention_address, __cxx_contention_t& __monitor_val) const {


    __monitor_val = std::__libcpp_atomic_monitor(__contention_address);
    auto __current_val = __waitable_traits::__atomic_load(__a_, __order_);
    return __poll_(__current_val);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(chrono::nanoseconds __elapsed) const {
    if (__elapsed > chrono::microseconds(64)) {
      auto __contention_address = __waitable_traits::__atomic_contention_address(__a_);
      __cxx_contention_t __monitor_val;
      if (__update_monitor_val_and_poll(__contention_address, __monitor_val))
        return true;
      std::__libcpp_atomic_wait(__contention_address, __monitor_val);
    } else if (__elapsed > chrono::microseconds(4))
      __libcpp_thread_yield();
    else {
    }
    return false;
  }
};
# 145 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 3
template <class _AtomicWaitable, class _Poll>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__atomic_wait_unless(const _AtomicWaitable& __a, _Poll&& __poll, memory_order __order) {
  static_assert(__atomic_waitable<_AtomicWaitable>::value, "");
  __atomic_wait_poll_impl<_AtomicWaitable, __decay_t<_Poll> > __poll_impl = {__a, __poll, __order};
  __atomic_wait_backoff_impl<_AtomicWaitable, __decay_t<_Poll> > __backoff_fn = {__a, __poll, __order};
  std::__libcpp_thread_poll_with_backoff(__poll_impl, __backoff_fn);
}

template <class _AtomicWaitable>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __atomic_notify_one(const _AtomicWaitable& __a) {
  static_assert(__atomic_waitable<_AtomicWaitable>::value, "");
  std::__cxx_atomic_notify_one(__atomic_waitable_traits<__decay_t<_AtomicWaitable> >::__atomic_contention_address(__a));
}

template <class _AtomicWaitable>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __atomic_notify_all(const _AtomicWaitable& __a) {
  static_assert(__atomic_waitable<_AtomicWaitable>::value, "");
  std::__cxx_atomic_notify_all(__atomic_waitable_traits<__decay_t<_AtomicWaitable> >::__atomic_contention_address(__a));
}
# 182 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 3
template <typename _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __cxx_nonatomic_compare_equal(_Tp const& __lhs, _Tp const& __rhs) {
  return std::memcmp(std::addressof(__lhs), std::addressof(__rhs), sizeof(_Tp)) == 0;
}

template <class _Tp>
struct __atomic_compare_unequal_to {
  _Tp __val_;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Tp& __arg) const {
    return !std::__cxx_nonatomic_compare_equal(__arg, __val_);
  }
};

template <class _AtomicWaitable, class _Up>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__atomic_wait(_AtomicWaitable& __a, _Up __val, memory_order __order) {
  static_assert(__atomic_waitable<_AtomicWaitable>::value, "");
  __atomic_compare_unequal_to<_Up> __nonatomic_equal = {__val};
  std::__atomic_wait_unless(__a, __nonatomic_equal, __order);
}

}}
# 203 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_sync.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_base.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/check_memory_order.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/check_memory_order.h" 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_base.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/is_always_lock_free.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/is_always_lock_free.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/is_always_lock_free.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/is_always_lock_free.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/is_always_lock_free.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/is_always_lock_free.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/is_always_lock_free.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/is_always_lock_free.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct __libcpp_is_always_lock_free {

  static const bool __value = __atomic_always_lock_free(sizeof(_Tp), nullptr);
};

}}
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/is_always_lock_free.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_base.h" 2 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_base.h" 3


#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_base.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_base.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_base.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_base.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_base.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_base.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, bool = is_integral<_Tp>::value && !is_same<_Tp, bool>::value>
struct __atomic_base
{
  mutable __cxx_atomic_impl<_Tp> __a_;


  static constexpr bool is_always_lock_free = __libcpp_is_always_lock_free<__cxx_atomic_impl<_Tp> >::__value;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool is_lock_free() const volatile noexcept {
    return __c11_atomic_is_lock_free(sizeof(__cxx_atomic_impl<_Tp>));
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool is_lock_free() const noexcept {
    return static_cast<__atomic_base const volatile*>(this)->is_lock_free();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void store(_Tp __d, memory_order __m = memory_order_seq_cst) volatile noexcept
      __attribute__((__diagnose_if__(__m == memory_order_consume || __m == memory_order_acquire || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
    std::__cxx_atomic_store(std::addressof(__a_), __d, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void store(_Tp __d, memory_order __m = memory_order_seq_cst) noexcept
      __attribute__((__diagnose_if__(__m == memory_order_consume || __m == memory_order_acquire || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
    std::__cxx_atomic_store(std::addressof(__a_), __d, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      __attribute__((__diagnose_if__(__m == memory_order_release || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
    return std::__cxx_atomic_load(std::addressof(__a_), __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp load(memory_order __m = memory_order_seq_cst) const noexcept
      __attribute__((__diagnose_if__(__m == memory_order_release || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
    return std::__cxx_atomic_load(std::addressof(__a_), __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) operator _Tp() const volatile noexcept { return load(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) operator _Tp() const noexcept { return load(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp exchange(_Tp __d, memory_order __m = memory_order_seq_cst) volatile noexcept {
    return std::__cxx_atomic_exchange(std::addressof(__a_), __d, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp exchange(_Tp __d, memory_order __m = memory_order_seq_cst) noexcept {
    return std::__cxx_atomic_exchange(std::addressof(__a_), __d, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  compare_exchange_weak(_Tp& __e, _Tp __d, memory_order __s, memory_order __f) volatile noexcept
      __attribute__((__diagnose_if__(__f == memory_order_release || __f == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
    return std::__cxx_atomic_compare_exchange_weak(std::addressof(__a_), std::addressof(__e), __d, __s, __f);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool compare_exchange_weak(_Tp& __e, _Tp __d, memory_order __s, memory_order __f) noexcept
      __attribute__((__diagnose_if__(__f == memory_order_release || __f == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
    return std::__cxx_atomic_compare_exchange_weak(std::addressof(__a_), std::addressof(__e), __d, __s, __f);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  compare_exchange_strong(_Tp& __e, _Tp __d, memory_order __s, memory_order __f) volatile noexcept
      __attribute__((__diagnose_if__(__f == memory_order_release || __f == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
    return std::__cxx_atomic_compare_exchange_strong(std::addressof(__a_), std::addressof(__e), __d, __s, __f);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool compare_exchange_strong(_Tp& __e, _Tp __d, memory_order __s, memory_order __f) noexcept
      __attribute__((__diagnose_if__(__f == memory_order_release || __f == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
    return std::__cxx_atomic_compare_exchange_strong(std::addressof(__a_), std::addressof(__e), __d, __s, __f);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  compare_exchange_weak(_Tp& __e, _Tp __d, memory_order __m = memory_order_seq_cst) volatile noexcept {
    return std::__cxx_atomic_compare_exchange_weak(std::addressof(__a_), std::addressof(__e), __d, __m, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  compare_exchange_weak(_Tp& __e, _Tp __d, memory_order __m = memory_order_seq_cst) noexcept {
    return std::__cxx_atomic_compare_exchange_weak(std::addressof(__a_), std::addressof(__e), __d, __m, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  compare_exchange_strong(_Tp& __e, _Tp __d, memory_order __m = memory_order_seq_cst) volatile noexcept {
    return std::__cxx_atomic_compare_exchange_strong(std::addressof(__a_), std::addressof(__e), __d, __m, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  compare_exchange_strong(_Tp& __e, _Tp __d, memory_order __m = memory_order_seq_cst) noexcept {
    return std::__cxx_atomic_compare_exchange_strong(std::addressof(__a_), std::addressof(__e), __d, __m, __m);
  }

                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void wait(_Tp __v, memory_order __m = memory_order_seq_cst) const
      volatile noexcept {
    std::__atomic_wait(*this, __v, __m);
  }
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  wait(_Tp __v, memory_order __m = memory_order_seq_cst) const noexcept {
    std::__atomic_wait(*this, __v, __m);
  }
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void notify_one() volatile noexcept {
    std::__atomic_notify_one(*this);
  }
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void notify_one() noexcept { std::__atomic_notify_one(*this); }
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void notify_all() volatile noexcept {
    std::__atomic_notify_all(*this);
  }
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void notify_all() noexcept { std::__atomic_notify_all(*this); }




  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __atomic_base() noexcept = default;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __atomic_base(_Tp __d) noexcept : __a_(__d) {}

  __atomic_base(const __atomic_base&) = delete;
};



template <class _Tp>
struct __atomic_base<_Tp, true> : public __atomic_base<_Tp, false> {
  using __base = __atomic_base<_Tp, false>;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __atomic_base() noexcept = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __atomic_base(_Tp __d) noexcept : __base(__d) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp fetch_add(_Tp __op, memory_order __m = memory_order_seq_cst) volatile noexcept {
    return std::__cxx_atomic_fetch_add(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp fetch_add(_Tp __op, memory_order __m = memory_order_seq_cst) noexcept {
    return std::__cxx_atomic_fetch_add(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp fetch_sub(_Tp __op, memory_order __m = memory_order_seq_cst) volatile noexcept {
    return std::__cxx_atomic_fetch_sub(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp fetch_sub(_Tp __op, memory_order __m = memory_order_seq_cst) noexcept {
    return std::__cxx_atomic_fetch_sub(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp fetch_and(_Tp __op, memory_order __m = memory_order_seq_cst) volatile noexcept {
    return std::__cxx_atomic_fetch_and(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp fetch_and(_Tp __op, memory_order __m = memory_order_seq_cst) noexcept {
    return std::__cxx_atomic_fetch_and(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp fetch_or(_Tp __op, memory_order __m = memory_order_seq_cst) volatile noexcept {
    return std::__cxx_atomic_fetch_or(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp fetch_or(_Tp __op, memory_order __m = memory_order_seq_cst) noexcept {
    return std::__cxx_atomic_fetch_or(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp fetch_xor(_Tp __op, memory_order __m = memory_order_seq_cst) volatile noexcept {
    return std::__cxx_atomic_fetch_xor(std::addressof(this->__a_), __op, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp fetch_xor(_Tp __op, memory_order __m = memory_order_seq_cst) noexcept {
    return std::__cxx_atomic_fetch_xor(std::addressof(this->__a_), __op, __m);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator++(int) volatile noexcept { return fetch_add(_Tp(1)); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator++(int) noexcept { return fetch_add(_Tp(1)); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator--(int) volatile noexcept { return fetch_sub(_Tp(1)); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator--(int) noexcept { return fetch_sub(_Tp(1)); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator++() volatile noexcept { return fetch_add(_Tp(1)) + _Tp(1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator++() noexcept { return fetch_add(_Tp(1)) + _Tp(1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator--() volatile noexcept { return fetch_sub(_Tp(1)) - _Tp(1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator--() noexcept { return fetch_sub(_Tp(1)) - _Tp(1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator+=(_Tp __op) volatile noexcept { return fetch_add(__op) + __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator+=(_Tp __op) noexcept { return fetch_add(__op) + __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator-=(_Tp __op) volatile noexcept { return fetch_sub(__op) - __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator-=(_Tp __op) noexcept { return fetch_sub(__op) - __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator&=(_Tp __op) volatile noexcept { return fetch_and(__op) & __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator&=(_Tp __op) noexcept { return fetch_and(__op) & __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator|=(_Tp __op) volatile noexcept { return fetch_or(__op) | __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator|=(_Tp __op) noexcept { return fetch_or(__op) | __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator^=(_Tp __op) volatile noexcept { return fetch_xor(__op) ^ __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator^=(_Tp __op) noexcept { return fetch_xor(__op) ^ __op; }
};





template <class _Tp, bool _IsIntegral>
struct __atomic_waitable_traits<__atomic_base<_Tp, _IsIntegral> > {
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp __atomic_load(const __atomic_base<_Tp, _IsIntegral>& __a, memory_order __order) {
    return __a.load(__order);
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
  __atomic_load(const volatile __atomic_base<_Tp, _IsIntegral>& __this, memory_order __order) {
    return __this.load(__order);
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const __cxx_atomic_impl<_Tp>*
  __atomic_contention_address(const __atomic_base<_Tp, _IsIntegral>& __a) {
    return std::addressof(__a.__a_);
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const volatile __cxx_atomic_impl<_Tp>*
  __atomic_contention_address(const volatile __atomic_base<_Tp, _IsIntegral>& __this) {
    return std::addressof(__this.__a_);
  }
};

}}
# 219 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_base.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic.h" 2 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic.h" 3


#pragma clang diagnostic push
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct atomic : public __atomic_base<_Tp> {
  using __base = __atomic_base<_Tp>;
  using value_type = _Tp;
  using difference_type = value_type;




  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) atomic() noexcept = default;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr atomic(_Tp __d) noexcept : __base(__d) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator=(_Tp __d) volatile noexcept {
    __base::store(__d);
    return __d;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp operator=(_Tp __d) noexcept {
    __base::store(__d);
    return __d;
  }

  atomic& operator=(const atomic&) = delete;
  atomic& operator=(const atomic&) volatile = delete;
};



template <class _Tp>
struct atomic<_Tp*> : public __atomic_base<_Tp*> {
  using __base = __atomic_base<_Tp*>;
  using value_type = _Tp*;
  using difference_type = ptrdiff_t;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) atomic() noexcept = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr atomic(_Tp* __d) noexcept : __base(__d) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* operator=(_Tp* __d) volatile noexcept {
    __base::store(__d);
    return __d;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* operator=(_Tp* __d) noexcept {
    __base::store(__d);
    return __d;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* fetch_add(ptrdiff_t __op, memory_order __m = memory_order_seq_cst) volatile noexcept {

    static_assert(!is_function<__remove_pointer_t<_Tp> >::value, "Pointer to function isn't allowed");
    return std::__cxx_atomic_fetch_add(std::addressof(this->__a_), __op, __m);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* fetch_add(ptrdiff_t __op, memory_order __m = memory_order_seq_cst) noexcept {

    static_assert(!is_function<__remove_pointer_t<_Tp> >::value, "Pointer to function isn't allowed");
    return std::__cxx_atomic_fetch_add(std::addressof(this->__a_), __op, __m);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* fetch_sub(ptrdiff_t __op, memory_order __m = memory_order_seq_cst) volatile noexcept {

    static_assert(!is_function<__remove_pointer_t<_Tp> >::value, "Pointer to function isn't allowed");
    return std::__cxx_atomic_fetch_sub(std::addressof(this->__a_), __op, __m);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* fetch_sub(ptrdiff_t __op, memory_order __m = memory_order_seq_cst) noexcept {

    static_assert(!is_function<__remove_pointer_t<_Tp> >::value, "Pointer to function isn't allowed");
    return std::__cxx_atomic_fetch_sub(std::addressof(this->__a_), __op, __m);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* operator++(int) volatile noexcept { return fetch_add(1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* operator++(int) noexcept { return fetch_add(1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* operator--(int) volatile noexcept { return fetch_sub(1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* operator--(int) noexcept { return fetch_sub(1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* operator++() volatile noexcept { return fetch_add(1) + 1; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* operator++() noexcept { return fetch_add(1) + 1; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* operator--() volatile noexcept { return fetch_sub(1) - 1; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* operator--() noexcept { return fetch_sub(1) - 1; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* operator+=(ptrdiff_t __op) volatile noexcept { return fetch_add(__op) + __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* operator+=(ptrdiff_t __op) noexcept { return fetch_add(__op) + __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* operator-=(ptrdiff_t __op) volatile noexcept { return fetch_sub(__op) - __op; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* operator-=(ptrdiff_t __op) noexcept { return fetch_sub(__op) - __op; }

  atomic& operator=(const atomic&) = delete;
  atomic& operator=(const atomic&) volatile = delete;
};
# 256 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic.h" 3
template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_is_lock_free(const volatile atomic<_Tp>* __o) noexcept {
  return __o->is_lock_free();
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_is_lock_free(const atomic<_Tp>* __o) noexcept {
  return __o->is_lock_free();
}



template <class _Tp>
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_init(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) noexcept {
  std::__cxx_atomic_init(std::addressof(__o->__a_), __d);
}

template <class _Tp>
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_init(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) noexcept {
  std::__cxx_atomic_init(std::addressof(__o->__a_), __d);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void atomic_store(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) noexcept {
  __o->store(__d);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void atomic_store(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) noexcept {
  __o->store(__d);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_store_explicit(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d, memory_order __m) noexcept
    __attribute__((__diagnose_if__(__m == memory_order_consume || __m == memory_order_acquire || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  __o->store(__d, __m);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_store_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d, memory_order __m) noexcept
    __attribute__((__diagnose_if__(__m == memory_order_consume || __m == memory_order_acquire || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  __o->store(__d, __m);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_load(const volatile atomic<_Tp>* __o) noexcept {
  return __o->load();
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_load(const atomic<_Tp>* __o) noexcept {
  return __o->load();
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_load_explicit(const volatile atomic<_Tp>* __o, memory_order __m) noexcept
    __attribute__((__diagnose_if__(__m == memory_order_release || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  return __o->load(__m);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_load_explicit(const atomic<_Tp>* __o, memory_order __m) noexcept
    __attribute__((__diagnose_if__(__m == memory_order_release || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  return __o->load(__m);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_exchange(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) noexcept {
  return __o->exchange(__d);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_exchange(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d) noexcept {
  return __o->exchange(__d);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
atomic_exchange_explicit(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d, memory_order __m) noexcept {
  return __o->exchange(__d, __m);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
atomic_exchange_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __d, memory_order __m) noexcept {
  return __o->exchange(__d, __m);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_compare_exchange_weak(
    volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type* __e, typename atomic<_Tp>::value_type __d) noexcept {
  return __o->compare_exchange_weak(*__e, __d);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_compare_exchange_weak(
    atomic<_Tp>* __o, typename atomic<_Tp>::value_type* __e, typename atomic<_Tp>::value_type __d) noexcept {
  return __o->compare_exchange_weak(*__e, __d);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_compare_exchange_strong(
    volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type* __e, typename atomic<_Tp>::value_type __d) noexcept {
  return __o->compare_exchange_strong(*__e, __d);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_compare_exchange_strong(
    atomic<_Tp>* __o, typename atomic<_Tp>::value_type* __e, typename atomic<_Tp>::value_type __d) noexcept {
  return __o->compare_exchange_strong(*__e, __d);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_compare_exchange_weak_explicit(
    volatile atomic<_Tp>* __o,
    typename atomic<_Tp>::value_type* __e,
    typename atomic<_Tp>::value_type __d,
    memory_order __s,
    memory_order __f) noexcept __attribute__((__diagnose_if__(__f == memory_order_release || __f == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  return __o->compare_exchange_weak(*__e, __d, __s, __f);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_compare_exchange_weak_explicit(
    atomic<_Tp>* __o,
    typename atomic<_Tp>::value_type* __e,
    typename atomic<_Tp>::value_type __d,
    memory_order __s,
    memory_order __f) noexcept __attribute__((__diagnose_if__(__f == memory_order_release || __f == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  return __o->compare_exchange_weak(*__e, __d, __s, __f);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_compare_exchange_strong_explicit(
    volatile atomic<_Tp>* __o,
    typename atomic<_Tp>::value_type* __e,
    typename atomic<_Tp>::value_type __d,
    memory_order __s,
    memory_order __f) noexcept __attribute__((__diagnose_if__(__f == memory_order_release || __f == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  return __o->compare_exchange_strong(*__e, __d, __s, __f);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_compare_exchange_strong_explicit(
    atomic<_Tp>* __o,
    typename atomic<_Tp>::value_type* __e,
    typename atomic<_Tp>::value_type __d,
    memory_order __s,
    memory_order __f) noexcept __attribute__((__diagnose_if__(__f == memory_order_release || __f == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  return __o->compare_exchange_strong(*__e, __d, __s, __f);
}



template <class _Tp>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_wait(const volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __v) noexcept {
  return __o->wait(__v);
}

template <class _Tp>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_wait(const atomic<_Tp>* __o, typename atomic<_Tp>::value_type __v) noexcept {
  return __o->wait(__v);
}



template <class _Tp>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_wait_explicit(const volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __v, memory_order __m) noexcept
    __attribute__((__diagnose_if__(__m == memory_order_release || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  return __o->wait(__v, __m);
}

template <class _Tp>
                          __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_wait_explicit(const atomic<_Tp>* __o, typename atomic<_Tp>::value_type __v, memory_order __m) noexcept
    __attribute__((__diagnose_if__(__m == memory_order_release || __m == memory_order_acq_rel, "memory order argument to atomic operation is invalid", "warning"))) {
  return __o->wait(__v, __m);
}



template <class _Tp>
__attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_notify_one(volatile atomic<_Tp>* __o) noexcept {
  __o->notify_one();
}
template <class _Tp>
__attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_notify_one(atomic<_Tp>* __o) noexcept {
  __o->notify_one();
}



template <class _Tp>
__attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_notify_all(volatile atomic<_Tp>* __o) noexcept {
  __o->notify_all();
}
template <class _Tp>
__attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_notify_all(atomic<_Tp>* __o) noexcept {
  __o->notify_all();
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
atomic_fetch_add(volatile atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op) noexcept {
  return __o->fetch_add(__op);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_fetch_add(atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op) noexcept {
  return __o->fetch_add(__op);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_fetch_add_explicit(
    volatile atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op, memory_order __m) noexcept {
  return __o->fetch_add(__op, __m);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
atomic_fetch_add_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op, memory_order __m) noexcept {
  return __o->fetch_add(__op, __m);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
atomic_fetch_sub(volatile atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op) noexcept {
  return __o->fetch_sub(__op);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_fetch_sub(atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op) noexcept {
  return __o->fetch_sub(__op);
}



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_fetch_sub_explicit(
    volatile atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op, memory_order __m) noexcept {
  return __o->fetch_sub(__op, __m);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
atomic_fetch_sub_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::difference_type __op, memory_order __m) noexcept {
  return __o->fetch_sub(__op, __m);
}



template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_fetch_and(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) noexcept {
  return __o->fetch_and(__op);
}

template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_fetch_and(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) noexcept {
  return __o->fetch_and(__op);
}



template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_fetch_and_explicit(
    volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) noexcept {
  return __o->fetch_and(__op, __m);
}

template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
atomic_fetch_and_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) noexcept {
  return __o->fetch_and(__op, __m);
}



template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_fetch_or(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) noexcept {
  return __o->fetch_or(__op);
}

template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_fetch_or(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) noexcept {
  return __o->fetch_or(__op);
}



template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
atomic_fetch_or_explicit(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) noexcept {
  return __o->fetch_or(__op, __m);
}

template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
atomic_fetch_or_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) noexcept {
  return __o->fetch_or(__op, __m);
}



template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_fetch_xor(volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) noexcept {
  return __o->fetch_xor(__op);
}

template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_fetch_xor(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op) noexcept {
  return __o->fetch_xor(__op);
}



template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp atomic_fetch_xor_explicit(
    volatile atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) noexcept {
  return __o->fetch_xor(__op, __m);
}

template <class _Tp, __enable_if_t<is_integral<_Tp>::value && !is_same<_Tp, bool>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
atomic_fetch_xor_explicit(atomic<_Tp>* __o, typename atomic<_Tp>::value_type __op, memory_order __m) noexcept {
  return __o->fetch_xor(__op, __m);
}

}}
# 620 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/aliases.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_lock_free.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_lock_free.h" 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/aliases.h" 2 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/aliases.h" 3


#pragma clang diagnostic push
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/aliases.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/aliases.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/aliases.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/aliases.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/aliases.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/aliases.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

using atomic_bool = atomic<bool>;
using atomic_char = atomic<char>;
using atomic_schar = atomic<signed char>;
using atomic_uchar = atomic<unsigned char>;
using atomic_short = atomic<short>;
using atomic_ushort = atomic<unsigned short>;
using atomic_int = atomic<int>;
using atomic_uint = atomic<unsigned int>;
using atomic_long = atomic<long>;
using atomic_ulong = atomic<unsigned long>;
using atomic_llong = atomic<long long>;
using atomic_ullong = atomic<unsigned long long>;



using atomic_char16_t = atomic<char16_t>;
using atomic_char32_t = atomic<char32_t>;

using atomic_wchar_t = atomic<wchar_t>;


using atomic_int_least8_t = atomic<int_least8_t>;
using atomic_uint_least8_t = atomic<uint_least8_t>;
using atomic_int_least16_t = atomic<int_least16_t>;
using atomic_uint_least16_t = atomic<uint_least16_t>;
using atomic_int_least32_t = atomic<int_least32_t>;
using atomic_uint_least32_t = atomic<uint_least32_t>;
using atomic_int_least64_t = atomic<int_least64_t>;
using atomic_uint_least64_t = atomic<uint_least64_t>;

using atomic_int_fast8_t = atomic<int_fast8_t>;
using atomic_uint_fast8_t = atomic<uint_fast8_t>;
using atomic_int_fast16_t = atomic<int_fast16_t>;
using atomic_uint_fast16_t = atomic<uint_fast16_t>;
using atomic_int_fast32_t = atomic<int_fast32_t>;
using atomic_uint_fast32_t = atomic<uint_fast32_t>;
using atomic_int_fast64_t = atomic<int_fast64_t>;
using atomic_uint_fast64_t = atomic<uint_fast64_t>;

using atomic_int8_t = atomic< int8_t>;
using atomic_uint8_t = atomic<uint8_t>;
using atomic_int16_t = atomic< int16_t>;
using atomic_uint16_t = atomic<uint16_t>;
using atomic_int32_t = atomic< int32_t>;
using atomic_uint32_t = atomic<uint32_t>;
using atomic_int64_t = atomic< int64_t>;
using atomic_uint64_t = atomic<uint64_t>;

using atomic_intptr_t = atomic<intptr_t>;
using atomic_uintptr_t = atomic<uintptr_t>;
using atomic_size_t = atomic<size_t>;
using atomic_ptrdiff_t = atomic<ptrdiff_t>;
using atomic_intmax_t = atomic<intmax_t>;
using atomic_uintmax_t = atomic<uintmax_t>;
# 108 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/aliases.h" 3
}}
# 108 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/aliases.h" 3
#pragma clang diagnostic pop
# 597 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/atomic" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_flag.h" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_flag.h" 3


#pragma clang diagnostic push
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_flag.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_flag.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_flag.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_flag.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_flag.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_flag.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

struct atomic_flag {
  __cxx_atomic_impl<bool> __a_;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool test(memory_order __m = memory_order_seq_cst) const volatile noexcept {
    return bool(true) == __cxx_atomic_load(&__a_, __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool test(memory_order __m = memory_order_seq_cst) const noexcept {
    return bool(true) == __cxx_atomic_load(&__a_, __m);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool test_and_set(memory_order __m = memory_order_seq_cst) volatile noexcept {
    return __cxx_atomic_exchange(&__a_, bool(true), __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool test_and_set(memory_order __m = memory_order_seq_cst) noexcept {
    return __cxx_atomic_exchange(&__a_, bool(true), __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void clear(memory_order __m = memory_order_seq_cst) volatile noexcept {
    __cxx_atomic_store(&__a_, bool(false), __m);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void clear(memory_order __m = memory_order_seq_cst) noexcept {
    __cxx_atomic_store(&__a_, bool(false), __m);
  }

  __attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  wait(bool __v, memory_order __m = memory_order_seq_cst) const volatile noexcept {
    std::__atomic_wait(*this, bool(__v), __m);
  }
  __attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  wait(bool __v, memory_order __m = memory_order_seq_cst) const noexcept {
    std::__atomic_wait(*this, bool(__v), __m);
  }
  __attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void notify_one() volatile noexcept {
    std::__atomic_notify_one(*this);
  }
  __attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void notify_one() noexcept {
    std::__atomic_notify_one(*this);
  }
                            __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void notify_all() volatile noexcept {
    std::__atomic_notify_all(*this);
  }
  __attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void notify_all() noexcept {
    std::__atomic_notify_all(*this);
  }




  atomic_flag() noexcept = default;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr atomic_flag(bool __b) noexcept : __a_(__b) {}

  atomic_flag(const atomic_flag&) = delete;
  atomic_flag& operator=(const atomic_flag&) = delete;
  atomic_flag& operator=(const atomic_flag&) volatile = delete;
};

template <>
struct __atomic_waitable_traits<atomic_flag> {
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __atomic_load(const atomic_flag& __a, memory_order __order) {
    return std::__cxx_atomic_load(&__a.__a_, __order);
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  __atomic_load(const volatile atomic_flag& __a, memory_order __order) {
    return std::__cxx_atomic_load(&__a.__a_, __order);
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const __cxx_atomic_impl<bool>*
  __atomic_contention_address(const atomic_flag& __a) {
    return std::addressof(__a.__a_);
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const volatile __cxx_atomic_impl<bool>*
  __atomic_contention_address(const volatile atomic_flag& __a) {
    return std::addressof(__a.__a_);
  }
};

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_flag_test(const volatile atomic_flag* __o) noexcept { return __o->test(); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_flag_test(const atomic_flag* __o) noexcept { return __o->test(); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
atomic_flag_test_explicit(const volatile atomic_flag* __o, memory_order __m) noexcept {
  return __o->test(__m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_flag_test_explicit(const atomic_flag* __o, memory_order __m) noexcept {
  return __o->test(__m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_flag_test_and_set(volatile atomic_flag* __o) noexcept {
  return __o->test_and_set();
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_flag_test_and_set(atomic_flag* __o) noexcept { return __o->test_and_set(); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
atomic_flag_test_and_set_explicit(volatile atomic_flag* __o, memory_order __m) noexcept {
  return __o->test_and_set(__m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool atomic_flag_test_and_set_explicit(atomic_flag* __o, memory_order __m) noexcept {
  return __o->test_and_set(__m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void atomic_flag_clear(volatile atomic_flag* __o) noexcept { __o->clear(); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void atomic_flag_clear(atomic_flag* __o) noexcept { __o->clear(); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void atomic_flag_clear_explicit(volatile atomic_flag* __o, memory_order __m) noexcept {
  __o->clear(__m);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void atomic_flag_clear_explicit(atomic_flag* __o, memory_order __m) noexcept {
  __o->clear(__m);
}

inline __attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_flag_wait(const volatile atomic_flag* __o, bool __v) noexcept {
  __o->wait(__v);
}

inline __attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_flag_wait(const atomic_flag* __o, bool __v) noexcept {
  __o->wait(__v);
}

inline __attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_flag_wait_explicit(const volatile atomic_flag* __o, bool __v, memory_order __m) noexcept {
  __o->wait(__v, __m);
}

inline __attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_flag_wait_explicit(const atomic_flag* __o, bool __v, memory_order __m) noexcept {
  __o->wait(__v, __m);
}

inline __attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_flag_notify_one(volatile atomic_flag* __o) noexcept {
  __o->notify_one();
}

inline __attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_flag_notify_one(atomic_flag* __o) noexcept {
  __o->notify_one();
}

inline __attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_flag_notify_all(volatile atomic_flag* __o) noexcept {
  __o->notify_all();
}

inline __attribute__((__deprecated__("The C++20 synchronization library has been deprecated prior to C++20. Please update to " "using -std=c++20 if you need to use these facilities."))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
atomic_flag_notify_all(atomic_flag* __o) noexcept {
  __o->notify_all();
}

}}
# 187 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_flag.h" 3
#pragma clang diagnostic pop
# 600 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/atomic" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_init.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/atomic_init.h" 3
# 601 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/atomic" 2 3





# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/fence.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/fence.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/fence.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/fence.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/fence.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/fence.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/fence.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/fence.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void atomic_thread_fence(memory_order __m) noexcept { __cxx_atomic_thread_fence(__m); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void atomic_signal_fence(memory_order __m) noexcept { __cxx_atomic_signal_fence(__m); }

}}
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/fence.h" 3
#pragma clang diagnostic pop
# 607 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/atomic" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/kill_dependency.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/kill_dependency.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/kill_dependency.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/kill_dependency.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/kill_dependency.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/kill_dependency.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/kill_dependency.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/kill_dependency.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp kill_dependency(_Tp __y) noexcept {
  return __y;
}

}}
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__atomic/kill_dependency.h" 3
#pragma clang diagnostic pop
# 609 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/atomic" 2 3
# 618 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/atomic" 3
# 1289 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/concepts" 1 3
# 171 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/concepts" 3
# 1291 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iterator" 1 3
# 685 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iterator" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/back_insert_iterator.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/back_insert_iterator.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/back_insert_iterator.h" 2 3

#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/back_insert_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/back_insert_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/back_insert_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/back_insert_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/back_insert_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/back_insert_iterator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

#pragma GCC diagnostic push
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/back_insert_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/back_insert_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Container>
class back_insert_iterator

    : public iterator<output_iterator_tag, void, void, void, void>

{
#pragma GCC diagnostic pop

protected:
  _Container* container;

public:
  typedef output_iterator_tag iterator_category;
  typedef void value_type;



  typedef void difference_type;

  typedef void pointer;
  typedef void reference;
  typedef _Container container_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit back_insert_iterator(_Container& __x)
      : container(std::addressof(__x)) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) back_insert_iterator&
  operator=(const typename _Container::value_type& __value) {
    container->push_back(__value);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) back_insert_iterator&
  operator=(typename _Container::value_type&& __value) {
    container->push_back(std::move(__value));
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) back_insert_iterator& operator*() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) back_insert_iterator& operator++() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) back_insert_iterator operator++(int) { return *this; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Container* __get_container() const { return container; }
};
template <class... _Tag> [[maybe_unused]] back_insert_iterator(typename _Tag::__allow_ctad...)->back_insert_iterator<_Tag...>;

template <class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) back_insert_iterator<_Container>
back_inserter(_Container& __x) {
  return back_insert_iterator<_Container>(__x);
}

}}
# 81 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/back_insert_iterator.h" 3
#pragma clang diagnostic pop
# 686 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iterator" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/front_insert_iterator.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/front_insert_iterator.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/front_insert_iterator.h" 2 3

#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/front_insert_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/front_insert_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/front_insert_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/front_insert_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/front_insert_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/front_insert_iterator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

#pragma GCC diagnostic push
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/front_insert_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/front_insert_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Container>
class front_insert_iterator

    : public iterator<output_iterator_tag, void, void, void, void>

{
#pragma GCC diagnostic pop

protected:
  _Container* container;

public:
  typedef output_iterator_tag iterator_category;
  typedef void value_type;



  typedef void difference_type;

  typedef void pointer;
  typedef void reference;
  typedef _Container container_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit front_insert_iterator(_Container& __x)
      : container(std::addressof(__x)) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) front_insert_iterator&
  operator=(const typename _Container::value_type& __value) {
    container->push_front(__value);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) front_insert_iterator&
  operator=(typename _Container::value_type&& __value) {
    container->push_front(std::move(__value));
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) front_insert_iterator& operator*() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) front_insert_iterator& operator++() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) front_insert_iterator operator++(int) { return *this; }
};
template <class... _Tag> [[maybe_unused]] front_insert_iterator(typename _Tag::__allow_ctad...)->front_insert_iterator<_Tag...>;

template <class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) front_insert_iterator<_Container>
front_inserter(_Container& __x) {
  return front_insert_iterator<_Container>(__x);
}

}}
# 79 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/front_insert_iterator.h" 3
#pragma clang diagnostic pop
# 688 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iterator" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/insert_iterator.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/insert_iterator.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/insert_iterator.h" 2 3

#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/insert_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/insert_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/insert_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/insert_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/insert_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/insert_iterator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {





template <class _Container>
using __insert_iterator_iter_t = typename _Container::iterator;


#pragma GCC diagnostic push
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/insert_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/insert_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Container>
class insert_iterator

    : public iterator<output_iterator_tag, void, void, void, void>

{
#pragma GCC diagnostic pop

protected:
  _Container* container;
  __insert_iterator_iter_t<_Container> iter;

public:
  typedef output_iterator_tag iterator_category;
  typedef void value_type;



  typedef void difference_type;

  typedef void pointer;
  typedef void reference;
  typedef _Container container_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  insert_iterator(_Container& __x, __insert_iterator_iter_t<_Container> __i)
      : container(std::addressof(__x)), iter(__i) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) insert_iterator&
  operator=(const typename _Container::value_type& __value) {
    iter = container->insert(iter, __value);
    ++iter;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) insert_iterator&
  operator=(typename _Container::value_type&& __value) {
    iter = container->insert(iter, std::move(__value));
    ++iter;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) insert_iterator& operator*() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) insert_iterator& operator++() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) insert_iterator& operator++(int) { return *this; }
};

template <class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) insert_iterator<_Container>
inserter(_Container& __x, __insert_iterator_iter_t<_Container> __i) {
  return insert_iterator<_Container>(__x, __i);
}

}}
# 91 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/insert_iterator.h" 3
#pragma clang diagnostic pop
# 689 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iterator" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istream_iterator.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istream_iterator.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/default_sentinel.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/default_sentinel.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/default_sentinel.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/default_sentinel.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/default_sentinel.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/default_sentinel.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/default_sentinel.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/default_sentinel.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/default_sentinel.h" 3
}}
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/default_sentinel.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istream_iterator.h" 2 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istream_iterator.h" 3


#pragma clang diagnostic push
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istream_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istream_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istream_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istream_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istream_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istream_iterator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

#pragma GCC diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istream_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istream_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Tp, class _CharT = char, class _Traits = char_traits<_CharT>, class _Distance = ptrdiff_t>
class istream_iterator

    : public iterator<input_iterator_tag, _Tp, _Distance, const _Tp*, const _Tp&>

{
#pragma GCC diagnostic pop

public:
  typedef input_iterator_tag iterator_category;
  typedef _Tp value_type;
  typedef _Distance difference_type;
  typedef const _Tp* pointer;
  typedef const _Tp& reference;
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef basic_istream<_CharT, _Traits> istream_type;

private:
  istream_type* __in_stream_;
  _Tp __value_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr istream_iterator() : __in_stream_(nullptr), __value_() {}



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) istream_iterator(istream_type& __s) : __in_stream_(std::addressof(__s)) {
    if (!(*__in_stream_ >> __value_))
      __in_stream_ = nullptr;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Tp& operator*() const { return __value_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Tp* operator->() const { return std::addressof((operator*())); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) istream_iterator& operator++() {
    if (!(*__in_stream_ >> __value_))
      __in_stream_ = nullptr;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) istream_iterator operator++(int) {
    istream_iterator __t(*this);
    ++(*this);
    return __t;
  }

  template <class _Up, class _CharU, class _TraitsU, class _DistanceU>
  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const istream_iterator<_Up, _CharU, _TraitsU, _DistanceU>& __x,
                                               const istream_iterator<_Up, _CharU, _TraitsU, _DistanceU>& __y);






};

template <class _Tp, class _CharT, class _Traits, class _Distance>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __x,
                                             const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __y) {
  return __x.__in_stream_ == __y.__in_stream_;
}


template <class _Tp, class _CharT, class _Traits, class _Distance>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __x,
                                             const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __y) {
  return !(__x == __y);
}


}}
# 99 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istream_iterator.h" 3
#pragma clang diagnostic pop
# 690 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iterator" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istreambuf_iterator.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istreambuf_iterator.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istreambuf_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istreambuf_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istreambuf_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istreambuf_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istreambuf_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istreambuf_iterator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

#pragma GCC diagnostic push
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istreambuf_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istreambuf_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _CharT, class _Traits>
class istreambuf_iterator

    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type, _CharT*, _CharT>

{
#pragma GCC diagnostic pop

public:
  typedef input_iterator_tag iterator_category;
  typedef _CharT value_type;
  typedef typename _Traits::off_type difference_type;
  typedef _CharT* pointer;
  typedef _CharT reference;
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef typename _Traits::int_type int_type;
  typedef basic_streambuf<_CharT, _Traits> streambuf_type;
  typedef basic_istream<_CharT, _Traits> istream_type;

private:
  mutable streambuf_type* __sbuf_;

  class __proxy {
    char_type __keep_;
    streambuf_type* __sbuf_;
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __proxy(char_type __c, streambuf_type* __s) : __keep_(__c), __sbuf_(__s) {}
    friend class istreambuf_iterator;

  public:
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type operator*() const { return __keep_; }
  };

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __test_for_eof() const {
    if (__sbuf_ && traits_type::eq_int_type(__sbuf_->sgetc(), traits_type::eof()))
      __sbuf_ = nullptr;
    return __sbuf_ == nullptr;
  }

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr istreambuf_iterator() noexcept : __sbuf_(nullptr) {}



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) istreambuf_iterator(istream_type& __s) noexcept : __sbuf_(__s.rdbuf()) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) istreambuf_iterator(streambuf_type* __s) noexcept : __sbuf_(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) istreambuf_iterator(const __proxy& __p) noexcept : __sbuf_(__p.__sbuf_) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type operator*() const { return static_cast<char_type>(__sbuf_->sgetc()); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) istreambuf_iterator& operator++() {
    __sbuf_->sbumpc();
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __proxy operator++(int) { return __proxy(__sbuf_->sbumpc(), __sbuf_); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool equal(const istreambuf_iterator& __b) const {
    return __test_for_eof() == __b.__test_for_eof();
  }






};

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator==(const istreambuf_iterator<_CharT, _Traits>& __a, const istreambuf_iterator<_CharT, _Traits>& __b) {
  return __a.equal(__b);
}


template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator!=(const istreambuf_iterator<_CharT, _Traits>& __a, const istreambuf_iterator<_CharT, _Traits>& __b) {
  return !__a.equal(__b);
}


}}
# 107 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/istreambuf_iterator.h" 3
#pragma clang diagnostic pop
# 691 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iterator" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 1 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_sentinel.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_sentinel.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_sentinel.h" 2 3

#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_sentinel.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_sentinel.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_sentinel.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_sentinel.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_sentinel.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_sentinel.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 57 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_sentinel.h" 3
}}
# 57 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_sentinel.h" 3
#pragma clang diagnostic pop
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 2 3
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 2 3

#pragma clang diagnostic push
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 66 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3
template <class _Iter>
class move_iterator



{
# 88 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3
public:
# 98 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3
  typedef _Iter iterator_type;
  typedef _If< __has_random_access_iterator_category<_Iter>::value,
               random_access_iterator_tag,
               typename iterator_traits<_Iter>::iterator_category >
      iterator_category;
  typedef typename iterator_traits<iterator_type>::value_type value_type;
  typedef typename iterator_traits<iterator_type>::difference_type difference_type;
  typedef iterator_type pointer;

  typedef typename iterator_traits<iterator_type>::reference __reference;
  typedef __conditional_t<is_reference<__reference>::value, __libcpp_remove_reference_t<__reference>&&, __reference>
      reference;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit move_iterator(_Iter __i) : __current_(std::move(__i)) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr move_iterator& operator++() {
    ++__current_;
    return *this;
  }

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pointer operator->() const {
    return __current_;
  }
# 157 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr move_iterator() : __current_() {}

  template <class _Up, __enable_if_t< !is_same<_Up, _Iter>::value && is_convertible<const _Up&, _Iter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr move_iterator(const move_iterator<_Up>& __u)
      : __current_(__u.base()) {}

  template <class _Up,
            __enable_if_t< !is_same<_Up, _Iter>::value && is_convertible<const _Up&, _Iter>::value &&
                               is_assignable<_Iter&, const _Up&>::value,
                           int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr move_iterator& operator=(const move_iterator<_Up>& __u) {
    __current_ = __u.base();
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Iter base() const { return __current_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference operator*() const {
    return static_cast<reference>(*__current_);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference operator[](difference_type __n) const {
    return static_cast<reference>(__current_[__n]);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr move_iterator operator++(int) {
    move_iterator __tmp(*this);
    ++__current_;
    return __tmp;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr move_iterator& operator--() {
    --__current_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr move_iterator operator--(int) {
    move_iterator __tmp(*this);
    --__current_;
    return __tmp;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr move_iterator operator+(difference_type __n) const {
    return move_iterator(__current_ + __n);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr move_iterator& operator+=(difference_type __n) {
    __current_ += __n;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr move_iterator operator-(difference_type __n) const {
    return move_iterator(__current_ - __n);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr move_iterator& operator-=(difference_type __n) {
    __current_ -= __n;
    return *this;
  }
# 245 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3
private:
  template <class _It2>
  friend class move_iterator;

  _Iter __current_;
};
template <class... _Tag> [[maybe_unused]] move_iterator(typename _Tag::__allow_ctad...)->move_iterator<_Tag...>;

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator==(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y) {
  return __x.base() == __y.base();
}


template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator!=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y) {
  return __x.base() != __y.base();
}


template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator<(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y) {
  return __x.base() < __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator>(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y) {
  return __x.base() > __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator<=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y) {
  return __x.base() <= __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool
operator>=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y) {
  return __x.base() >= __y.base();
}
# 301 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3
template <class _Iter1, class _Iter2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto
operator-(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y) -> decltype(__x.base() - __y.base()) {
  return __x.base() - __y.base();
}
# 325 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3
template <class _Iter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr move_iterator<_Iter>
operator+(typename move_iterator<_Iter>::difference_type __n, const move_iterator<_Iter>& __x) {
  return move_iterator<_Iter>(__x.base() + __n);
}
# 338 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3
template <class _Iter>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr move_iterator<_Iter> make_move_iterator(_Iter __i) {
  return move_iterator<_Iter>(std::move(__i));
}

}}
# 343 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/move_iterator.h" 3
#pragma clang diagnostic pop
# 694 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iterator" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostream_iterator.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostream_iterator.h" 3


#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostream_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostream_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostream_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostream_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostream_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostream_iterator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

#pragma GCC diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostream_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostream_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Tp, class _CharT = char, class _Traits = char_traits<_CharT> >
class ostream_iterator

    : public iterator<output_iterator_tag, void, void, void, void>

{
#pragma GCC diagnostic pop

public:
  typedef output_iterator_tag iterator_category;
  typedef void value_type;



  typedef void difference_type;

  typedef void pointer;
  typedef void reference;
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef basic_ostream<_CharT, _Traits> ostream_type;

private:
  ostream_type* __out_stream_;
  const char_type* __delim_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ostream_iterator(ostream_type& __s) noexcept
      : __out_stream_(std::addressof(__s)),
        __delim_(nullptr) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ostream_iterator(ostream_type& __s, const _CharT* __delimiter) noexcept
      : __out_stream_(std::addressof(__s)),
        __delim_(__delimiter) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ostream_iterator& operator=(const _Tp& __value) {
    *__out_stream_ << __value;
    if (__delim_)
      *__out_stream_ << __delim_;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ostream_iterator& operator*() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ostream_iterator& operator++() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ostream_iterator& operator++(int) { return *this; }
};

}}
# 73 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostream_iterator.h" 3
#pragma clang diagnostic pop
# 696 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iterator" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostreambuf_iterator.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostreambuf_iterator.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostreambuf_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostreambuf_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostreambuf_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostreambuf_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostreambuf_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostreambuf_iterator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

#pragma GCC diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostreambuf_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostreambuf_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _CharT, class _Traits>
class ostreambuf_iterator

    : public iterator<output_iterator_tag, void, void, void, void>

{
#pragma GCC diagnostic pop

public:
  typedef output_iterator_tag iterator_category;
  typedef void value_type;



  typedef void difference_type;

  typedef void pointer;
  typedef void reference;
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef basic_streambuf<_CharT, _Traits> streambuf_type;
  typedef basic_ostream<_CharT, _Traits> ostream_type;

private:
  streambuf_type* __sbuf_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ostreambuf_iterator(ostream_type& __s) noexcept : __sbuf_(__s.rdbuf()) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ostreambuf_iterator(streambuf_type* __s) noexcept : __sbuf_(__s) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ostreambuf_iterator& operator=(_CharT __c) {
    if (__sbuf_ && traits_type::eq_int_type(__sbuf_->sputc(__c), traits_type::eof()))
      __sbuf_ = nullptr;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ostreambuf_iterator& operator*() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ostreambuf_iterator& operator++() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ostreambuf_iterator& operator++(int) { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool failed() const noexcept { return __sbuf_ == nullptr; }

  template <class _Ch, class _Tr>
  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ostreambuf_iterator<_Ch, _Tr> __pad_and_output(
      ostreambuf_iterator<_Ch, _Tr> __s, const _Ch* __ob, const _Ch* __op, const _Ch* __oe, ios_base& __iob, _Ch __fl);
};

}}
# 70 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ostreambuf_iterator.h" 3
#pragma clang diagnostic pop
# 697 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iterator" 2 3
# 739 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iterator" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 1 3
# 252 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward_like.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward_like.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward_like.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward_like.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward_like.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward_like.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward_like.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward_like.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward_like.h" 3
}}
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/forward_like.h" 3
#pragma clang diagnostic pop
# 253 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__variant/monostate.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__variant/monostate.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__variant/monostate.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__variant/monostate.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__variant/monostate.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__variant/monostate.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__variant/monostate.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__variant/monostate.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



struct monostate {};

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr bool operator==(monostate, monostate) noexcept { return true; }
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__variant/monostate.h" 3
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr bool operator!=(monostate, monostate) noexcept { return false; }

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr bool operator<(monostate, monostate) noexcept { return false; }

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr bool operator>(monostate, monostate) noexcept { return false; }

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr bool operator<=(monostate, monostate) noexcept { return true; }

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline constexpr bool operator>=(monostate, monostate) noexcept { return true; }



template <>
struct hash<monostate> {
  using argument_type = monostate;
  using result_type = size_t;

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result_type operator()(const argument_type&) const noexcept {
    return 66740831;
  }
};



}}
# 62 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__variant/monostate.h" 3
#pragma clang diagnostic pop
# 258 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 2 3
# 271 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 275 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 2 3

namespace std {

class __attribute__((__visibility__("default"))) bad_variant_access : public exception {
public:
  const char* what() const noexcept override;
};

}

#pragma clang diagnostic push
# 285 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 285 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 285 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 285 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 285 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 285 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {





template <class _Tp, size_t _Size>
struct __farray {
  static_assert(_Size > 0, "N-dimensional array should never be empty in std::visit");
  _Tp __buf_[_Size] = {};

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Tp& operator[](size_t __n) const noexcept { return __buf_[__n]; }
};

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__throw_bad_variant_access() {

  throw bad_variant_access();



}

template <class... _Types>
class variant;

template <class _Tp>
struct variant_size;

template <class _Tp>
inline constexpr size_t variant_size_v = variant_size<_Tp>::value;

template <class _Tp>
struct variant_size<const _Tp> : variant_size<_Tp> {};

template <class _Tp>
struct variant_size<volatile _Tp> : variant_size<_Tp> {};

template <class _Tp>
struct variant_size<const volatile _Tp> : variant_size<_Tp> {};

template <class... _Types>
struct variant_size<variant<_Types...>> : integral_constant<size_t, sizeof...(_Types)> {};

template <size_t _Ip, class _Tp>
struct variant_alternative;

template <size_t _Ip, class _Tp>
using variant_alternative_t = typename variant_alternative<_Ip, _Tp>::type;

template <size_t _Ip, class _Tp>
struct variant_alternative<_Ip, const _Tp> : add_const<variant_alternative_t<_Ip, _Tp>> {};

template <size_t _Ip, class _Tp>
struct variant_alternative<_Ip, volatile _Tp> : add_volatile<variant_alternative_t<_Ip, _Tp>> {};

template <size_t _Ip, class _Tp>
struct variant_alternative<_Ip, const volatile _Tp> : add_cv<variant_alternative_t<_Ip, _Tp>> {};

template <size_t _Ip, class... _Types>
struct variant_alternative<_Ip, variant<_Types...>> {
  static_assert(_Ip < sizeof...(_Types), "Index out of bounds in std::variant_alternative<>");
  using type = __type_pack_element<_Ip, _Types...>;
};

inline constexpr size_t variant_npos = static_cast<size_t>(-1);

template <size_t _NumAlternatives>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto __choose_index_type() {







    return static_cast<unsigned int>(0);
}

template <size_t _NumAlts>
using __variant_index_t = decltype(std::__choose_index_type<_NumAlts>());

template <class _IndexType>
constexpr _IndexType __variant_npos = static_cast<_IndexType>(-1);

template <class... _Types>
class variant;

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr variant<_Types...>& __as_variant(variant<_Types...>& __vs) noexcept {
  return __vs;
}

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const variant<_Types...>& __as_variant(const variant<_Types...>& __vs) noexcept {
  return __vs;
}

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr variant<_Types...>&& __as_variant(variant<_Types...>&& __vs) noexcept {
  return std::move(__vs);
}

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const variant<_Types...>&& __as_variant(const variant<_Types...>&& __vs) noexcept {
  return std::move(__vs);
}

namespace __find_detail {

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr size_t __find_index() {
  constexpr bool __matches[] = {is_same_v<_Tp, _Types>...};
  size_t __result = __not_found;
  for (size_t __i = 0; __i < sizeof...(_Types); ++__i) {
    if (__matches[__i]) {
      if (__result != __not_found) {
        return __ambiguous;
      }
      __result = __i;
    }
  }
  return __result;
}

template <size_t _Index>
struct __find_unambiguous_index_sfinae_impl : integral_constant<size_t, _Index> {};

template <>
struct __find_unambiguous_index_sfinae_impl<__not_found> {};

template <>
struct __find_unambiguous_index_sfinae_impl<__ambiguous> {};

template <class _Tp, class... _Types>
struct __find_unambiguous_index_sfinae : __find_unambiguous_index_sfinae_impl<__find_index<_Tp, _Types...>()> {};

}

namespace __variant_detail {

struct __valueless_t {};

enum class _Trait { _TriviallyAvailable, _Available, _Unavailable };

template <typename _Tp, template <typename> class _IsTriviallyAvailable, template <typename> class _IsAvailable>
constexpr _Trait __trait =
    _IsTriviallyAvailable<_Tp>::value ? _Trait::_TriviallyAvailable
    : _IsAvailable<_Tp>::value
        ? _Trait::_Available
        : _Trait::_Unavailable;

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Trait __common_trait(initializer_list<_Trait> __traits) {
  _Trait __result = _Trait::_TriviallyAvailable;
  for (_Trait __t : __traits) {
    if (static_cast<int>(__t) > static_cast<int>(__result)) {
      __result = __t;
    }
  }
  return __result;
}

template <typename... _Types>
struct __traits {
  static constexpr _Trait __copy_constructible_trait =
      __variant_detail::__common_trait({__trait<_Types, is_trivially_copy_constructible, is_copy_constructible>...});

  static constexpr _Trait __move_constructible_trait =
      __variant_detail::__common_trait({__trait<_Types, is_trivially_move_constructible, is_move_constructible>...});

  static constexpr _Trait __copy_assignable_trait = __variant_detail::__common_trait(
      {__copy_constructible_trait, __trait<_Types, is_trivially_copy_assignable, is_copy_assignable>...});

  static constexpr _Trait __move_assignable_trait = __variant_detail::__common_trait(
      {__move_constructible_trait, __trait<_Types, is_trivially_move_assignable, is_move_assignable>...});

  static constexpr _Trait __destructible_trait =
      __variant_detail::__common_trait({__trait<_Types, is_trivially_destructible, is_destructible>...});
};

namespace __access {

struct __union {
  template <class _Vp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr auto&& __get_alt(_Vp&& __v, in_place_index_t<0>) {
    return std::forward<_Vp>(__v).__head;
  }

  template <class _Vp, size_t _Ip>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr auto&& __get_alt(_Vp&& __v, in_place_index_t<_Ip>) {
    return __get_alt(std::forward<_Vp>(__v).__tail, in_place_index<_Ip - 1>);
  }
};

struct __base {
  template <size_t _Ip, class _Vp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr auto&& __get_alt(_Vp&& __v) {
    return __union::__get_alt(std::forward<_Vp>(__v).__data, in_place_index<_Ip>);
  }
};

struct __variant {
  template <size_t _Ip, class _Vp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr auto&& __get_alt(_Vp&& __v) {
    return __base::__get_alt<_Ip>(std::forward<_Vp>(__v).__impl_);
  }
};

}

namespace __visitation {

struct __base {
  template <class _Visitor, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr decltype(auto)
  __visit_alt_at(size_t __index, _Visitor&& __visitor, _Vs&&... __vs) {
    constexpr auto __fdiagonal = __make_fdiagonal<_Visitor&&, decltype(std::forward<_Vs>(__vs).__as_base())...>();
    return __fdiagonal[__index](std::forward<_Visitor>(__visitor), std::forward<_Vs>(__vs).__as_base()...);
  }

  template <class _Visitor, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr decltype(auto) __visit_alt(_Visitor&& __visitor, _Vs&&... __vs) {
    constexpr auto __fmatrix = __make_fmatrix<_Visitor&&, decltype(std::forward<_Vs>(__vs).__as_base())...>();
    return __at(__fmatrix, __vs.index()...)(std::forward<_Visitor>(__visitor), std::forward<_Vs>(__vs).__as_base()...);
  }

private:
  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr const _Tp& __at(const _Tp& __elem) {
    return __elem;
  }

  template <class _Tp, size_t _Np, typename... _Indices>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr auto&&
  __at(const __farray<_Tp, _Np>& __elems, size_t __index, _Indices... __indices) {
    return __at(__elems[__index], __indices...);
  }

  template <class _Fp, class... _Fs>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void __std_visit_visitor_return_type_check() {
    static_assert(
        __all<is_same_v<_Fp, _Fs>...>::value, "`std::visit` requires the visitor to have a single return type.");
  }

  template <class... _Fs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr auto __make_farray(_Fs&&... __fs) {
    __std_visit_visitor_return_type_check<__remove_cvref_t<_Fs>...>();
    using __result = __farray<common_type_t<__remove_cvref_t<_Fs>...>, sizeof...(_Fs)>;
    return __result{{std::forward<_Fs>(__fs)...}};
  }

  template <size_t... _Is>
  struct __dispatcher {
    template <class _Fp, class... _Vs>
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr decltype(auto) __dispatch(_Fp __f, _Vs... __vs) {
      return std::__invoke(static_cast<_Fp>(__f), __access::__base::__get_alt<_Is>(static_cast<_Vs>(__vs))...);
    }
  };

  template <class _Fp, class... _Vs, size_t... _Is>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr auto __make_dispatch(index_sequence<_Is...>) {
    return __dispatcher<_Is...>::template __dispatch<_Fp, _Vs...>;
  }

  template <size_t _Ip, class _Fp, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr auto __make_fdiagonal_impl() {
    return __make_dispatch<_Fp, _Vs...>(index_sequence<((void)__type_identity<_Vs>{}, _Ip)...>{});
  }

  template <class _Fp, class... _Vs, size_t... _Is>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr auto __make_fdiagonal_impl(index_sequence<_Is...>) {
    return __base::__make_farray(__make_fdiagonal_impl<_Is, _Fp, _Vs...>()...);
  }

  template <class _Fp, class _Vp, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr auto __make_fdiagonal() {
    constexpr size_t __np = __remove_cvref_t<_Vp>::__size();
    static_assert(__all<(__np == __remove_cvref_t<_Vs>::__size())...>::value);
    return __make_fdiagonal_impl<_Fp, _Vp, _Vs...>(make_index_sequence<__np>{});
  }

  template <class _Fp, class... _Vs, size_t... _Is>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr auto __make_fmatrix_impl(index_sequence<_Is...> __is) {
    return __make_dispatch<_Fp, _Vs...>(__is);
  }

  template <class _Fp, class... _Vs, size_t... _Is, size_t... _Js, class... _Ls>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr auto
  __make_fmatrix_impl(index_sequence<_Is...>, index_sequence<_Js...>, _Ls... __ls) {
    return __base::__make_farray(__make_fmatrix_impl<_Fp, _Vs...>(index_sequence<_Is..., _Js>{}, __ls...)...);
  }

  template <class _Fp, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr auto __make_fmatrix() {
    return __make_fmatrix_impl<_Fp, _Vs...>(
        index_sequence<>{}, make_index_sequence<__remove_cvref_t<_Vs>::__size()>{}...);
  }
};

struct __variant {
  template <class _Visitor, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr decltype(auto)
  __visit_alt_at(size_t __index, _Visitor&& __visitor, _Vs&&... __vs) {
    return __base::__visit_alt_at(__index, std::forward<_Visitor>(__visitor), std::forward<_Vs>(__vs).__impl_...);
  }

  template <class _Visitor, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr decltype(auto) __visit_alt(_Visitor&& __visitor, _Vs&&... __vs) {
    return __base::__visit_alt(
        std::forward<_Visitor>(__visitor), std::__as_variant(std::forward<_Vs>(__vs)).__impl_...);
  }

  template <class _Visitor, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr decltype(auto)
  __visit_value_at(size_t __index, _Visitor&& __visitor, _Vs&&... __vs) {
    return __visit_alt_at(__index, __make_value_visitor(std::forward<_Visitor>(__visitor)), std::forward<_Vs>(__vs)...);
  }

  template <class _Visitor, class... _Vs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr decltype(auto) __visit_value(_Visitor&& __visitor, _Vs&&... __vs) {
    return __visit_alt(__make_value_visitor(std::forward<_Visitor>(__visitor)), std::forward<_Vs>(__vs)...);
  }
# 615 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
private:
  template <class _Visitor, class... _Values>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void __std_visit_exhaustive_visitor_check() {
    static_assert(is_invocable_v<_Visitor, _Values...>, "`std::visit` requires the visitor to be exhaustive.");
  }

  template <class _Visitor>
  struct __value_visitor {
    template <class... _Alts>
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr decltype(auto) operator()(_Alts&&... __alts) const {
      __std_visit_exhaustive_visitor_check< _Visitor, decltype((std::forward<_Alts>(__alts).__value))...>();
      return std::__invoke(std::forward<_Visitor>(__visitor), std::forward<_Alts>(__alts).__value...);
    }
    _Visitor&& __visitor;
  };
# 648 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
  template <class _Visitor>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr auto __make_value_visitor(_Visitor&& __visitor) {
    return __value_visitor<_Visitor>{std::forward<_Visitor>(__visitor)};
  }







};

}





template <size_t _Index, class _Tp>
struct __alt {
  using __value_type = _Tp;
  static constexpr size_t __index = _Index;

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr __alt(in_place_t, _Args&&... __args)
      : __value(std::forward<_Args>(__args)...) {}

  __value_type __value;
};

template <_Trait _DestructibleTrait, size_t _Index, class... _Types>
union __union;

template <_Trait _DestructibleTrait, size_t _Index>
union __union<_DestructibleTrait, _Index> {};
# 713 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
template <size_t _Index, class _Tp, class... _Types> union __union<_Trait::_TriviallyAvailable, _Index, _Tp, _Types...> { public: __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr __union(__valueless_t) noexcept : __dummy{} {} template <class... _Args> __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr __union(in_place_index_t<0>, _Args&&... __args) : __head(in_place, std::forward<_Args>(__args)...) {} template <size_t _Ip, class... _Args> __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr __union(in_place_index_t<_Ip>, _Args&&... __args) : __tail(in_place_index<_Ip - 1>, std::forward<_Args>(__args)...) {} __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __union(const __union&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __union(__union&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __union& operator=(const __union&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __union& operator=(__union&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__union() = default; private: char __dummy; __alt<_Index, _Tp> __head; __union<_Trait::_TriviallyAvailable, _Index + 1, _Types...> __tail; friend struct __access::__union; };

template <size_t _Index, class _Tp, class... _Types> union __union<_Trait::_Available, _Index, _Tp, _Types...> { public: __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr __union(__valueless_t) noexcept : __dummy{} {} template <class... _Args> __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr __union(in_place_index_t<0>, _Args&&... __args) : __head(in_place, std::forward<_Args>(__args)...) {} template <size_t _Ip, class... _Args> __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr __union(in_place_index_t<_Ip>, _Args&&... __args) : __tail(in_place_index<_Ip - 1>, std::forward<_Args>(__args)...) {} __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __union(const __union&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __union(__union&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __union& operator=(const __union&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __union& operator=(__union&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__union() {} static_assert(true, ""); private: char __dummy; __alt<_Index, _Tp> __head; __union<_Trait::_Available, _Index + 1, _Types...> __tail; friend struct __access::__union; };

template <size_t _Index, class _Tp, class... _Types> union __union<_Trait::_Unavailable, _Index, _Tp, _Types...> { public: __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr __union(__valueless_t) noexcept : __dummy{} {} template <class... _Args> __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr __union(in_place_index_t<0>, _Args&&... __args) : __head(in_place, std::forward<_Args>(__args)...) {} template <size_t _Ip, class... _Args> __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr __union(in_place_index_t<_Ip>, _Args&&... __args) : __tail(in_place_index<_Ip - 1>, std::forward<_Args>(__args)...) {} __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __union(const __union&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __union(__union&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __union& operator=(const __union&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __union& operator=(__union&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__union() = delete; private: char __dummy; __alt<_Index, _Tp> __head; __union<_Trait::_Unavailable, _Index + 1, _Types...> __tail; friend struct __access::__union; };



template <_Trait _DestructibleTrait, class... _Types>
class __base {
public:
  using __index_t = __variant_index_t<sizeof...(_Types)>;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr __base(__valueless_t __tag) noexcept
      : __data(__tag), __index(__variant_npos<__index_t>) {}

  template <size_t _Ip, class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr __base(in_place_index_t<_Ip>, _Args&&... __args)
      : __data(in_place_index<_Ip>, std::forward<_Args>(__args)...), __index(_Ip) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool valueless_by_exception() const noexcept { return index() == variant_npos; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr size_t index() const noexcept {
    return __index == __variant_npos<__index_t> ? variant_npos : __index;
  }

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto&& __as_base() & { return *this; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto&& __as_base() && { return std::move(*this); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto&& __as_base() const& { return *this; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto&& __as_base() const&& { return std::move(*this); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr size_t __size() { return sizeof...(_Types); }

  __union<_DestructibleTrait, 0, _Types...> __data;
  __index_t __index;

  friend struct __access::__base;
  friend struct __visitation::__base;
};

template <class _Traits, _Trait = _Traits::__destructible_trait>
class __dtor;
# 780 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
template <class... _Types> class __dtor<__traits<_Types...>, _Trait::_TriviallyAvailable> : public __base<_Trait::_TriviallyAvailable, _Types...> { using __base_type = __base<_Trait::_TriviallyAvailable, _Types...>; using __index_t = typename __base_type::__index_t; public: using __base_type::__base_type; using __base_type::operator=; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __dtor(const __dtor&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __dtor(__dtor&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __dtor& operator=(const __dtor&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __dtor& operator=(__dtor&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__dtor() = default; protected: __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __destroy() noexcept { this->__index = __variant_npos<__index_t>; } static_assert(true, ""); };






template <class... _Types> class __dtor<__traits<_Types...>, _Trait::_Available> : public __base<_Trait::_Available, _Types...> { using __base_type = __base<_Trait::_Available, _Types...>; using __index_t = typename __base_type::__index_t; public: using __base_type::__base_type; using __base_type::operator=; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __dtor(const __dtor&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __dtor(__dtor&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __dtor& operator=(const __dtor&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __dtor& operator=(__dtor&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__dtor() { __destroy(); } static_assert(true, ""); protected: __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __destroy() noexcept { if (!this->valueless_by_exception()) { __visitation::__base::__visit_alt( [](auto& __alt) noexcept { using __alt_type = __remove_cvref_t<decltype(__alt)>; __alt.~__alt_type(); }, *this); } this->__index = __variant_npos<__index_t>; } static_assert(true, ""); };
# 802 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
template <class... _Types> class __dtor<__traits<_Types...>, _Trait::_Unavailable> : public __base<_Trait::_Unavailable, _Types...> { using __base_type = __base<_Trait::_Unavailable, _Types...>; using __index_t = typename __base_type::__index_t; public: using __base_type::__base_type; using __base_type::operator=; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __dtor(const __dtor&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __dtor(__dtor&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __dtor& operator=(const __dtor&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __dtor& operator=(__dtor&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__dtor() = delete; protected: __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __destroy() noexcept = delete; };





template <class _Traits>
class __ctor : public __dtor<_Traits> {
  using __base_type = __dtor<_Traits>;

public:
  using __base_type::__base_type;
  using __base_type::operator=;

protected:
  template <class _Rhs>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static void __generic_construct(__ctor& __lhs, _Rhs&& __rhs) {
    __lhs.__destroy();
    if (!__rhs.valueless_by_exception()) {
      auto __rhs_index = __rhs.index();
      __visitation::__base::__visit_alt_at(
          __rhs_index,
          [&__lhs](auto&& __rhs_alt) {
            std::__construct_at(std::addressof(__lhs.__data),
                                in_place_index<__decay_t<decltype(__rhs_alt)>::__index>,
                                std::forward<decltype(__rhs_alt)>(__rhs_alt).__value);
          },
          std::forward<_Rhs>(__rhs));
      __lhs.__index = __rhs_index;
    }
  }
};

template <class _Traits, _Trait = _Traits::__move_constructible_trait>
class __move_constructor;
# 855 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
template <class... _Types> class __move_constructor<__traits<_Types...>, _Trait::_TriviallyAvailable> : public __ctor<__traits<_Types...>> { using __base_type = __ctor<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_constructor(const __move_constructor&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__move_constructor() = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_constructor& operator=(const __move_constructor&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_constructor& operator=(__move_constructor&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_constructor(__move_constructor&& __that) = default; };



template <class... _Types> class __move_constructor<__traits<_Types...>, _Trait::_Available> : public __ctor<__traits<_Types...>> { using __base_type = __ctor<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_constructor(const __move_constructor&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__move_constructor() = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_constructor& operator=(const __move_constructor&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_constructor& operator=(__move_constructor&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_constructor(__move_constructor&& __that) noexcept( __all<is_nothrow_move_constructible_v<_Types>...>::value) : __move_constructor(__valueless_t{}) { this->__generic_construct(*this, std::move(__that)); } static_assert(true, ""); };







template <class... _Types> class __move_constructor<__traits<_Types...>, _Trait::_Unavailable> : public __ctor<__traits<_Types...>> { using __base_type = __ctor<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_constructor(const __move_constructor&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__move_constructor() = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_constructor& operator=(const __move_constructor&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_constructor& operator=(__move_constructor&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_constructor(__move_constructor&&) = delete; };





template <class _Traits, _Trait = _Traits::__copy_constructible_trait>
class __copy_constructor;
# 893 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
template <class... _Types> class __copy_constructor<__traits<_Types...>, _Trait::_TriviallyAvailable> : public __move_constructor<__traits<_Types...>> { using __base_type = __move_constructor<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_constructor(__copy_constructor&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__copy_constructor() = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_constructor& operator=(const __copy_constructor&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_constructor& operator=(__copy_constructor&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_constructor(const __copy_constructor& __that) = default; };



template <class... _Types> class __copy_constructor<__traits<_Types...>, _Trait::_Available> : public __move_constructor<__traits<_Types...>> { using __base_type = __move_constructor<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_constructor(__copy_constructor&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__copy_constructor() = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_constructor& operator=(const __copy_constructor&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_constructor& operator=(__copy_constructor&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_constructor(const __copy_constructor& __that) : __copy_constructor(__valueless_t{}) { this->__generic_construct(*this, __that); } static_assert(true, ""); };




template <class... _Types> class __copy_constructor<__traits<_Types...>, _Trait::_Unavailable> : public __move_constructor<__traits<_Types...>> { using __base_type = __move_constructor<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_constructor(__copy_constructor&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__copy_constructor() = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_constructor& operator=(const __copy_constructor&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_constructor& operator=(__copy_constructor&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_constructor(const __copy_constructor&) = delete; };





template <class _Traits>
class __assignment : public __copy_constructor<_Traits> {
  using __base_type = __copy_constructor<_Traits>;

public:
  using __base_type::__base_type;
  using __base_type::operator=;

  template <size_t _Ip, class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto& __emplace(_Args&&... __args) {
    this->__destroy();
    std::__construct_at(std::addressof(this->__data), in_place_index<_Ip>, std::forward<_Args>(__args)...);
    this->__index = _Ip;
    return __access::__base::__get_alt<_Ip>(*this).__value;
  }

protected:
  template <size_t _Ip, class _Tp, class _Arg>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __assign_alt(__alt<_Ip, _Tp>& __a, _Arg&& __arg) {
    if (this->index() == _Ip) {
      __a.__value = std::forward<_Arg>(__arg);
    } else {
      struct {
        __attribute__((__visibility__("hidden"))) void operator()(true_type) const {
          __this->__emplace<_Ip>(std::forward<_Arg>(__arg));
        }
        __attribute__((__visibility__("hidden"))) void operator()(false_type) const {
          __this->__emplace<_Ip>(_Tp(std::forward<_Arg>(__arg)));
        }
        __assignment* __this;
        _Arg&& __arg;
      } __impl{this, std::forward<_Arg>(__arg)};
      __impl(bool_constant < is_nothrow_constructible_v<_Tp, _Arg> || !is_nothrow_move_constructible_v < _Tp >> {});
    }
  }

  template <class _That>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __generic_assign(_That&& __that) {
    if (this->valueless_by_exception() && __that.valueless_by_exception()) {

    } else if (__that.valueless_by_exception()) {
      this->__destroy();
    } else {
      __visitation::__base::__visit_alt_at(
          __that.index(),
          [this](auto& __this_alt, auto&& __that_alt) {
            this->__assign_alt(__this_alt, std::forward<decltype(__that_alt)>(__that_alt).__value);
          },
          *this,
          std::forward<_That>(__that));
    }
  }
};

template <class _Traits, _Trait = _Traits::__move_assignable_trait>
class __move_assignment;
# 982 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
template <class... _Types> class __move_assignment<__traits<_Types...>, _Trait::_TriviallyAvailable> : public __assignment<__traits<_Types...>> { using __base_type = __assignment<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_assignment(const __move_assignment&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_assignment(__move_assignment&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__move_assignment() = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_assignment& operator=(const __move_assignment&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_assignment& operator=( __move_assignment&& __that) = default; };



template <class... _Types> class __move_assignment<__traits<_Types...>, _Trait::_Available> : public __assignment<__traits<_Types...>> { using __base_type = __assignment<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_assignment(const __move_assignment&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_assignment(__move_assignment&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__move_assignment() = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_assignment& operator=(const __move_assignment&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_assignment& operator=(__move_assignment&& __that) noexcept( __all<(is_nothrow_move_constructible_v<_Types> && is_nothrow_move_assignable_v<_Types>)...>::value) { this->__generic_assign(std::move(__that)); return *this; } static_assert(true, ""); };
# 995 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
template <class... _Types> class __move_assignment<__traits<_Types...>, _Trait::_Unavailable> : public __assignment<__traits<_Types...>> { using __base_type = __assignment<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_assignment(const __move_assignment&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_assignment(__move_assignment&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__move_assignment() = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_assignment& operator=(const __move_assignment&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __move_assignment& operator=(__move_assignment&&) = delete; };





template <class _Traits, _Trait = _Traits::__copy_assignable_trait>
class __copy_assignment;
# 1021 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
template <class... _Types> class __copy_assignment<__traits<_Types...>, _Trait::_TriviallyAvailable> : public __move_assignment<__traits<_Types...>> { using __base_type = __move_assignment<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_assignment(const __copy_assignment&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_assignment(__copy_assignment&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__copy_assignment() = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_assignment& operator=(__copy_assignment&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_assignment& operator=( const __copy_assignment& __that) = default; };



template <class... _Types> class __copy_assignment<__traits<_Types...>, _Trait::_Available> : public __move_assignment<__traits<_Types...>> { using __base_type = __move_assignment<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_assignment(const __copy_assignment&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_assignment(__copy_assignment&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__copy_assignment() = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_assignment& operator=(__copy_assignment&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_assignment& operator=(const __copy_assignment& __that) { this->__generic_assign(__that); return *this; } static_assert(true, ""); };







template <class... _Types> class __copy_assignment<__traits<_Types...>, _Trait::_Unavailable> : public __move_assignment<__traits<_Types...>> { using __base_type = __move_assignment<__traits<_Types...>>; public: using __base_type::__base_type; using __base_type::operator=; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_assignment(const __copy_assignment&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_assignment(__copy_assignment&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__copy_assignment() = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_assignment& operator=(__copy_assignment&&) = default; __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __copy_assignment& operator=( const __copy_assignment&) = delete; };





template <class... _Types>
class __impl : public __copy_assignment<__traits<_Types...>> {
  using __base_type = __copy_assignment<__traits<_Types...>>;

public:
  using __base_type::__base_type;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __impl(__impl const&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __impl(__impl&&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __impl& operator=(__impl const&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __impl& operator=(__impl&&) = default;

  template <size_t _Ip, class _Arg>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __assign(_Arg&& __arg) {
    this->__assign_alt(__access::__base::__get_alt<_Ip>(*this), std::forward<_Arg>(__arg));
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __swap(__impl& __that) {
    if (this->valueless_by_exception() && __that.valueless_by_exception()) {

    } else if (this->index() == __that.index()) {
      __visitation::__base::__visit_alt_at(
          this->index(),
          [](auto& __this_alt, auto& __that_alt) {
            using std::swap;
            swap(__this_alt.__value, __that_alt.__value);
          },
          *this,
          __that);
    } else {
      __impl* __lhs = this;
      __impl* __rhs = std::addressof(__that);
      if (__lhs->__move_nothrow() && !__rhs->__move_nothrow()) {
        std::swap(__lhs, __rhs);
      }
      __impl __tmp(std::move(*__rhs));

      if constexpr (__all<is_nothrow_move_constructible_v<_Types>...>::value) {
        this->__generic_construct(*__rhs, std::move(*__lhs));
      } else {



        try {
          this->__generic_construct(*__rhs, std::move(*__lhs));
        } catch (...) {
          if (__tmp.__move_nothrow()) {
            this->__generic_construct(*__rhs, std::move(__tmp));
          }
          throw;
        }
      }





      this->__generic_construct(*__lhs, std::move(__tmp));
    }
  }

private:
  constexpr inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __move_nothrow() const {
    constexpr bool __results[] = {is_nothrow_move_constructible_v<_Types>...};
    return this->valueless_by_exception() || __results[this->index()];
  }
};

struct __no_narrowing_check {
  template <class _Dest, class _Source>
  using _Apply = __type_identity<_Dest>;
};

struct __narrowing_check {
  template <class _Dest>
  static auto __test_impl(_Dest (&&)[1]) -> __type_identity<_Dest>;
  template <class _Dest, class _Source>
  using _Apply __attribute__((__nodebug__)) = decltype(__test_impl<_Dest>({std::declval<_Source>()}));
};

template <class _Dest, class _Source>
using __check_for_narrowing __attribute__((__nodebug__)) =
    typename _If< is_arithmetic<_Dest>::value, __narrowing_check, __no_narrowing_check >::template _Apply<_Dest,
                                                                                                          _Source>;

template <class _Tp, size_t _Idx>
struct __overload {
  template <class _Up>
  auto operator()(_Tp, _Up&&) const -> __check_for_narrowing<_Tp, _Up>;
};

template <class... _Bases>
struct __all_overloads : _Bases... {
  void operator()() const;
  using _Bases::operator()...;
};

template <class _IdxSeq>
struct __make_overloads_imp;

template <size_t... _Idx>
struct __make_overloads_imp<__tuple_indices<_Idx...> > {
  template <class... _Types>
  using _Apply __attribute__((__nodebug__)) = __all_overloads<__overload<_Types, _Idx>...>;
};

template <class... _Types>
using _MakeOverloads __attribute__((__nodebug__)) =
    typename __make_overloads_imp< __make_indices_imp<sizeof...(_Types), 0> >::template _Apply<_Types...>;

template <class _Tp, class... _Types>
using __best_match_t = typename invoke_result_t<_MakeOverloads<_Types...>, _Tp, _Tp>::type;

}

template <class _Visitor, class... _Vs, typename = void_t<decltype(std::__as_variant(std::declval<_Vs>()))...>>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr decltype(auto)
visit(_Visitor&& __visitor, _Vs&&... __vs);
# 1166 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
template <class... _Types>
class variant
    : private __sfinae_ctor_base< __all<is_copy_constructible_v<_Types>...>::value,
                                  __all<is_move_constructible_v<_Types>...>::value>,
      private __sfinae_assign_base<
          __all<(is_copy_constructible_v<_Types> && is_copy_assignable_v<_Types>)...>::value,
          __all<(is_move_constructible_v<_Types> && is_move_assignable_v<_Types>)...>::value> {
  static_assert(0 < sizeof...(_Types), "variant must consist of at least one alternative.");

  static_assert(__all<!is_array_v<_Types>...>::value, "variant can not have an array type as an alternative.");

  static_assert(__all<!is_reference_v<_Types>...>::value, "variant can not have a reference type as an alternative.");

  static_assert(__all<!is_void_v<_Types>...>::value, "variant can not have a void type as an alternative.");

  using __first_type = variant_alternative_t<0, variant>;

public:
  using __trivially_relocatable =
      conditional_t<_And<__libcpp_is_trivially_relocatable<_Types>...>::value, variant, void>;

  template <bool _Dummy = true,
            enable_if_t<__dependent_type<is_default_constructible<__first_type>, _Dummy>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr variant() noexcept(is_nothrow_default_constructible_v<__first_type>)
      : __impl_(in_place_index<0>) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr variant(const variant&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr variant(variant&&) = default;

  template < class _Arg,
             enable_if_t<!is_same_v<__remove_cvref_t<_Arg>, variant>, int> = 0,
             enable_if_t<!__is_inplace_type<__remove_cvref_t<_Arg>>::value, int> = 0,
             enable_if_t<!__is_inplace_index<__remove_cvref_t<_Arg>>::value, int> = 0,
             class _Tp = __variant_detail::__best_match_t<_Arg, _Types...>,
             size_t _Ip = __find_detail::__find_unambiguous_index_sfinae<_Tp, _Types...>::value,
             enable_if_t<is_constructible_v<_Tp, _Arg>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr variant(_Arg&& __arg) noexcept(is_nothrow_constructible_v<_Tp, _Arg>)
      : __impl_(in_place_index<_Ip>, std::forward<_Arg>(__arg)) {}

  template <size_t _Ip,
            class... _Args,
            class = enable_if_t<(_Ip < sizeof...(_Types)), int>,
            class _Tp = variant_alternative_t<_Ip, variant<_Types...>>,
            enable_if_t<is_constructible_v<_Tp, _Args...>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr variant(in_place_index_t<_Ip>, _Args&&... __args) noexcept(
      is_nothrow_constructible_v<_Tp, _Args...>)
      : __impl_(in_place_index<_Ip>, std::forward<_Args>(__args)...) {}

  template < size_t _Ip,
             class _Up,
             class... _Args,
             enable_if_t<(_Ip < sizeof...(_Types)), int> = 0,
             class _Tp = variant_alternative_t<_Ip, variant<_Types...>>,
             enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr variant(
      in_place_index_t<_Ip>,
      initializer_list<_Up> __il,
      _Args&&... __args) noexcept(is_nothrow_constructible_v<_Tp, initializer_list<_Up>&, _Args...>)
      : __impl_(in_place_index<_Ip>, __il, std::forward<_Args>(__args)...) {}

  template < class _Tp,
             class... _Args,
             size_t _Ip = __find_detail::__find_unambiguous_index_sfinae<_Tp, _Types...>::value,
             enable_if_t<is_constructible_v<_Tp, _Args...>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr variant(in_place_type_t<_Tp>, _Args&&... __args) noexcept(
      is_nothrow_constructible_v<_Tp, _Args...>)
      : __impl_(in_place_index<_Ip>, std::forward<_Args>(__args)...) {}

  template < class _Tp,
             class _Up,
             class... _Args,
             size_t _Ip = __find_detail::__find_unambiguous_index_sfinae<_Tp, _Types...>::value,
             enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr variant(
      in_place_type_t<_Tp>,
      initializer_list<_Up> __il,
      _Args&&... __args) noexcept(is_nothrow_constructible_v<_Tp, initializer_list< _Up>&, _Args...>)
      : __impl_(in_place_index<_Ip>, __il, std::forward<_Args>(__args)...) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~variant() = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr variant& operator=(const variant&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr variant& operator=(variant&&) = default;

  template < class _Arg,
             enable_if_t<!is_same_v<__remove_cvref_t<_Arg>, variant>, int> = 0,
             class _Tp = __variant_detail::__best_match_t<_Arg, _Types...>,
             size_t _Ip = __find_detail::__find_unambiguous_index_sfinae<_Tp, _Types...>::value,
             enable_if_t<is_assignable_v<_Tp&, _Arg> && is_constructible_v<_Tp, _Arg>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) variant&
  operator=(_Arg&& __arg) noexcept(is_nothrow_assignable_v<_Tp&, _Arg> && is_nothrow_constructible_v<_Tp, _Arg>) {
    __impl_.template __assign<_Ip>(std::forward<_Arg>(__arg));
    return *this;
  }

  template < size_t _Ip,
             class... _Args,
             enable_if_t<(_Ip < sizeof...(_Types)), int> = 0,
             class _Tp = variant_alternative_t<_Ip, variant<_Types...>>,
             enable_if_t<is_constructible_v<_Tp, _Args...>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp& emplace(_Args&&... __args) {
    return __impl_.template __emplace<_Ip>(std::forward<_Args>(__args)...);
  }

  template < size_t _Ip,
             class _Up,
             class... _Args,
             enable_if_t<(_Ip < sizeof...(_Types)), int> = 0,
             class _Tp = variant_alternative_t<_Ip, variant<_Types...>>,
             enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp& emplace(initializer_list<_Up> __il, _Args&&... __args) {
    return __impl_.template __emplace<_Ip>(__il, std::forward<_Args>(__args)...);
  }

  template < class _Tp,
             class... _Args,
             size_t _Ip = __find_detail::__find_unambiguous_index_sfinae<_Tp, _Types...>::value,
             enable_if_t<is_constructible_v<_Tp, _Args...>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp& emplace(_Args&&... __args) {
    return __impl_.template __emplace<_Ip>(std::forward<_Args>(__args)...);
  }

  template < class _Tp,
             class _Up,
             class... _Args,
             size_t _Ip = __find_detail::__find_unambiguous_index_sfinae<_Tp, _Types...>::value,
             enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp& emplace(initializer_list<_Up> __il, _Args&&... __args) {
    return __impl_.template __emplace<_Ip>(__il, std::forward<_Args>(__args)...);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool valueless_by_exception() const noexcept {
    return __impl_.valueless_by_exception();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr size_t index() const noexcept { return __impl_.index(); }

  template < bool _Dummy = true,
             enable_if_t< __all<(__dependent_type<is_move_constructible<_Types>, _Dummy>::value &&
                                 __dependent_type<is_swappable<_Types>, _Dummy>::value)...>::value,
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(variant& __that) noexcept(
      __all<(is_nothrow_move_constructible_v<_Types> && is_nothrow_swappable_v<_Types>)...>::value) {
    __impl_.__swap(__that.__impl_);
  }
# 1333 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
private:
  __variant_detail::__impl<_Types...> __impl_;

  friend struct __variant_detail::__access::__variant;
  friend struct __variant_detail::__visitation::__variant;
};

template <size_t _Ip, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __holds_alternative(const variant<_Types...>& __v) noexcept {
  return __v.index() == _Ip;
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool holds_alternative(const variant<_Types...>& __v) noexcept {
  return std::__holds_alternative<__find_exactly_one_t<_Tp, _Types...>::value>(__v);
}

template <size_t _Ip, class _Vp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto&& __generic_get(_Vp&& __v) {
  using __variant_detail::__access::__variant;
  if (!std::__holds_alternative<_Ip>(__v)) {
    __throw_bad_variant_access();
  }
  return __variant::__get_alt<_Ip>(std::forward<_Vp>(__v)).__value;
}

template <size_t _Ip, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                                              constexpr variant_alternative_t<_Ip, variant<_Types...>>&
get(variant<_Types...>& __v) {
  static_assert(_Ip < sizeof...(_Types));
  static_assert(!is_void_v<variant_alternative_t<_Ip, variant<_Types...>>>);
  return std::__generic_get<_Ip>(__v);
}

template <size_t _Ip, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                                              constexpr variant_alternative_t<_Ip, variant<_Types...>>&&
get(variant<_Types...>&& __v) {
  static_assert(_Ip < sizeof...(_Types));
  static_assert(!is_void_v<variant_alternative_t<_Ip, variant<_Types...>>>);
  return std::__generic_get<_Ip>(std::move(__v));
}

template <size_t _Ip, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                                              constexpr const variant_alternative_t<_Ip, variant<_Types...>>&
get(const variant<_Types...>& __v) {
  static_assert(_Ip < sizeof...(_Types));
  static_assert(!is_void_v<variant_alternative_t<_Ip, variant<_Types...>>>);
  return std::__generic_get<_Ip>(__v);
}

template <size_t _Ip, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                                              constexpr const variant_alternative_t<_Ip, variant<_Types...>>&&
get(const variant<_Types...>&& __v) {
  static_assert(_Ip < sizeof...(_Types));
  static_assert(!is_void_v<variant_alternative_t<_Ip, variant<_Types...>>>);
  return std::__generic_get<_Ip>(std::move(__v));
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp& get(variant<_Types...>& __v) {
  static_assert(!is_void_v<_Tp>);
  return std::get<__find_exactly_one_t<_Tp, _Types...>::value>(__v);
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp&& get(variant<_Types...>&& __v) {
  static_assert(!is_void_v<_Tp>);
  return std::get<__find_exactly_one_t<_Tp, _Types...>::value>(std::move(__v));
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Tp&
get(const variant<_Types...>& __v) {
  static_assert(!is_void_v<_Tp>);
  return std::get<__find_exactly_one_t<_Tp, _Types...>::value>(__v);
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Tp&&
get(const variant<_Types...>&& __v) {
  static_assert(!is_void_v<_Tp>);
  return std::get<__find_exactly_one_t<_Tp, _Types...>::value>(std::move(__v));
}

template <size_t _Ip, class _Vp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto* __generic_get_if(_Vp* __v) noexcept {
  using __variant_detail::__access::__variant;
  return __v && std::__holds_alternative<_Ip>(*__v) ? std::addressof(__variant::__get_alt<_Ip>(*__v).__value) : nullptr;
}

template <size_t _Ip, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr add_pointer_t<variant_alternative_t<_Ip, variant<_Types...>>>
get_if(variant<_Types...>* __v) noexcept {
  static_assert(_Ip < sizeof...(_Types));
  static_assert(!is_void_v<variant_alternative_t<_Ip, variant<_Types...>>>);
  return std::__generic_get_if<_Ip>(__v);
}

template <size_t _Ip, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr add_pointer_t<const variant_alternative_t<_Ip, variant<_Types...>>>
get_if(const variant<_Types...>* __v) noexcept {
  static_assert(_Ip < sizeof...(_Types));
  static_assert(!is_void_v<variant_alternative_t<_Ip, variant<_Types...>>>);
  return std::__generic_get_if<_Ip>(__v);
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr add_pointer_t<_Tp> get_if(variant<_Types...>* __v) noexcept {
  static_assert(!is_void_v<_Tp>);
  return std::get_if<__find_exactly_one_t<_Tp, _Types...>::value>(__v);
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr add_pointer_t<const _Tp> get_if(const variant<_Types...>* __v) noexcept {
  static_assert(!is_void_v<_Tp>);
  return std::get_if<__find_exactly_one_t<_Tp, _Types...>::value>(__v);
}

template <class _Operator>
struct __convert_to_bool {
  template <class _T1, class _T2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator()(_T1&& __t1, _T2&& __t2) const {
    static_assert(is_convertible<decltype(_Operator{}(std::forward<_T1>(__t1), std::forward<_T2>(__t2))), bool>::value,
                  "the relational operator does not return a type which is implicitly convertible to bool");
    return _Operator{}(std::forward<_T1>(__t1), std::forward<_T2>(__t2));
  }
};

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator==(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs) {
  using __variant_detail::__visitation::__variant;
  if (__lhs.index() != __rhs.index())
    return false;
  if (__lhs.valueless_by_exception())
    return true;
  return __variant::__visit_value_at(__lhs.index(), __convert_to_bool<equal_to<>>{}, __lhs, __rhs);
}
# 1497 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator!=(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs) {
  using __variant_detail::__visitation::__variant;
  if (__lhs.index() != __rhs.index())
    return true;
  if (__lhs.valueless_by_exception())
    return false;
  return __variant::__visit_value_at(__lhs.index(), __convert_to_bool<not_equal_to<>>{}, __lhs, __rhs);
}

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator<(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs) {
  using __variant_detail::__visitation::__variant;
  if (__rhs.valueless_by_exception())
    return false;
  if (__lhs.valueless_by_exception())
    return true;
  if (__lhs.index() < __rhs.index())
    return true;
  if (__lhs.index() > __rhs.index())
    return false;
  return __variant::__visit_value_at(__lhs.index(), __convert_to_bool<less<>>{}, __lhs, __rhs);
}

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator>(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs) {
  using __variant_detail::__visitation::__variant;
  if (__lhs.valueless_by_exception())
    return false;
  if (__rhs.valueless_by_exception())
    return true;
  if (__lhs.index() > __rhs.index())
    return true;
  if (__lhs.index() < __rhs.index())
    return false;
  return __variant::__visit_value_at(__lhs.index(), __convert_to_bool<greater<>>{}, __lhs, __rhs);
}

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator<=(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs) {
  using __variant_detail::__visitation::__variant;
  if (__lhs.valueless_by_exception())
    return true;
  if (__rhs.valueless_by_exception())
    return false;
  if (__lhs.index() < __rhs.index())
    return true;
  if (__lhs.index() > __rhs.index())
    return false;
  return __variant::__visit_value_at(__lhs.index(), __convert_to_bool<less_equal<>>{}, __lhs, __rhs);
}

template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator>=(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs) {
  using __variant_detail::__visitation::__variant;
  if (__rhs.valueless_by_exception())
    return true;
  if (__lhs.valueless_by_exception())
    return false;
  if (__lhs.index() > __rhs.index())
    return true;
  if (__lhs.index() < __rhs.index())
    return false;
  return __variant::__visit_value_at(__lhs.index(), __convert_to_bool<greater_equal<>>{}, __lhs, __rhs);
}

template <class... _Vs>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void __throw_if_valueless(_Vs&&... __vs) {
  const bool __valueless = (... || std::__as_variant(__vs).valueless_by_exception());
  if (__valueless) {
    __throw_bad_variant_access();
  }
}

template < class _Visitor, class... _Vs, typename>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr decltype(auto)
visit(_Visitor&& __visitor, _Vs&&... __vs) {
  using __variant_detail::__visitation::__variant;
  std::__throw_if_valueless(std::forward<_Vs>(__vs)...);
  return __variant::__visit_value(std::forward<_Visitor>(__visitor), std::forward<_Vs>(__vs)...);
}
# 1589 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
template <class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto
swap(variant<_Types...>& __lhs,
     variant<_Types...>& __rhs) noexcept(noexcept(__lhs.swap(__rhs))) -> decltype(__lhs.swap(__rhs)) {
  return __lhs.swap(__rhs);
}

template <class... _Types>
struct hash< __enable_hash_helper<variant<_Types...>, remove_const_t<_Types>...>> {
  using argument_type = variant<_Types...>;
  using result_type = size_t;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result_type operator()(const argument_type& __v) const {
    using __variant_detail::__visitation::__variant;
    size_t __res =
        __v.valueless_by_exception()
            ? 299792458
            : __variant::__visit_alt(
                  [](const auto& __alt) {
                    using __alt_type = __remove_cvref_t<decltype(__alt)>;
                    using __value_type = remove_const_t< typename __alt_type::__value_type>;
                    return hash<__value_type>{}(__alt.__value);
                  },
                  __v);
    return std::__hash_combine(__res, hash<size_t>{}(__v.index()));
  }
};




template <size_t _Ip, class _Vp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto&& __unchecked_get(_Vp&& __v) noexcept {
  using __variant_detail::__access::__variant;
  return __variant::__get_alt<_Ip>(std::forward<_Vp>(__v)).__value;
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto&& __unchecked_get(const variant<_Types...>& __v) noexcept {
  return std::__unchecked_get<__find_exactly_one_t<_Tp, _Types...>::value>(__v);
}

template <class _Tp, class... _Types>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto&& __unchecked_get(variant<_Types...>& __v) noexcept {
  return std::__unchecked_get<__find_exactly_one_t<_Tp, _Types...>::value>(__v);
}



}}
# 1638 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/variant" 3
#pragma clang diagnostic pop
# 743 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iterator" 2 3
# 1293 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/memory" 1 3
# 939 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/memory" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/align.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/align.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/align.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/align.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/align.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/align.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/align.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/align.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

__attribute__((__visibility__("default"))) void* align(size_t __align, size_t __sz, void*& __ptr, size_t& __space);

}}
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/align.h" 3
#pragma clang diagnostic pop
# 940 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/memory" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/inout_ptr.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/inout_ptr.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_specialization.h" 1 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_specialization.h" 3


#pragma clang diagnostic push
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_specialization.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_specialization.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_specialization.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_specialization.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_specialization.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_specialization.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp, template <class...> class _Template>
inline constexpr bool __is_specialization_v = false;

template <template <class...> class _Template, class... _Args>
inline constexpr bool __is_specialization_v<_Template<_Args...>, _Template> = true;



}}
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_specialization.h" 3
#pragma clang diagnostic pop
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/inout_ptr.h" 2 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/inout_ptr.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/inout_ptr.h" 2 3

#pragma clang diagnostic push
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/inout_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/inout_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/inout_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/inout_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/inout_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/inout_ptr.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 105 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/inout_ptr.h" 3
}}
# 105 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/inout_ptr.h" 3
#pragma clang diagnostic pop
# 945 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/memory" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/out_ptr.h" 1 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/out_ptr.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/out_ptr.h" 2 3

#pragma clang diagnostic push
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/out_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/out_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/out_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/out_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/out_ptr.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/out_ptr.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 97 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/out_ptr.h" 3
}}
# 97 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/out_ptr.h" 3
#pragma clang diagnostic pop
# 946 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/memory" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/raw_storage_iterator.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/raw_storage_iterator.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/raw_storage_iterator.h" 2 3

#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/raw_storage_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/raw_storage_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/raw_storage_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/raw_storage_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/raw_storage_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/raw_storage_iterator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



#pragma GCC diagnostic push
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/raw_storage_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/raw_storage_iterator.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _OutputIterator, class _Tp>
class __attribute__((__deprecated__)) raw_storage_iterator

    : public iterator<output_iterator_tag, void, void, void, void>

{
#pragma GCC diagnostic pop

private:
  _OutputIterator __x_;

public:
  typedef output_iterator_tag iterator_category;
  typedef void value_type;



  typedef void difference_type;

  typedef void pointer;
  typedef void reference;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit raw_storage_iterator(_OutputIterator __x) : __x_(__x) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) raw_storage_iterator& operator*() { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) raw_storage_iterator& operator=(const _Tp& __element) {
    ::new ((void*)std::addressof(*__x_)) _Tp(__element);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) raw_storage_iterator& operator=(_Tp&& __element) {
    ::new ((void*)std::addressof(*__x_)) _Tp(std::move(__element));
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) raw_storage_iterator& operator++() {
    ++__x_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) raw_storage_iterator operator++(int) {
    raw_storage_iterator __t(*this);
    ++__x_;
    return __t;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator base() const { return __x_; }

};



}}
# 83 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/raw_storage_iterator.h" 3
#pragma clang diagnostic pop
# 948 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/memory" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temporary_buffer.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temporary_buffer.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temporary_buffer.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temporary_buffer.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temporary_buffer.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temporary_buffer.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temporary_buffer.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temporary_buffer.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__no_sanitize__("cfi"))) __attribute__((__deprecated__)) pair<_Tp*, ptrdiff_t>
get_temporary_buffer(ptrdiff_t __n) noexcept {
  pair<_Tp*, ptrdiff_t> __r(0, 0);
  const ptrdiff_t __m =
      (~ptrdiff_t(0) ^ ptrdiff_t(ptrdiff_t(1) << (sizeof(ptrdiff_t) * 8 - 1))) / sizeof(_Tp);
  if (__n > __m)
    __n = __m;
  while (__n > 0) {

    if (__is_overaligned_for_new(alignof(_Tp))) {
      align_val_t __al = align_val_t(alignof(_Tp));
      __r.first = static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al, nothrow));
    } else {
      __r.first = static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), nothrow));
    }
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temporary_buffer.h" 3
    if (__r.first) {
      __r.second = __n;
      break;
    }
    __n /= 2;
  }
  return __r;
}

template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__deprecated__)) void return_temporary_buffer(_Tp* __p) noexcept {
  std::__libcpp_deallocate_unsized((void*)__p, alignof(_Tp));
}

struct __return_temporary_buffer {
#pragma GCC diagnostic push
# 65 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temporary_buffer.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 65 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temporary_buffer.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator()(_Tp* __p) const {
    std::return_temporary_buffer(__p);
  }
#pragma GCC diagnostic pop
};

}}
# 73 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temporary_buffer.h" 3
#pragma clang diagnostic pop
# 950 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/memory" 2 3
# 979 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/memory" 3
# 1295 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/optional" 2 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/movable_box.h" 2 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/movable_box.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/movable_box.h" 2 3

#pragma clang diagnostic push
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/movable_box.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/movable_box.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/movable_box.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/movable_box.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/movable_box.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/movable_box.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 243 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/movable_box.h" 3
}}
# 243 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ranges/movable_box.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each.h" 2 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each.h" 2 3

#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator, class _Function>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Function
for_each(_InputIterator __first, _InputIterator __last, _Function __f) {
  for (; __first != __last; ++__first)
    __f(*__first);
  return __f;
}
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each.h" 3
}}
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each.h" 3
#pragma clang diagnostic pop
# 1843 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _ForwardIterator, class _Generator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
generate(_ForwardIterator __first, _ForwardIterator __last, _Generator __gen) {
  for (; __first != __last; ++__first)
    *__first = __gen();
}

}}
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate.h" 3
#pragma clang diagnostic pop
# 1844 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate_n.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate_n.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate_n.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate_n.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate_n.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate_n.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate_n.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate_n.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _OutputIterator, class _Size, class _Generator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
generate_n(_OutputIterator __first, _Size __orig_n, _Generator __gen) {
  typedef decltype(std::__convert_to_integral(__orig_n)) _IntegralSize;
  _IntegralSize __n = __orig_n;
  for (; __n > 0; ++__first, (void)--__n)
    *__first = __gen();
  return __first;
}

}}
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/generate_n.h" 3
#pragma clang diagnostic pop
# 1845 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/includes.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/includes.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/includes.h" 2 3

#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/includes.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/includes.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/includes.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/includes.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/includes.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/includes.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Iter1, class _Sent1, class _Iter2, class _Sent2, class _Comp, class _Proj1, class _Proj2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __includes(
    _Iter1 __first1,
    _Sent1 __last1,
    _Iter2 __first2,
    _Sent2 __last2,
    _Comp&& __comp,
    _Proj1&& __proj1,
    _Proj2&& __proj2) {
  for (; __first2 != __last2; ++__first1) {
    if (__first1 == __last1 ||
        std::__invoke(__comp, std::__invoke(__proj2, *__first2), std::__invoke(__proj1, *__first1)))
      return false;
    if (!std::__invoke(__comp, std::__invoke(__proj1, *__first1), std::__invoke(__proj2, *__first2)))
      ++__first2;
  }
  return true;
}

template <class _InputIterator1, class _InputIterator2, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
includes(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _Compare __comp) {
  static_assert(
      __is_callable<_Compare, decltype(*__first1), decltype(*__first2)>::value, "Comparator has to be callable");

  return std::__includes(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      static_cast<__comp_ref_type<_Compare> >(__comp),
      __identity(),
      __identity());
}

template <class _InputIterator1, class _InputIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2) {
  return std::includes(std::move(__first1), std::move(__last1), std::move(__first2), std::move(__last2), __less<>());
}

}}
# 75 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/includes.h" 3
#pragma clang diagnostic pop
# 1846 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/inplace_merge.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/inplace_merge.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move_backward.h" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move_backward.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move_backward.h" 2 3

#pragma clang diagnostic push
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move_backward.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move_backward.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move_backward.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move_backward.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move_backward.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move_backward.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _BidirectionalIterator1, class _Sentinel, class _BidirectionalIterator2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_BidirectionalIterator1, _BidirectionalIterator2>
__move_backward(_BidirectionalIterator1 __first, _Sentinel __last, _BidirectionalIterator2 __result);

template <class _AlgPolicy>
struct __move_backward_impl {
  template <class _InIter, class _Sent, class _OutIter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _Sent __last, _OutIter __result) const {
    auto __last_iter = _IterOps<_AlgPolicy>::next(__first, __last);
    auto __original_last_iter = __last_iter;

    while (__first != __last_iter) {
      *--__result = _IterOps<_AlgPolicy>::__iter_move(--__last_iter);
    }

    return std::make_pair(std::move(__original_last_iter), std::move(__result));
  }

  template <class _InIter, class _OutIter, __enable_if_t<__is_segmented_iterator<_InIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _InIter __last, _OutIter __result) const {
    using _Traits = __segmented_iterator_traits<_InIter>;
    auto __sfirst = _Traits::__segment(__first);
    auto __slast = _Traits::__segment(__last);
    if (__sfirst == __slast) {
      auto __iters =
          std::__move_backward<_AlgPolicy>(_Traits::__local(__first), _Traits::__local(__last), std::move(__result));
      return std::make_pair(__last, __iters.second);
    }

    __result =
        std::__move_backward<_AlgPolicy>(_Traits::__begin(__slast), _Traits::__local(__last), std::move(__result))
            .second;
    --__slast;
    while (__sfirst != __slast) {
      __result =
          std::__move_backward<_AlgPolicy>(_Traits::__begin(__slast), _Traits::__end(__slast), std::move(__result))
              .second;
      --__slast;
    }
    __result = std::__move_backward<_AlgPolicy>(_Traits::__local(__first), _Traits::__end(__slast), std::move(__result))
                   .second;
    return std::make_pair(__last, std::move(__result));
  }

  template <class _InIter,
            class _OutIter,
            __enable_if_t<__has_random_access_iterator_category<_InIter>::value &&
                              !__is_segmented_iterator<_InIter>::value && __is_segmented_iterator<_OutIter>::value,
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_InIter, _OutIter>
  operator()(_InIter __first, _InIter __last, _OutIter __result) const {
    using _Traits = __segmented_iterator_traits<_OutIter>;
    using _DiffT = typename common_type<__iter_diff_t<_InIter>, __iter_diff_t<_OutIter> >::type;


    if (__first == __last)
      return std::make_pair(__first, __result);

    auto __orig_last = __last;

    auto __local_last = _Traits::__local(__result);
    auto __segment_iterator = _Traits::__segment(__result);
    while (true) {
      auto __local_first = _Traits::__begin(__segment_iterator);
      auto __size = std::min<_DiffT>(__local_last - __local_first, __last - __first);
      auto __iter = std::__move_backward<_AlgPolicy>(__last - __size, __last, __local_last).second;
      __last -= __size;

      if (__first == __last)
        return std::make_pair(std::move(__orig_last), _Traits::__compose(__segment_iterator, std::move(__iter)));

      __local_last = _Traits::__end(--__segment_iterator);
    }
  }


  template <class _In, class _Out, __enable_if_t<__can_lower_move_assignment_to_memmove<_In, _Out>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_In*, _Out*>
  operator()(_In* __first, _In* __last, _Out* __result) const {
    return std::__copy_backward_trivial_impl(__first, __last, __result);
  }
};

template <class _AlgPolicy, class _BidirectionalIterator1, class _Sentinel, class _BidirectionalIterator2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_BidirectionalIterator1, _BidirectionalIterator2>
__move_backward(_BidirectionalIterator1 __first, _Sentinel __last, _BidirectionalIterator2 __result) {
  static_assert(std::is_copy_constructible<_BidirectionalIterator1>::value &&
                    std::is_copy_constructible<_BidirectionalIterator1>::value,
                "Iterators must be copy constructible.");

  return std::__copy_move_unwrap_iters<__move_backward_impl<_AlgPolicy> >(
      std::move(__first), std::move(__last), std::move(__result));
}

template <class _BidirectionalIterator1, class _BidirectionalIterator2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _BidirectionalIterator2
move_backward(_BidirectionalIterator1 __first, _BidirectionalIterator1 __last, _BidirectionalIterator2 __result) {
  return std::__move_backward<_ClassicAlgPolicy>(std::move(__first), std::move(__last), std::move(__result)).second;
}

}}
# 133 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/move_backward.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/swap_ranges.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/swap_ranges.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/swap_ranges.h" 2 3

#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/swap_ranges.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/swap_ranges.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/swap_ranges.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/swap_ranges.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/swap_ranges.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/swap_ranges.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _AlgPolicy, class _ForwardIterator1, class _Sentinel1, class _ForwardIterator2, class _Sentinel2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_ForwardIterator1, _ForwardIterator2>
__swap_ranges(_ForwardIterator1 __first1, _Sentinel1 __last1, _ForwardIterator2 __first2, _Sentinel2 __last2) {
  while (__first1 != __last1 && __first2 != __last2) {
    _IterOps<_AlgPolicy>::iter_swap(__first1, __first2);
    ++__first1;
    ++__first2;
  }

  return pair<_ForwardIterator1, _ForwardIterator2>(std::move(__first1), std::move(__first2));
}


template <class _AlgPolicy, class _ForwardIterator1, class _Sentinel1, class _ForwardIterator2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_ForwardIterator1, _ForwardIterator2>
__swap_ranges(_ForwardIterator1 __first1, _Sentinel1 __last1, _ForwardIterator2 __first2) {
  while (__first1 != __last1) {
    _IterOps<_AlgPolicy>::iter_swap(__first1, __first2);
    ++__first1;
    ++__first2;
  }

  return pair<_ForwardIterator1, _ForwardIterator2>(std::move(__first1), std::move(__first2));
}

template <class _ForwardIterator1, class _ForwardIterator2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator2
swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2) {
  return std::__swap_ranges<_ClassicAlgPolicy>(std::move(__first1), std::move(__last1), std::move(__first2)).second;
}

}}
# 58 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/swap_ranges.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate.h" 2 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate.h" 2 3

#pragma clang diagnostic push
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ForwardIterator
__rotate_left(_ForwardIterator __first, _ForwardIterator __last) {
  typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
  using _Ops = _IterOps<_AlgPolicy>;

  value_type __tmp = _Ops::__iter_move(__first);
  _ForwardIterator __lm1 = std::__move<_AlgPolicy>(_Ops::next(__first), __last, __first).second;
  *__lm1 = std::move(__tmp);
  return __lm1;
}

template <class _AlgPolicy, class _BidirectionalIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _BidirectionalIterator
__rotate_right(_BidirectionalIterator __first, _BidirectionalIterator __last) {
  typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
  using _Ops = _IterOps<_AlgPolicy>;

  _BidirectionalIterator __lm1 = _Ops::prev(__last);
  value_type __tmp = _Ops::__iter_move(__lm1);
  _BidirectionalIterator __fp1 = std::__move_backward<_AlgPolicy>(__first, __lm1, std::move(__last)).second;
  *__first = std::move(__tmp);
  return __fp1;
}

template <class _AlgPolicy, class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ForwardIterator
__rotate_forward(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last) {
  _ForwardIterator __i = __middle;
  while (true) {
    _IterOps<_AlgPolicy>::iter_swap(__first, __i);
    ++__first;
    if (++__i == __last)
      break;
    if (__first == __middle)
      __middle = __i;
  }
  _ForwardIterator __r = __first;
  if (__first != __middle) {
    __i = __middle;
    while (true) {
      _IterOps<_AlgPolicy>::iter_swap(__first, __i);
      ++__first;
      if (++__i == __last) {
        if (__first == __middle)
          break;
        __i = __middle;
      } else if (__first == __middle)
        __middle = __i;
    }
  }
  return __r;
}

template <typename _Integral>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Integral __algo_gcd(_Integral __x, _Integral __y) {
  do {
    _Integral __t = __x % __y;
    __x = __y;
    __y = __t;
  } while (__y);
  return __x;
}

template <class _AlgPolicy, typename _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _RandomAccessIterator
__rotate_gcd(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last) {
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;
  using _Ops = _IterOps<_AlgPolicy>;

  const difference_type __m1 = __middle - __first;
  const difference_type __m2 = _Ops::distance(__middle, __last);
  if (__m1 == __m2) {
    std::__swap_ranges<_AlgPolicy>(__first, __middle, __middle, __last);
    return __middle;
  }
  const difference_type __g = std::__algo_gcd(__m1, __m2);
  for (_RandomAccessIterator __p = __first + __g; __p != __first;) {
    value_type __t(_Ops::__iter_move(--__p));
    _RandomAccessIterator __p1 = __p;
    _RandomAccessIterator __p2 = __p1 + __m1;
    do {
      *__p1 = _Ops::__iter_move(__p2);
      __p1 = __p2;
      const difference_type __d = _Ops::distance(__p2, __last);
      if (__m1 < __d)
        __p2 += __m1;
      else
        __p2 = __first + (__m1 - __d);
    } while (__p2 != __p);
    *__p1 = std::move(__t);
  }
  return __first + __m2;
}

template <class _AlgPolicy, class _ForwardIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ForwardIterator
__rotate_impl(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, std::forward_iterator_tag) {
  typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
  if (is_trivially_move_assignable<value_type>::value) {
    if (_IterOps<_AlgPolicy>::next(__first) == __middle)
      return std::__rotate_left<_AlgPolicy>(__first, __last);
  }
  return std::__rotate_forward<_AlgPolicy>(__first, __middle, __last);
}

template <class _AlgPolicy, class _BidirectionalIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _BidirectionalIterator __rotate_impl(
    _BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    bidirectional_iterator_tag) {
  typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
  if (is_trivially_move_assignable<value_type>::value) {
    if (_IterOps<_AlgPolicy>::next(__first) == __middle)
      return std::__rotate_left<_AlgPolicy>(__first, __last);
    if (_IterOps<_AlgPolicy>::next(__middle) == __last)
      return std::__rotate_right<_AlgPolicy>(__first, __last);
  }
  return std::__rotate_forward<_AlgPolicy>(__first, __middle, __last);
}

template <class _AlgPolicy, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _RandomAccessIterator __rotate_impl(
    _RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last,
    random_access_iterator_tag) {
  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;
  if (is_trivially_move_assignable<value_type>::value) {
    if (_IterOps<_AlgPolicy>::next(__first) == __middle)
      return std::__rotate_left<_AlgPolicy>(__first, __last);
    if (_IterOps<_AlgPolicy>::next(__middle) == __last)
      return std::__rotate_right<_AlgPolicy>(__first, __last);
    return std::__rotate_gcd<_AlgPolicy>(__first, __middle, __last);
  }
  return std::__rotate_forward<_AlgPolicy>(__first, __middle, __last);
}

template <class _AlgPolicy, class _Iterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_Iterator, _Iterator>
__rotate(_Iterator __first, _Iterator __middle, _Sentinel __last) {
  using _Ret = pair<_Iterator, _Iterator>;
  _Iterator __last_iter = _IterOps<_AlgPolicy>::next(__middle, __last);

  if (__first == __middle)
    return _Ret(__last_iter, __last_iter);
  if (__middle == __last)
    return _Ret(std::move(__first), std::move(__last_iter));

  using _IterCategory = typename _IterOps<_AlgPolicy>::template __iterator_category<_Iterator>;
  auto __result = std::__rotate_impl<_AlgPolicy>(std::move(__first), std::move(__middle), __last_iter, _IterCategory());

  return _Ret(std::move(__result), std::move(__last_iter));
}

template <class _ForwardIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last) {
  return std::__rotate<_ClassicAlgPolicy>(std::move(__first), std::move(__middle), std::move(__last)).first;
}

}}
# 194 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate.h" 3
#pragma clang diagnostic pop
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/inplace_merge.h" 2 3







# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/destruct_n.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/destruct_n.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/destruct_n.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/destruct_n.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/destruct_n.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/destruct_n.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/destruct_n.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/destruct_n.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

struct __destruct_n {
private:
  size_t __size_;

  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __process(_Tp* __p, false_type) noexcept {
    for (size_t __i = 0; __i < __size_; ++__i, ++__p)
      __p->~_Tp();
  }

  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __process(_Tp*, true_type) noexcept {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __incr(false_type) noexcept { ++__size_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __incr(true_type) noexcept {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __set(size_t __s, false_type) noexcept { __size_ = __s; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __set(size_t, true_type) noexcept {}

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __destruct_n(size_t __s) noexcept : __size_(__s) {}

  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __incr() noexcept {
    __incr(integral_constant<bool, is_trivially_destructible<_Tp>::value>());
  }

  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __set(size_t __s, _Tp*) noexcept {
    __set(__s, integral_constant<bool, is_trivially_destructible<_Tp>::value>());
  }

  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator()(_Tp* __p) noexcept {
    __process(__p, integral_constant<bool, is_trivially_destructible<_Tp>::value>());
  }
};

}}
# 61 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/destruct_n.h" 3
#pragma clang diagnostic pop
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/inplace_merge.h" 2 3
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/inplace_merge.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/inplace_merge.h" 2 3

#pragma clang diagnostic push
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/inplace_merge.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/inplace_merge.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/inplace_merge.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/inplace_merge.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/inplace_merge.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/inplace_merge.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Predicate>
class __invert
{
private:
  _Predicate __p_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __invert() {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __invert(_Predicate __p) : __p_(__p) {}

  template <class _T1>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _T1& __x) {
    return !__p_(__x);
  }

  template <class _T1, class _T2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _T1& __x, const _T2& __y) {
    return __p_(__y, __x);
  }
};

template <class _AlgPolicy,
          class _Compare,
          class _InputIterator1,
          class _Sent1,
          class _InputIterator2,
          class _Sent2,
          class _OutputIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __half_inplace_merge(
    _InputIterator1 __first1,
    _Sent1 __last1,
    _InputIterator2 __first2,
    _Sent2 __last2,
    _OutputIterator __result,
    _Compare&& __comp) {
  for (; __first1 != __last1; ++__result) {
    if (__first2 == __last2) {
      std::__move<_AlgPolicy>(__first1, __last1, __result);
      return;
    }

    if (__comp(*__first2, *__first1)) {
      *__result = _IterOps<_AlgPolicy>::__iter_move(__first2);
      ++__first2;
    } else {
      *__result = _IterOps<_AlgPolicy>::__iter_move(__first1);
      ++__first1;
    }
  }

}

template <class _AlgPolicy, class _Compare, class _BidirectionalIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __buffered_inplace_merge(
    _BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare&& __comp,
    typename iterator_traits<_BidirectionalIterator>::difference_type __len1,
    typename iterator_traits<_BidirectionalIterator>::difference_type __len2,
    typename iterator_traits<_BidirectionalIterator>::value_type* __buff) {
  typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
  __destruct_n __d(0);
  unique_ptr<value_type, __destruct_n&> __h2(__buff, __d);
  if (__len1 <= __len2) {
    value_type* __p = __buff;
    for (_BidirectionalIterator __i = __first; __i != __middle;
         __d.template __incr<value_type>(), (void)++__i, (void)++__p)
      ::new ((void*)__p) value_type(_IterOps<_AlgPolicy>::__iter_move(__i));
    std::__half_inplace_merge<_AlgPolicy>(__buff, __p, __middle, __last, __first, __comp);
  } else {
    value_type* __p = __buff;
    for (_BidirectionalIterator __i = __middle; __i != __last;
         __d.template __incr<value_type>(), (void)++__i, (void)++__p)
      ::new ((void*)__p) value_type(_IterOps<_AlgPolicy>::__iter_move(__i));
    typedef reverse_iterator<_BidirectionalIterator> _RBi;
    typedef reverse_iterator<value_type*> _Rv;
    typedef __invert<_Compare> _Inverted;
    std::__half_inplace_merge<_AlgPolicy>(
        _Rv(__p), _Rv(__buff), _RBi(__middle), _RBi(__first), _RBi(__last), _Inverted(__comp));
  }
}

template <class _AlgPolicy, class _Compare, class _BidirectionalIterator>
void __inplace_merge(
    _BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare&& __comp,
    typename iterator_traits<_BidirectionalIterator>::difference_type __len1,
    typename iterator_traits<_BidirectionalIterator>::difference_type __len2,
    typename iterator_traits<_BidirectionalIterator>::value_type* __buff,
    ptrdiff_t __buff_size) {
  using _Ops = _IterOps<_AlgPolicy>;

  typedef typename iterator_traits<_BidirectionalIterator>::difference_type difference_type;
  while (true) {

    if (__len2 == 0)
      return;
    if (__len1 <= __buff_size || __len2 <= __buff_size)
      return std::__buffered_inplace_merge<_AlgPolicy>(__first, __middle, __last, __comp, __len1, __len2, __buff);

    for (; true; ++__first, (void)--__len1) {
      if (__len1 == 0)
        return;
      if (__comp(*__middle, *__first))
        break;
    }
# 159 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/inplace_merge.h" 3
    _BidirectionalIterator __m1;
    _BidirectionalIterator __m2;
    difference_type __len11;
    difference_type __len21;

    if (__len1 < __len2) {
      __len21 = __len2 / 2;
      __m2 = __middle;
      _Ops::advance(__m2, __len21);
      __m1 = std::__upper_bound<_AlgPolicy>(__first, __middle, *__m2, __comp, std::__identity());
      __len11 = _Ops::distance(__first, __m1);
    } else {
      if (__len1 == 1) {

        _Ops::iter_swap(__first, __middle);
        return;
      }

      __len11 = __len1 / 2;
      __m1 = __first;
      _Ops::advance(__m1, __len11);
      __m2 = std::lower_bound(__middle, __last, *__m1, __comp);
      __len21 = _Ops::distance(__middle, __m2);
    }
    difference_type __len12 = __len1 - __len11;
    difference_type __len22 = __len2 - __len21;


    __middle = std::__rotate<_AlgPolicy>(__m1, __middle, __m2).first;


    if (__len11 + __len21 < __len12 + __len22) {
      std::__inplace_merge<_AlgPolicy>(__first, __m1, __middle, __comp, __len11, __len21, __buff, __buff_size);
      __first = __middle;
      __middle = __m2;
      __len1 = __len12;
      __len2 = __len22;
    } else {
      std::__inplace_merge<_AlgPolicy>(__middle, __m2, __last, __comp, __len12, __len22, __buff, __buff_size);
      __last = __middle;
      __middle = __m1;
      __len1 = __len11;
      __len2 = __len21;
    }
  }
}

template <class _AlgPolicy, class _BidirectionalIterator, class _Compare>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __inplace_merge(
    _BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare&& __comp) {
  typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
  typedef typename iterator_traits<_BidirectionalIterator>::difference_type difference_type;
  difference_type __len1 = _IterOps<_AlgPolicy>::distance(__first, __middle);
  difference_type __len2 = _IterOps<_AlgPolicy>::distance(__middle, __last);
  difference_type __buf_size = std::min(__len1, __len2);

#pragma GCC diagnostic push
# 215 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/inplace_merge.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 215 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/inplace_merge.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  pair<value_type*, ptrdiff_t> __buf = std::get_temporary_buffer<value_type>(__buf_size);
#pragma GCC diagnostic pop
  unique_ptr<value_type, __return_temporary_buffer> __h(__buf.first);
  return std::__inplace_merge<_AlgPolicy>(
      std::move(__first), std::move(__middle), std::move(__last), __comp, __len1, __len2, __buf.first, __buf.second);
}

template <class _BidirectionalIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void inplace_merge(
    _BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp) {
  std::__inplace_merge<_ClassicAlgPolicy>(
      std::move(__first), std::move(__middle), std::move(__last), static_cast<__comp_ref_type<_Compare> >(__comp));
}

template <class _BidirectionalIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last) {
  std::inplace_merge(std::move(__first), std::move(__middle), std::move(__last), __less<>());
}

}}
# 236 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/inplace_merge.h" 3
#pragma clang diagnostic pop
# 1847 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap_until.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap_until.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap_until.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap_until.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap_until.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap_until.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap_until.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap_until.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Compare, class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _RandomAccessIterator
__is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare&& __comp) {
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  difference_type __len = __last - __first;
  difference_type __p = 0;
  difference_type __c = 1;
  _RandomAccessIterator __pp = __first;
  while (__c < __len) {
    _RandomAccessIterator __cp = __first + __c;
    if (__comp(*__pp, *__cp))
      return __cp;
    ++__c;
    ++__cp;
    if (__c == __len)
      return __last;
    if (__comp(*__pp, *__cp))
      return __cp;
    ++__p;
    ++__pp;
    __c = 2 * __p + 1;
  }
  return __last;
}

template <class _RandomAccessIterator, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _RandomAccessIterator
is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  return std::__is_heap_until(__first, __last, static_cast<__comp_ref_type<_Compare> >(__comp));
}

template <class _RandomAccessIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _RandomAccessIterator
is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last) {
  return std::__is_heap_until(__first, __last, __less<>());
}

}}
# 60 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap_until.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap.h" 2 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _RandomAccessIterator, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  return std::__is_heap_until(__first, __last, static_cast<__comp_ref_type<_Compare> >(__comp)) == __last;
}

template <class _RandomAccessIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) {
  return std::is_heap(__first, __last, __less<>());
}

}}
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_heap.h" 3
#pragma clang diagnostic pop
# 1848 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_partitioned.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_partitioned.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_partitioned.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_partitioned.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_partitioned.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_partitioned.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_partitioned.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_partitioned.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator, class _Predicate>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
is_partitioned(_InputIterator __first, _InputIterator __last, _Predicate __pred) {
  for (; __first != __last; ++__first)
    if (!__pred(*__first))
      break;
  if (__first == __last)
    return true;
  ++__first;
  for (; __first != __last; ++__first)
    if (__pred(*__first))
      return false;
  return true;
}

}}
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_partitioned.h" 3
#pragma clang diagnostic pop
# 1850 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_permutation.h" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_permutation.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_permutation.h" 2 3

#pragma clang diagnostic push
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_permutation.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_permutation.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_permutation.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_permutation.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_permutation.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_permutation.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Iter1, class _Sent1, class _Iter2, class _Sent2, class = void>
struct _ConstTimeDistance : false_type {};
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_permutation.h" 3
template <class _Iter1, class _Iter2>
struct _ConstTimeDistance<
    _Iter1,
    _Iter1,
    _Iter2,
    _Iter2,
    __enable_if_t< is_same<typename iterator_traits<_Iter1>::iterator_category, random_access_iterator_tag>::value &&
                   is_same<typename iterator_traits<_Iter2>::iterator_category, random_access_iterator_tag>::value > >
    : true_type {};






template <class _AlgPolicy,
          class _Iter1,
          class _Sent1,
          class _Iter2,
          class _Sent2,
          class _Proj1,
          class _Proj2,
          class _Pred>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __is_permutation_impl(
    _Iter1 __first1,
    _Sent1 __last1,
    _Iter2 __first2,
    _Sent2 __last2,
    _Pred&& __pred,
    _Proj1&& __proj1,
    _Proj2&& __proj2) {
  using _D1 = __iter_diff_t<_Iter1>;

  for (auto __i = __first1; __i != __last1; ++__i) {

    auto __match = __first1;
    for (; __match != __i; ++__match) {
      if (std::__invoke(__pred, std::__invoke(__proj1, *__match), std::__invoke(__proj1, *__i)))
        break;
    }

    if (__match == __i) {

      _D1 __c2 = 0;
      for (auto __j = __first2; __j != __last2; ++__j) {
        if (std::__invoke(__pred, std::__invoke(__proj1, *__i), std::__invoke(__proj2, *__j)))
          ++__c2;
      }
      if (__c2 == 0)
        return false;


      _D1 __c1 = 1;
      for (auto __j = _IterOps<_AlgPolicy>::next(__i); __j != __last1; ++__j) {
        if (std::__invoke(__pred, std::__invoke(__proj1, *__i), std::__invoke(__proj1, *__j)))
          ++__c1;
      }
      if (__c1 != __c2)
        return false;
    }
  }

  return true;
}


template <class _AlgPolicy, class _ForwardIterator1, class _Sentinel1, class _ForwardIterator2, class _BinaryPredicate>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __is_permutation(
    _ForwardIterator1 __first1, _Sentinel1 __last1, _ForwardIterator2 __first2, _BinaryPredicate&& __pred) {

  for (; __first1 != __last1; ++__first1, (void)++__first2) {
    if (!__pred(*__first1, *__first2))
      break;
  }

  if (__first1 == __last1)
    return true;


  using _D1 = __iter_diff_t<_ForwardIterator1>;
  _D1 __l1 = _IterOps<_AlgPolicy>::distance(__first1, __last1);
  if (__l1 == _D1(1))
    return false;
  auto __last2 = _IterOps<_AlgPolicy>::next(__first2, __l1);

  return std::__is_permutation_impl<_AlgPolicy>(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      __pred,
      __identity(),
      __identity());
}


template <class _AlgPolicy,
          class _Iter1,
          class _Sent1,
          class _Iter2,
          class _Sent2,
          class _Proj1,
          class _Proj2,
          class _Pred>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __is_permutation(
    _Iter1 __first1,
    _Sent1 __last1,
    _Iter2 __first2,
    _Sent2 __last2,
    _Pred&& __pred,
    _Proj1&& __proj1,
    _Proj2&& __proj2,
                           false_type) {

  while (__first1 != __last1 && __first2 != __last2) {
    if (!std::__invoke(__pred, std::__invoke(__proj1, *__first1), std::__invoke(__proj2, *__first2)))
      break;
    ++__first1;
    ++__first2;
  }

  if (__first1 == __last1)
    return __first2 == __last2;
  if (__first2 == __last2)
    return false;

  using _D1 = __iter_diff_t<_Iter1>;
  _D1 __l1 = _IterOps<_AlgPolicy>::distance(__first1, __last1);

  using _D2 = __iter_diff_t<_Iter2>;
  _D2 __l2 = _IterOps<_AlgPolicy>::distance(__first2, __last2);
  if (__l1 != __l2)
    return false;

  return std::__is_permutation_impl<_AlgPolicy>(
      std::move(__first1), std::move(__last1), std::move(__first2), std::move(__last2), __pred, __proj1, __proj2);
}


template <class _AlgPolicy,
          class _Iter1,
          class _Sent1,
          class _Iter2,
          class _Sent2,
          class _Proj1,
          class _Proj2,
          class _Pred>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __is_permutation(
    _Iter1 __first1,
    _Sent1 __last1,
    _Iter2 __first2,
    _Sent2 __last2,
    _Pred&& __pred,
    _Proj1&& __proj1,
    _Proj2&& __proj2,
                           true_type) {
  if (std::distance(__first1, __last1) != std::distance(__first2, __last2))
    return false;
  return std::__is_permutation<_AlgPolicy>(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      __pred,
      __proj1,
      __proj2,
                             false_type());
}


template <class _AlgPolicy,
          class _Iter1,
          class _Sent1,
          class _Iter2,
          class _Sent2,
          class _Proj1,
          class _Proj2,
          class _Pred>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __is_permutation(
    _Iter1 __first1,
    _Sent1 __last1,
    _Iter2 __first2,
    _Sent2 __last2,
    _Pred&& __pred,
    _Proj1&& __proj1,
    _Proj2&& __proj2) {
  return std::__is_permutation<_AlgPolicy>(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      __pred,
      __proj1,
      __proj2,
      _ConstTimeDistance<_Iter1, _Sent1, _Iter2, _Sent2>());
}




template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool is_permutation(
    _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _BinaryPredicate __pred) {
  static_assert(__is_callable<_BinaryPredicate, decltype(*__first1), decltype(*__first2)>::value,
                "The predicate has to be callable");

  return std::__is_permutation<_ClassicAlgPolicy>(std::move(__first1), std::move(__last1), std::move(__first2), __pred);
}


template <class _ForwardIterator1, class _ForwardIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2) {
  return std::is_permutation(__first1, __last1, __first2, __equal_to());
}




template <class _ForwardIterator1, class _ForwardIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool is_permutation(
    _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2) {
  return std::__is_permutation<_ClassicAlgPolicy>(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      __equal_to(),
      __identity(),
      __identity());
}


template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool is_permutation(
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _BinaryPredicate __pred) {
  static_assert(__is_callable<_BinaryPredicate, decltype(*__first1), decltype(*__first2)>::value,
                "The predicate has to be callable");

  return std::__is_permutation<_ClassicAlgPolicy>(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      __pred,
      __identity(),
      __identity());
}



}}
# 304 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_permutation.h" 3
#pragma clang diagnostic pop
# 1851 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted_until.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted_until.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted_until.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted_until.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted_until.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted_until.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted_until.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted_until.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Compare, class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
__is_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp) {
  if (__first != __last) {
    _ForwardIterator __i = __first;
    while (++__i != __last) {
      if (__comp(*__i, *__first))
        return __i;
      __first = __i;
    }
  }
  return __last;
}

template <class _ForwardIterator, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
is_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp) {
  return std::__is_sorted_until<__comp_ref_type<_Compare> >(__first, __last, __comp);
}

template <class _ForwardIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
is_sorted_until(_ForwardIterator __first, _ForwardIterator __last) {
  return std::is_sorted_until(__first, __last, __less<>());
}

}}
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted_until.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted.h" 2 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _ForwardIterator, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
is_sorted(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp) {
  return std::__is_sorted_until<__comp_ref_type<_Compare> >(__first, __last, __comp) == __last;
}

template <class _ForwardIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
is_sorted(_ForwardIterator __first, _ForwardIterator __last) {
  return std::is_sorted(__first, __last, __less<>());
}

}}
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/is_sorted.h" 3
#pragma clang diagnostic pop
# 1852 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Compare, class _InputIterator1, class _InputIterator2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __lexicographical_compare(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _Compare __comp) {
  for (; __first2 != __last2; ++__first1, (void)++__first2) {
    if (__first1 == __last1 || __comp(*__first1, *__first2))
      return true;
    if (__comp(*__first2, *__first1))
      return false;
  }
  return false;
}

template <class _InputIterator1, class _InputIterator2, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool lexicographical_compare(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _Compare __comp) {
  return std::__lexicographical_compare<__comp_ref_type<_Compare> >(__first1, __last1, __first2, __last2, __comp);
}

template <class _InputIterator1, class _InputIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool lexicographical_compare(
    _InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2) {
  return std::lexicographical_compare(__first1, __last1, __first2, __last2, __less<>());
}

}}
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare.h" 3
#pragma clang diagnostic pop
# 1855 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_heap.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_heap.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sift_down.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sift_down.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sift_down.h" 2 3

#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sift_down.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sift_down.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sift_down.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sift_down.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sift_down.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sift_down.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__sift_down(_RandomAccessIterator __first,
            _Compare&& __comp,
            typename iterator_traits<_RandomAccessIterator>::difference_type __len,
            _RandomAccessIterator __start) {
  using _Ops = _IterOps<_AlgPolicy>;

  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;


  difference_type __child = __start - __first;

  if (__len < 2 || (__len - 2) / 2 < __child)
    return;

  __child = 2 * __child + 1;
  _RandomAccessIterator __child_i = __first + __child;

  if ((__child + 1) < __len && __comp(*__child_i, *(__child_i + difference_type(1)))) {

    ++__child_i;
    ++__child;
  }


  if (__comp(*__child_i, *__start))

    return;

  value_type __top(_Ops::__iter_move(__start));
  do {

    *__start = _Ops::__iter_move(__child_i);
    __start = __child_i;

    if ((__len - 2) / 2 < __child)
      break;


    __child = 2 * __child + 1;
    __child_i = __first + __child;

    if ((__child + 1) < __len && __comp(*__child_i, *(__child_i + difference_type(1)))) {

      ++__child_i;
      ++__child;
    }


  } while (!__comp(*__child_i, __top));
  *__start = std::move(__top);
}

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _RandomAccessIterator __floyd_sift_down(
    _RandomAccessIterator __first,
    _Compare&& __comp,
    typename iterator_traits<_RandomAccessIterator>::difference_type __len) {
  using difference_type = typename iterator_traits<_RandomAccessIterator>::difference_type;
  ((void)0);

  _RandomAccessIterator __hole = __first;
  _RandomAccessIterator __child_i = __first;
  difference_type __child = 0;

  while (true) {
    __child_i += difference_type(__child + 1);
    __child = 2 * __child + 1;

    if ((__child + 1) < __len && __comp(*__child_i, *(__child_i + difference_type(1)))) {

      ++__child_i;
      ++__child;
    }


    *__hole = _IterOps<_AlgPolicy>::__iter_move(__child_i);
    __hole = __child_i;


    if (__child > (__len - 2) / 2)
      return __hole;
  }
}

}}
# 114 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sift_down.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_heap.h" 2 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_heap.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_heap.h" 2 3

#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_heap.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_heap.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_heap.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_heap.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_heap.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_heap.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare&& __comp) {
  __comp_ref_type<_Compare> __comp_ref = __comp;

  using difference_type = typename iterator_traits<_RandomAccessIterator>::difference_type;
  difference_type __n = __last - __first;
  if (__n > 1) {

    for (difference_type __start = (__n - 2) / 2; __start >= 0; --__start) {
      std::__sift_down<_AlgPolicy>(__first, __comp_ref, __n, __first + __start);
    }
  }
}

template <class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  std::__make_heap<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __comp);
}

template <class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) {
  std::make_heap(std::move(__first), std::move(__last), __less<>());
}

}}
# 56 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_heap.h" 3
#pragma clang diagnostic pop
# 1857 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/merge.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/merge.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/merge.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/merge.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/merge.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/merge.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/merge.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/merge.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Compare, class _InputIterator1, class _InputIterator2, class _OutputIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator __merge(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result,
    _Compare __comp) {
  for (; __first1 != __last1; ++__result) {
    if (__first2 == __last2)
      return std::copy(__first1, __last1, __result);
    if (__comp(*__first2, *__first1)) {
      *__result = *__first2;
      ++__first2;
    } else {
      *__result = *__first1;
      ++__first1;
    }
  }
  return std::copy(__first2, __last2, __result);
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
merge(_InputIterator1 __first1,
      _InputIterator1 __last1,
      _InputIterator2 __first2,
      _InputIterator2 __last2,
      _OutputIterator __result,
      _Compare __comp) {
  return std::__merge<__comp_ref_type<_Compare> >(__first1, __last1, __first2, __last2, __result, __comp);
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
merge(_InputIterator1 __first1,
      _InputIterator1 __last1,
      _InputIterator2 __first2,
      _InputIterator2 __last2,
      _OutputIterator __result) {
  return std::merge(__first1, __last1, __first2, __last2, __result, __less<>());
}

}}
# 67 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/merge.h" 3
#pragma clang diagnostic pop
# 1860 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax_element.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax_element.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax_element.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax_element.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax_element.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax_element.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax_element.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax_element.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Comp, class _Proj>
class _MinmaxElementLessFunc {
  _Comp& __comp_;
  _Proj& __proj_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _MinmaxElementLessFunc(_Comp& __comp, _Proj& __proj)
      : __comp_(__comp), __proj_(__proj) {}

  template <class _Iter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool operator()(_Iter& __it1, _Iter& __it2) {
    return std::__invoke(__comp_, std::__invoke(__proj_, *__it1), std::__invoke(__proj_, *__it2));
  }
};

template <class _Iter, class _Sent, class _Proj, class _Comp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_Iter, _Iter>
__minmax_element_impl(_Iter __first, _Sent __last, _Comp& __comp, _Proj& __proj) {
  auto __less = _MinmaxElementLessFunc<_Comp, _Proj>(__comp, __proj);

  pair<_Iter, _Iter> __result(__first, __first);
  if (__first == __last || ++__first == __last)
    return __result;

  if (__less(__first, __result.first))
    __result.first = __first;
  else
    __result.second = __first;

  while (++__first != __last) {
    _Iter __i = __first;
    if (++__first == __last) {
      if (__less(__i, __result.first))
        __result.first = __i;
      else if (!__less(__i, __result.second))
        __result.second = __i;
      return __result;
    }

    if (__less(__first, __i)) {
      if (__less(__first, __result.first))
        __result.first = __first;
      if (!__less(__i, __result.second))
        __result.second = __i;
    } else {
      if (__less(__i, __result.first))
        __result.first = __i;
      if (!__less(__first, __result.second))
        __result.second = __first;
    }
  }

  return __result;
}

template <class _ForwardIterator, class _Compare>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_ForwardIterator, _ForwardIterator>
minmax_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp) {
  static_assert(
      __has_forward_iterator_category<_ForwardIterator>::value, "std::minmax_element requires a ForwardIterator");
  static_assert(
      __is_callable<_Compare, decltype(*__first), decltype(*__first)>::value, "The comparator has to be callable");
  auto __proj = __identity();
  return std::__minmax_element_impl(__first, __last, __comp, __proj);
}

template <class _ForwardIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_ForwardIterator, _ForwardIterator>
minmax_element(_ForwardIterator __first, _ForwardIterator __last) {
  return std::minmax_element(__first, __last, __less<>());
}

}}
# 98 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax_element.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax.h" 2 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<const _Tp&, const _Tp&>
minmax([[_Clang::__lifetimebound__]] const _Tp& __a, [[_Clang::__lifetimebound__]] const _Tp& __b, _Compare __comp) {
  return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a) : pair<const _Tp&, const _Tp&>(__a, __b);
}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<const _Tp&, const _Tp&>
minmax([[_Clang::__lifetimebound__]] const _Tp& __a, [[_Clang::__lifetimebound__]] const _Tp& __b) {
  return std::minmax(__a, __b, __less<>());
}



template <class _Tp, class _Compare>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_Tp, _Tp>
minmax(initializer_list<_Tp> __t, _Compare __comp) {
  static_assert(__is_callable<_Compare, _Tp, _Tp>::value, "The comparator has to be callable");
  __identity __proj;
  auto __ret = std::__minmax_element_impl(__t.begin(), __t.end(), __comp, __proj);
  return pair<_Tp, _Tp>(*__ret.first, *__ret.second);
}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_Tp, _Tp>
minmax(initializer_list<_Tp> __t) {
  return std::minmax(__t, __less<>());
}



}}
# 57 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/minmax.h" 3
#pragma clang diagnostic pop
# 1863 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/mismatch.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/mismatch.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/simd_utils.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/simd_utils.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/bit_cast.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/bit_cast.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/bit_cast.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/bit_cast.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/bit_cast.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/bit_cast.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/bit_cast.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/bit_cast.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _ToType, class _FromType>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ToType __bit_cast(const _FromType& __from) noexcept {
  return __builtin_bit_cast(_ToType, __from);
}
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/bit_cast.h" 3
}}
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/bit_cast.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/simd_utils.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countl.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countl.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countl.h" 2 3

#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countl.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countl.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countl.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countl.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countl.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countl.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int __libcpp_clz(unsigned __x) noexcept {
  return __builtin_clz(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int __libcpp_clz(unsigned long __x) noexcept {
  return __builtin_clzl(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int __libcpp_clz(unsigned long long __x) noexcept {
  return __builtin_clzll(__x);
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int __libcpp_clz(__uint128_t __x) noexcept {

  return __builtin_clzg(__x);
# 59 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countl.h" 3
}


template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr int __countl_zero(_Tp __t) noexcept {
  static_assert(__libcpp_is_unsigned_integer<_Tp>::value, "__countl_zero requires an unsigned integer type");

  return __builtin_clzg(__t, numeric_limits<_Tp>::digits);
# 93 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countl.h" 3
}
# 109 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countl.h" 3
}}
# 109 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/countl.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/simd_utils.h" 2 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/simd_utils.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/simd_utils.h" 2 3
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/simd_utils.h" 3
#pragma clang diagnostic push
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/simd_utils.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/simd_utils.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/simd_utils.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/simd_utils.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/simd_utils.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/simd_utils.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
inline constexpr bool __can_map_to_integer_v =
    sizeof(_Tp) == alignof(_Tp) && (sizeof(_Tp) == 1 || sizeof(_Tp) == 2 || sizeof(_Tp) == 4 || sizeof(_Tp) == 8);

template <size_t _TypeSize>
struct __get_as_integer_type_impl;

template <>
struct __get_as_integer_type_impl<1> {
  using type = uint8_t;
};

template <>
struct __get_as_integer_type_impl<2> {
  using type = uint16_t;
};
template <>
struct __get_as_integer_type_impl<4> {
  using type = uint32_t;
};
template <>
struct __get_as_integer_type_impl<8> {
  using type = uint64_t;
};

template <class _Tp>
using __get_as_integer_type_t = typename __get_as_integer_type_impl<sizeof(_Tp)>::type;
# 82 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/simd_utils.h" 3
template <class _Tp>
inline constexpr size_t __native_vector_size = 16 / sizeof(_Tp);
# 92 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/simd_utils.h" 3
template <class _ArithmeticT, size_t _Np>
using __simd_vector __attribute__((__ext_vector_type__(_Np))) = _ArithmeticT;

template <class _VecT>
inline constexpr size_t __simd_vector_size_v = []<bool _False = false>() -> size_t {
  static_assert(_False, "Not a vector!");
}();

template <class _Tp, size_t _Np>
inline constexpr size_t __simd_vector_size_v<__simd_vector<_Tp, _Np>> = _Np;

template <class _Tp, size_t _Np>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp __simd_vector_underlying_type_impl(__simd_vector<_Tp, _Np>) {
  return _Tp{};
}

template <class _VecT>
using __simd_vector_underlying_type_t = decltype(std::__simd_vector_underlying_type_impl(_VecT{}));


template <class _VecT, class _Iter>
[[__nodiscard__]] __attribute__((__always_inline__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _VecT __load_vector(_Iter __iter) noexcept {
  return [=]<size_t... _Indices>(index_sequence<_Indices...>) __attribute__((__always_inline__)) noexcept {
    return _VecT{__iter[_Indices]...};
  }(make_index_sequence<__simd_vector_size_v<_VecT>>{});
}

template <class _Tp, size_t _Np>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __all_of(__simd_vector<_Tp, _Np> __vec) noexcept {
  return __builtin_reduce_and(__builtin_convertvector(__vec, __simd_vector<bool, _Np>));
}

template <class _Tp, size_t _Np>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t __find_first_set(__simd_vector<_Tp, _Np> __vec) noexcept {
  using __mask_vec = __simd_vector<bool, _Np>;


  auto __impl = [&]<class _MaskT>(_MaskT) __attribute__((__no_sanitize__("memory"))) noexcept {




    return std::min<size_t>(
        _Np, std::__countr_zero(__builtin_bit_cast(_MaskT, __builtin_convertvector(__vec, __mask_vec))));

  };

  if constexpr (sizeof(__mask_vec) == sizeof(uint8_t)) {
    return __impl(uint8_t{});
  } else if constexpr (sizeof(__mask_vec) == sizeof(uint16_t)) {
    return __impl(uint16_t{});
  } else if constexpr (sizeof(__mask_vec) == sizeof(uint32_t)) {
    return __impl(uint32_t{});
  } else if constexpr (sizeof(__mask_vec) == sizeof(uint64_t)) {
    return __impl(uint64_t{});
  } else {
    static_assert(sizeof(__mask_vec) == 0, "unexpected required size for mask integer type");
    return 0;
  }
}

template <class _Tp, size_t _Np>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t __find_first_not_set(__simd_vector<_Tp, _Np> __vec) noexcept {
  return std::__find_first_set(~__vec);
}

}}
# 158 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/simd_utils.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/mismatch.h" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/aliasing_iterator.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/aliasing_iterator.h" 3







#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/aliasing_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/aliasing_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/aliasing_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/aliasing_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/aliasing_iterator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/aliasing_iterator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _BaseIter, class _Alias>
struct __aliasing_iterator_wrapper {
  class __iterator {
    _BaseIter __base_ = nullptr;

    using __iter_traits = iterator_traits<_BaseIter>;
    using __base_value_type = typename __iter_traits::value_type;

    static_assert(__has_random_access_iterator_category<_BaseIter>::value,
                  "The base iterator has to be a random access iterator!");

  public:
    using iterator_category = random_access_iterator_tag;
    using value_type = _Alias;
    using difference_type = ptrdiff_t;
    using reference = value_type&;
    using pointer = value_type*;

    static_assert(is_trivial<value_type>::value);
    static_assert(sizeof(__base_value_type) == sizeof(value_type));

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __iterator() = default;
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __iterator(_BaseIter __base) noexcept : __base_(__base) {}

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __iterator& operator++() noexcept {
      ++__base_;
      return *this;
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __iterator operator++(int) noexcept {
      __iterator __tmp(*this);
      ++__base_;
      return __tmp;
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __iterator& operator--() noexcept {
      --__base_;
      return *this;
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __iterator operator--(int) noexcept {
      __iterator __tmp(*this);
      --__base_;
      return __tmp;
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend __iterator operator+(__iterator __iter, difference_type __n) noexcept {
      return __iterator(__iter.__base_ + __n);
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend __iterator operator+(difference_type __n, __iterator __iter) noexcept {
      return __iterator(__n + __iter.__base_);
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __iterator& operator+=(difference_type __n) noexcept {
      __base_ += __n;
      return *this;
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend __iterator operator-(__iterator __iter, difference_type __n) noexcept {
      return __iterator(__iter.__base_ - __n);
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend difference_type operator-(__iterator __lhs, __iterator __rhs) noexcept {
      return __lhs.__base_ - __rhs.__base_;
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __iterator& operator-=(difference_type __n) noexcept {
      __base_ -= __n;
      return *this;
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _BaseIter __base() const noexcept { return __base_; }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Alias operator*() const noexcept {
      _Alias __val;
      __builtin_memcpy(&__val, std::__to_address(__base_), sizeof(value_type));
      return __val;
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) value_type operator[](difference_type __n) const noexcept { return *(*this + __n); }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool operator==(const __iterator& __lhs, const __iterator& __rhs) noexcept {
      return __lhs.__base_ == __rhs.__base_;
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool operator!=(const __iterator& __lhs, const __iterator& __rhs) noexcept {
      return __lhs.__base_ != __rhs.__base_;
    }
  };
};


template <class _BaseT, class _Alias>
using __aliasing_iterator = typename __aliasing_iterator_wrapper<_BaseT, _Alias>::__iterator;

}}
# 125 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/aliasing_iterator.h" 3
#pragma clang diagnostic pop
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/mismatch.h" 2 3
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/mismatch.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/mismatch.h" 2 3

#pragma clang diagnostic push
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/mismatch.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/mismatch.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/mismatch.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/mismatch.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/mismatch.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/mismatch.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Iter1, class _Sent1, class _Iter2, class _Pred, class _Proj1, class _Proj2>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_Iter1, _Iter2>
__mismatch_loop(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Pred& __pred, _Proj1& __proj1, _Proj2& __proj2) {
  while (__first1 != __last1) {
    if (!std::__invoke(__pred, std::__invoke(__proj1, *__first1), std::__invoke(__proj2, *__first2)))
      break;
    ++__first1;
    ++__first2;
  }
  return std::make_pair(std::move(__first1), std::move(__first2));
}

template <class _Iter1, class _Sent1, class _Iter2, class _Pred, class _Proj1, class _Proj2>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_Iter1, _Iter2>
__mismatch(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Pred& __pred, _Proj1& __proj1, _Proj2& __proj2) {
  return std::__mismatch_loop(__first1, __last1, __first2, __pred, __proj1, __proj2);
}



template <class _Iter>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_Iter, _Iter>
__mismatch_vectorized(_Iter __first1, _Iter __last1, _Iter __first2) {
  using __value_type = __iter_value_type<_Iter>;
  constexpr size_t __unroll_count = 4;
  constexpr size_t __vec_size = __native_vector_size<__value_type>;
  using __vec = __simd_vector<__value_type, __vec_size>;

  if (!__libcpp_is_constant_evaluated()) {
    auto __orig_first1 = __first1;
    auto __last2 = __first2 + (__last1 - __first1);
    while (static_cast<size_t>(__last1 - __first1) >= __unroll_count * __vec_size) [[__unlikely__]] {
      __vec __lhs[__unroll_count];
      __vec __rhs[__unroll_count];

      for (size_t __i = 0; __i != __unroll_count; ++__i) {
        __lhs[__i] = std::__load_vector<__vec>(__first1 + __i * __vec_size);
        __rhs[__i] = std::__load_vector<__vec>(__first2 + __i * __vec_size);
      }

      for (size_t __i = 0; __i != __unroll_count; ++__i) {
        if (auto __cmp_res = __lhs[__i] == __rhs[__i]; !std::__all_of(__cmp_res)) {
          auto __offset = __i * __vec_size + std::__find_first_not_set(__cmp_res);
          return {__first1 + __offset, __first2 + __offset};
        }
      }

      __first1 += __unroll_count * __vec_size;
      __first2 += __unroll_count * __vec_size;
    }


    while (static_cast<size_t>(__last1 - __first1) >= __vec_size) {
      if (auto __cmp_res = std::__load_vector<__vec>(__first1) == std::__load_vector<__vec>(__first2);
          !std::__all_of(__cmp_res)) {
        auto __offset = std::__find_first_not_set(__cmp_res);
        return {__first1 + __offset, __first2 + __offset};
      }
      __first1 += __vec_size;
      __first2 += __vec_size;
    }

    if (__last1 - __first1 == 0)
      return {__first1, __first2};



    if (static_cast<size_t>(__first1 - __orig_first1) >= __vec_size) {
      __first1 = __last1 - __vec_size;
      __first2 = __last2 - __vec_size;
      auto __offset =
          std::__find_first_not_set(std::__load_vector<__vec>(__first1) == std::__load_vector<__vec>(__first2));
      return {__first1 + __offset, __first2 + __offset};
    }
  }

  __equal_to __pred;
  __identity __proj;
  return std::__mismatch_loop(__first1, __last1, __first2, __pred, __proj, __proj);
}

template <class _Tp,
          class _Pred,
          class _Proj1,
          class _Proj2,
          __enable_if_t<is_integral<_Tp>::value && __desugars_to_v<__equal_tag, _Pred, _Tp, _Tp> &&
                            __is_identity<_Proj1>::value && __is_identity<_Proj2>::value,
                        int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_Tp*, _Tp*>
__mismatch(_Tp* __first1, _Tp* __last1, _Tp* __first2, _Pred&, _Proj1&, _Proj2&) {
  return std::__mismatch_vectorized(__first1, __last1, __first2);
}

template <class _Tp,
          class _Pred,
          class _Proj1,
          class _Proj2,
          __enable_if_t<!is_integral<_Tp>::value && __desugars_to_v<__equal_tag, _Pred, _Tp, _Tp> &&
                            __is_identity<_Proj1>::value && __is_identity<_Proj2>::value &&
                            __can_map_to_integer_v<_Tp> && __libcpp_is_trivially_equality_comparable<_Tp, _Tp>::value,
                        int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_Tp*, _Tp*>
__mismatch(_Tp* __first1, _Tp* __last1, _Tp* __first2, _Pred& __pred, _Proj1& __proj1, _Proj2& __proj2) {
  if (__libcpp_is_constant_evaluated()) {
    return std::__mismatch_loop(__first1, __last1, __first2, __pred, __proj1, __proj2);
  } else {
    using _Iter = __aliasing_iterator<_Tp*, __get_as_integer_type_t<_Tp>>;
    auto __ret = std::__mismatch_vectorized(_Iter(__first1), _Iter(__last1), _Iter(__first2));
    return {__ret.first.__base(), __ret.second.__base()};
  }
}


template <class _InputIterator1, class _InputIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_InputIterator1, _InputIterator2>
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __pred) {
  __identity __proj;
  auto __res = std::__mismatch(
      std::__unwrap_iter(__first1), std::__unwrap_iter(__last1), std::__unwrap_iter(__first2), __pred, __proj, __proj);
  return std::make_pair(std::__rewrap_iter(__first1, __res.first), std::__rewrap_iter(__first2, __res.second));
}

template <class _InputIterator1, class _InputIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_InputIterator1, _InputIterator2>
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2) {
  return std::mismatch(__first1, __last1, __first2, __equal_to());
}


template <class _Iter1, class _Sent1, class _Iter2, class _Sent2, class _Pred, class _Proj1, class _Proj2>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_Iter1, _Iter2> __mismatch(
    _Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred& __pred, _Proj1& __proj1, _Proj2& __proj2) {
  while (__first1 != __last1 && __first2 != __last2) {
    if (!std::__invoke(__pred, std::__invoke(__proj1, *__first1), std::__invoke(__proj2, *__first2)))
      break;
    ++__first1;
    ++__first2;
  }
  return {std::move(__first1), std::move(__first2)};
}

template <class _Tp, class _Pred, class _Proj1, class _Proj2>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_Tp*, _Tp*>
__mismatch(_Tp* __first1, _Tp* __last1, _Tp* __first2, _Tp* __last2, _Pred& __pred, _Proj1& __proj1, _Proj2& __proj2) {
  auto __len = std::min(__last1 - __first1, __last2 - __first2);
  return std::__mismatch(__first1, __first1 + __len, __first2, __pred, __proj1, __proj2);
}

template <class _InputIterator1, class _InputIterator2, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_InputIterator1, _InputIterator2>
mismatch(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _BinaryPredicate __pred) {
  __identity __proj;
  auto __res = std::__mismatch(
      std::__unwrap_iter(__first1),
      std::__unwrap_iter(__last1),
      std::__unwrap_iter(__first2),
      std::__unwrap_iter(__last2),
      __pred,
      __proj,
      __proj);
  return {std::__rewrap_iter(__first1, __res.first), std::__rewrap_iter(__first2, __res.second)};
}

template <class _InputIterator1, class _InputIterator2>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_InputIterator1, _InputIterator2>
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2) {
  return std::mismatch(__first1, __last1, __first2, __last2, __equal_to());
}


}}
# 213 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/mismatch.h" 3
#pragma clang diagnostic pop
# 1865 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/next_permutation.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/next_permutation.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse.h" 2 3

#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _BidirectionalIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__reverse_impl(_BidirectionalIterator __first, _BidirectionalIterator __last, bidirectional_iterator_tag) {
  while (__first != __last) {
    if (__first == --__last)
      break;
    _IterOps<_AlgPolicy>::iter_swap(__first, __last);
    ++__first;
  }
}

template <class _AlgPolicy, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__reverse_impl(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) {
  if (__first != __last)
    for (; __first < --__last; ++__first)
      _IterOps<_AlgPolicy>::iter_swap(__first, __last);
}

template <class _AlgPolicy, class _BidirectionalIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __reverse(_BidirectionalIterator __first, _Sentinel __last) {
  using _IterCategory = typename _IterOps<_AlgPolicy>::template __iterator_category<_BidirectionalIterator>;
  std::__reverse_impl<_AlgPolicy>(std::move(__first), std::move(__last), _IterCategory());
}

template <class _BidirectionalIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
reverse(_BidirectionalIterator __first, _BidirectionalIterator __last) {
  std::__reverse<_ClassicAlgPolicy>(std::move(__first), std::move(__last));
}

}}
# 58 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/next_permutation.h" 2 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/next_permutation.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/next_permutation.h" 2 3

#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/next_permutation.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/next_permutation.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/next_permutation.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/next_permutation.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/next_permutation.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/next_permutation.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _Compare, class _BidirectionalIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_BidirectionalIterator, bool>
__next_permutation(_BidirectionalIterator __first, _Sentinel __last, _Compare&& __comp) {
  using _Result = pair<_BidirectionalIterator, bool>;

  _BidirectionalIterator __last_iter = _IterOps<_AlgPolicy>::next(__first, __last);
  _BidirectionalIterator __i = __last_iter;
  if (__first == __last || __first == --__i)
    return _Result(std::move(__last_iter), false);

  while (true) {
    _BidirectionalIterator __ip1 = __i;
    if (__comp(*--__i, *__ip1)) {
      _BidirectionalIterator __j = __last_iter;
      while (!__comp(*__i, *--__j))
        ;
      _IterOps<_AlgPolicy>::iter_swap(__i, __j);
      std::__reverse<_AlgPolicy>(__ip1, __last_iter);
      return _Result(std::move(__last_iter), true);
    }
    if (__i == __first) {
      std::__reverse<_AlgPolicy>(__first, __last_iter);
      return _Result(std::move(__last_iter), false);
    }
  }
}

template <class _BidirectionalIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp) {
  return std::__next_permutation<_ClassicAlgPolicy>(
             std::move(__first), std::move(__last), static_cast<__comp_ref_type<_Compare> >(__comp))
      .second;
}

template <class _BidirectionalIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last) {
  return std::next_permutation(__first, __last, __less<>());
}

}}
# 71 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/next_permutation.h" 3
#pragma clang diagnostic pop
# 1868 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/none_of.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/none_of.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/none_of.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/none_of.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/none_of.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/none_of.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/none_of.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/none_of.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator, class _Predicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) {
  for (; __first != __last; ++__first)
    if (__pred(*__first))
      return false;
  return true;
}

}}
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/none_of.h" 3
#pragma clang diagnostic pop
# 1869 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/nth_element.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/nth_element.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort_heap.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort_heap.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/pop_heap.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/pop_heap.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/push_heap.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/push_heap.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/push_heap.h" 2 3

#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/push_heap.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/push_heap.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/push_heap.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/push_heap.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/push_heap.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/push_heap.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__sift_up(_RandomAccessIterator __first,
          _RandomAccessIterator __last,
          _Compare&& __comp,
          typename iterator_traits<_RandomAccessIterator>::difference_type __len) {
  using value_type = typename iterator_traits<_RandomAccessIterator>::value_type;

  if (__len > 1) {
    __len = (__len - 2) / 2;
    _RandomAccessIterator __ptr = __first + __len;

    if (__comp(*__ptr, *--__last)) {
      value_type __t(_IterOps<_AlgPolicy>::__iter_move(__last));
      do {
        *__last = _IterOps<_AlgPolicy>::__iter_move(__ptr);
        __last = __ptr;
        if (__len == 0)
          break;
        __len = (__len - 1) / 2;
        __ptr = __first + __len;
      } while (__comp(*__ptr, __t));

      *__last = std::move(__t);
    }
  }
}

template <class _AlgPolicy, class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare& __comp) {
  typename iterator_traits<_RandomAccessIterator>::difference_type __len = __last - __first;
  std::__sift_up<_AlgPolicy, __comp_ref_type<_Compare> >(std::move(__first), std::move(__last), __comp, __len);
}

template <class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  static_assert(std::is_copy_constructible<_RandomAccessIterator>::value, "Iterators must be copy constructible.");
  static_assert(std::is_copy_assignable<_RandomAccessIterator>::value, "Iterators must be copy assignable.");

  std::__push_heap<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __comp);
}

template <class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) {
  std::push_heap(std::move(__first), std::move(__last), __less<>());
}

}}
# 80 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/push_heap.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/pop_heap.h" 2 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/pop_heap.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/pop_heap.h" 2 3

#pragma clang diagnostic push
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/pop_heap.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/pop_heap.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/pop_heap.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/pop_heap.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/pop_heap.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/pop_heap.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__pop_heap(_RandomAccessIterator __first,
           _RandomAccessIterator __last,
           _Compare& __comp,
           typename iterator_traits<_RandomAccessIterator>::difference_type __len) {

  ((void)0);

  __comp_ref_type<_Compare> __comp_ref = __comp;

  using value_type = typename iterator_traits<_RandomAccessIterator>::value_type;
  if (__len > 1) {
    value_type __top = _IterOps<_AlgPolicy>::__iter_move(__first);
    _RandomAccessIterator __hole = std::__floyd_sift_down<_AlgPolicy>(__first, __comp_ref, __len);
    --__last;

    if (__hole == __last) {
      *__hole = std::move(__top);
    } else {
      *__hole = _IterOps<_AlgPolicy>::__iter_move(__last);
      ++__hole;
      *__last = std::move(__top);
      std::__sift_up<_AlgPolicy>(__first, __hole, __comp_ref, __hole - __first);
    }
  }
}

template <class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  static_assert(std::is_copy_constructible<_RandomAccessIterator>::value, "Iterators must be copy constructible.");
  static_assert(std::is_copy_assignable<_RandomAccessIterator>::value, "Iterators must be copy assignable.");

  typename iterator_traits<_RandomAccessIterator>::difference_type __len = __last - __first;
  std::__pop_heap<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __comp, __len);
}

template <class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) {
  std::pop_heap(std::move(__first), std::move(__last), __less<>());
}

}}
# 77 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/pop_heap.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort_heap.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/strict_weak_ordering_check.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/strict_weak_ordering_check.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/strict_weak_ordering_check.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/strict_weak_ordering_check.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/strict_weak_ordering_check.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/strict_weak_ordering_check.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/strict_weak_ordering_check.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/strict_weak_ordering_check.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _RandomAccessIterator, class _Comp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__check_strict_weak_ordering_sorted(_RandomAccessIterator __first, _RandomAccessIterator __last, _Comp& __comp) {
# 69 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/strict_weak_ordering_check.h" 3
  (void)__first;
  (void)__last;
  (void)__comp;

}

}}
# 75 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/strict_weak_ordering_check.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort_heap.h" 2 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort_heap.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort_heap.h" 2 3

#pragma clang diagnostic push
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort_heap.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort_heap.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort_heap.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort_heap.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort_heap.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort_heap.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare&& __comp) {
  _RandomAccessIterator __saved_last = __last;
  __comp_ref_type<_Compare> __comp_ref = __comp;

  using difference_type = typename iterator_traits<_RandomAccessIterator>::difference_type;
  for (difference_type __n = __last - __first; __n > 1; --__last, (void)--__n)
    std::__pop_heap<_AlgPolicy>(__first, __last, __comp_ref, __n);
  std::__check_strict_weak_ordering_sorted(__first, __saved_last, __comp_ref);
}

template <class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  static_assert(std::is_copy_constructible<_RandomAccessIterator>::value, "Iterators must be copy constructible.");
  static_assert(std::is_copy_assignable<_RandomAccessIterator>::value, "Iterators must be copy assignable.");

  std::__sort_heap<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __comp);
}

template <class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) {
  std::sort_heap(std::move(__first), std::move(__last), __less<>());
}

}}
# 59 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort_heap.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/randomize_range.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/randomize_range.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/randomize_range.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/randomize_range.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/randomize_range.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/randomize_range.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/randomize_range.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/randomize_range.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _Iterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void __debug_randomize_range(_Iterator __first, _Sentinel __last) {
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/randomize_range.h" 3
  (void)__first;
  (void)__last;

}

}}
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__debug_utils/randomize_range.h" 3
#pragma clang diagnostic pop
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort.h" 2 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort.h" 2 3

#pragma clang diagnostic push
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _RandomAccessIterator __partial_sort_impl(
    _RandomAccessIterator __first, _RandomAccessIterator __middle, _Sentinel __last, _Compare&& __comp) {
  if (__first == __middle) {
    return _IterOps<_AlgPolicy>::next(__middle, __last);
  }

  std::__make_heap<_AlgPolicy>(__first, __middle, __comp);

  typename iterator_traits<_RandomAccessIterator>::difference_type __len = __middle - __first;
  _RandomAccessIterator __i = __middle;
  for (; __i != __last; ++__i) {
    if (__comp(*__i, *__first)) {
      _IterOps<_AlgPolicy>::iter_swap(__i, __first);
      std::__sift_down<_AlgPolicy>(__first, __comp, __len, __first);
    }
  }
  std::__sort_heap<_AlgPolicy>(std::move(__first), std::move(__middle), __comp);

  return __i;
}

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _RandomAccessIterator
__partial_sort(_RandomAccessIterator __first, _RandomAccessIterator __middle, _Sentinel __last, _Compare& __comp) {
  if (__first == __middle)
    return _IterOps<_AlgPolicy>::next(__middle, __last);

  std::__debug_randomize_range<_AlgPolicy>(__first, __last);

  auto __last_iter =
      std::__partial_sort_impl<_AlgPolicy>(__first, __middle, __last, static_cast<__comp_ref_type<_Compare> >(__comp));

  std::__debug_randomize_range<_AlgPolicy>(__middle, __last);

  return __last_iter;
}

template <class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void partial_sort(
    _RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp) {
  static_assert(std::is_copy_constructible<_RandomAccessIterator>::value, "Iterators must be copy constructible.");
  static_assert(std::is_copy_assignable<_RandomAccessIterator>::value, "Iterators must be copy assignable.");

  (void)std::__partial_sort<_ClassicAlgPolicy>(std::move(__first), std::move(__middle), std::move(__last), __comp);
}

template <class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
partial_sort(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last) {
  std::partial_sort(__first, __middle, __last, __less<>());
}

}}
# 87 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/blsr.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/blsr.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/blsr.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/blsr.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/blsr.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/blsr.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/blsr.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/blsr.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr unsigned __libcpp_blsr(unsigned __x) noexcept {
  return __x ^ (__x & -__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr unsigned long __libcpp_blsr(unsigned long __x) noexcept {
  return __x ^ (__x & -__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr unsigned long long __libcpp_blsr(unsigned long long __x) noexcept {
  return __x ^ (__x & -__x);
}

}}
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit/blsr.h" 3
#pragma clang diagnostic pop
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 2 3






# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/ranges_operations.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/ranges_operations.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/ranges_operations.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/ranges_operations.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/ranges_operations.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/ranges_operations.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/ranges_operations.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/ranges_operations.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 107 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/ranges_operations.h" 3
}}
# 107 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/ranges_operations.h" 3
#pragma clang diagnostic pop
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 2 3
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 2 3

#pragma clang diagnostic push
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _AlgPolicy, class _Compare, class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr unsigned
__sort3(_ForwardIterator __x, _ForwardIterator __y, _ForwardIterator __z, _Compare __c) {
  using _Ops = _IterOps<_AlgPolicy>;

  unsigned __r = 0;
  if (!__c(*__y, *__x))
  {
    if (!__c(*__z, *__y))
      return __r;

    _Ops::iter_swap(__y, __z);
    __r = 1;
    if (__c(*__y, *__x))
    {
      _Ops::iter_swap(__x, __y);
      __r = 2;
    }
    return __r;
  }
  if (__c(*__z, *__y))
  {
    _Ops::iter_swap(__x, __z);
    __r = 1;
    return __r;
  }
  _Ops::iter_swap(__x, __y);
  __r = 1;
  if (__c(*__z, *__y))
  {
    _Ops::iter_swap(__y, __z);
    __r = 2;
  }
  return __r;
}



template <class _AlgPolicy, class _Compare, class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__sort4(_ForwardIterator __x1, _ForwardIterator __x2, _ForwardIterator __x3, _ForwardIterator __x4, _Compare __c) {
  using _Ops = _IterOps<_AlgPolicy>;
  std::__sort3<_AlgPolicy, _Compare>(__x1, __x2, __x3, __c);
  if (__c(*__x4, *__x3)) {
    _Ops::iter_swap(__x3, __x4);
    if (__c(*__x3, *__x2)) {
      _Ops::iter_swap(__x2, __x3);
      if (__c(*__x2, *__x1)) {
        _Ops::iter_swap(__x1, __x2);
      }
    }
  }
}



template <class _AlgPolicy, class _Comp, class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__sort5(_ForwardIterator __x1,
        _ForwardIterator __x2,
        _ForwardIterator __x3,
        _ForwardIterator __x4,
        _ForwardIterator __x5,
        _Comp __comp) {
  using _Ops = _IterOps<_AlgPolicy>;

  std::__sort4<_AlgPolicy, _Comp>(__x1, __x2, __x3, __x4, __comp);
  if (__comp(*__x5, *__x4)) {
    _Ops::iter_swap(__x4, __x5);
    if (__comp(*__x4, *__x3)) {
      _Ops::iter_swap(__x3, __x4);
      if (__comp(*__x3, *__x2)) {
        _Ops::iter_swap(__x2, __x3);
        if (__comp(*__x2, *__x1)) {
          _Ops::iter_swap(__x1, __x2);
        }
      }
    }
  }
}


template <class _Tp>
struct __is_simple_comparator : false_type {};
template <>
struct __is_simple_comparator<__less<>&> : true_type {};
template <class _Tp>
struct __is_simple_comparator<less<_Tp>&> : true_type {};
template <class _Tp>
struct __is_simple_comparator<greater<_Tp>&> : true_type {};







template <class _Compare, class _Iter, class _Tp = typename iterator_traits<_Iter>::value_type>
using __use_branchless_sort =
    integral_constant<bool,
                      __libcpp_is_contiguous_iterator<_Iter>::value && sizeof(_Tp) <= sizeof(void*) &&
                          is_arithmetic<_Tp>::value && __is_simple_comparator<_Compare>::value>;

namespace __detail {


enum { __block_size = sizeof(uint64_t) * 8 };

}


template <class _Compare, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __cond_swap(_RandomAccessIterator __x, _RandomAccessIterator __y, _Compare __c) {

  using value_type = typename iterator_traits<_RandomAccessIterator>::value_type;
  bool __r = __c(*__x, *__y);
  value_type __tmp = __r ? *__x : *__y;
  *__y = __r ? *__y : *__x;
  *__x = __tmp;
}



template <class _Compare, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__partially_sorted_swap(_RandomAccessIterator __x, _RandomAccessIterator __y, _RandomAccessIterator __z, _Compare __c) {

  using value_type = typename iterator_traits<_RandomAccessIterator>::value_type;
  bool __r = __c(*__z, *__x);
  value_type __tmp = __r ? *__z : *__x;
  *__z = __r ? *__x : *__z;
  __r = __c(__tmp, *__y);
  *__x = __r ? *__x : *__y;
  *__y = __r ? *__y : __tmp;
}

template <class,
          class _Compare,
          class _RandomAccessIterator,
          __enable_if_t<__use_branchless_sort<_Compare, _RandomAccessIterator>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __sort3_maybe_branchless(
    _RandomAccessIterator __x1, _RandomAccessIterator __x2, _RandomAccessIterator __x3, _Compare __c) {
  std::__cond_swap<_Compare>(__x2, __x3, __c);
  std::__partially_sorted_swap<_Compare>(__x1, __x2, __x3, __c);
}

template <class _AlgPolicy,
          class _Compare,
          class _RandomAccessIterator,
          __enable_if_t<!__use_branchless_sort<_Compare, _RandomAccessIterator>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __sort3_maybe_branchless(
    _RandomAccessIterator __x1, _RandomAccessIterator __x2, _RandomAccessIterator __x3, _Compare __c) {
  std::__sort3<_AlgPolicy, _Compare>(__x1, __x2, __x3, __c);
}

template <class,
          class _Compare,
          class _RandomAccessIterator,
          __enable_if_t<__use_branchless_sort<_Compare, _RandomAccessIterator>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __sort4_maybe_branchless(
    _RandomAccessIterator __x1,
    _RandomAccessIterator __x2,
    _RandomAccessIterator __x3,
    _RandomAccessIterator __x4,
    _Compare __c) {
  std::__cond_swap<_Compare>(__x1, __x3, __c);
  std::__cond_swap<_Compare>(__x2, __x4, __c);
  std::__cond_swap<_Compare>(__x1, __x2, __c);
  std::__cond_swap<_Compare>(__x3, __x4, __c);
  std::__cond_swap<_Compare>(__x2, __x3, __c);
}

template <class _AlgPolicy,
          class _Compare,
          class _RandomAccessIterator,
          __enable_if_t<!__use_branchless_sort<_Compare, _RandomAccessIterator>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __sort4_maybe_branchless(
    _RandomAccessIterator __x1,
    _RandomAccessIterator __x2,
    _RandomAccessIterator __x3,
    _RandomAccessIterator __x4,
    _Compare __c) {
  std::__sort4<_AlgPolicy, _Compare>(__x1, __x2, __x3, __x4, __c);
}

template <class _AlgPolicy,
          class _Compare,
          class _RandomAccessIterator,
          __enable_if_t<__use_branchless_sort<_Compare, _RandomAccessIterator>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __sort5_maybe_branchless(
    _RandomAccessIterator __x1,
    _RandomAccessIterator __x2,
    _RandomAccessIterator __x3,
    _RandomAccessIterator __x4,
    _RandomAccessIterator __x5,
    _Compare __c) {
  std::__cond_swap<_Compare>(__x1, __x2, __c);
  std::__cond_swap<_Compare>(__x4, __x5, __c);
  std::__partially_sorted_swap<_Compare>(__x3, __x4, __x5, __c);
  std::__cond_swap<_Compare>(__x2, __x5, __c);
  std::__partially_sorted_swap<_Compare>(__x1, __x3, __x4, __c);
  std::__partially_sorted_swap<_Compare>(__x2, __x3, __x4, __c);
}

template <class _AlgPolicy,
          class _Compare,
          class _RandomAccessIterator,
          __enable_if_t<!__use_branchless_sort<_Compare, _RandomAccessIterator>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __sort5_maybe_branchless(
    _RandomAccessIterator __x1,
    _RandomAccessIterator __x2,
    _RandomAccessIterator __x3,
    _RandomAccessIterator __x4,
    _RandomAccessIterator __x5,
    _Compare __c) {
  std::__sort5<_AlgPolicy, _Compare, _RandomAccessIterator>(
      std::move(__x1), std::move(__x2), std::move(__x3), std::move(__x4), std::move(__x5), __c);
}


template <class _AlgPolicy, class _Compare, class _BidirectionalIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void
__selection_sort(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp) {
  _BidirectionalIterator __lm1 = __last;
  for (--__lm1; __first != __lm1; ++__first) {
    _BidirectionalIterator __i = std::__min_element<_Compare>(__first, __last, __comp);
    if (__i != __first)
      _IterOps<_AlgPolicy>::iter_swap(__first, __i);
  }
}



template <class _AlgPolicy, class _Compare, class _BidirectionalIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__insertion_sort(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;

  typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
  if (__first == __last)
    return;
  _BidirectionalIterator __i = __first;
  for (++__i; __i != __last; ++__i) {
    _BidirectionalIterator __j = __i;
    --__j;
    if (__comp(*__i, *__j)) {
      value_type __t(_Ops::__iter_move(__i));
      _BidirectionalIterator __k = __j;
      __j = __i;
      do {
        *__j = _Ops::__iter_move(__k);
        __j = __k;
      } while (__j != __first && __comp(__t, *--__k));
      *__j = std::move(__t);
    }
  }
}






template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__insertion_sort_unguarded(_RandomAccessIterator const __first, _RandomAccessIterator __last, _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;
  if (__first == __last)
    return;
  const _RandomAccessIterator __leftmost = __first - difference_type(1);
  (void)__leftmost;
  for (_RandomAccessIterator __i = __first + difference_type(1); __i != __last; ++__i) {
    _RandomAccessIterator __j = __i - difference_type(1);
    if (__comp(*__i, *__j)) {
      value_type __t(_Ops::__iter_move(__i));
      _RandomAccessIterator __k = __j;
      __j = __i;
      do {
        *__j = _Ops::__iter_move(__k);
        __j = __k;
        ((void)0);


      } while (__comp(__t, *--__k));
      *__j = std::move(__t);
    }
  }
}

template <class _AlgPolicy, class _Comp, class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
__insertion_sort_incomplete(_RandomAccessIterator __first, _RandomAccessIterator __last, _Comp __comp) {
  using _Ops = _IterOps<_AlgPolicy>;

  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  switch (__last - __first) {
  case 0:
  case 1:
    return true;
  case 2:
    if (__comp(*--__last, *__first))
      _Ops::iter_swap(__first, __last);
    return true;
  case 3:
    std::__sort3_maybe_branchless<_AlgPolicy, _Comp>(__first, __first + difference_type(1), --__last, __comp);
    return true;
  case 4:
    std::__sort4_maybe_branchless<_AlgPolicy, _Comp>(
        __first, __first + difference_type(1), __first + difference_type(2), --__last, __comp);
    return true;
  case 5:
    std::__sort5_maybe_branchless<_AlgPolicy, _Comp>(
        __first,
        __first + difference_type(1),
        __first + difference_type(2),
        __first + difference_type(3),
        --__last,
        __comp);
    return true;
  }
  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;
  _RandomAccessIterator __j = __first + difference_type(2);
  std::__sort3_maybe_branchless<_AlgPolicy, _Comp>(__first, __first + difference_type(1), __j, __comp);
  const unsigned __limit = 8;
  unsigned __count = 0;
  for (_RandomAccessIterator __i = __j + difference_type(1); __i != __last; ++__i) {
    if (__comp(*__i, *__j)) {
      value_type __t(_Ops::__iter_move(__i));
      _RandomAccessIterator __k = __j;
      __j = __i;
      do {
        *__j = _Ops::__iter_move(__k);
        __j = __k;
      } while (__j != __first && __comp(__t, *--__k));
      *__j = std::move(__t);
      if (++__count == __limit)
        return ++__i == __last;
    }
    __j = __i;
  }
  return true;
}

template <class _AlgPolicy, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __swap_bitmap_pos(
    _RandomAccessIterator __first, _RandomAccessIterator __last, uint64_t& __left_bitset, uint64_t& __right_bitset) {
  using _Ops = _IterOps<_AlgPolicy>;
  typedef typename std::iterator_traits<_RandomAccessIterator>::difference_type difference_type;


  while (__left_bitset != 0 && __right_bitset != 0) {
    difference_type __tz_left = __libcpp_ctz(__left_bitset);
    __left_bitset = __libcpp_blsr(__left_bitset);
    difference_type __tz_right = __libcpp_ctz(__right_bitset);
    __right_bitset = __libcpp_blsr(__right_bitset);
    _Ops::iter_swap(__first + __tz_left, __last - __tz_right);
  }
}

template <class _Compare,
          class _RandomAccessIterator,
          class _ValueType = typename iterator_traits<_RandomAccessIterator>::value_type>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__populate_left_bitset(_RandomAccessIterator __first, _Compare __comp, _ValueType& __pivot, uint64_t& __left_bitset) {


  _RandomAccessIterator __iter = __first;
  for (int __j = 0; __j < __detail::__block_size;) {
    bool __comp_result = !__comp(*__iter, __pivot);
    __left_bitset |= (static_cast<uint64_t>(__comp_result) << __j);
    __j++;
    ++__iter;
  }
}

template <class _Compare,
          class _RandomAccessIterator,
          class _ValueType = typename iterator_traits<_RandomAccessIterator>::value_type>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__populate_right_bitset(_RandomAccessIterator __lm1, _Compare __comp, _ValueType& __pivot, uint64_t& __right_bitset) {


  _RandomAccessIterator __iter = __lm1;
  for (int __j = 0; __j < __detail::__block_size;) {
    bool __comp_result = __comp(*__iter, __pivot);
    __right_bitset |= (static_cast<uint64_t>(__comp_result) << __j);
    __j++;
    --__iter;
  }
}

template <class _AlgPolicy,
          class _Compare,
          class _RandomAccessIterator,
          class _ValueType = typename iterator_traits<_RandomAccessIterator>::value_type>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __bitset_partition_partial_blocks(
    _RandomAccessIterator& __first,
    _RandomAccessIterator& __lm1,
    _Compare __comp,
    _ValueType& __pivot,
    uint64_t& __left_bitset,
    uint64_t& __right_bitset) {
  typedef typename std::iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  difference_type __remaining_len = __lm1 - __first + 1;
  difference_type __l_size;
  difference_type __r_size;
  if (__left_bitset == 0 && __right_bitset == 0) {
    __l_size = __remaining_len / 2;
    __r_size = __remaining_len - __l_size;
  } else if (__left_bitset == 0) {

    __l_size = __remaining_len - __detail::__block_size;
    __r_size = __detail::__block_size;
  } else {
    __l_size = __detail::__block_size;
    __r_size = __remaining_len - __detail::__block_size;
  }

  if (__left_bitset == 0) {
    _RandomAccessIterator __iter = __first;
    for (int __j = 0; __j < __l_size; __j++) {
      bool __comp_result = !__comp(*__iter, __pivot);
      __left_bitset |= (static_cast<uint64_t>(__comp_result) << __j);
      ++__iter;
    }
  }


  if (__right_bitset == 0) {
    _RandomAccessIterator __iter = __lm1;
    for (int __j = 0; __j < __r_size; __j++) {
      bool __comp_result = __comp(*__iter, __pivot);
      __right_bitset |= (static_cast<uint64_t>(__comp_result) << __j);
      --__iter;
    }
  }
  std::__swap_bitmap_pos<_AlgPolicy, _RandomAccessIterator>(__first, __lm1, __left_bitset, __right_bitset);
  __first += (__left_bitset == 0) ? __l_size : 0;
  __lm1 -= (__right_bitset == 0) ? __r_size : 0;
}

template <class _AlgPolicy, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __swap_bitmap_pos_within(
    _RandomAccessIterator& __first, _RandomAccessIterator& __lm1, uint64_t& __left_bitset, uint64_t& __right_bitset) {
  using _Ops = _IterOps<_AlgPolicy>;
  typedef typename std::iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  if (__left_bitset) {


    while (__left_bitset != 0) {
      difference_type __tz_left = __detail::__block_size - 1 - __libcpp_clz(__left_bitset);
      __left_bitset &= (static_cast<uint64_t>(1) << __tz_left) - 1;
      _RandomAccessIterator __it = __first + __tz_left;
      if (__it != __lm1) {
        _Ops::iter_swap(__it, __lm1);
      }
      --__lm1;
    }
    __first = __lm1 + difference_type(1);
  } else if (__right_bitset) {


    while (__right_bitset != 0) {
      difference_type __tz_right = __detail::__block_size - 1 - __libcpp_clz(__right_bitset);
      __right_bitset &= (static_cast<uint64_t>(1) << __tz_right) - 1;
      _RandomAccessIterator __it = __lm1 - __tz_right;
      if (__it != __first) {
        _Ops::iter_swap(__it, __first);
      }
      ++__first;
    }
  }
}
# 533 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 3
template <class _AlgPolicy, class _RandomAccessIterator, class _Compare>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) std::pair<_RandomAccessIterator, bool>
__bitset_partition(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;
  typedef typename std::iterator_traits<_RandomAccessIterator>::value_type value_type;
  typedef typename std::iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  ((void)0);
  const _RandomAccessIterator __begin = __first;
  const _RandomAccessIterator __end = __last;
  (void)__end;

  value_type __pivot(_Ops::__iter_move(__first));

  if (__comp(__pivot, *(__last - difference_type(1)))) {

    do {
      ++__first;
      ((void)0);


    } while (!__comp(__pivot, *__first));
  } else {
    while (++__first < __last && !__comp(__pivot, *__first)) {
    }
  }

  if (__first < __last) {


    do {
      ((void)0);


      --__last;
    } while (__comp(__pivot, *__last));
  }




  bool __already_partitioned = __first >= __last;
  if (!__already_partitioned) {
    _Ops::iter_swap(__first, __last);
    ++__first;
  }



  _RandomAccessIterator __lm1 = __last - difference_type(1);
  uint64_t __left_bitset = 0;
  uint64_t __right_bitset = 0;


  while (__lm1 - __first >= 2 * __detail::__block_size - 1) {


    if (__left_bitset == 0)
      std::__populate_left_bitset<_Compare>(__first, __comp, __pivot, __left_bitset);


    if (__right_bitset == 0)
      std::__populate_right_bitset<_Compare>(__lm1, __comp, __pivot, __right_bitset);


    std::__swap_bitmap_pos<_AlgPolicy, _RandomAccessIterator>(__first, __lm1, __left_bitset, __right_bitset);


    __first += (__left_bitset == 0) ? difference_type(__detail::__block_size) : difference_type(0);
    __lm1 -= (__right_bitset == 0) ? difference_type(__detail::__block_size) : difference_type(0);
  }


  std::__bitset_partition_partial_blocks<_AlgPolicy, _Compare>(
      __first, __lm1, __comp, __pivot, __left_bitset, __right_bitset);


  std::__swap_bitmap_pos_within<_AlgPolicy>(__first, __lm1, __left_bitset, __right_bitset);


  _RandomAccessIterator __pivot_pos = __first - difference_type(1);
  if (__begin != __pivot_pos) {
    *__begin = _Ops::__iter_move(__pivot_pos);
  }
  *__pivot_pos = std::move(__pivot);
  return std::make_pair(__pivot_pos, __already_partitioned);
}






template <class _AlgPolicy, class _RandomAccessIterator, class _Compare>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) std::pair<_RandomAccessIterator, bool>
__partition_with_equals_on_right(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  typedef typename std::iterator_traits<_RandomAccessIterator>::value_type value_type;
  ((void)0);
  const _RandomAccessIterator __begin = __first;
  const _RandomAccessIterator __end = __last;
  (void)__end;
  value_type __pivot(_Ops::__iter_move(__first));



  do {
    ++__first;
    ((void)0);


  } while (__comp(*__first, __pivot));


  if (__begin == __first - difference_type(1)) {
    while (__first < __last && !__comp(*--__last, __pivot))
      ;
  } else {

    do {
      ((void)0);


      --__last;
    } while (!__comp(*__last, __pivot));
  }




  bool __already_partitioned = __first >= __last;



  while (__first < __last) {
    _Ops::iter_swap(__first, __last);
    do {
      ++__first;
      ((void)0);


    } while (__comp(*__first, __pivot));
    do {
      ((void)0);


      --__last;
    } while (!__comp(*__last, __pivot));
  }

  _RandomAccessIterator __pivot_pos = __first - difference_type(1);
  if (__begin != __pivot_pos) {
    *__begin = _Ops::__iter_move(__pivot_pos);
  }
  *__pivot_pos = std::move(__pivot);
  return std::make_pair(__pivot_pos, __already_partitioned);
}



template <class _AlgPolicy, class _RandomAccessIterator, class _Compare>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _RandomAccessIterator
__partition_with_equals_on_left(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  typedef typename std::iterator_traits<_RandomAccessIterator>::value_type value_type;
  const _RandomAccessIterator __begin = __first;
  const _RandomAccessIterator __end = __last;
  (void)__end;
  value_type __pivot(_Ops::__iter_move(__first));
  if (__comp(__pivot, *(__last - difference_type(1)))) {

    do {
      ++__first;
      ((void)0);


    } while (!__comp(__pivot, *__first));
  } else {
    while (++__first < __last && !__comp(__pivot, *__first)) {
    }
  }

  if (__first < __last) {


    do {
      ((void)0);


      --__last;
    } while (__comp(__pivot, *__last));
  }
  while (__first < __last) {
    _Ops::iter_swap(__first, __last);
    do {
      ++__first;
      ((void)0);


    } while (!__comp(__pivot, *__first));
    do {
      ((void)0);


      --__last;
    } while (__comp(__pivot, *__last));
  }
  _RandomAccessIterator __pivot_pos = __first - difference_type(1);
  if (__begin != __pivot_pos) {
    *__begin = _Ops::__iter_move(__pivot_pos);
  }
  *__pivot_pos = std::move(__pivot);
  return __first;
}
# 756 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 3
template <class _AlgPolicy, class _Compare, class _RandomAccessIterator, bool _UseBitSetPartition>
void __introsort(_RandomAccessIterator __first,
                 _RandomAccessIterator __last,
                 _Compare __comp,
                 typename iterator_traits<_RandomAccessIterator>::difference_type __depth,
                 bool __leftmost = true) {
  using _Ops = _IterOps<_AlgPolicy>;
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  using _Comp_ref = __comp_ref_type<_Compare>;

  constexpr difference_type __limit = 24;

  constexpr difference_type __ninther_threshold = 128;
  while (true) {
    difference_type __len = __last - __first;
    switch (__len) {
    case 0:
    case 1:
      return;
    case 2:
      if (__comp(*--__last, *__first))
        _Ops::iter_swap(__first, __last);
      return;
    case 3:
      std::__sort3_maybe_branchless<_AlgPolicy, _Compare>(__first, __first + difference_type(1), --__last, __comp);
      return;
    case 4:
      std::__sort4_maybe_branchless<_AlgPolicy, _Compare>(
          __first, __first + difference_type(1), __first + difference_type(2), --__last, __comp);
      return;
    case 5:
      std::__sort5_maybe_branchless<_AlgPolicy, _Compare>(
          __first,
          __first + difference_type(1),
          __first + difference_type(2),
          __first + difference_type(3),
          --__last,
          __comp);
      return;
    }

    if (__len < __limit) {
      if (__leftmost) {
        std::__insertion_sort<_AlgPolicy, _Compare>(__first, __last, __comp);
      } else {
        std::__insertion_sort_unguarded<_AlgPolicy, _Compare>(__first, __last, __comp);
      }
      return;
    }
    if (__depth == 0) {

      std::__partial_sort<_AlgPolicy, _Compare>(__first, __last, __last, __comp);
      return;
    }
    --__depth;
    {
      difference_type __half_len = __len / 2;


      if (__len > __ninther_threshold) {
        std::__sort3<_AlgPolicy, _Compare>(__first, __first + __half_len, __last - difference_type(1), __comp);
        std::__sort3<_AlgPolicy, _Compare>(
            __first + difference_type(1), __first + (__half_len - 1), __last - difference_type(2), __comp);
        std::__sort3<_AlgPolicy, _Compare>(
            __first + difference_type(2), __first + (__half_len + 1), __last - difference_type(3), __comp);
        std::__sort3<_AlgPolicy, _Compare>(
            __first + (__half_len - 1), __first + __half_len, __first + (__half_len + 1), __comp);
        _Ops::iter_swap(__first, __first + __half_len);
      } else {
        std::__sort3<_AlgPolicy, _Compare>(__first + __half_len, __first, __last - difference_type(1), __comp);
      }
    }
# 836 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 3
    if (!__leftmost && !__comp(*(__first - difference_type(1)), *__first)) {
      __first = std::__partition_with_equals_on_left<_AlgPolicy, _RandomAccessIterator, _Comp_ref>(
          __first, __last, _Comp_ref(__comp));
      continue;
    }

    auto __ret = _UseBitSetPartition
                                  ? std::__bitset_partition<_AlgPolicy, _RandomAccessIterator, _Compare>(__first, __last, __comp)
                                  : std::__partition_with_equals_on_right<_AlgPolicy, _RandomAccessIterator, _Compare>(
                         __first, __last, __comp);
    _RandomAccessIterator __i = __ret.first;


    if (__ret.second) {
      bool __fs = std::__insertion_sort_incomplete<_AlgPolicy, _Compare>(__first, __i, __comp);
      if (std::__insertion_sort_incomplete<_AlgPolicy, _Compare>(__i + difference_type(1), __last, __comp)) {
        if (__fs)
          return;
        __last = __i;
        continue;
      } else {
        if (__fs) {
          __first = ++__i;
          continue;
        }
      }
    }

    std::__introsort<_AlgPolicy, _Compare, _RandomAccessIterator, _UseBitSetPartition>(
        __first, __i, __comp, __depth, __leftmost);
    __leftmost = false;
    __first = ++__i;
  }
}

template <typename _Number>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Number __log2i(_Number __n) {
  if (__n == 0)
    return 0;
  if (sizeof(__n) <= sizeof(unsigned))
    return sizeof(unsigned) * 8 - 1 - __libcpp_clz(static_cast<unsigned>(__n));
  if (sizeof(__n) <= sizeof(unsigned long))
    return sizeof(unsigned long) * 8 - 1 - __libcpp_clz(static_cast<unsigned long>(__n));
  if (sizeof(__n) <= sizeof(unsigned long long))
    return sizeof(unsigned long long) * 8 - 1 - __libcpp_clz(static_cast<unsigned long long>(__n));

  _Number __log2 = 0;
  while (__n > 1) {
    __log2++;
    __n >>= 1;
  }
  return __log2;
}

template <class _Comp, class _RandomAccessIterator>
void __sort(_RandomAccessIterator, _RandomAccessIterator, _Comp);

extern template __attribute__((__visibility__("default"))) void __sort<__less<char>&, char*>(char*, char*, __less<char>&);

extern template __attribute__((__visibility__("default"))) void __sort<__less<wchar_t>&, wchar_t*>(wchar_t*, wchar_t*, __less<wchar_t>&);

extern template __attribute__((__visibility__("default"))) void
__sort<__less<signed char>&, signed char*>(signed char*, signed char*, __less<signed char>&);
extern template __attribute__((__visibility__("default"))) void
__sort<__less<unsigned char>&, unsigned char*>(unsigned char*, unsigned char*, __less<unsigned char>&);
extern template __attribute__((__visibility__("default"))) void __sort<__less<short>&, short*>(short*, short*, __less<short>&);
extern template __attribute__((__visibility__("default"))) void
__sort<__less<unsigned short>&, unsigned short*>(unsigned short*, unsigned short*, __less<unsigned short>&);
extern template __attribute__((__visibility__("default"))) void __sort<__less<int>&, int*>(int*, int*, __less<int>&);
extern template __attribute__((__visibility__("default"))) void
__sort<__less<unsigned>&, unsigned*>(unsigned*, unsigned*, __less<unsigned>&);
extern template __attribute__((__visibility__("default"))) void __sort<__less<long>&, long*>(long*, long*, __less<long>&);
extern template __attribute__((__visibility__("default"))) void
__sort<__less<unsigned long>&, unsigned long*>(unsigned long*, unsigned long*, __less<unsigned long>&);
extern template __attribute__((__visibility__("default"))) void
__sort<__less<long long>&, long long*>(long long*, long long*, __less<long long>&);
extern template __attribute__((__visibility__("default"))) void __sort<__less<unsigned long long>&, unsigned long long*>(
    unsigned long long*, unsigned long long*, __less<unsigned long long>&);
extern template __attribute__((__visibility__("default"))) void __sort<__less<float>&, float*>(float*, float*, __less<float>&);
extern template __attribute__((__visibility__("default"))) void __sort<__less<double>&, double*>(double*, double*, __less<double>&);
extern template __attribute__((__visibility__("default"))) void
__sort<__less<long double>&, long double*>(long double*, long double*, __less<long double>&);

template <class _AlgPolicy, class _RandomAccessIterator, class _Comp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__sort_dispatch(_RandomAccessIterator __first, _RandomAccessIterator __last, _Comp& __comp) {
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  difference_type __depth_limit = 2 * std::__log2i(__last - __first);




  std::__introsort<_AlgPolicy,
                   _Comp&,
                   _RandomAccessIterator,
                   __use_branchless_sort<_Comp, _RandomAccessIterator>::value>(__first, __last, __comp, __depth_limit);
}

template <class _Type, class... _Options>
using __is_any_of = _Or<is_same<_Type, _Options>...>;

template <class _Type>
using __sort_is_specialized_in_library = __is_any_of<
    _Type,
    char,

    wchar_t,

    signed char,
    unsigned char,
    short,
    unsigned short,
    int,
    unsigned int,
    long,
    unsigned long,
    long long,
    unsigned long long,
    float,
    double,
    long double>;

template <class _AlgPolicy, class _Type, __enable_if_t<__sort_is_specialized_in_library<_Type>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __sort_dispatch(_Type* __first, _Type* __last, __less<>&) {
  __less<_Type> __comp;
  std::__sort<__less<_Type>&, _Type*>(__first, __last, __comp);
}

template <class _AlgPolicy, class _Type, __enable_if_t<__sort_is_specialized_in_library<_Type>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __sort_dispatch(_Type* __first, _Type* __last, less<_Type>&) {
  __less<_Type> __comp;
  std::__sort<__less<_Type>&, _Type*>(__first, __last, __comp);
}


template <class _AlgPolicy, class _Type, __enable_if_t<__sort_is_specialized_in_library<_Type>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __sort_dispatch(_Type* __first, _Type* __last, less<>&) {
  __less<_Type> __comp;
  std::__sort<__less<_Type>&, _Type*>(__first, __last, __comp);
}
# 986 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 3
template <class _AlgPolicy, class _RandomAccessIterator, class _Comp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__sort_impl(_RandomAccessIterator __first, _RandomAccessIterator __last, _Comp& __comp) {
  std::__debug_randomize_range<_AlgPolicy>(__first, __last);

  if (__libcpp_is_constant_evaluated()) {
    std::__partial_sort<_AlgPolicy>(
        std::__unwrap_iter(__first), std::__unwrap_iter(__last), std::__unwrap_iter(__last), __comp);
  } else {
    std::__sort_dispatch<_AlgPolicy>(std::__unwrap_iter(__first), std::__unwrap_iter(__last), __comp);
  }
  std::__check_strict_weak_ordering_sorted(std::__unwrap_iter(__first), std::__unwrap_iter(__last), __comp);
}

template <class _RandomAccessIterator, class _Comp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Comp __comp) {
  std::__sort_impl<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __comp);
}

template <class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
sort(_RandomAccessIterator __first, _RandomAccessIterator __last) {
  std::sort(__first, __last, __less<>());
}

}}
# 1012 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sort.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/nth_element.h" 2 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/nth_element.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/nth_element.h" 2 3

#pragma clang diagnostic push
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/nth_element.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/nth_element.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/nth_element.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/nth_element.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/nth_element.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/nth_element.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Compare, class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool __nth_element_find_guard(
    _RandomAccessIterator& __i, _RandomAccessIterator& __j, _RandomAccessIterator __m, _Compare __comp) {

  while (true) {
    if (__i == --__j) {
      return false;
    }
    if (__comp(*__j, *__m)) {
      return true;
    }
  }
}

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr void

__nth_element(
    _RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;


  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  const difference_type __limit = 7;
  while (true) {
    if (__nth == __last)
      return;
    difference_type __len = __last - __first;
    switch (__len) {
    case 0:
    case 1:
      return;
    case 2:
      if (__comp(*--__last, *__first))
        _Ops::iter_swap(__first, __last);
      return;
    case 3: {
      _RandomAccessIterator __m = __first;
      std::__sort3<_AlgPolicy, _Compare>(__first, ++__m, --__last, __comp);
      return;
    }
    }
    if (__len <= __limit) {
      std::__selection_sort<_AlgPolicy, _Compare>(__first, __last, __comp);
      return;
    }

    _RandomAccessIterator __m = __first + __len / 2;
    _RandomAccessIterator __lm1 = __last;
    unsigned __n_swaps = std::__sort3<_AlgPolicy, _Compare>(__first, __m, --__lm1, __comp);



    _RandomAccessIterator __i = __first;
    _RandomAccessIterator __j = __lm1;



    if (!__comp(*__i, *__m))
    {

      if (std::__nth_element_find_guard<_Compare>(__i, __j, __m, __comp)) {
        _Ops::iter_swap(__i, __j);
        ++__n_swaps;
      } else {


        ++__i;
        __j = __last;
        if (!__comp(*__first, *--__j)) {
          while (true) {
            if (__i == __j) {
              return;
            } else if (__comp(*__first, *__i)) {
              _Ops::iter_swap(__i, __j);
              ++__n_swaps;
              ++__i;
              break;
            }
            ++__i;
          }
        }

        if (__i == __j) {
          return;
        }
        while (true) {
          while (!__comp(*__first, *__i)) {
            ++__i;
            ((void)0);


          }
          do {
            ((void)0);


            --__j;
          } while (__comp(*__first, *__j));
          if (__i >= __j)
            break;
          _Ops::iter_swap(__i, __j);
          ++__n_swaps;
          ++__i;
        }


        if (__nth < __i) {
          return;
        }


        __first = __i;
        continue;
      }
    }
    ++__i;


    if (__i < __j) {

      while (true) {

        while (__comp(*__i, *__m)) {
          ++__i;
          ((void)0);


        }

        do {
          ((void)0);


          --__j;
        } while (!__comp(*__j, *__m));
        if (__i >= __j)
          break;
        _Ops::iter_swap(__i, __j);
        ++__n_swaps;


        if (__m == __i)
          __m = __j;
        ++__i;
      }
    }

    if (__i != __m && __comp(*__m, *__i)) {
      _Ops::iter_swap(__i, __m);
      ++__n_swaps;
    }

    if (__nth == __i)
      return;
    if (__n_swaps == 0) {

      if (__nth < __i) {

        __j = __m = __first;
        while (true) {
          if (++__j == __i) {

            return;
          }
          if (__comp(*__j, *__m)) {

            break;
          }
          __m = __j;
        }
      } else {

        __j = __m = __i;
        while (true) {
          if (++__j == __last) {

            return;
          }
          if (__comp(*__j, *__m)) {

            break;
          }
          __m = __j;
        }
      }
    }

    if (__nth < __i) {

      __last = __i;
    } else {

      __first = ++__i;
    }
  }
}

template <class _AlgPolicy, class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __nth_element_impl(
    _RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare& __comp) {
  if (__nth == __last)
    return;

  std::__debug_randomize_range<_AlgPolicy>(__first, __last);

  std::__nth_element<_AlgPolicy, __comp_ref_type<_Compare> >(__first, __nth, __last, __comp);

  std::__debug_randomize_range<_AlgPolicy>(__first, __nth);
  if (__nth != __last) {
    std::__debug_randomize_range<_AlgPolicy>(++__nth, __last);
  }
}

template <class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp) {
  std::__nth_element_impl<_ClassicAlgPolicy>(std::move(__first), std::move(__nth), std::move(__last), __comp);
}

template <class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last) {
  std::nth_element(std::move(__first), std::move(__nth), std::move(__last), __less<>());
}

}}
# 257 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/nth_element.h" 3
#pragma clang diagnostic pop
# 1870 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort_copy.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort_copy.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_projected.h" 1 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_projected.h" 3


#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_projected.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_projected.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_projected.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_projected.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_projected.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_projected.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Pred, class _Proj>
struct _ProjectedPred {
  _Pred& __pred;
  _Proj& __proj;

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ProjectedPred(_Pred& __pred_arg, _Proj& __proj_arg)
      : __pred(__pred_arg), __proj(__proj_arg) {}

  template <class _Tp>
  typename __invoke_of<_Pred&, decltype(std::__invoke(std::declval<_Proj&>(), std::declval<_Tp>()))>::type
      constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
      operator()(_Tp&& __v) const {
    return std::__invoke(__pred, std::__invoke(__proj, std::forward<_Tp>(__v)));
  }

  template <class _T1, class _T2>
  typename __invoke_of<_Pred&,
                       decltype(std::__invoke(std::declval<_Proj&>(), std::declval<_T1>())),
                       decltype(std::__invoke(std::declval<_Proj&>(), std::declval<_T2>()))>::type constexpr
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  operator()(_T1&& __lhs, _T2&& __rhs) const {
    return std::__invoke(
        __pred, std::__invoke(__proj, std::forward<_T1>(__lhs)), std::__invoke(__proj, std::forward<_T2>(__rhs)));
  }
};

template <
    class _Pred,
    class _Proj,
    __enable_if_t<!(!is_member_pointer<__decay_t<_Pred> >::value && __is_identity<__decay_t<_Proj> >::value), int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _ProjectedPred<_Pred, _Proj> __make_projected(_Pred& __pred, _Proj& __proj) {
  return _ProjectedPred<_Pred, _Proj>(__pred, __proj);
}




template <
    class _Pred,
    class _Proj,
    __enable_if_t<!is_member_pointer<__decay_t<_Pred> >::value && __is_identity<__decay_t<_Proj> >::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Pred& __make_projected(_Pred& __pred, _Proj&) {
  return __pred;
}

}}
# 75 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/make_projected.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort_copy.h" 2 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort_copy.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort_copy.h" 2 3

#pragma clang diagnostic push
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort_copy.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort_copy.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort_copy.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort_copy.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort_copy.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort_copy.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy,
          class _Compare,
          class _InputIterator,
          class _Sentinel1,
          class _RandomAccessIterator,
          class _Sentinel2,
          class _Proj1,
          class _Proj2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_InputIterator, _RandomAccessIterator> __partial_sort_copy(
    _InputIterator __first,
    _Sentinel1 __last,
    _RandomAccessIterator __result_first,
    _Sentinel2 __result_last,
    _Compare&& __comp,
    _Proj1&& __proj1,
    _Proj2&& __proj2) {
  _RandomAccessIterator __r = __result_first;
  auto&& __projected_comp = std::__make_projected(__comp, __proj2);

  if (__r != __result_last) {
    for (; __first != __last && __r != __result_last; ++__first, (void)++__r)
      *__r = *__first;
    std::__make_heap<_AlgPolicy>(__result_first, __r, __projected_comp);
    typename iterator_traits<_RandomAccessIterator>::difference_type __len = __r - __result_first;
    for (; __first != __last; ++__first)
      if (std::__invoke(__comp, std::__invoke(__proj1, *__first), std::__invoke(__proj2, *__result_first))) {
        *__result_first = *__first;
        std::__sift_down<_AlgPolicy>(__result_first, __projected_comp, __len, __result_first);
      }
    std::__sort_heap<_AlgPolicy>(__result_first, __r, __projected_comp);
  }

  return pair<_InputIterator, _RandomAccessIterator>(
      _IterOps<_AlgPolicy>::next(std::move(__first), std::move(__last)), std::move(__r));
}

template <class _InputIterator, class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _RandomAccessIterator partial_sort_copy(
    _InputIterator __first,
    _InputIterator __last,
    _RandomAccessIterator __result_first,
    _RandomAccessIterator __result_last,
    _Compare __comp) {
  static_assert(
      __is_callable<_Compare, decltype(*__first), decltype(*__result_first)>::value, "Comparator has to be callable");

  auto __result = std::__partial_sort_copy<_ClassicAlgPolicy>(
      __first,
      __last,
      __result_first,
      __result_last,
      static_cast<__comp_ref_type<_Compare> >(__comp),
      __identity(),
      __identity());
  return __result.second;
}

template <class _InputIterator, class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _RandomAccessIterator partial_sort_copy(
    _InputIterator __first,
    _InputIterator __last,
    _RandomAccessIterator __result_first,
    _RandomAccessIterator __result_last) {
  return std::partial_sort_copy(__first, __last, __result_first, __result_last, __less<>());
}

}}
# 102 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partial_sort_copy.h" 3
#pragma clang diagnostic pop
# 1872 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition.h" 2 3

#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Predicate, class _AlgPolicy, class _ForwardIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_ForwardIterator, _ForwardIterator>
__partition_impl(_ForwardIterator __first, _Sentinel __last, _Predicate __pred, forward_iterator_tag) {
  while (true) {
    if (__first == __last)
      return std::make_pair(std::move(__first), std::move(__first));
    if (!__pred(*__first))
      break;
    ++__first;
  }

  _ForwardIterator __p = __first;
  while (++__p != __last) {
    if (__pred(*__p)) {
      _IterOps<_AlgPolicy>::iter_swap(__first, __p);
      ++__first;
    }
  }
  return std::make_pair(std::move(__first), std::move(__p));
}

template <class _Predicate, class _AlgPolicy, class _BidirectionalIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_BidirectionalIterator, _BidirectionalIterator>
__partition_impl(_BidirectionalIterator __first, _Sentinel __sentinel, _Predicate __pred, bidirectional_iterator_tag) {
  _BidirectionalIterator __original_last = _IterOps<_AlgPolicy>::next(__first, __sentinel);
  _BidirectionalIterator __last = __original_last;

  while (true) {
    while (true) {
      if (__first == __last)
        return std::make_pair(std::move(__first), std::move(__original_last));
      if (!__pred(*__first))
        break;
      ++__first;
    }
    do {
      if (__first == --__last)
        return std::make_pair(std::move(__first), std::move(__original_last));
    } while (!__pred(*__last));
    _IterOps<_AlgPolicy>::iter_swap(__first, __last);
    ++__first;
  }
}

template <class _AlgPolicy, class _ForwardIterator, class _Sentinel, class _Predicate, class _IterCategory>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_ForwardIterator, _ForwardIterator>
__partition(_ForwardIterator __first, _Sentinel __last, _Predicate&& __pred, _IterCategory __iter_category) {
  return std::__partition_impl<__remove_cvref_t<_Predicate>&, _AlgPolicy>(
      std::move(__first), std::move(__last), __pred, __iter_category);
}

template <class _ForwardIterator, class _Predicate>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred) {
  using _IterCategory = typename iterator_traits<_ForwardIterator>::iterator_category;
  auto __result = std::__partition<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __pred, _IterCategory());
  return __result.first;
}

}}
# 86 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition.h" 3
#pragma clang diagnostic pop
# 1873 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_copy.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_copy.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_copy.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_copy.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_copy.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_copy.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_copy.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_copy.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator, class _OutputIterator1, class _OutputIterator2, class _Predicate>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_OutputIterator1, _OutputIterator2> partition_copy(
    _InputIterator __first,
    _InputIterator __last,
    _OutputIterator1 __out_true,
    _OutputIterator2 __out_false,
    _Predicate __pred) {
  for (; __first != __last; ++__first) {
    if (__pred(*__first)) {
      *__out_true = *__first;
      ++__out_true;
    } else {
      *__out_false = *__first;
      ++__out_false;
    }
  }
  return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
}

}}
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_copy.h" 3
#pragma clang diagnostic pop
# 1874 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_point.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_point.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_point.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_point.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_point.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_point.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_point.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_point.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _ForwardIterator, class _Predicate>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
partition_point(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred) {
  typedef typename iterator_traits<_ForwardIterator>::difference_type difference_type;
  difference_type __len = std::distance(__first, __last);
  while (__len != 0) {
    difference_type __l2 = std::__half_positive(__len);
    _ForwardIterator __m = __first;
    std::advance(__m, __l2);
    if (__pred(*__m)) {
      __first = ++__m;
      __len -= __l2 + 1;
    } else
      __len = __l2;
  }
  return __first;
}

}}
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/partition_point.h" 3
#pragma clang diagnostic pop
# 1875 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/prev_permutation.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/prev_permutation.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/prev_permutation.h" 2 3

#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/prev_permutation.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/prev_permutation.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/prev_permutation.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/prev_permutation.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/prev_permutation.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/prev_permutation.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _Compare, class _BidirectionalIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_BidirectionalIterator, bool>
__prev_permutation(_BidirectionalIterator __first, _Sentinel __last, _Compare&& __comp) {
  using _Result = pair<_BidirectionalIterator, bool>;

  _BidirectionalIterator __last_iter = _IterOps<_AlgPolicy>::next(__first, __last);
  _BidirectionalIterator __i = __last_iter;
  if (__first == __last || __first == --__i)
    return _Result(std::move(__last_iter), false);

  while (true) {
    _BidirectionalIterator __ip1 = __i;
    if (__comp(*__ip1, *--__i)) {
      _BidirectionalIterator __j = __last_iter;
      while (!__comp(*--__j, *__i))
        ;
      _IterOps<_AlgPolicy>::iter_swap(__i, __j);
      std::__reverse<_AlgPolicy>(__ip1, __last_iter);
      return _Result(std::move(__last_iter), true);
    }
    if (__i == __first) {
      std::__reverse<_AlgPolicy>(__first, __last_iter);
      return _Result(std::move(__last_iter), false);
    }
  }
}

template <class _BidirectionalIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp) {
  return std::__prev_permutation<_ClassicAlgPolicy>(
             std::move(__first), std::move(__last), static_cast<__comp_ref_type<_Compare> >(__comp))
      .second;
}

template <class _BidirectionalIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last) {
  return std::prev_permutation(__first, __last, __less<>());
}

}}
# 71 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/prev_permutation.h" 3
#pragma clang diagnostic pop
# 1877 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator, class _OutputIterator, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
remove_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp& __value) {
  for (; __first != __last; ++__first) {
    if (!(*__first == __value)) {
      *__result = *__first;
      ++__result;
    }
  }
  return __result;
}

}}
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy.h" 3
#pragma clang diagnostic pop
# 1880 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy_if.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy_if.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy_if.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy_if.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy_if.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy_if.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy_if.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy_if.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator, class _OutputIterator, class _Predicate>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred) {
  for (; __first != __last; ++__first) {
    if (!__pred(*__first)) {
      *__result = *__first;
      ++__result;
    }
  }
  return __result;
}

}}
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/remove_copy_if.h" 3
#pragma clang diagnostic pop
# 1881 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _ForwardIterator, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
replace(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __old_value, const _Tp& __new_value) {
  for (; __first != __last; ++__first)
    if (*__first == __old_value)
      *__first = __new_value;
}

}}
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace.h" 3
#pragma clang diagnostic pop
# 1883 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator, class _OutputIterator, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator replace_copy(
    _InputIterator __first,
    _InputIterator __last,
    _OutputIterator __result,
    const _Tp& __old_value,
    const _Tp& __new_value) {
  for (; __first != __last; ++__first, (void)++__result)
    if (*__first == __old_value)
      *__result = __new_value;
    else
      *__result = *__first;
  return __result;
}

}}
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy.h" 3
#pragma clang diagnostic pop
# 1884 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy_if.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy_if.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy_if.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy_if.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy_if.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy_if.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy_if.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy_if.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator, class _OutputIterator, class _Predicate, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator replace_copy_if(
    _InputIterator __first,
    _InputIterator __last,
    _OutputIterator __result,
    _Predicate __pred,
    const _Tp& __new_value) {
  for (; __first != __last; ++__first, (void)++__result)
    if (__pred(*__first))
      *__result = __new_value;
    else
      *__result = *__first;
  return __result;
}

}}
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_copy_if.h" 3
#pragma clang diagnostic pop
# 1885 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_if.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_if.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_if.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_if.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_if.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_if.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_if.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_if.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _ForwardIterator, class _Predicate, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
replace_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, const _Tp& __new_value) {
  for (; __first != __last; ++__first)
    if (__pred(*__first))
      *__first = __new_value;
}

}}
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/replace_if.h" 3
#pragma clang diagnostic pop
# 1886 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse_copy.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse_copy.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse_copy.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse_copy.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse_copy.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse_copy.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse_copy.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse_copy.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _BidirectionalIterator, class _OutputIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __result) {
  for (; __first != __last; ++__result)
    *__result = *--__last;
  return __result;
}

}}
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/reverse_copy.h" 3
#pragma clang diagnostic pop
# 1888 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate_copy.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate_copy.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate_copy.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate_copy.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate_copy.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate_copy.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate_copy.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate_copy.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _ForwardIterator, class _OutputIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
rotate_copy(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _OutputIterator __result) {
  return std::copy(__first, __middle, std::copy(__middle, __last, __result));
}

}}
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/rotate_copy.h" 3
#pragma clang diagnostic pop
# 1890 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search_n.h" 1 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search_n.h" 3


#pragma clang diagnostic push
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search_n.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search_n.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search_n.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search_n.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search_n.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search_n.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _Pred, class _Iter, class _Sent, class _SizeT, class _Type, class _Proj>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_Iter, _Iter> __search_n_forward_impl(
    _Iter __first, _Sent __last, _SizeT __count, const _Type& __value, _Pred& __pred, _Proj& __proj) {
  if (__count <= 0)
    return std::make_pair(__first, __first);
  while (true) {

    while (true) {
      if (__first == __last) {
        _IterOps<_AlgPolicy>::__advance_to(__first, __last);
        return std::make_pair(__first, __first);
      }
      if (std::__invoke(__pred, std::__invoke(__proj, *__first), __value))
        break;
      ++__first;
    }

    _Iter __m = __first;
    _SizeT __c(0);
    while (true) {
      if (++__c == __count)
        return std::make_pair(__first, ++__m);
      if (++__m == __last) {
        _IterOps<_AlgPolicy>::__advance_to(__first, __last);
        return std::make_pair(__first, __first);
      }


      if (!std::__invoke(__pred, std::__invoke(__proj, *__m), __value)) {
        __first = __m;
        ++__first;
        break;
      }
    }
  }
}

template <class _AlgPolicy, class _Pred, class _Iter, class _Sent, class _SizeT, class _Type, class _Proj, class _DiffT>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr std::pair<_Iter, _Iter> __search_n_random_access_impl(
    _Iter __first, _Sent __last, _SizeT __count, const _Type& __value, _Pred& __pred, _Proj& __proj, _DiffT __size1) {
  using difference_type = typename iterator_traits<_Iter>::difference_type;
  if (__count == 0)
    return std::make_pair(__first, __first);
  if (__size1 < static_cast<_DiffT>(__count)) {
    _IterOps<_AlgPolicy>::__advance_to(__first, __last);
    return std::make_pair(__first, __first);
  }

  const auto __s = __first + __size1 - difference_type(__count - 1);
  while (true) {

    while (true) {
      if (__first >= __s) {
        _IterOps<_AlgPolicy>::__advance_to(__first, __last);
        return std::make_pair(__first, __first);
      }
      if (std::__invoke(__pred, std::__invoke(__proj, *__first), __value))
        break;
      ++__first;
    }

    auto __m = __first;
    _SizeT __c(0);
    while (true) {
      if (++__c == __count)
        return std::make_pair(__first, __first + _DiffT(__count));
      ++__m;


      if (!std::__invoke(__pred, std::__invoke(__proj, *__m), __value)) {
        __first = __m;
        ++__first;
        break;
      }
    }
  }
}

template <class _Iter,
          class _Sent,
          class _DiffT,
          class _Type,
          class _Pred,
          class _Proj,
          __enable_if_t<__has_random_access_iterator_category<_Iter>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_Iter, _Iter>
__search_n_impl(_Iter __first, _Sent __last, _DiffT __count, const _Type& __value, _Pred& __pred, _Proj& __proj) {
  return std::__search_n_random_access_impl<_ClassicAlgPolicy>(
      __first, __last, __count, __value, __pred, __proj, __last - __first);
}

template <class _Iter1,
          class _Sent1,
          class _DiffT,
          class _Type,
          class _Pred,
          class _Proj,
          __enable_if_t<__has_forward_iterator_category<_Iter1>::value &&
                            !__has_random_access_iterator_category<_Iter1>::value,
                        int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr pair<_Iter1, _Iter1>
__search_n_impl(_Iter1 __first, _Sent1 __last, _DiffT __count, const _Type& __value, _Pred& __pred, _Proj& __proj) {
  return std::__search_n_forward_impl<_ClassicAlgPolicy>(__first, __last, __count, __value, __pred, __proj);
}

template <class _ForwardIterator, class _Size, class _Tp, class _BinaryPredicate>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator search_n(
    _ForwardIterator __first, _ForwardIterator __last, _Size __count, const _Tp& __value, _BinaryPredicate __pred) {
  static_assert(
      __is_callable<_BinaryPredicate, decltype(*__first), const _Tp&>::value, "BinaryPredicate has to be callable");
  auto __proj = __identity();
  return std::__search_n_impl(__first, __last, std::__convert_to_integral(__count), __value, __pred, __proj).first;
}

template <class _ForwardIterator, class _Size, class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
search_n(_ForwardIterator __first, _ForwardIterator __last, _Size __count, const _Tp& __value) {
  return std::search_n(__first, __last, std::__convert_to_integral(__count), __value, __equal_to());
}

}}
# 153 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/search_n.h" 3
#pragma clang diagnostic pop
# 1892 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_difference.h" 1 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_difference.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_difference.h" 2 3

#pragma clang diagnostic push
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_difference.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_difference.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_difference.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_difference.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_difference.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_difference.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _Comp, class _InIter1, class _Sent1, class _InIter2, class _Sent2, class _OutIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<__remove_cvref_t<_InIter1>, __remove_cvref_t<_OutIter> >
__set_difference(
    _InIter1&& __first1, _Sent1&& __last1, _InIter2&& __first2, _Sent2&& __last2, _OutIter&& __result, _Comp&& __comp) {
  while (__first1 != __last1 && __first2 != __last2) {
    if (__comp(*__first1, *__first2)) {
      *__result = *__first1;
      ++__first1;
      ++__result;
    } else if (__comp(*__first2, *__first1)) {
      ++__first2;
    } else {
      ++__first1;
      ++__first2;
    }
  }
  return std::__copy<_AlgPolicy>(std::move(__first1), std::move(__last1), std::move(__result));
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator set_difference(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result,
    _Compare __comp) {
  return std::__set_difference<_ClassicAlgPolicy, __comp_ref_type<_Compare> >(
             __first1, __last1, __first2, __last2, __result, __comp)
      .second;
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator set_difference(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result) {
  return std::__set_difference<_ClassicAlgPolicy>(__first1, __last1, __first2, __last2, __result, __less<>()).second;
}

}}
# 75 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_difference.h" 3
#pragma clang diagnostic pop
# 1893 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_intersection.h" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_intersection.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_intersection.h" 2 3

#pragma clang diagnostic push
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_intersection.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_intersection.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_intersection.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_intersection.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_intersection.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_intersection.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InIter1, class _InIter2, class _OutIter>
struct __set_intersection_result {
  _InIter1 __in1_;
  _InIter2 __in2_;
  _OutIter __out_;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  __set_intersection_result(_InIter1&& __in_iter1, _InIter2&& __in_iter2, _OutIter&& __out_iter)
      : __in1_(std::move(__in_iter1)), __in2_(std::move(__in_iter2)), __out_(std::move(__out_iter)) {}
};





template <class _InForwardIter1, class _InForwardIter2, class _OutIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __set_intersection_add_output_if_equal(
    bool __may_be_equal,
    _InForwardIter1& __first1,
    _InForwardIter2& __first2,
    _OutIter& __result,
    bool& __prev_may_be_equal) {
  if (__may_be_equal && __prev_may_be_equal) {
    *__result = *__first1;
    ++__result;
    ++__first1;
    ++__first2;
    __prev_may_be_equal = false;
  } else {
    __prev_may_be_equal = __may_be_equal;
  }
}
# 80 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_intersection.h" 3
template <class _AlgPolicy,
          class _Compare,
          class _InForwardIter1,
          class _Sent1,
          class _InForwardIter2,
          class _Sent2,
          class _OutIter>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                              __set_intersection_result<_InForwardIter1, _InForwardIter2, _OutIter>
__set_intersection(
    _InForwardIter1 __first1,
    _Sent1 __last1,
    _InForwardIter2 __first2,
    _Sent2 __last2,
    _OutIter __result,
    _Compare&& __comp,
    std::forward_iterator_tag,
    std::forward_iterator_tag) {
  constexpr std::__identity __proj;
  bool __prev_may_be_equal = false;

  while (__first2 != __last2) {
    _InForwardIter1 __first1_next =
        std::__lower_bound_onesided<_AlgPolicy>(__first1, __last1, *__first2, __comp, __proj);
    std::swap(__first1_next, __first1);


    std::__set_intersection_add_output_if_equal(
        __first1 == __first1_next, __first1, __first2, __result, __prev_may_be_equal);
    if (__first1 == __last1)
      break;

    _InForwardIter2 __first2_next =
        std::__lower_bound_onesided<_AlgPolicy>(__first2, __last2, *__first1, __comp, __proj);
    std::swap(__first2_next, __first2);
    std::__set_intersection_add_output_if_equal(
        __first2 == __first2_next, __first1, __first2, __result, __prev_may_be_equal);
  }
  return __set_intersection_result<_InForwardIter1, _InForwardIter2, _OutIter>(
      _IterOps<_AlgPolicy>::next(std::move(__first1), std::move(__last1)),
      _IterOps<_AlgPolicy>::next(std::move(__first2), std::move(__last2)),
      std::move(__result));
}


template <class _AlgPolicy,
          class _Compare,
          class _InInputIter1,
          class _Sent1,
          class _InInputIter2,
          class _Sent2,
          class _OutIter>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                              __set_intersection_result<_InInputIter1, _InInputIter2, _OutIter>
__set_intersection(
    _InInputIter1 __first1,
    _Sent1 __last1,
    _InInputIter2 __first2,
    _Sent2 __last2,
    _OutIter __result,
    _Compare&& __comp,
    std::input_iterator_tag,
    std::input_iterator_tag) {
  while (__first1 != __last1 && __first2 != __last2) {
    if (__comp(*__first1, *__first2))
      ++__first1;
    else {
      if (!__comp(*__first2, *__first1)) {
        *__result = *__first1;
        ++__result;
        ++__first1;
      }
      ++__first2;
    }
  }

  return __set_intersection_result<_InInputIter1, _InInputIter2, _OutIter>(
      _IterOps<_AlgPolicy>::next(std::move(__first1), std::move(__last1)),
      _IterOps<_AlgPolicy>::next(std::move(__first2), std::move(__last2)),
      std::move(__result));
}

template <class _AlgPolicy, class _Compare, class _InIter1, class _Sent1, class _InIter2, class _Sent2, class _OutIter>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                              __set_intersection_result<_InIter1, _InIter2, _OutIter>
__set_intersection(
    _InIter1 __first1, _Sent1 __last1, _InIter2 __first2, _Sent2 __last2, _OutIter __result, _Compare&& __comp) {
  return std::__set_intersection<_AlgPolicy>(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      std::move(__result),
      std::forward<_Compare>(__comp),
      typename std::_IterOps<_AlgPolicy>::template __iterator_category<_InIter1>(),
      typename std::_IterOps<_AlgPolicy>::template __iterator_category<_InIter2>());
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator set_intersection(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result,
    _Compare __comp) {
  return std::__set_intersection<_ClassicAlgPolicy, __comp_ref_type<_Compare> >(
             std::move(__first1),
             std::move(__last1),
             std::move(__first2),
             std::move(__last2),
             std::move(__result),
             __comp)
      .__out_;
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator set_intersection(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result) {
  return std::__set_intersection<_ClassicAlgPolicy>(
             std::move(__first1),
             std::move(__last1),
             std::move(__first2),
             std::move(__last2),
             std::move(__result),
             __less<>())
      .__out_;
}

}}
# 213 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_intersection.h" 3
#pragma clang diagnostic pop
# 1894 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_symmetric_difference.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_symmetric_difference.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_symmetric_difference.h" 2 3

#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_symmetric_difference.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_symmetric_difference.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_symmetric_difference.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_symmetric_difference.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_symmetric_difference.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_symmetric_difference.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InIter1, class _InIter2, class _OutIter>
struct __set_symmetric_difference_result {
  _InIter1 __in1_;
  _InIter2 __in2_;
  _OutIter __out_;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  __set_symmetric_difference_result(_InIter1&& __in_iter1, _InIter2&& __in_iter2, _OutIter&& __out_iter)
      : __in1_(std::move(__in_iter1)), __in2_(std::move(__in_iter2)), __out_(std::move(__out_iter)) {}
};

template <class _AlgPolicy, class _Compare, class _InIter1, class _Sent1, class _InIter2, class _Sent2, class _OutIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __set_symmetric_difference_result<_InIter1, _InIter2, _OutIter>
__set_symmetric_difference(
    _InIter1 __first1, _Sent1 __last1, _InIter2 __first2, _Sent2 __last2, _OutIter __result, _Compare&& __comp) {
  while (__first1 != __last1) {
    if (__first2 == __last2) {
      auto __ret1 = std::__copy<_AlgPolicy>(std::move(__first1), std::move(__last1), std::move(__result));
      return __set_symmetric_difference_result<_InIter1, _InIter2, _OutIter>(
          std::move(__ret1.first), std::move(__first2), std::move((__ret1.second)));
    }
    if (__comp(*__first1, *__first2)) {
      *__result = *__first1;
      ++__result;
      ++__first1;
    } else {
      if (__comp(*__first2, *__first1)) {
        *__result = *__first2;
        ++__result;
      } else {
        ++__first1;
      }
      ++__first2;
    }
  }
  auto __ret2 = std::__copy<_AlgPolicy>(std::move(__first2), std::move(__last2), std::move(__result));
  return __set_symmetric_difference_result<_InIter1, _InIter2, _OutIter>(
      std::move(__first1), std::move(__ret2.first), std::move((__ret2.second)));
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _Compare>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator set_symmetric_difference(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result,
    _Compare __comp) {
  return std::__set_symmetric_difference<_ClassicAlgPolicy, __comp_ref_type<_Compare> >(
             std::move(__first1),
             std::move(__last1),
             std::move(__first2),
             std::move(__last2),
             std::move(__result),
             __comp)
      .__out_;
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator set_symmetric_difference(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result) {
  return std::set_symmetric_difference(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      std::move(__result),
      __less<>());
}

}}
# 105 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_symmetric_difference.h" 3
#pragma clang diagnostic pop
# 1895 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_union.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_union.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_union.h" 2 3

#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_union.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_union.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_union.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_union.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_union.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_union.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InIter1, class _InIter2, class _OutIter>
struct __set_union_result {
  _InIter1 __in1_;
  _InIter2 __in2_;
  _OutIter __out_;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  __set_union_result(_InIter1&& __in_iter1, _InIter2&& __in_iter2, _OutIter&& __out_iter)
      : __in1_(std::move(__in_iter1)), __in2_(std::move(__in_iter2)), __out_(std::move(__out_iter)) {}
};

template <class _AlgPolicy, class _Compare, class _InIter1, class _Sent1, class _InIter2, class _Sent2, class _OutIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __set_union_result<_InIter1, _InIter2, _OutIter> __set_union(
    _InIter1 __first1, _Sent1 __last1, _InIter2 __first2, _Sent2 __last2, _OutIter __result, _Compare&& __comp) {
  for (; __first1 != __last1; ++__result) {
    if (__first2 == __last2) {
      auto __ret1 = std::__copy<_AlgPolicy>(std::move(__first1), std::move(__last1), std::move(__result));
      return __set_union_result<_InIter1, _InIter2, _OutIter>(
          std::move(__ret1.first), std::move(__first2), std::move((__ret1.second)));
    }
    if (__comp(*__first2, *__first1)) {
      *__result = *__first2;
      ++__first2;
    } else {
      if (!__comp(*__first1, *__first2)) {
        ++__first2;
      }
      *__result = *__first1;
      ++__first1;
    }
  }
  auto __ret2 = std::__copy<_AlgPolicy>(std::move(__first2), std::move(__last2), std::move(__result));
  return __set_union_result<_InIter1, _InIter2, _OutIter>(
      std::move(__first1), std::move(__ret2.first), std::move((__ret2.second)));
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _Compare>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator set_union(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result,
    _Compare __comp) {
  return std::__set_union<_ClassicAlgPolicy, __comp_ref_type<_Compare> >(
             std::move(__first1),
             std::move(__last1),
             std::move(__first2),
             std::move(__last2),
             std::move(__result),
             __comp)
      .__out_;
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator set_union(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result) {
  return std::set_union(
      std::move(__first1),
      std::move(__last1),
      std::move(__first2),
      std::move(__last2),
      std::move(__result),
      __less<>());
}

}}
# 101 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/set_union.h" 3
#pragma clang diagnostic pop
# 1896 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/shuffle.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/shuffle.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/uniform_int_distribution.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/uniform_int_distribution.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/is_valid.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/is_valid.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/is_valid.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/is_valid.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/is_valid.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/is_valid.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/is_valid.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/is_valid.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {






template <class>
struct __libcpp_random_is_valid_realtype : false_type {};
template <>
struct __libcpp_random_is_valid_realtype<float> : true_type {};
template <>
struct __libcpp_random_is_valid_realtype<double> : true_type {};
template <>
struct __libcpp_random_is_valid_realtype<long double> : true_type {};







template <class>
struct __libcpp_random_is_valid_inttype : false_type {};
template <>
struct __libcpp_random_is_valid_inttype<int8_t> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<short> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<int> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<long> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<long long> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<uint8_t> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<unsigned short> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<unsigned int> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<unsigned long> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<unsigned long long> : true_type {};


template <>
struct __libcpp_random_is_valid_inttype<__int128_t> : true_type {};
template <>
struct __libcpp_random_is_valid_inttype<__uint128_t> : true_type {};
# 84 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/is_valid.h" 3
template <class, class = void>
struct __libcpp_random_is_valid_urng : false_type {};
template <class _Gp>
struct __libcpp_random_is_valid_urng<
    _Gp,
    __enable_if_t< is_unsigned<typename _Gp::result_type>::value &&
                   _IsSame<decltype(std::declval<_Gp&>()()), typename _Gp::result_type>::value > > : true_type {};

}}
# 92 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/is_valid.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/uniform_int_distribution.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/log2.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/log2.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/log2.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/log2.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/log2.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/log2.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/log2.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/log2.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _UIntType, _UIntType _Xp, size_t _Rp>
struct __log2_imp;

template <unsigned long long _Xp, size_t _Rp>
struct __log2_imp<unsigned long long, _Xp, _Rp> {
  static const size_t value =
      _Xp & ((unsigned long long)(1) << _Rp) ? _Rp : __log2_imp<unsigned long long, _Xp, _Rp - 1>::value;
};

template <unsigned long long _Xp>
struct __log2_imp<unsigned long long, _Xp, 0> {
  static const size_t value = 0;
};

template <size_t _Rp>
struct __log2_imp<unsigned long long, 0, _Rp> {
  static const size_t value = _Rp + 1;
};



template <__uint128_t _Xp, size_t _Rp>
struct __log2_imp<__uint128_t, _Xp, _Rp> {
  static const size_t value =
      (_Xp >> 64) ? (64 + __log2_imp<unsigned long long, (_Xp >> 64), 63>::value)
                  : __log2_imp<unsigned long long, _Xp, 63>::value;
};



template <class _UIntType, _UIntType _Xp>
struct __log2 {
  static const size_t value = __log2_imp<

      __conditional_t<sizeof(_UIntType) <= sizeof(unsigned long long), unsigned long long, __uint128_t>,



      _Xp,
      sizeof(_UIntType) * 8 - 1>::value;
};

}}
# 64 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/log2.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/uniform_int_distribution.h" 2 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/uniform_int_distribution.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/uniform_int_distribution.h" 2 3

#pragma clang diagnostic push
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/uniform_int_distribution.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/uniform_int_distribution.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/uniform_int_distribution.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/uniform_int_distribution.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/uniform_int_distribution.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/uniform_int_distribution.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Engine, class _UIntType>
class __independent_bits_engine {
public:

  typedef _UIntType result_type;

private:
  typedef typename _Engine::result_type _Engine_result_type;
  typedef __conditional_t<sizeof(_Engine_result_type) <= sizeof(result_type), result_type, _Engine_result_type>
      _Working_result_type;

  _Engine& __e_;
  size_t __w_;
  size_t __w0_;
  size_t __n_;
  size_t __n0_;
  _Working_result_type __y0_;
  _Working_result_type __y1_;
  _Engine_result_type __mask0_;
  _Engine_result_type __mask1_;




  static constexpr const _Working_result_type _Rp = _Engine::max() - _Engine::min() + _Working_result_type(1);

  static constexpr const size_t __m = __log2<_Working_result_type, _Rp>::value;
  static constexpr const size_t _WDt = numeric_limits<_Working_result_type>::digits;
  static constexpr const size_t _EDt = numeric_limits<_Engine_result_type>::digits;

public:

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __independent_bits_engine(_Engine& __e, size_t __w);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result_type operator()() { return __eval(integral_constant<bool, _Rp != 0>()); }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result_type __eval(false_type);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result_type __eval(true_type);
};

template <class _Engine, class _UIntType>
__independent_bits_engine<_Engine, _UIntType>::__independent_bits_engine(_Engine& __e, size_t __w)
    : __e_(__e), __w_(__w) {
  __n_ = __w_ / __m + (__w_ % __m != 0);
  __w0_ = __w_ / __n_;
  if (_Rp == 0)
    __y0_ = _Rp;
  else if (__w0_ < _WDt)
    __y0_ = (_Rp >> __w0_) << __w0_;
  else
    __y0_ = 0;
  if (_Rp - __y0_ > __y0_ / __n_) {
    ++__n_;
    __w0_ = __w_ / __n_;
    if (__w0_ < _WDt)
      __y0_ = (_Rp >> __w0_) << __w0_;
    else
      __y0_ = 0;
  }
  __n0_ = __n_ - __w_ % __n_;
  if (__w0_ < _WDt - 1)
    __y1_ = (_Rp >> (__w0_ + 1)) << (__w0_ + 1);
  else
    __y1_ = 0;
  __mask0_ = __w0_ > 0 ? _Engine_result_type(~0) >> (_EDt - __w0_) : _Engine_result_type(0);
  __mask1_ = __w0_ < _EDt - 1 ? _Engine_result_type(~0) >> (_EDt - (__w0_ + 1)) : _Engine_result_type(~0);
}

template <class _Engine, class _UIntType>
inline _UIntType __independent_bits_engine<_Engine, _UIntType>::__eval(false_type) {
  return static_cast<result_type>(__e_() & __mask0_);
}

template <class _Engine, class _UIntType>
_UIntType __independent_bits_engine<_Engine, _UIntType>::__eval(true_type) {
  const size_t __w_rt = numeric_limits<result_type>::digits;
  result_type __sp = 0;
  for (size_t __k = 0; __k < __n0_; ++__k) {
    _Engine_result_type __u;
    do {
      __u = __e_() - _Engine::min();
    } while (__u >= __y0_);
    if (__w0_ < __w_rt)
      __sp <<= __w0_;
    else
      __sp = 0;
    __sp += __u & __mask0_;
  }
  for (size_t __k = __n0_; __k < __n_; ++__k) {
    _Engine_result_type __u;
    do {
      __u = __e_() - _Engine::min();
    } while (__u >= __y1_);
    if (__w0_ < __w_rt - 1)
      __sp <<= __w0_ + 1;
    else
      __sp = 0;
    __sp += __u & __mask1_;
  }
  return __sp;
}

template <class _IntType = int>
class uniform_int_distribution {
  static_assert(__libcpp_random_is_valid_inttype<_IntType>::value, "IntType must be a supported integer type");

public:

  typedef _IntType result_type;

  class param_type {
    result_type __a_;
    result_type __b_;

  public:
    typedef uniform_int_distribution distribution_type;

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit param_type(result_type __a = 0, result_type __b = numeric_limits<result_type>::max())
        : __a_(__a), __b_(__b) {}

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result_type a() const { return __a_; }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result_type b() const { return __b_; }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool operator==(const param_type& __x, const param_type& __y) {
      return __x.__a_ == __y.__a_ && __x.__b_ == __y.__b_;
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool operator!=(const param_type& __x, const param_type& __y) { return !(__x == __y); }
  };

private:
  param_type __p_;

public:


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) uniform_int_distribution() : uniform_int_distribution(0) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit uniform_int_distribution(
      result_type __a, result_type __b = numeric_limits<result_type>::max())
      : __p_(param_type(__a, __b)) {}




  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit uniform_int_distribution(const param_type& __p) : __p_(__p) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reset() {}


  template <class _URNG>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result_type operator()(_URNG& __g) {
    return (*this)(__g, __p_);
  }
  template <class _URNG>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result_type operator()(_URNG& __g, const param_type& __p);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result_type a() const { return __p_.a(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result_type b() const { return __p_.b(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) param_type param() const { return __p_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void param(const param_type& __p) { __p_ = __p; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result_type min() const { return a(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result_type max() const { return b(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool
  operator==(const uniform_int_distribution& __x, const uniform_int_distribution& __y) {
    return __x.__p_ == __y.__p_;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool
  operator!=(const uniform_int_distribution& __x, const uniform_int_distribution& __y) {
    return !(__x == __y);
  }
};

template <class _IntType>
template <class _URNG>
typename uniform_int_distribution<_IntType>::result_type uniform_int_distribution<_IntType>::operator()(
    _URNG& __g, const param_type& __p) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) {
  static_assert(__libcpp_random_is_valid_urng<_URNG>::value, "");
  typedef __conditional_t<sizeof(result_type) <= sizeof(uint32_t), uint32_t, __make_unsigned_t<result_type> > _UIntType;
  const _UIntType __rp = _UIntType(__p.b()) - _UIntType(__p.a()) + _UIntType(1);
  if (__rp == 1)
    return __p.a();
  const size_t __dt = numeric_limits<_UIntType>::digits;
  typedef __independent_bits_engine<_URNG, _UIntType> _Eng;
  if (__rp == 0)
    return static_cast<result_type>(_Eng(__g, __dt)());
  size_t __w = __dt - std::__countl_zero(__rp) - 1;
  if ((__rp & (numeric_limits<_UIntType>::max() >> (__dt - __w))) != 0)
    ++__w;
  _Eng __e(__g, __w);
  _UIntType __u;
  do {
    __u = __e();
  } while (__u >= __rp);
  return static_cast<result_type>(__u + __p.a());
}

template <class _CharT, class _Traits, class _IT>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, const uniform_int_distribution<_IT>& __x) {
  __save_flags<_CharT, _Traits> __lx(__os);
  typedef basic_ostream<_CharT, _Traits> _Ostream;
  __os.flags(_Ostream::dec | _Ostream::left);
  _CharT __sp = __os.widen(' ');
  __os.fill(__sp);
  return __os << __x.a() << __sp << __x.b();
}

template <class _CharT, class _Traits, class _IT>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
operator>>(basic_istream<_CharT, _Traits>& __is, uniform_int_distribution<_IT>& __x) {
  typedef uniform_int_distribution<_IT> _Eng;
  typedef typename _Eng::result_type result_type;
  typedef typename _Eng::param_type param_type;
  __save_flags<_CharT, _Traits> __lx(__is);
  typedef basic_istream<_CharT, _Traits> _Istream;
  __is.flags(_Istream::dec | _Istream::skipws);
  result_type __a;
  result_type __b;
  __is >> __a >> __b;
  if (!__is.fail())
    __x.param(param_type(__a, __b));
  return __is;
}

}}
# 260 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__random/uniform_int_distribution.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/shuffle.h" 2 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/shuffle.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/shuffle.h" 2 3

#pragma clang diagnostic push
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/shuffle.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/shuffle.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/shuffle.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/shuffle.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/shuffle.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/shuffle.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

class __attribute__((__visibility__("default"))) __libcpp_debug_randomizer {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __libcpp_debug_randomizer() {
    __state_ = __seed();
    __inc_ = __state_ + 0xda3e39cb94b95bdbULL;
    __inc_ = (__inc_ << 1) | 1;
  }
  typedef uint_fast32_t result_type;

  static const result_type _Min = 0;
  static const result_type _Max = 0xFFFFFFFF;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result_type operator()() {
    uint_fast64_t __oldstate = __state_;
    __state_ = __oldstate * 6364136223846793005ULL + __inc_;
    return __oldstate >> 32;
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr result_type min() { return _Min; }
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr result_type max() { return _Max; }

private:
  uint_fast64_t __state_;
  uint_fast64_t __inc_;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static uint_fast64_t __seed() {



    static char __x;
    return reinterpret_cast<uintptr_t>(&__x);

  }
};
# 134 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/shuffle.h" 3
template <class _AlgPolicy, class _RandomAccessIterator, class _Sentinel, class _UniformRandomNumberGenerator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _RandomAccessIterator
__shuffle(_RandomAccessIterator __first, _Sentinel __last_sentinel, _UniformRandomNumberGenerator&& __g) {
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  typedef uniform_int_distribution<ptrdiff_t> _Dp;
  typedef typename _Dp::param_type _Pp;

  auto __original_last = _IterOps<_AlgPolicy>::next(__first, __last_sentinel);
  auto __last = __original_last;
  difference_type __d = __last - __first;
  if (__d > 1) {
    _Dp __uid;
    for (--__last, (void)--__d; __first < __last; ++__first, (void)--__d) {
      difference_type __i = __uid(__g, _Pp(0, __d));
      if (__i != difference_type(0))
        _IterOps<_AlgPolicy>::iter_swap(__first, __first + __i);
    }
  }

  return __original_last;
}

template <class _RandomAccessIterator, class _UniformRandomNumberGenerator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _UniformRandomNumberGenerator&& __g) {
  (void)std::__shuffle<_ClassicAlgPolicy>(
      std::move(__first), std::move(__last), std::forward<_UniformRandomNumberGenerator>(__g));
}

}}
# 163 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/shuffle.h" 3
#pragma clang diagnostic pop
# 1897 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_partition.h" 1 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_partition.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_partition.h" 2 3

#pragma clang diagnostic push
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_partition.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_partition.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_partition.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_partition.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_partition.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_partition.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _Predicate, class _ForwardIterator, class _Distance, class _Pair>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator __stable_partition_impl(
    _ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred,
    _Distance __len,
    _Pair __p,
    forward_iterator_tag __fit) {
  using _Ops = _IterOps<_AlgPolicy>;



  if (__len == 1)
    return __first;
  if (__len == 2) {
    _ForwardIterator __m = __first;
    if (__pred(*++__m)) {
      _Ops::iter_swap(__first, __m);
      return __m;
    }
    return __first;
  }
  if (__len <= __p.second) {
    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
    __destruct_n __d(0);
    unique_ptr<value_type, __destruct_n&> __h(__p.first, __d);


    value_type* __t = __p.first;
    ::new ((void*)__t) value_type(_Ops::__iter_move(__first));
    __d.template __incr<value_type>();
    ++__t;
    _ForwardIterator __i = __first;
    while (++__i != __last) {
      if (__pred(*__i)) {
        *__first = _Ops::__iter_move(__i);
        ++__first;
      } else {
        ::new ((void*)__t) value_type(_Ops::__iter_move(__i));
        __d.template __incr<value_type>();
        ++__t;
      }
    }


    __i = __first;
    for (value_type* __t2 = __p.first; __t2 < __t; ++__t2, (void)++__i)
      *__i = _Ops::__iter_move(__t2);

    return __first;
  }


  _ForwardIterator __m = __first;
  _Distance __len2 = __len / 2;
  _Ops::advance(__m, __len2);



  _ForwardIterator __first_false =
      std::__stable_partition_impl<_AlgPolicy, _Predicate&>(__first, __m, __pred, __len2, __p, __fit);



  _ForwardIterator __m1 = __m;
  _ForwardIterator __second_false = __last;
  _Distance __len_half = __len - __len2;
  while (__pred(*__m1)) {
    if (++__m1 == __last)
      goto __second_half_done;
    --__len_half;
  }


  __second_false = std::__stable_partition_impl<_AlgPolicy, _Predicate&>(__m1, __last, __pred, __len_half, __p, __fit);
__second_half_done:


  return std::__rotate<_AlgPolicy>(__first_false, __m, __second_false).first;


}

template <class _AlgPolicy, class _Predicate, class _ForwardIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
__stable_partition_impl(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, forward_iterator_tag) {
  typedef typename iterator_traits<_ForwardIterator>::difference_type difference_type;
  typedef typename iterator_traits<_ForwardIterator>::value_type value_type;

  const difference_type __alloc_limit = 3;

  while (true) {
    if (__first == __last)
      return __first;
    if (!__pred(*__first))
      break;
    ++__first;
  }


  difference_type __len = _IterOps<_AlgPolicy>::distance(__first, __last);
  pair<value_type*, ptrdiff_t> __p(0, 0);
  unique_ptr<value_type, __return_temporary_buffer> __h;
  if (__len >= __alloc_limit) {

#pragma GCC diagnostic push
# 139 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_partition.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 139 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_partition.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    __p = std::get_temporary_buffer<value_type>(__len);
#pragma GCC diagnostic pop
    __h.reset(__p.first);
  }
  return std::__stable_partition_impl<_AlgPolicy, _Predicate&>(
      std::move(__first), std::move(__last), __pred, __len, __p, forward_iterator_tag());
}

template <class _AlgPolicy, class _Predicate, class _BidirectionalIterator, class _Distance, class _Pair>
_BidirectionalIterator __stable_partition_impl(
    _BidirectionalIterator __first,
    _BidirectionalIterator __last,
    _Predicate __pred,
    _Distance __len,
    _Pair __p,
    bidirectional_iterator_tag __bit) {
  using _Ops = _IterOps<_AlgPolicy>;




  if (__len == 2) {
    _Ops::iter_swap(__first, __last);
    return __last;
  }
  if (__len == 3) {
    _BidirectionalIterator __m = __first;
    if (__pred(*++__m)) {
      _Ops::iter_swap(__first, __m);
      _Ops::iter_swap(__m, __last);
      return __last;
    }
    _Ops::iter_swap(__m, __last);
    _Ops::iter_swap(__first, __m);
    return __m;
  }
  if (__len <= __p.second) {
    typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
    __destruct_n __d(0);
    unique_ptr<value_type, __destruct_n&> __h(__p.first, __d);


    value_type* __t = __p.first;
    ::new ((void*)__t) value_type(_Ops::__iter_move(__first));
    __d.template __incr<value_type>();
    ++__t;
    _BidirectionalIterator __i = __first;
    while (++__i != __last) {
      if (__pred(*__i)) {
        *__first = _Ops::__iter_move(__i);
        ++__first;
      } else {
        ::new ((void*)__t) value_type(_Ops::__iter_move(__i));
        __d.template __incr<value_type>();
        ++__t;
      }
    }

    *__first = _Ops::__iter_move(__i);
    __i = ++__first;


    for (value_type* __t2 = __p.first; __t2 < __t; ++__t2, (void)++__i)
      *__i = _Ops::__iter_move(__t2);

    return __first;
  }


  _BidirectionalIterator __m = __first;
  _Distance __len2 = __len / 2;
  _Ops::advance(__m, __len2);



  _BidirectionalIterator __m1 = __m;
  _BidirectionalIterator __first_false = __first;
  _Distance __len_half = __len2;
  while (!__pred(*--__m1)) {
    if (__m1 == __first)
      goto __first_half_done;
    --__len_half;
  }


  __first_false = std::__stable_partition_impl<_AlgPolicy, _Predicate&>(__first, __m1, __pred, __len_half, __p, __bit);
__first_half_done:



  __m1 = __m;
  _BidirectionalIterator __second_false = __last;
  ++__second_false;
  __len_half = __len - __len2;
  while (__pred(*__m1)) {
    if (++__m1 == __last)
      goto __second_half_done;
    --__len_half;
  }


  __second_false = std::__stable_partition_impl<_AlgPolicy, _Predicate&>(__m1, __last, __pred, __len_half, __p, __bit);
__second_half_done:


  return std::__rotate<_AlgPolicy>(__first_false, __m, __second_false).first;


}

template <class _AlgPolicy, class _Predicate, class _BidirectionalIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _BidirectionalIterator __stable_partition_impl(
    _BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate __pred, bidirectional_iterator_tag) {
  typedef typename iterator_traits<_BidirectionalIterator>::difference_type difference_type;
  typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
  const difference_type __alloc_limit = 4;

  while (true) {
    if (__first == __last)
      return __first;
    if (!__pred(*__first))
      break;
    ++__first;
  }


  do {
    if (__first == --__last)
      return __first;
  } while (!__pred(*__last));




  difference_type __len = _IterOps<_AlgPolicy>::distance(__first, __last) + 1;
  pair<value_type*, ptrdiff_t> __p(0, 0);
  unique_ptr<value_type, __return_temporary_buffer> __h;
  if (__len >= __alloc_limit) {

#pragma GCC diagnostic push
# 279 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_partition.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 279 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_partition.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    __p = std::get_temporary_buffer<value_type>(__len);
#pragma GCC diagnostic pop
    __h.reset(__p.first);
  }
  return std::__stable_partition_impl<_AlgPolicy, _Predicate&>(
      std::move(__first), std::move(__last), __pred, __len, __p, bidirectional_iterator_tag());
}

template <class _AlgPolicy, class _Predicate, class _ForwardIterator, class _IterCategory>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator __stable_partition(
    _ForwardIterator __first, _ForwardIterator __last, _Predicate&& __pred, _IterCategory __iter_category) {
  return std::__stable_partition_impl<_AlgPolicy, __remove_cvref_t<_Predicate>&>(
      std::move(__first), std::move(__last), __pred, __iter_category);
}

template <class _ForwardIterator, class _Predicate>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred) {
  using _IterCategory = typename iterator_traits<_ForwardIterator>::iterator_category;
  return std::__stable_partition<_ClassicAlgPolicy, _Predicate&>(
      std::move(__first), std::move(__last), __pred, _IterCategory());
}

}}
# 303 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_partition.h" 3
#pragma clang diagnostic pop
# 1900 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_sort.h" 1 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_sort.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_sort.h" 2 3

#pragma clang diagnostic push
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_sort.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_sort.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_sort.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_sort.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_sort.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_sort.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy, class _Compare, class _BidirectionalIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __insertion_sort_move(
    _BidirectionalIterator __first1,
    _BidirectionalIterator __last1,
    typename iterator_traits<_BidirectionalIterator>::value_type* __first2,
    _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;

  typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
  if (__first1 != __last1) {
    __destruct_n __d(0);
    unique_ptr<value_type, __destruct_n&> __h(__first2, __d);
    value_type* __last2 = __first2;
    ::new ((void*)__last2) value_type(_Ops::__iter_move(__first1));
    __d.template __incr<value_type>();
    for (++__last2; ++__first1 != __last1; ++__last2) {
      value_type* __j2 = __last2;
      value_type* __i2 = __j2;
      if (__comp(*__first1, *--__i2)) {
        ::new ((void*)__j2) value_type(std::move(*__i2));
        __d.template __incr<value_type>();
        for (--__j2; __i2 != __first2 && __comp(*__first1, *--__i2); --__j2)
          *__j2 = std::move(*__i2);
        *__j2 = _Ops::__iter_move(__first1);
      } else {
        ::new ((void*)__j2) value_type(_Ops::__iter_move(__first1));
        __d.template __incr<value_type>();
      }
    }
    __h.release();
  }
}

template <class _AlgPolicy, class _Compare, class _InputIterator1, class _InputIterator2>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __merge_move_construct(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    typename iterator_traits<_InputIterator1>::value_type* __result,
    _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;

  typedef typename iterator_traits<_InputIterator1>::value_type value_type;
  __destruct_n __d(0);
  unique_ptr<value_type, __destruct_n&> __h(__result, __d);
  for (; true; ++__result) {
    if (__first1 == __last1) {
      for (; __first2 != __last2; ++__first2, (void)++__result, __d.template __incr<value_type>())
        ::new ((void*)__result) value_type(_Ops::__iter_move(__first2));
      __h.release();
      return;
    }
    if (__first2 == __last2) {
      for (; __first1 != __last1; ++__first1, (void)++__result, __d.template __incr<value_type>())
        ::new ((void*)__result) value_type(_Ops::__iter_move(__first1));
      __h.release();
      return;
    }
    if (__comp(*__first2, *__first1)) {
      ::new ((void*)__result) value_type(_Ops::__iter_move(__first2));
      __d.template __incr<value_type>();
      ++__first2;
    } else {
      ::new ((void*)__result) value_type(_Ops::__iter_move(__first1));
      __d.template __incr<value_type>();
      ++__first1;
    }
  }
}

template <class _AlgPolicy, class _Compare, class _InputIterator1, class _InputIterator2, class _OutputIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __merge_move_assign(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _InputIterator2 __last2,
    _OutputIterator __result,
    _Compare __comp) {
  using _Ops = _IterOps<_AlgPolicy>;

  for (; __first1 != __last1; ++__result) {
    if (__first2 == __last2) {
      for (; __first1 != __last1; ++__first1, (void)++__result)
        *__result = _Ops::__iter_move(__first1);
      return;
    }
    if (__comp(*__first2, *__first1)) {
      *__result = _Ops::__iter_move(__first2);
      ++__first2;
    } else {
      *__result = _Ops::__iter_move(__first1);
      ++__first1;
    }
  }
  for (; __first2 != __last2; ++__first2, (void)++__result)
    *__result = _Ops::__iter_move(__first2);
}

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
void __stable_sort(_RandomAccessIterator __first,
                   _RandomAccessIterator __last,
                   _Compare __comp,
                   typename iterator_traits<_RandomAccessIterator>::difference_type __len,
                   typename iterator_traits<_RandomAccessIterator>::value_type* __buff,
                   ptrdiff_t __buff_size);

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
void __stable_sort_move(_RandomAccessIterator __first1,
                        _RandomAccessIterator __last1,
                        _Compare __comp,
                        typename iterator_traits<_RandomAccessIterator>::difference_type __len,
                        typename iterator_traits<_RandomAccessIterator>::value_type* __first2) {
  using _Ops = _IterOps<_AlgPolicy>;

  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;
  switch (__len) {
  case 0:
    return;
  case 1:
    ::new ((void*)__first2) value_type(_Ops::__iter_move(__first1));
    return;
  case 2:
    __destruct_n __d(0);
    unique_ptr<value_type, __destruct_n&> __h2(__first2, __d);
    if (__comp(*--__last1, *__first1)) {
      ::new ((void*)__first2) value_type(_Ops::__iter_move(__last1));
      __d.template __incr<value_type>();
      ++__first2;
      ::new ((void*)__first2) value_type(_Ops::__iter_move(__first1));
    } else {
      ::new ((void*)__first2) value_type(_Ops::__iter_move(__first1));
      __d.template __incr<value_type>();
      ++__first2;
      ::new ((void*)__first2) value_type(_Ops::__iter_move(__last1));
    }
    __h2.release();
    return;
  }
  if (__len <= 8) {
    std::__insertion_sort_move<_AlgPolicy, _Compare>(__first1, __last1, __first2, __comp);
    return;
  }
  typename iterator_traits<_RandomAccessIterator>::difference_type __l2 = __len / 2;
  _RandomAccessIterator __m = __first1 + __l2;
  std::__stable_sort<_AlgPolicy, _Compare>(__first1, __m, __comp, __l2, __first2, __l2);
  std::__stable_sort<_AlgPolicy, _Compare>(__m, __last1, __comp, __len - __l2, __first2 + __l2, __len - __l2);
  std::__merge_move_construct<_AlgPolicy, _Compare>(__first1, __m, __m, __last1, __first2, __comp);
}

template <class _Tp>
struct __stable_sort_switch {
  static const unsigned value = 128 * is_trivially_copy_assignable<_Tp>::value;
};

template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
void __stable_sort(_RandomAccessIterator __first,
                   _RandomAccessIterator __last,
                   _Compare __comp,
                   typename iterator_traits<_RandomAccessIterator>::difference_type __len,
                   typename iterator_traits<_RandomAccessIterator>::value_type* __buff,
                   ptrdiff_t __buff_size) {
  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;
  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
  switch (__len) {
  case 0:
  case 1:
    return;
  case 2:
    if (__comp(*--__last, *__first))
      _IterOps<_AlgPolicy>::iter_swap(__first, __last);
    return;
  }
  if (__len <= static_cast<difference_type>(__stable_sort_switch<value_type>::value)) {
    std::__insertion_sort<_AlgPolicy, _Compare>(__first, __last, __comp);
    return;
  }
  typename iterator_traits<_RandomAccessIterator>::difference_type __l2 = __len / 2;
  _RandomAccessIterator __m = __first + __l2;
  if (__len <= __buff_size) {
    __destruct_n __d(0);
    unique_ptr<value_type, __destruct_n&> __h2(__buff, __d);
    std::__stable_sort_move<_AlgPolicy, _Compare>(__first, __m, __comp, __l2, __buff);
    __d.__set(__l2, (value_type*)nullptr);
    std::__stable_sort_move<_AlgPolicy, _Compare>(__m, __last, __comp, __len - __l2, __buff + __l2);
    __d.__set(__len, (value_type*)nullptr);
    std::__merge_move_assign<_AlgPolicy, _Compare>(
        __buff, __buff + __l2, __buff + __l2, __buff + __len, __first, __comp);





    return;
  }
  std::__stable_sort<_AlgPolicy, _Compare>(__first, __m, __comp, __l2, __buff, __buff_size);
  std::__stable_sort<_AlgPolicy, _Compare>(__m, __last, __comp, __len - __l2, __buff, __buff_size);
  std::__inplace_merge<_AlgPolicy>(__first, __m, __last, __comp, __l2, __len - __l2, __buff, __buff_size);
}

template <class _AlgPolicy, class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__stable_sort_impl(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare& __comp) {
  using value_type = typename iterator_traits<_RandomAccessIterator>::value_type;
  using difference_type = typename iterator_traits<_RandomAccessIterator>::difference_type;

  difference_type __len = __last - __first;
  pair<value_type*, ptrdiff_t> __buf(0, 0);
  unique_ptr<value_type, __return_temporary_buffer> __h;
  if (__len > static_cast<difference_type>(__stable_sort_switch<value_type>::value)) {

#pragma GCC diagnostic push
# 248 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_sort.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 248 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_sort.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    __buf = std::get_temporary_buffer<value_type>(__len);
#pragma GCC diagnostic pop
    __h.reset(__buf.first);
  }

  std::__stable_sort<_AlgPolicy, __comp_ref_type<_Compare> >(__first, __last, __comp, __len, __buf.first, __buf.second);
  std::__check_strict_weak_ordering_sorted(__first, __last, __comp);
}

template <class _RandomAccessIterator, class _Compare>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
  std::__stable_sort_impl<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __comp);
}

template <class _RandomAccessIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last) {
  std::stable_sort(__first, __last, __less<>());
}

}}
# 269 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/stable_sort.h" 3
#pragma clang diagnostic pop
# 1901 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/transform.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/transform.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/transform.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/transform.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/transform.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/transform.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/transform.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/transform.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _InputIterator, class _OutputIterator, class _UnaryOperation>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
transform(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _UnaryOperation __op) {
  for (; __first != __last; ++__first, (void)++__result)
    *__result = __op(*__first);
  return __result;
}

template <class _InputIterator1, class _InputIterator2, class _OutputIterator, class _BinaryOperation>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator transform(
    _InputIterator1 __first1,
    _InputIterator1 __last1,
    _InputIterator2 __first2,
    _OutputIterator __result,
    _BinaryOperation __binary_op) {
  for (; __first1 != __last1; ++__first1, (void)++__first2, ++__result)
    *__result = __binary_op(*__first1, *__first2);
  return __result;
}

}}
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/transform.h" 3
#pragma clang diagnostic pop
# 1903 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique.h" 2 3

#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _AlgPolicy, class _Iter, class _Sent, class _BinaryPredicate>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) std::pair<_Iter, _Iter>
__unique(_Iter __first, _Sent __last, _BinaryPredicate&& __pred) {
  __first = std::__adjacent_find(__first, __last, __pred);
  if (__first != __last) {


    _Iter __i = __first;
    for (++__i; ++__i != __last;)
      if (!__pred(*__first, *__i))
        *++__first = _IterOps<_AlgPolicy>::__iter_move(__i);
    ++__first;
    return std::pair<_Iter, _Iter>(std::move(__first), std::move(__i));
  }
  return std::pair<_Iter, _Iter>(__first, __first);
}

template <class _ForwardIterator, class _BinaryPredicate>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred) {
  return std::__unique<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __pred).first;
}

template <class _ForwardIterator>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator
unique(_ForwardIterator __first, _ForwardIterator __last) {
  return std::unique(__first, __last, __equal_to());
}

}}
# 60 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique.h" 3
#pragma clang diagnostic pop
# 1904 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique_copy.h" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique_copy.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique_copy.h" 2 3

#pragma clang diagnostic push
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique_copy.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique_copy.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique_copy.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique_copy.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique_copy.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique_copy.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

namespace __unique_copy_tags {

struct __reread_from_input_tag {};
struct __reread_from_output_tag {};
struct __read_from_tmp_value_tag {};

}

template <class _AlgPolicy, class _BinaryPredicate, class _InputIterator, class _Sent, class _OutputIterator>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_InputIterator, _OutputIterator>
__unique_copy(_InputIterator __first,
              _Sent __last,
              _OutputIterator __result,
              _BinaryPredicate&& __pred,
              __unique_copy_tags::__read_from_tmp_value_tag) {
  if (__first != __last) {
    typename _IterOps<_AlgPolicy>::template __value_type<_InputIterator> __t(*__first);
    *__result = __t;
    ++__result;
    while (++__first != __last) {
      if (!__pred(__t, *__first)) {
        __t = *__first;
        *__result = __t;
        ++__result;
      }
    }
  }
  return pair<_InputIterator, _OutputIterator>(std::move(__first), std::move(__result));
}

template <class _AlgPolicy, class _BinaryPredicate, class _ForwardIterator, class _Sent, class _OutputIterator>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_ForwardIterator, _OutputIterator>
__unique_copy(_ForwardIterator __first,
              _Sent __last,
              _OutputIterator __result,
              _BinaryPredicate&& __pred,
              __unique_copy_tags::__reread_from_input_tag) {
  if (__first != __last) {
    _ForwardIterator __i = __first;
    *__result = *__i;
    ++__result;
    while (++__first != __last) {
      if (!__pred(*__i, *__first)) {
        *__result = *__first;
        ++__result;
        __i = __first;
      }
    }
  }
  return pair<_ForwardIterator, _OutputIterator>(std::move(__first), std::move(__result));
}

template <class _AlgPolicy, class _BinaryPredicate, class _InputIterator, class _Sent, class _InputAndOutputIterator>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_InputIterator, _InputAndOutputIterator>
__unique_copy(_InputIterator __first,
              _Sent __last,
              _InputAndOutputIterator __result,
              _BinaryPredicate&& __pred,
              __unique_copy_tags::__reread_from_output_tag) {
  if (__first != __last) {
    *__result = *__first;
    while (++__first != __last)
      if (!__pred(*__result, *__first))
        *++__result = *__first;
    ++__result;
  }
  return pair<_InputIterator, _InputAndOutputIterator>(std::move(__first), std::move(__result));
}

template <class _InputIterator, class _OutputIterator, class _BinaryPredicate>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __pred) {
  using __algo_tag = __conditional_t<
      is_base_of<forward_iterator_tag, typename iterator_traits<_InputIterator>::iterator_category>::value,
      __unique_copy_tags::__reread_from_input_tag,
      __conditional_t<
          is_base_of<forward_iterator_tag, typename iterator_traits<_OutputIterator>::iterator_category>::value &&
              is_same< typename iterator_traits<_InputIterator>::value_type,
                       typename iterator_traits<_OutputIterator>::value_type>::value,
          __unique_copy_tags::__reread_from_output_tag,
          __unique_copy_tags::__read_from_tmp_value_tag> >;
  return std::__unique_copy<_ClassicAlgPolicy>(
             std::move(__first), std::move(__last), std::move(__result), __pred, __algo_tag())
      .second;
}

template <class _InputIterator, class _OutputIterator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result) {
  return std::unique_copy(std::move(__first), std::move(__last), std::move(__result), __equal_to());
}

}}
# 123 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/unique_copy.h" 3
#pragma clang diagnostic pop
# 1905 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/clamp.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/clamp.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/clamp.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/clamp.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/clamp.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/clamp.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/clamp.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/clamp.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


template <class _Tp, class _Compare>
[[nodiscard]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Tp&
clamp([[_Clang::__lifetimebound__]] const _Tp& __v,
      [[_Clang::__lifetimebound__]] const _Tp& __lo,
      [[_Clang::__lifetimebound__]] const _Tp& __hi,
      _Compare __comp) {
  ((void)0);
  return __comp(__v, __lo) ? __lo : __comp(__hi, __v) ? __hi : __v;
}

template <class _Tp>
[[nodiscard]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Tp&
clamp([[_Clang::__lifetimebound__]] const _Tp& __v,
      [[_Clang::__lifetimebound__]] const _Tp& __lo,
      [[_Clang::__lifetimebound__]] const _Tp& __hi) {
  return std::clamp(__v, __lo, __hi, __less<>());
}


}}
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/clamp.h" 3
#pragma clang diagnostic pop
# 1909 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_n.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_n.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_n.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_n.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_n.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_n.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_n.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_n.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _InputIterator, class _Size, class _Function>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _InputIterator
for_each_n(_InputIterator __first, _Size __orig_n, _Function __f) {
  typedef decltype(std::__convert_to_integral(__orig_n)) _IntegralSize;
  _IntegralSize __n = __orig_n;
  while (__n > 0) {
    __f(*__first);
    ++__first;
    --__n;
  }
  return __first;
}



}}
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/for_each_n.h" 3
#pragma clang diagnostic pop
# 1910 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/pstl.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/pstl.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/pstl.h" 2 3
# 1911 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sample.h" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sample.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sample.h" 2 3

#pragma clang diagnostic push
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sample.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sample.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sample.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sample.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sample.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sample.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _AlgPolicy,
          class _PopulationIterator,
          class _PopulationSentinel,
          class _SampleIterator,
          class _Distance,
          class _UniformRandomNumberGenerator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _SampleIterator __sample(
    _PopulationIterator __first,
    _PopulationSentinel __last,
    _SampleIterator __output_iter,
    _Distance __n,
    _UniformRandomNumberGenerator& __g,
    input_iterator_tag) {
  _Distance __k = 0;
  for (; __first != __last && __k < __n; ++__first, (void)++__k)
    __output_iter[__k] = *__first;
  _Distance __sz = __k;
  for (; __first != __last; ++__first, (void)++__k) {
    _Distance __r = uniform_int_distribution<_Distance>(0, __k)(__g);
    if (__r < __sz)
      __output_iter[__r] = *__first;
  }
  return __output_iter + std::min(__n, __k);
}

template <class _AlgPolicy,
          class _PopulationIterator,
          class _PopulationSentinel,
          class _SampleIterator,
          class _Distance,
          class _UniformRandomNumberGenerator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _SampleIterator __sample(
    _PopulationIterator __first,
    _PopulationSentinel __last,
    _SampleIterator __output_iter,
    _Distance __n,
    _UniformRandomNumberGenerator& __g,
    forward_iterator_tag) {
  _Distance __unsampled_sz = _IterOps<_AlgPolicy>::distance(__first, __last);
  for (__n = std::min(__n, __unsampled_sz); __n != 0; ++__first) {
    _Distance __r = uniform_int_distribution<_Distance>(0, --__unsampled_sz)(__g);
    if (__r < __n) {
      *__output_iter++ = *__first;
      --__n;
    }
  }
  return __output_iter;
}

template <class _AlgPolicy,
          class _PopulationIterator,
          class _PopulationSentinel,
          class _SampleIterator,
          class _Distance,
          class _UniformRandomNumberGenerator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _SampleIterator __sample(
    _PopulationIterator __first,
    _PopulationSentinel __last,
    _SampleIterator __output_iter,
    _Distance __n,
    _UniformRandomNumberGenerator& __g) {
  ((void)0);

  using _PopIterCategory = typename _IterOps<_AlgPolicy>::template __iterator_category<_PopulationIterator>;
  using _Difference = typename _IterOps<_AlgPolicy>::template __difference_type<_PopulationIterator>;
  using _CommonType = typename common_type<_Distance, _Difference>::type;

  return std::__sample<_AlgPolicy>(
      std::move(__first), std::move(__last), std::move(__output_iter), _CommonType(__n), __g, _PopIterCategory());
}


template <class _PopulationIterator, class _SampleIterator, class _Distance, class _UniformRandomNumberGenerator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _SampleIterator
sample(_PopulationIterator __first,
       _PopulationIterator __last,
       _SampleIterator __output_iter,
       _Distance __n,
       _UniformRandomNumberGenerator&& __g) {
  static_assert(__has_forward_iterator_category<_PopulationIterator>::value ||
                    __has_random_access_iterator_category<_SampleIterator>::value,
                "SampleIterator must meet the requirements of RandomAccessIterator");

  return std::__sample<_ClassicAlgPolicy>(std::move(__first), std::move(__last), std::move(__output_iter), __n, __g);
}



}}
# 119 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/sample.h" 3
#pragma clang diagnostic pop
# 1912 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 2030 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 3








# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bit" 1 3
# 88 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bit" 3
# 2039 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/algorithm" 2 3
# 942 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string_view" 2 3
# 648 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3
# 669 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 673 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 2 3
# 685 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
#pragma clang diagnostic push
# 685 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 685 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 685 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 685 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 685 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 685 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _CharT, class _Traits, class _Allocator>
basic_string<_CharT, _Traits, _Allocator> __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, const basic_string<_CharT, _Traits, _Allocator>& __y);

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) basic_string<_CharT, _Traits, _Allocator>
operator+(const _CharT* __x, const basic_string<_CharT, _Traits, _Allocator>& __y);

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, _Allocator>
operator+(_CharT __x, const basic_string<_CharT, _Traits, _Allocator>& __y);

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, _Allocator>
operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, const _CharT* __y);

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, _Allocator>
operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, _CharT __y);
# 731 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
extern template __attribute__((__visibility__("default"))) string operator+
    <char, char_traits<char>, allocator<char> >(char const*, string const&);

template <class _Iter>
struct __string_is_trivial_iterator : public false_type {};

template <class _Tp>
struct __string_is_trivial_iterator<_Tp*> : public is_arithmetic<_Tp> {};

template <class _Iter>
struct __string_is_trivial_iterator<__wrap_iter<_Iter> > : public __string_is_trivial_iterator<_Iter> {};

template <class _CharT, class _Traits, class _Tp>
struct __can_be_converted_to_string_view
    : public _BoolConstant< is_convertible<const _Tp&, basic_string_view<_CharT, _Traits> >::value &&
                            !is_convertible<const _Tp&, const _CharT*>::value > {};

struct __uninitialized_size_tag {};
struct __init_with_sentinel_tag {};

template <class _CharT, class _Traits, class _Allocator>
class basic_string {
private:
  using __default_allocator_type = allocator<_CharT>;

public:
  typedef basic_string __self;
  typedef basic_string_view<_CharT, _Traits> __self_view;
  typedef _Traits traits_type;
  typedef _CharT value_type;
  typedef _Allocator allocator_type;
  typedef allocator_traits<allocator_type> __alloc_traits;
  typedef typename __alloc_traits::size_type size_type;
  typedef typename __alloc_traits::difference_type difference_type;
  typedef value_type& reference;
  typedef const value_type& const_reference;
  typedef typename __alloc_traits::pointer pointer;
  typedef typename __alloc_traits::const_pointer const_pointer;
# 788 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
  using __trivially_relocatable = __conditional_t<
      __libcpp_is_trivially_relocatable<allocator_type>::value && __libcpp_is_trivially_relocatable<pointer>::value,
      basic_string,
      void>;
# 817 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
  static_assert(!is_array<value_type>::value, "Character type of basic_string must not be an array");
  static_assert(is_standard_layout<value_type>::value, "Character type of basic_string must be standard-layout");
  static_assert(is_trivial<value_type>::value, "Character type of basic_string must be trivial");
  static_assert(is_same<_CharT, typename traits_type::char_type>::value,
                "traits_type::char_type must be the same type as CharT");
  static_assert(is_same<typename allocator_type::value_type, value_type>::value,
                "Allocator::value_type must be same type as value_type");
  static_assert(__check_valid_allocator<allocator_type>::value, "");
# 833 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
  typedef __wrap_iter<pointer> iterator;
  typedef __wrap_iter<const_pointer> const_iterator;

  typedef std::reverse_iterator<iterator> reverse_iterator;
  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

private:
  static_assert(8 == 8, "This implementation assumes that one byte contains 8 bits");
# 884 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
  static const size_type __endian_factor = 2;






  struct __long {
    struct __attribute__((__packed__)) {
      size_type __is_long_ : 1;
      size_type __cap_ : sizeof(size_type) * 8 - 1;
    };
    size_type __size_;
    pointer __data_;
  };

  enum { __min_cap = (sizeof(__long) - 1) / sizeof(value_type) > 2 ? (sizeof(__long) - 1) / sizeof(value_type) : 2 };

  struct __short {
    struct __attribute__((__packed__)) {
      unsigned char __is_long_ : 1;
      unsigned char __size_ : 7;
    };
    char __padding_[sizeof(value_type) - 1];
    value_type __data_[__min_cap];
  };



  static_assert(sizeof(__short) == (sizeof(value_type) * (__min_cap + 1)), "__short has an unexpected size.");

  union __rep {
    __short __s;
    __long __l;
  };

  __compressed_pair<__rep, allocator_type> __r_;




  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit basic_string(
      __uninitialized_size_tag, size_type __size, const allocator_type& __a)
      : __r_(__default_init_tag(), __a) {
    if (__size > max_size())
      __throw_length_error();
    if (__fits_in_sso(__size)) {
      __r_.first() = __rep();
      __set_short_size(__size);
    } else {
      auto __capacity = __recommend(__size) + 1;
      auto __allocation = __alloc_traits::allocate(__alloc(), __capacity);
      __begin_lifetime(__allocation, __capacity);
      __set_long_cap(__capacity);
      __set_long_pointer(__allocation);
      __set_long_size(__size);
    }
    __annotate_new(__size);
  }

  template <class _Iter, class _Sent>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  basic_string(__init_with_sentinel_tag, _Iter __first, _Sent __last, const allocator_type& __a)
      : __r_(__default_init_tag(), __a) {
    __init_with_sentinel(std::move(__first), std::move(__last));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __make_iterator(pointer __p) {
# 964 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
    return iterator(__p);

  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator __make_const_iterator(const_pointer __p) const {







    return const_iterator(__p);

  }

public:
  __attribute__((__visibility__("default"))) static const size_type npos = -1;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string()
      noexcept(is_nothrow_default_constructible<allocator_type>::value)
      : __r_(__value_init_tag(), __default_init_tag()) {
    __annotate_new(0);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit basic_string(const allocator_type& __a)



      noexcept

      : __r_(__value_init_tag(), __a) {
    __annotate_new(0);
  }

                                                                      basic_string(const basic_string& __str)
      : __r_(__default_init_tag(), __alloc_traits::select_on_container_copy_construction(__str.__alloc())) {
    if (!__str.__is_long()) {
      __r_.first() = __str.__r_.first();
      __annotate_new(__get_short_size());
    } else
      __init_copy_ctor_external(std::__to_address(__str.__get_long_pointer()), __str.__get_long_size());
  }


  basic_string(const basic_string& __str, const allocator_type& __a)
      : __r_(__default_init_tag(), __a) {
    if (!__str.__is_long()) {
      __r_.first() = __str.__r_.first();
      __annotate_new(__get_short_size());
    } else
      __init_copy_ctor_external(std::__to_address(__str.__get_long_pointer()), __str.__get_long_size());
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string(basic_string&& __str)



      noexcept




      : __r_([](basic_string& __s) -> decltype(__s.__r_)&& {
          if (!__s.__is_long())
            __s.__annotate_delete();
          return std::move(__s.__r_);
        }(__str)) {
    __str.__r_.first() = __rep();
    __str.__annotate_new(0);
    if (!__is_long())
      __annotate_new(size());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string(basic_string&& __str, const allocator_type& __a)
      : __r_(__default_init_tag(), __a) {
    if (__str.__is_long() && __a != __str.__alloc())
      __init(std::__to_address(__str.__get_long_pointer()), __str.__get_long_size());
    else {
      if (__libcpp_is_constant_evaluated())
        __r_.first() = __rep();
      if (!__str.__is_long())
        __str.__annotate_delete();
      __r_.first() = __str.__r_.first();
      __str.__r_.first() = __rep();
      __str.__annotate_new(0);
      if (!__is_long() && this != &__str)
        __annotate_new(size());
    }
  }


  template <__enable_if_t<__is_allocator<_Allocator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string(const _CharT* __s)
      : __r_(__default_init_tag(), __default_init_tag()) {
    ((void)0);
    __init(__s, traits_type::length(__s));
  }

  template <__enable_if_t<__is_allocator<_Allocator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string(const _CharT* __s, const _Allocator& __a)
      : __r_(__default_init_tag(), __a) {
    ((void)0);
    __init(__s, traits_type::length(__s));
  }





  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string(const _CharT* __s, size_type __n)
      : __r_(__default_init_tag(), __default_init_tag()) {
    ((void)0);
    __init(__s, __n);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  basic_string(const _CharT* __s, size_type __n, const _Allocator& __a)
      : __r_(__default_init_tag(), __a) {
    ((void)0);
    __init(__s, __n);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string(size_type __n, _CharT __c)
      : __r_(__default_init_tag(), __default_init_tag()) {
    __init(__n, __c);
  }
# 1114 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
  template <__enable_if_t<__is_allocator<_Allocator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string(size_type __n, _CharT __c, const _Allocator& __a)
      : __r_(__default_init_tag(), __a) {
    __init(__n, __c);
  }


  basic_string(const basic_string& __str, size_type __pos, size_type __n, const _Allocator& __a = _Allocator())
      : __r_(__default_init_tag(), __a) {
    size_type __str_sz = __str.size();
    if (__pos > __str_sz)
      __throw_out_of_range();
    __init(__str.data() + __pos, std::min(__n, __str_sz - __pos));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  basic_string(const basic_string& __str, size_type __pos, const _Allocator& __a = _Allocator())
      : __r_(__default_init_tag(), __a) {
    size_type __str_sz = __str.size();
    if (__pos > __str_sz)
      __throw_out_of_range();
    __init(__str.data() + __pos, __str_sz - __pos);
  }

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden")))
  basic_string(const _Tp& __t, size_type __pos, size_type __n, const allocator_type& __a = allocator_type())
      : __r_(__default_init_tag(), __a) {
    __self_view __sv0 = __t;
    __self_view __sv = __sv0.substr(__pos, __n);
    __init(__sv.data(), __sv.size());
  }

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden"))) explicit basic_string(const _Tp& __t)
      : __r_(__default_init_tag(), __default_init_tag()) {
    __self_view __sv = __t;
    __init(__sv.data(), __sv.size());
  }

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden")))
                                explicit basic_string(const _Tp& __t, const allocator_type& __a)
      : __r_(__default_init_tag(), __a) {
    __self_view __sv = __t;
    __init(__sv.data(), __sv.size());
  }

  template <class _InputIterator, __enable_if_t<__has_input_iterator_category<_InputIterator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string(_InputIterator __first, _InputIterator __last)
      : __r_(__default_init_tag(), __default_init_tag()) {
    __init(__first, __last);
  }

  template <class _InputIterator, __enable_if_t<__has_input_iterator_category<_InputIterator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  basic_string(_InputIterator __first, _InputIterator __last, const allocator_type& __a)
      : __r_(__default_init_tag(), __a) {
    __init(__first, __last);
  }
# 1198 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string(initializer_list<_CharT> __il)
      : __r_(__default_init_tag(), __default_init_tag()) {
    __init(__il.begin(), __il.end());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string(initializer_list<_CharT> __il, const _Allocator& __a)
      : __r_(__default_init_tag(), __a) {
    __init(__il.begin(), __il.end());
  }


  inline ~basic_string() {
    __annotate_delete();
    if (__is_long())
      __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) operator __self_view() const noexcept {
    return __self_view(data(), size());
  }

                                                                      basic_string&
  operator=(const basic_string& __str);

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
                                basic_string& operator=(const _Tp& __t) {
    __self_view __sv = __t;
    return assign(__sv);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string&
  operator=(basic_string&& __str) noexcept(__noexcept_move_assign_container<_Allocator, __alloc_traits>::value) {
    __move_assign(__str, integral_constant<bool, __alloc_traits::propagate_on_container_move_assignment::value>());
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string& operator=(initializer_list<value_type> __il) {
    return assign(__il.begin(), __il.size());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string& operator=(const value_type* __s) {
    return assign(__s);
  }



                                basic_string& operator=(value_type __c);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator begin() noexcept {
    return __make_iterator(__get_pointer());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator begin() const noexcept {
    return __make_const_iterator(__get_pointer());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator end() noexcept {
    return __make_iterator(__get_pointer() + size());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator end() const noexcept {
    return __make_const_iterator(__get_pointer() + size());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reverse_iterator rbegin() noexcept {
    return reverse_iterator(end());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator rbegin() const noexcept {
    return const_reverse_iterator(end());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reverse_iterator rend() noexcept {
    return reverse_iterator(begin());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator rend() const noexcept {
    return const_reverse_iterator(begin());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator cbegin() const noexcept { return begin(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator cend() const noexcept { return end(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator crbegin() const noexcept {
    return rbegin();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator crend() const noexcept { return rend(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type size() const noexcept {
    return __is_long() ? __get_long_size() : __get_short_size();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type length() const noexcept { return size(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type max_size() const noexcept {
    size_type __m = __alloc_traits::max_size(__alloc());
    if (__m <= std::numeric_limits<size_type>::max() / 2) {
      return __m - __alignment;
    } else {
      bool __uses_lsb = __endian_factor == 2;
      return __uses_lsb ? __m - __alignment : (__m / 2) - __alignment;
    }
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type capacity() const noexcept {
    return (__is_long() ? __get_long_cap() : static_cast<size_type>(__min_cap)) - 1;
  }

                                void resize(size_type __n, value_type __c);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void resize(size_type __n) { resize(__n, value_type()); }

                                void reserve(size_type __requested_capacity);
# 1315 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __resize_default_init(size_type __n);


                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reserve() noexcept { shrink_to_fit(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void shrink_to_fit() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void clear() noexcept;

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool empty() const noexcept {
    return size() == 0;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference operator[](size_type __pos) const noexcept {
    ((void)0);
    if (__builtin_constant_p(__pos) && !__fits_in_sso(__pos)) {
      return *(__get_long_pointer() + __pos);
    }
    return *(data() + __pos);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference operator[](size_type __pos) noexcept {
    ((void)0);
    if (__builtin_constant_p(__pos) && !__fits_in_sso(__pos)) {
      return *(__get_long_pointer() + __pos);
    }
    return *(__get_pointer() + __pos);
  }

                                const_reference at(size_type __n) const;
                                reference at(size_type __n);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string& operator+=(const basic_string& __str) {
    return append(__str);
  }

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string >::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  operator+=(const _Tp& __t) {
    __self_view __sv = __t;
    return append(__sv);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string& operator+=(const value_type* __s) {
    return append(__s);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string& operator+=(value_type __c) {
    push_back(__c);
    return *this;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string& operator+=(initializer_list<value_type> __il) {
    return append(__il);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string& append(const basic_string& __str) {
    return append(__str.data(), __str.size());
  }

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  append(const _Tp& __t) {
    __self_view __sv = __t;
    return append(__sv.data(), __sv.size());
  }

                                basic_string& append(const basic_string& __str, size_type __pos, size_type __n = npos);

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden")))

  basic_string&
  append(const _Tp& __t, size_type __pos, size_type __n = npos);

                                basic_string& append(const value_type* __s, size_type __n);
                                basic_string& append(const value_type* __s);
                                basic_string& append(size_type __n, value_type __c);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __append_default_init(size_type __n);

  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string&
  append(_InputIterator __first, _InputIterator __last) {
    const basic_string __temp(__first, __last, __alloc());
    append(__temp.data(), __temp.size());
    return *this;
  }

  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string&
  append(_ForwardIterator __first, _ForwardIterator __last);
# 1427 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string& append(initializer_list<value_type> __il) {
    return append(__il.begin(), __il.size());
  }


                                void push_back(value_type __c);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void pop_back();

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference front() noexcept {
    ((void)0);
    return *__get_pointer();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference front() const noexcept {
    ((void)0);
    return *data();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference back() noexcept {
    ((void)0);
    return *(__get_pointer() + size() - 1);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference back() const noexcept {
    ((void)0);
    return *(data() + size() - 1);
  }

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  assign(const _Tp& __t) {
    __self_view __sv = __t;
    return assign(__sv.data(), __sv.size());
  }
# 1485 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string& assign(const basic_string& __str) {
    return *this = __str;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string&
  assign(basic_string&& __str) noexcept(__noexcept_move_assign_container<_Allocator, __alloc_traits>::value) {
    *this = std::move(__str);
    return *this;
  }

                                basic_string& assign(const basic_string& __str, size_type __pos, size_type __n = npos);

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  assign(const _Tp& __t, size_type __pos, size_type __n = npos);

                                basic_string& assign(const value_type* __s, size_type __n);
                                basic_string& assign(const value_type* __s);
                                basic_string& assign(size_type __n, value_type __c);
  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  assign(_InputIterator __first, _InputIterator __last);

  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  assign(_ForwardIterator __first, _ForwardIterator __last);
# 1532 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string& assign(initializer_list<value_type> __il) {
    return assign(__il.begin(), __il.size());
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string&
  insert(size_type __pos1, const basic_string& __str) {
    return insert(__pos1, __str.data(), __str.size());
  }

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  insert(size_type __pos1, const _Tp& __t) {
    __self_view __sv = __t;
    return insert(__pos1, __sv.data(), __sv.size());
  }

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  insert(size_type __pos1, const _Tp& __t, size_type __pos2, size_type __n = npos);

                                basic_string&
  insert(size_type __pos1, const basic_string& __str, size_type __pos2, size_type __n = npos);
                                basic_string& insert(size_type __pos, const value_type* __s, size_type __n);
                                basic_string& insert(size_type __pos, const value_type* __s);
                                basic_string& insert(size_type __pos, size_type __n, value_type __c);
                                iterator insert(const_iterator __pos, value_type __c);
# 1577 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator
  insert(const_iterator __pos, size_type __n, value_type __c) {
    difference_type __p = __pos - begin();
    insert(static_cast<size_type>(__p), __n, __c);
    return begin() + __p;
  }

  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) iterator
  insert(const_iterator __pos, _InputIterator __first, _InputIterator __last);

  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) iterator
  insert(const_iterator __pos, _ForwardIterator __first, _ForwardIterator __last);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator
  insert(const_iterator __pos, initializer_list<value_type> __il) {
    return insert(__pos, __il.begin(), __il.end());
  }


                                basic_string& erase(size_type __pos = 0, size_type __n = npos);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator erase(const_iterator __pos);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator erase(const_iterator __first, const_iterator __last);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string&
  replace(size_type __pos1, size_type __n1, const basic_string& __str) {
    return replace(__pos1, __n1, __str.data(), __str.size());
  }

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  replace(size_type __pos1, size_type __n1, const _Tp& __t) {
    __self_view __sv = __t;
    return replace(__pos1, __n1, __sv.data(), __sv.size());
  }

                                basic_string&
  replace(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2 = npos);

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  replace(size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2 = npos);

                                basic_string&
  replace(size_type __pos, size_type __n1, const value_type* __s, size_type __n2);
                                basic_string& replace(size_type __pos, size_type __n1, const value_type* __s);
                                basic_string& replace(size_type __pos, size_type __n1, size_type __n2, value_type __c);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string&
  replace(const_iterator __i1, const_iterator __i2, const basic_string& __str) {
    return replace(
        static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __str.data(), __str.size());
  }

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  replace(const_iterator __i1, const_iterator __i2, const _Tp& __t) {
    __self_view __sv = __t;
    return replace(__i1 - begin(), __i2 - __i1, __sv);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string&
  replace(const_iterator __i1, const_iterator __i2, const value_type* __s, size_type __n) {
    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __s, __n);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string&
  replace(const_iterator __i1, const_iterator __i2, const value_type* __s) {
    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __s);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string&
  replace(const_iterator __i1, const_iterator __i2, size_type __n, value_type __c) {
    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __n, __c);
  }

  template <class _InputIterator, __enable_if_t<__has_input_iterator_category<_InputIterator>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) basic_string&
  replace(const_iterator __i1, const_iterator __i2, _InputIterator __j1, _InputIterator __j2);
# 1672 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string&
  replace(const_iterator __i1, const_iterator __i2, initializer_list<value_type> __il) {
    return replace(__i1, __i2, __il.begin(), __il.end());
  }


                                size_type copy(value_type* __s, size_type __n, size_type __pos = 0) const;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string
  substr(size_type __pos = 0, size_type __n = npos) const {
    return basic_string(*this, __pos, __n);
  }
# 1695 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(basic_string& __str)

      noexcept;




  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const value_type* c_str() const noexcept { return data(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const value_type* data() const noexcept {
    return std::__to_address(__get_pointer());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) value_type* data() noexcept {
    return std::__to_address(__get_pointer());
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) allocator_type get_allocator() const noexcept {
    return __alloc();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find(const basic_string& __str, size_type __pos = 0) const noexcept;

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) size_type
  find(const _Tp& __t, size_type __pos = 0) const noexcept;

                                size_type find(const value_type* __s, size_type __pos, size_type __n) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find(const value_type* __s, size_type __pos = 0) const noexcept;
                                size_type find(value_type __c, size_type __pos = 0) const noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  rfind(const basic_string& __str, size_type __pos = npos) const noexcept;

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) size_type
  rfind(const _Tp& __t, size_type __pos = npos) const noexcept;

                                size_type rfind(const value_type* __s, size_type __pos, size_type __n) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  rfind(const value_type* __s, size_type __pos = npos) const noexcept;
                                size_type rfind(value_type __c, size_type __pos = npos) const noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_first_of(const basic_string& __str, size_type __pos = 0) const noexcept;

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) size_type
  find_first_of(const _Tp& __t, size_type __pos = 0) const noexcept;

                                size_type
  find_first_of(const value_type* __s, size_type __pos, size_type __n) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_first_of(const value_type* __s, size_type __pos = 0) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_first_of(value_type __c, size_type __pos = 0) const noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_last_of(const basic_string& __str, size_type __pos = npos) const noexcept;

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) size_type
  find_last_of(const _Tp& __t, size_type __pos = npos) const noexcept;

                                size_type
  find_last_of(const value_type* __s, size_type __pos, size_type __n) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_last_of(const value_type* __s, size_type __pos = npos) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_last_of(value_type __c, size_type __pos = npos) const noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_first_not_of(const basic_string& __str, size_type __pos = 0) const noexcept;

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) size_type
  find_first_not_of(const _Tp& __t, size_type __pos = 0) const noexcept;

                                size_type
  find_first_not_of(const value_type* __s, size_type __pos, size_type __n) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_first_not_of(const value_type* __s, size_type __pos = 0) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_first_not_of(value_type __c, size_type __pos = 0) const noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_last_not_of(const basic_string& __str, size_type __pos = npos) const noexcept;

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) size_type
  find_last_not_of(const _Tp& __t, size_type __pos = npos) const noexcept;

                                size_type
  find_last_not_of(const value_type* __s, size_type __pos, size_type __n) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_last_not_of(const value_type* __s, size_type __pos = npos) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  find_last_not_of(value_type __c, size_type __pos = npos) const noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int compare(const basic_string& __str) const noexcept;

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) int
  compare(const _Tp& __t) const noexcept;

  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
  inline __attribute__((__visibility__("hidden"))) int
  compare(size_type __pos1, size_type __n1, const _Tp& __t) const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int
  compare(size_type __pos1, size_type __n1, const basic_string& __str) const;
                                int
  compare(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2 = npos) const;

  template <class _Tp,
            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                              !__is_same_uncvref<_Tp, basic_string>::value,
                          int> = 0>
  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int
  compare(size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2 = npos) const;

                                int compare(const value_type* __s) const noexcept;
                                int compare(size_type __pos1, size_type __n1, const value_type* __s) const;
                                int
  compare(size_type __pos1, size_type __n1, const value_type* __s, size_type __n2) const;
# 1863 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __invariants() const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __clear_and_shrink() noexcept;

private:
  template <class _Alloc>
  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool friend
  operator==(const basic_string<char, char_traits<char>, _Alloc>& __lhs,
             const basic_string<char, char_traits<char>, _Alloc>& __rhs) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __shrink_or_extend(size_type __target_capacity);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  __is_long() const noexcept {
    if (__libcpp_is_constant_evaluated() && __builtin_constant_p(__r_.first().__l.__is_long_)) {
      return __r_.first().__l.__is_long_;
    }
    return __r_.first().__s.__is_long_;
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __begin_lifetime(pointer __begin, size_type __n) {






    (void)__begin;
    (void)__n;

  }

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static bool __fits_in_sso(size_type __sz) { return __sz < __min_cap; }

  template <class _Iterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __assign_trivial(_Iterator __first, _Sentinel __last, size_type __n);

  template <class _Iterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __assign_with_sentinel(_Iterator __first, _Sentinel __last);


  template <class _ForwardIter, class _Sent>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr static value_type*
  __copy_non_overlapping_range(_ForwardIter __first, _Sent __last, value_type* __dest) {

    if constexpr (__libcpp_is_contiguous_iterator<_ForwardIter>::value &&
                  is_same<value_type, __iter_value_type<_ForwardIter>>::value && is_same<_ForwardIter, _Sent>::value) {
      traits_type::copy(__dest, std::__to_address(__first), __last - __first);
      return __dest + (__last - __first);
    }


    for (; __first != __last; ++__first)
      traits_type::assign(*__dest++, *__first);
    return __dest;
  }

  template <class _ForwardIterator, class _Sentinel>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr iterator
  __insert_from_safe_copy(size_type __n, size_type __ip, _ForwardIterator __first, _Sentinel __last) {
    size_type __sz = size();
    size_type __cap = capacity();
    value_type* __p;
    if (__cap - __sz >= __n) {
      __annotate_increase(__n);
      __p = std::__to_address(__get_pointer());
      size_type __n_move = __sz - __ip;
      if (__n_move != 0)
        traits_type::move(__p + __ip + __n, __p + __ip, __n_move);
    } else {
      __grow_by_without_replace(__cap, __sz + __n - __cap, __sz, __ip, 0, __n);
      __p = std::__to_address(__get_long_pointer());
    }
    __sz += __n;
    __set_size(__sz);
    traits_type::assign(__p[__sz], value_type());
    __copy_non_overlapping_range(__first, __last, __p + __ip);

    return begin() + __ip;
  }

  template <class _Iterator, class _Sentinel>
                                iterator
  __insert_with_size(const_iterator __pos, _Iterator __first, _Sentinel __last, size_type __n);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr allocator_type& __alloc() noexcept { return __r_.second(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const allocator_type& __alloc() const noexcept { return __r_.second(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __set_short_size(size_type __s) noexcept {
    ((void)0);
    __r_.first().__s.__size_ = __s;
    __r_.first().__s.__is_long_ = false;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type
  __get_short_size() const noexcept {
    ((void)0);
    return __r_.first().__s.__size_;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __set_long_size(size_type __s) noexcept {
    __r_.first().__l.__size_ = __s;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __get_long_size() const noexcept {
    return __r_.first().__l.__size_;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __set_size(size_type __s) noexcept {
    if (__is_long())
      __set_long_size(__s);
    else
      __set_short_size(__s);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __set_long_cap(size_type __s) noexcept {
    __r_.first().__l.__cap_ = __s / __endian_factor;
    __r_.first().__l.__is_long_ = true;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __get_long_cap() const noexcept {
    return __r_.first().__l.__cap_ * __endian_factor;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __set_long_pointer(pointer __p) noexcept {
    __r_.first().__l.__data_ = __p;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer __get_long_pointer() noexcept {
    return __r_.first().__l.__data_;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_pointer __get_long_pointer() const noexcept {
    return __r_.first().__l.__data_;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer
  __get_short_pointer() noexcept {
    return pointer_traits<pointer>::pointer_to(__r_.first().__s.__data_[0]);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_pointer
  __get_short_pointer() const noexcept {
    return pointer_traits<const_pointer>::pointer_to(__r_.first().__s.__data_[0]);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer __get_pointer() noexcept {
    return __is_long() ? __get_long_pointer() : __get_short_pointer();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_pointer __get_pointer() const noexcept {
    return __is_long() ? __get_long_pointer() : __get_short_pointer();
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __annotate_contiguous_container(const void* __old_mid, const void* __new_mid) const {
    (void)__old_mid;
    (void)__new_mid;
# 2024 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_new(size_type __current_size) const noexcept {
    (void)__current_size;




  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_delete() const noexcept {




  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_increase(size_type __n) const noexcept {
    (void)__n;




  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_shrink(size_type __old_size) const noexcept {
    (void)__old_size;




  }

  template <size_type __a>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __align_it(size_type __s) noexcept {
    return (__s + (__a - 1)) & ~(__a - 1);
  }
  enum { __alignment = 8 };
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __recommend(size_type __s) noexcept {
    if (__s < __min_cap) {
      return static_cast<size_type>(__min_cap) - 1;
    }
    const size_type __boundary = sizeof(value_type) < __alignment ? __alignment / sizeof(value_type) : __endian_factor;
    size_type __guess = __align_it<__boundary>(__s + 1) - 1;
    if (__guess == __min_cap)
      __guess += __endian_factor;
    return __guess;
  }

  inline void __init(const value_type* __s, size_type __sz, size_type __reserve);
  inline void __init(const value_type* __s, size_type __sz);
  inline void __init(size_type __n, value_type __c);
# 2085 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
                                __attribute__((__noinline__)) void __init_copy_ctor_external(const value_type* __s, size_type __sz);

  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
  inline void __init(_InputIterator __first, _InputIterator __last);

  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  inline void __init(_ForwardIterator __first, _ForwardIterator __last);

  template <class _InputIterator, class _Sentinel>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __init_with_sentinel(_InputIterator __first, _Sentinel __last);
  template <class _InputIterator, class _Sentinel>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __init_with_size(_InputIterator __first, _Sentinel __last, size_type __sz);





  __attribute__((__deprecated__("use __grow_by_without_replace"))) void __grow_by(
      size_type __old_cap,
      size_type __delta_cap,
      size_type __old_sz,
      size_type __n_copy,
      size_type __n_del,
      size_type __n_add = 0);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __grow_by_without_replace(
      size_type __old_cap,
      size_type __delta_cap,
      size_type __old_sz,
      size_type __n_copy,
      size_type __n_del,
      size_type __n_add = 0);
                                void __grow_by_and_replace(
      size_type __old_cap,
      size_type __delta_cap,
      size_type __old_sz,
      size_type __n_copy,
      size_type __n_del,
      size_type __n_add,
      const value_type* __p_new_stuff);




  template <bool __is_short>
                                __attribute__((__noinline__)) basic_string& __assign_no_alias(const value_type* __s, size_type __n);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __erase_to_end(size_type __pos) {
    __null_terminate_at(std::__to_address(__get_pointer()), __pos);
  }



                                __attribute__((__noinline__)) void __erase_external_with_move(size_type __pos, size_type __n);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __copy_assign_alloc(const basic_string& __str) {
    __copy_assign_alloc(
        __str, integral_constant<bool, __alloc_traits::propagate_on_container_copy_assignment::value>());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __copy_assign_alloc(const basic_string& __str, true_type) {
    if (__alloc() == __str.__alloc())
      __alloc() = __str.__alloc();
    else {
      if (!__str.__is_long()) {
        __clear_and_shrink();
        __alloc() = __str.__alloc();
      } else {
        __annotate_delete();
        allocator_type __a = __str.__alloc();
        auto __allocation = std::__allocate_at_least(__a, __str.__get_long_cap());
        __begin_lifetime(__allocation.ptr, __allocation.count);
        if (__is_long())
          __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
        __alloc() = std::move(__a);
        __set_long_pointer(__allocation.ptr);
        __set_long_cap(__allocation.count);
        __set_long_size(__str.size());
        __annotate_new(__get_long_size());
      }
    }
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __copy_assign_alloc(const basic_string&, false_type) noexcept {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __move_assign(basic_string& __str, false_type) noexcept(__alloc_traits::is_always_equal::value);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __move_assign(basic_string& __str, true_type)

      noexcept;





  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(basic_string& __str)
      noexcept(!__alloc_traits::propagate_on_container_move_assignment::value || is_nothrow_move_assignable<allocator_type>::value) {

    __move_assign_alloc(
        __str, integral_constant<bool, __alloc_traits::propagate_on_container_move_assignment::value>());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(basic_string& __c, true_type)
      noexcept(is_nothrow_move_assignable<allocator_type>::value) {
    __alloc() = std::move(__c.__alloc());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(basic_string&, false_type) noexcept {}

                                __attribute__((__noinline__)) basic_string& __assign_external(const value_type* __s);
                                __attribute__((__noinline__)) basic_string& __assign_external(const value_type* __s, size_type __n);


  inline basic_string& __assign_short(const value_type* __s, size_type __n) {
    size_type __old_size = size();
    if (__n > __old_size)
      __annotate_increase(__n - __old_size);
    pointer __p =
        __is_long() ? (__set_long_size(__n), __get_long_pointer()) : (__set_short_size(__n), __get_short_pointer());
    traits_type::move(std::__to_address(__p), __s, __n);
    traits_type::assign(__p[__n], value_type());
    if (__old_size > __n)
      __annotate_shrink(__old_size);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string&
  __null_terminate_at(value_type* __p, size_type __newsz) {
    size_type __old_size = size();
    if (__newsz > __old_size)
      __annotate_increase(__newsz - __old_size);
    __set_size(__newsz);
    traits_type::assign(__p[__newsz], value_type());
    if (__old_size > __newsz)
      __annotate_shrink(__old_size);
    return *this;
  }

  template <class _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __addr_in_range(const _Tp& __v) const {
    return std::__is_pointer_in_range(data(), data() + size() + 1, std::addressof(__v));
  }

  [[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_length_error() const {
    std::__throw_length_error("basic_string");
  }

  [[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_out_of_range() const {
    std::__throw_out_of_range("basic_string");
  }

  friend basic_string operator+ <>(const basic_string&, const basic_string&);
  friend basic_string operator+ <>(const value_type*, const basic_string&);
  friend basic_string operator+ <>(value_type, const basic_string&);
  friend basic_string operator+ <>(const basic_string&, const value_type*);
  friend basic_string operator+ <>(const basic_string&, value_type);




};
# 2260 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::replace(size_type, size_type, value_type const*, size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::rfind(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) void basic_string<char>::__init(value_type const*, size_type, size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>::basic_string(basic_string const&); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::replace(size_type, size_type, value_type const*); extern template __attribute__((__visibility__("default"))) basic_string<char>::basic_string(basic_string const&, allocator<char> const&); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::find_last_not_of(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<char>::~basic_string(); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::find_first_not_of(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::insert(size_type, size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::operator=(value_type); extern template __attribute__((__visibility__("default"))) void basic_string<char>::__init(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) const char& basic_string<char>::at(size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::insert(size_type, value_type const*, size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::find_first_of(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::replace(size_type, size_type, size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::assign(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) void basic_string<char>::reserve(size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::append(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::assign(basic_string const&, size_type, size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::copy(value_type*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<char>::basic_string(basic_string const&, size_type, size_type, allocator<char> const&); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::find(value_type, size_type) const; extern template __attribute__((__visibility__("default"))) void basic_string<char>::__init(size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::insert(size_type, value_type const*); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::find_last_of(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) void basic_string<char>::__grow_by(size_type, size_type, size_type, size_type, size_type, size_type); extern template __attribute__((__visibility__("default"))) void basic_string<char>::__grow_by_and_replace(size_type, size_type, size_type, size_type, size_type, size_type, value_type const*); extern template __attribute__((__visibility__("default"))) void basic_string<char>::push_back(value_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::append(size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::rfind(value_type, size_type) const; extern template __attribute__((__visibility__("default"))) const basic_string<char>::size_type basic_string<char>::npos; extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::assign(size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::erase(size_type, size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::append(basic_string const&, size_type, size_type); extern template __attribute__((__visibility__("default"))) int basic_string<char>::compare(value_type const*) const; extern template __attribute__((__visibility__("default"))) int basic_string<char>::compare(size_type, size_type, value_type const*) const; extern template __attribute__((__visibility__("default"))) char& basic_string<char>::at(size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::assign(value_type const*); extern template __attribute__((__visibility__("default"))) basic_string<char>::size_type basic_string<char>::find(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) int basic_string<char>::compare(size_type, size_type, basic_string const&, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) int basic_string<char>::compare(size_type, size_type, value_type const*, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::operator=(basic_string const&); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::append(value_type const*); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::replace(size_type, size_type, basic_string const&, size_type, size_type); extern template __attribute__((__visibility__("default"))) basic_string<char>::iterator basic_string<char>::insert(basic_string::const_iterator, value_type); extern template __attribute__((__visibility__("default"))) void basic_string<char>::resize(size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<char>& basic_string<char>::insert(size_type, basic_string const&, size_type, size_type);

extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::replace(size_type, size_type, value_type const*, size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::rfind(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::__init(value_type const*, size_type, size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::basic_string(basic_string const&); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::replace(size_type, size_type, value_type const*); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::basic_string(basic_string const&, allocator<wchar_t> const&); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::find_last_not_of(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::~basic_string(); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::find_first_not_of(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::insert(size_type, size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::operator=(value_type); extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::__init(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) const wchar_t& basic_string<wchar_t>::at(size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::insert(size_type, value_type const*, size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::find_first_of(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::replace(size_type, size_type, size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::assign(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::reserve(size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::append(value_type const*, size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::assign(basic_string const&, size_type, size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::copy(value_type*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::basic_string(basic_string const&, size_type, size_type, allocator<wchar_t> const&); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::find(value_type, size_type) const; extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::__init(size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::insert(size_type, value_type const*); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::find_last_of(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::__grow_by(size_type, size_type, size_type, size_type, size_type, size_type); extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::__grow_by_and_replace(size_type, size_type, size_type, size_type, size_type, size_type, value_type const*); extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::push_back(value_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::append(size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::rfind(value_type, size_type) const; extern template __attribute__((__visibility__("default"))) const basic_string<wchar_t>::size_type basic_string<wchar_t>::npos; extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::assign(size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::erase(size_type, size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::append(basic_string const&, size_type, size_type); extern template __attribute__((__visibility__("default"))) int basic_string<wchar_t>::compare(value_type const*) const; extern template __attribute__((__visibility__("default"))) int basic_string<wchar_t>::compare(size_type, size_type, value_type const*) const; extern template __attribute__((__visibility__("default"))) wchar_t& basic_string<wchar_t>::at(size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::assign(value_type const*); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::size_type basic_string<wchar_t>::find(value_type const*, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) int basic_string<wchar_t>::compare(size_type, size_type, basic_string const&, size_type, size_type) const; extern template __attribute__((__visibility__("default"))) int basic_string<wchar_t>::compare(size_type, size_type, value_type const*, size_type) const; extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::operator=(basic_string const&); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::append(value_type const*); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::replace(size_type, size_type, basic_string const&, size_type, size_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>::iterator basic_string<wchar_t>::insert(basic_string::const_iterator, value_type); extern template __attribute__((__visibility__("default"))) void basic_string<wchar_t>::resize(size_type, value_type); extern template __attribute__((__visibility__("default"))) basic_string<wchar_t>& basic_string<wchar_t>::insert(size_type, basic_string const&, size_type, size_type);





template <class _InputIterator,
          class _CharT = __iter_value_type<_InputIterator>,
          class _Allocator = allocator<_CharT>,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<__is_allocator<_Allocator>::value> >
basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())
    -> basic_string<_CharT, char_traits<_CharT>, _Allocator>;

template <class _CharT,
          class _Traits,
          class _Allocator = allocator<_CharT>,
          class = enable_if_t<__is_allocator<_Allocator>::value> >
explicit basic_string(basic_string_view<_CharT, _Traits>,
                      const _Allocator& = _Allocator()) -> basic_string<_CharT, _Traits, _Allocator>;

template <class _CharT,
          class _Traits,
          class _Allocator = allocator<_CharT>,
          class = enable_if_t<__is_allocator<_Allocator>::value>,
          class _Sz = typename allocator_traits<_Allocator>::size_type >
basic_string(basic_string_view<_CharT, _Traits>, _Sz, _Sz, const _Allocator& = _Allocator())
    -> basic_string<_CharT, _Traits, _Allocator>;
# 2300 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
template <class _CharT, class _Traits, class _Allocator>
                              void
basic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s, size_type __sz, size_type __reserve) {
  if (__libcpp_is_constant_evaluated())
    __r_.first() = __rep();
  if (__reserve > max_size())
    __throw_length_error();
  pointer __p;
  if (__fits_in_sso(__reserve)) {
    __set_short_size(__sz);
    __p = __get_short_pointer();
  } else {
    auto __allocation = std::__allocate_at_least(__alloc(), __recommend(__reserve) + 1);
    __p = __allocation.ptr;
    __begin_lifetime(__p, __allocation.count);
    __set_long_pointer(__p);
    __set_long_cap(__allocation.count);
    __set_long_size(__sz);
  }
  traits_type::copy(std::__to_address(__p), __s, __sz);
  traits_type::assign(__p[__sz], value_type());
  __annotate_new(__sz);
}

template <class _CharT, class _Traits, class _Allocator>
                              void
basic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s, size_type __sz) {
  if (__libcpp_is_constant_evaluated())
    __r_.first() = __rep();
  if (__sz > max_size())
    __throw_length_error();
  pointer __p;
  if (__fits_in_sso(__sz)) {
    __set_short_size(__sz);
    __p = __get_short_pointer();
  } else {
    auto __allocation = std::__allocate_at_least(__alloc(), __recommend(__sz) + 1);
    __p = __allocation.ptr;
    __begin_lifetime(__p, __allocation.count);
    __set_long_pointer(__p);
    __set_long_cap(__allocation.count);
    __set_long_size(__sz);
  }
  traits_type::copy(std::__to_address(__p), __s, __sz);
  traits_type::assign(__p[__sz], value_type());
  __annotate_new(__sz);
}

template <class _CharT, class _Traits, class _Allocator>
                              __attribute__((__noinline__)) void
basic_string<_CharT, _Traits, _Allocator>::__init_copy_ctor_external(const value_type* __s, size_type __sz) {
  if (__libcpp_is_constant_evaluated())
    __r_.first() = __rep();

  pointer __p;
  if (__fits_in_sso(__sz)) {
    __p = __get_short_pointer();
    __set_short_size(__sz);
  } else {
    if (__sz > max_size())
      __throw_length_error();
    auto __allocation = std::__allocate_at_least(__alloc(), __recommend(__sz) + 1);
    __p = __allocation.ptr;
    __begin_lifetime(__p, __allocation.count);
    __set_long_pointer(__p);
    __set_long_cap(__allocation.count);
    __set_long_size(__sz);
  }
  traits_type::copy(std::__to_address(__p), __s, __sz + 1);
  __annotate_new(__sz);
}

template <class _CharT, class _Traits, class _Allocator>
                              void basic_string<_CharT, _Traits, _Allocator>::__init(size_type __n, value_type __c) {
  if (__libcpp_is_constant_evaluated())
    __r_.first() = __rep();

  if (__n > max_size())
    __throw_length_error();
  pointer __p;
  if (__fits_in_sso(__n)) {
    __set_short_size(__n);
    __p = __get_short_pointer();
  } else {
    auto __allocation = std::__allocate_at_least(__alloc(), __recommend(__n) + 1);
    __p = __allocation.ptr;
    __begin_lifetime(__p, __allocation.count);
    __set_long_pointer(__p);
    __set_long_cap(__allocation.count);
    __set_long_size(__n);
  }
  traits_type::assign(std::__to_address(__p), __n, __c);
  traits_type::assign(__p[__n], value_type());
  __annotate_new(__n);
}

template <class _CharT, class _Traits, class _Allocator>
template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >
                              void
basic_string<_CharT, _Traits, _Allocator>::__init(_InputIterator __first, _InputIterator __last) {
  __init_with_sentinel(std::move(__first), std::move(__last));
}

template <class _CharT, class _Traits, class _Allocator>
template <class _InputIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
basic_string<_CharT, _Traits, _Allocator>::__init_with_sentinel(_InputIterator __first, _Sentinel __last) {
  __r_.first() = __rep();
  __annotate_new(0);


  try {

    for (; __first != __last; ++__first)
      push_back(*__first);

  } catch (...) {
    __annotate_delete();
    if (__is_long())
      __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
    throw;
  }

}

template <class _CharT, class _Traits, class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
                              void
basic_string<_CharT, _Traits, _Allocator>::__init(_ForwardIterator __first, _ForwardIterator __last) {
  size_type __sz = static_cast<size_type>(std::distance(__first, __last));
  __init_with_size(__first, __last, __sz);
}

template <class _CharT, class _Traits, class _Allocator>
template <class _InputIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
basic_string<_CharT, _Traits, _Allocator>::__init_with_size(_InputIterator __first, _Sentinel __last, size_type __sz) {
  if (__libcpp_is_constant_evaluated())
    __r_.first() = __rep();

  if (__sz > max_size())
    __throw_length_error();

  pointer __p;
  if (__fits_in_sso(__sz)) {
    __set_short_size(__sz);
    __p = __get_short_pointer();

  } else {
    auto __allocation = std::__allocate_at_least(__alloc(), __recommend(__sz) + 1);
    __p = __allocation.ptr;
    __begin_lifetime(__p, __allocation.count);
    __set_long_pointer(__p);
    __set_long_cap(__allocation.count);
    __set_long_size(__sz);
  }


  try {

    auto __end = __copy_non_overlapping_range(__first, __last, std::__to_address(__p));
    traits_type::assign(*__end, value_type());

  } catch (...) {
    if (__is_long())
      __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
    throw;
  }

  __annotate_new(__sz);
}

template <class _CharT, class _Traits, class _Allocator>
                              void basic_string<_CharT, _Traits, _Allocator>::__grow_by_and_replace(
    size_type __old_cap,
    size_type __delta_cap,
    size_type __old_sz,
    size_type __n_copy,
    size_type __n_del,
    size_type __n_add,
    const value_type* __p_new_stuff) {
  size_type __ms = max_size();
  if (__delta_cap > __ms - __old_cap - 1)
    __throw_length_error();
  pointer __old_p = __get_pointer();
  size_type __cap =
      __old_cap < __ms / 2 - __alignment ? __recommend(std::max(__old_cap + __delta_cap, 2 * __old_cap)) : __ms - 1;
  __annotate_delete();
  auto __allocation = std::__allocate_at_least(__alloc(), __cap + 1);
  pointer __p = __allocation.ptr;
  __begin_lifetime(__p, __allocation.count);
  if (__n_copy != 0)
    traits_type::copy(std::__to_address(__p), std::__to_address(__old_p), __n_copy);
  if (__n_add != 0)
    traits_type::copy(std::__to_address(__p) + __n_copy, __p_new_stuff, __n_add);
  size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;
  if (__sec_cp_sz != 0)
    traits_type::copy(
        std::__to_address(__p) + __n_copy + __n_add, std::__to_address(__old_p) + __n_copy + __n_del, __sec_cp_sz);
  if (__old_cap + 1 != __min_cap)
    __alloc_traits::deallocate(__alloc(), __old_p, __old_cap + 1);
  __set_long_pointer(__p);
  __set_long_cap(__allocation.count);
  __old_sz = __n_copy + __n_add + __sec_cp_sz;
  __set_long_size(__old_sz);
  traits_type::assign(__p[__old_sz], value_type());
  __annotate_new(__old_sz);
}




template <class _CharT, class _Traits, class _Allocator>
void



__attribute__((__deprecated__("use __grow_by_without_replace"))) basic_string<_CharT, _Traits, _Allocator>::__grow_by(
    size_type __old_cap,
    size_type __delta_cap,
    size_type __old_sz,
    size_type __n_copy,
    size_type __n_del,
    size_type __n_add) {
  size_type __ms = max_size();
  if (__delta_cap > __ms - __old_cap)
    __throw_length_error();
  pointer __old_p = __get_pointer();
  size_type __cap =
      __old_cap < __ms / 2 - __alignment ? __recommend(std::max(__old_cap + __delta_cap, 2 * __old_cap)) : __ms - 1;
  __annotate_delete();
  auto __allocation = std::__allocate_at_least(__alloc(), __cap + 1);
  pointer __p = __allocation.ptr;
  __begin_lifetime(__p, __allocation.count);
  if (__n_copy != 0)
    traits_type::copy(std::__to_address(__p), std::__to_address(__old_p), __n_copy);
  size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;
  if (__sec_cp_sz != 0)
    traits_type::copy(
        std::__to_address(__p) + __n_copy + __n_add, std::__to_address(__old_p) + __n_copy + __n_del, __sec_cp_sz);
  if (__old_cap + 1 != __min_cap)
    __alloc_traits::deallocate(__alloc(), __old_p, __old_cap + 1);
  __set_long_pointer(__p);
  __set_long_cap(__allocation.count);
}

template <class _CharT, class _Traits, class _Allocator>
void __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
basic_string<_CharT, _Traits, _Allocator>::__grow_by_without_replace(
    size_type __old_cap,
    size_type __delta_cap,
    size_type __old_sz,
    size_type __n_copy,
    size_type __n_del,
    size_type __n_add) {
#pragma GCC diagnostic push
# 2555 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 2555 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  __grow_by(__old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
#pragma GCC diagnostic pop
  __set_long_size(__old_sz - __n_del + __n_add);
  __annotate_new(__old_sz - __n_del + __n_add);
}



template <class _CharT, class _Traits, class _Allocator>
template <bool __is_short>
                              __attribute__((__noinline__)) basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::__assign_no_alias(const value_type* __s, size_type __n) {
  size_type __cap = __is_short ? static_cast<size_type>(__min_cap) : __get_long_cap();
  if (__n < __cap) {
    size_type __old_size = __is_short ? __get_short_size() : __get_long_size();
    if (__n > __old_size)
      __annotate_increase(__n - __old_size);
    pointer __p = __is_short ? __get_short_pointer() : __get_long_pointer();
    __is_short ? __set_short_size(__n) : __set_long_size(__n);
    traits_type::copy(std::__to_address(__p), __s, __n);
    traits_type::assign(__p[__n], value_type());
    if (__old_size > __n)
      __annotate_shrink(__old_size);
  } else {
    size_type __sz = __is_short ? __get_short_size() : __get_long_size();
    __grow_by_and_replace(__cap - 1, __n - __cap + 1, __sz, 0, __sz, __n, __s);
  }
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
                              __attribute__((__noinline__)) basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::__assign_external(const value_type* __s, size_type __n) {
  size_type __cap = capacity();
  if (__cap >= __n) {
    size_type __old_size = size();
    if (__n > __old_size)
      __annotate_increase(__n - __old_size);
    value_type* __p = std::__to_address(__get_pointer());
    traits_type::move(__p, __s, __n);
    return __null_terminate_at(__p, __n);
  } else {
    size_type __sz = size();
    __grow_by_and_replace(__cap, __n - __cap, __sz, 0, __sz, __n, __s);
    return *this;
  }
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::assign(const value_type* __s, size_type __n) {
  ((void)0);
  return (__builtin_constant_p(__n) && __fits_in_sso(__n)) ? __assign_short(__s, __n) : __assign_external(__s, __n);
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::assign(size_type __n, value_type __c) {
  size_type __cap = capacity();
  size_type __old_size = size();
  if (__cap < __n) {
    size_type __sz = size();
    __grow_by_without_replace(__cap, __n - __cap, __sz, 0, __sz);
    __annotate_increase(__n);
  } else if (__n > __old_size)
    __annotate_increase(__n - __old_size);
  value_type* __p = std::__to_address(__get_pointer());
  traits_type::assign(__p, __n, __c);
  return __null_terminate_at(__p, __n);
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::operator=(value_type __c) {
  pointer __p;
  size_type __old_size = size();
  if (__old_size == 0)
    __annotate_increase(1);
  if (__is_long()) {
    __p = __get_long_pointer();
    __set_long_size(1);
  } else {
    __p = __get_short_pointer();
    __set_short_size(1);
  }
  traits_type::assign(*__p, __c);
  traits_type::assign(*++__p, value_type());
  if (__old_size > 1)
    __annotate_shrink(__old_size);
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
                                                                    basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::operator=(const basic_string& __str) {
  if (this != std::addressof(__str)) {
    __copy_assign_alloc(__str);
    if (!__is_long()) {
      if (!__str.__is_long()) {
        size_type __old_size = __get_short_size();
        if (__get_short_size() < __str.__get_short_size())
          __annotate_increase(__str.__get_short_size() - __get_short_size());
        __r_.first() = __str.__r_.first();
        if (__old_size > __get_short_size())
          __annotate_shrink(__old_size);
      } else {
        return __assign_no_alias<true>(__str.data(), __str.size());
      }
    } else {
      return __assign_no_alias<false>(__str.data(), __str.size());
    }
  }
  return *this;
}



template <class _CharT, class _Traits, class _Allocator>
inline void basic_string<_CharT, _Traits, _Allocator>::__move_assign(
    basic_string& __str, false_type) noexcept(__alloc_traits::is_always_equal::value) {
  if (__alloc() != __str.__alloc())
    assign(__str);
  else
    __move_assign(__str, true_type());
}

template <class _CharT, class _Traits, class _Allocator>
inline void
basic_string<_CharT, _Traits, _Allocator>::__move_assign(basic_string& __str, true_type)

    noexcept



{
  __annotate_delete();
  if (__is_long()) {
    __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());







  }
  size_type __str_old_size = __str.size();
  bool __str_was_short = !__str.__is_long();

  __move_assign_alloc(__str);
  __r_.first() = __str.__r_.first();
  __str.__set_short_size(0);
  traits_type::assign(__str.__get_short_pointer()[0], value_type());

  if (__str_was_short && this != &__str)
    __str.__annotate_shrink(__str_old_size);
  else


    __str.__annotate_new(0);
# 2724 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
  if (!__is_long() && &__str != this)

    __annotate_new(__get_short_size());
}



template <class _CharT, class _Traits, class _Allocator>
template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::assign(_InputIterator __first, _InputIterator __last) {
  __assign_with_sentinel(__first, __last);
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
template <class _InputIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
basic_string<_CharT, _Traits, _Allocator>::__assign_with_sentinel(_InputIterator __first, _Sentinel __last) {
  const basic_string __temp(__init_with_sentinel_tag(), std::move(__first), std::move(__last), __alloc());
  assign(__temp.data(), __temp.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last) {
  if (__string_is_trivial_iterator<_ForwardIterator>::value) {
    size_type __n = static_cast<size_type>(std::distance(__first, __last));
    __assign_trivial(__first, __last, __n);
  } else {
    __assign_with_sentinel(__first, __last);
  }

  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Iterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
basic_string<_CharT, _Traits, _Allocator>::__assign_trivial(_Iterator __first, _Sentinel __last, size_type __n) {
  ((void)0);


  size_type __old_size = size();
  size_type __cap = capacity();
  if (__cap < __n) {






    size_type __sz = size();
    __grow_by_without_replace(__cap, __n - __cap, __sz, 0, __sz);
    __annotate_increase(__n);
  } else if (__n > __old_size)
    __annotate_increase(__n - __old_size);
  pointer __p = __get_pointer();
  for (; __first != __last; ++__p, (void)++__first)
    traits_type::assign(*__p, *__first);
  traits_type::assign(*__p, value_type());
  __set_size(__n);
  if (__n < __old_size)
    __annotate_shrink(__old_size);
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::assign(const basic_string& __str, size_type __pos, size_type __n) {
  size_type __sz = __str.size();
  if (__pos > __sz)
    __throw_out_of_range();
  return assign(__str.data() + __pos, std::min(__n, __sz - __pos));
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp,
          __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                            !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
                        int> >
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::assign(const _Tp& __t, size_type __pos, size_type __n) {
  __self_view __sv = __t;
  size_type __sz = __sv.size();
  if (__pos > __sz)
    __throw_out_of_range();
  return assign(__sv.data() + __pos, std::min(__n, __sz - __pos));
}

template <class _CharT, class _Traits, class _Allocator>
                              __attribute__((__noinline__)) basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::__assign_external(const value_type* __s) {
  return __assign_external(__s, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::assign(const value_type* __s) {
  ((void)0);
  return __builtin_constant_p(*__s)
           ? (__fits_in_sso(traits_type::length(__s)) ? __assign_short(__s, traits_type::length(__s))
                                                      : __assign_external(__s, traits_type::length(__s)))
           : __assign_external(__s);
}


template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s, size_type __n) {
  ((void)0);
  size_type __cap = capacity();
  size_type __sz = size();
  if (__cap - __sz >= __n) {
    if (__n) {
      __annotate_increase(__n);
      value_type* __p = std::__to_address(__get_pointer());
      traits_type::copy(__p + __sz, __s, __n);
      __sz += __n;
      __set_size(__sz);
      traits_type::assign(__p[__sz], value_type());
    }
  } else
    __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __sz, 0, __n, __s);
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::append(size_type __n, value_type __c) {
  if (__n) {
    size_type __cap = capacity();
    size_type __sz = size();
    if (__cap - __sz < __n)
      __grow_by_without_replace(__cap, __sz + __n - __cap, __sz, __sz, 0);
    __annotate_increase(__n);
    pointer __p = __get_pointer();
    traits_type::assign(std::__to_address(__p) + __sz, __n, __c);
    __sz += __n;
    __set_size(__sz);
    traits_type::assign(__p[__sz], value_type());
  }
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
                              inline void
basic_string<_CharT, _Traits, _Allocator>::__append_default_init(size_type __n) {
  if (__n) {
    size_type __cap = capacity();
    size_type __sz = size();
    if (__cap - __sz < __n)
      __grow_by_without_replace(__cap, __sz + __n - __cap, __sz, __sz, 0);
    __annotate_increase(__n);
    pointer __p = __get_pointer();
    __sz += __n;
    __set_size(__sz);
    traits_type::assign(__p[__sz], value_type());
  }
}

template <class _CharT, class _Traits, class _Allocator>
                              void basic_string<_CharT, _Traits, _Allocator>::push_back(value_type __c) {
  bool __is_short = !__is_long();
  size_type __cap;
  size_type __sz;
  if (__is_short) {
    __cap = __min_cap - 1;
    __sz = __get_short_size();
  } else {
    __cap = __get_long_cap() - 1;
    __sz = __get_long_size();
  }
  if (__sz == __cap) {
    __grow_by_without_replace(__cap, 1, __sz, __sz, 0);
    __annotate_increase(1);
    __is_short = false;
  } else
    __annotate_increase(1);
  pointer __p = __get_pointer();
  if (__is_short) {
    __p = __get_short_pointer() + __sz;
    __set_short_size(__sz + 1);
  } else {
    __p = __get_long_pointer() + __sz;
    __set_long_size(__sz + 1);
  }
  traits_type::assign(*__p, __c);
  traits_type::assign(*++__p, value_type());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::append(_ForwardIterator __first, _ForwardIterator __last) {
  size_type __sz = size();
  size_type __cap = capacity();
  size_type __n = static_cast<size_type>(std::distance(__first, __last));
  if (__n) {
    if (__string_is_trivial_iterator<_ForwardIterator>::value && !__addr_in_range(*__first)) {
      if (__cap - __sz < __n)
        __grow_by_without_replace(__cap, __sz + __n - __cap, __sz, __sz, 0);
      __annotate_increase(__n);
      auto __end = __copy_non_overlapping_range(__first, __last, std::__to_address(__get_pointer() + __sz));
      traits_type::assign(*__end, value_type());
      __set_size(__sz + __n);
    } else {
      const basic_string __temp(__first, __last, __alloc());
      append(__temp.data(), __temp.size());
    }
  }
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::append(const basic_string& __str, size_type __pos, size_type __n) {
  size_type __sz = __str.size();
  if (__pos > __sz)
    __throw_out_of_range();
  return append(__str.data() + __pos, std::min(__n, __sz - __pos));
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp,
          __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                            !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
                        int> >
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::append(const _Tp& __t, size_type __pos, size_type __n) {
  __self_view __sv = __t;
  size_type __sz = __sv.size();
  if (__pos > __sz)
    __throw_out_of_range();
  return append(__sv.data() + __pos, std::min(__n, __sz - __pos));
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s) {
  ((void)0);
  return append(__s, traits_type::length(__s));
}



template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, const value_type* __s, size_type __n) {
  ((void)0);
  size_type __sz = size();
  if (__pos > __sz)
    __throw_out_of_range();
  size_type __cap = capacity();
  if (__cap - __sz >= __n) {
    if (__n) {
      __annotate_increase(__n);
      value_type* __p = std::__to_address(__get_pointer());
      size_type __n_move = __sz - __pos;
      if (__n_move != 0) {
        if (std::__is_pointer_in_range(__p + __pos, __p + __sz, __s))
          __s += __n;
        traits_type::move(__p + __pos + __n, __p + __pos, __n_move);
      }
      traits_type::move(__p + __pos, __s, __n);
      __sz += __n;
      __set_size(__sz);
      traits_type::assign(__p[__sz], value_type());
    }
  } else
    __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __pos, 0, __n, __s);
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, size_type __n, value_type __c) {
  size_type __sz = size();
  if (__pos > __sz)
    __throw_out_of_range();
  if (__n) {
    size_type __cap = capacity();
    value_type* __p;
    if (__cap - __sz >= __n) {
      __annotate_increase(__n);
      __p = std::__to_address(__get_pointer());
      size_type __n_move = __sz - __pos;
      if (__n_move != 0)
        traits_type::move(__p + __pos + __n, __p + __pos, __n_move);
    } else {
      __grow_by_without_replace(__cap, __sz + __n - __cap, __sz, __pos, 0, __n);
      __p = std::__to_address(__get_long_pointer());
    }
    traits_type::assign(__p + __pos, __n, __c);
    __sz += __n;
    __set_size(__sz);
    traits_type::assign(__p[__sz], value_type());
  }
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >
                              typename basic_string<_CharT, _Traits, _Allocator>::iterator
basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, _InputIterator __first, _InputIterator __last) {
  const basic_string __temp(__first, __last, __alloc());
  return insert(__pos, __temp.data(), __temp.data() + __temp.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
                              typename basic_string<_CharT, _Traits, _Allocator>::iterator
basic_string<_CharT, _Traits, _Allocator>::insert(
    const_iterator __pos, _ForwardIterator __first, _ForwardIterator __last) {
  auto __n = static_cast<size_type>(std::distance(__first, __last));
  return __insert_with_size(__pos, __first, __last, __n);
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Iterator, class _Sentinel>
                              typename basic_string<_CharT, _Traits, _Allocator>::iterator
basic_string<_CharT, _Traits, _Allocator>::__insert_with_size(
    const_iterator __pos, _Iterator __first, _Sentinel __last, size_type __n) {
  size_type __ip = static_cast<size_type>(__pos - begin());
  if (__n == 0)
    return begin() + __ip;

  if (__string_is_trivial_iterator<_Iterator>::value && !__addr_in_range(*__first)) {
    return __insert_from_safe_copy(__n, __ip, __first, __last);
  } else {
    const basic_string __temp(__init_with_sentinel_tag(), __first, __last, __alloc());
    return __insert_from_safe_copy(__n, __ip, __temp.begin(), __temp.end());
  }
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::insert(
    size_type __pos1, const basic_string& __str, size_type __pos2, size_type __n) {
  size_type __str_sz = __str.size();
  if (__pos2 > __str_sz)
    __throw_out_of_range();
  return insert(__pos1, __str.data() + __pos2, std::min(__n, __str_sz - __pos2));
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp,
          __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                            !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
                        int> >
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const _Tp& __t, size_type __pos2, size_type __n) {
  __self_view __sv = __t;
  size_type __str_sz = __sv.size();
  if (__pos2 > __str_sz)
    __throw_out_of_range();
  return insert(__pos1, __sv.data() + __pos2, std::min(__n, __str_sz - __pos2));
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, const value_type* __s) {
  ((void)0);
  return insert(__pos, __s, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::iterator
basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, value_type __c) {
  size_type __ip = static_cast<size_type>(__pos - begin());
  size_type __sz = size();
  size_type __cap = capacity();
  value_type* __p;
  if (__cap == __sz) {
    __grow_by_without_replace(__cap, 1, __sz, __ip, 0, 1);
    __p = std::__to_address(__get_long_pointer());
  } else {
    __annotate_increase(1);
    __p = std::__to_address(__get_pointer());
    size_type __n_move = __sz - __ip;
    if (__n_move != 0)
      traits_type::move(__p + __ip + 1, __p + __ip, __n_move);
  }
  traits_type::assign(__p[__ip], __c);
  traits_type::assign(__p[++__sz], value_type());
  __set_size(__sz);
  return begin() + static_cast<difference_type>(__ip);
}



template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::replace(
    size_type __pos, size_type __n1, const value_type* __s, size_type __n2)
    __attribute__((__no_sanitize__("unsigned-integer-overflow"))) {
  ((void)0);
  size_type __sz = size();
  if (__pos > __sz)
    __throw_out_of_range();
  __n1 = std::min(__n1, __sz - __pos);
  size_type __cap = capacity();
  if (__cap - __sz + __n1 >= __n2) {
    value_type* __p = std::__to_address(__get_pointer());
    if (__n1 != __n2) {
      if (__n2 > __n1)
        __annotate_increase(__n2 - __n1);
      size_type __n_move = __sz - __pos - __n1;
      if (__n_move != 0) {
        if (__n1 > __n2) {
          traits_type::move(__p + __pos, __s, __n2);
          traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
          return __null_terminate_at(__p, __sz + (__n2 - __n1));
        }
        if (std::__is_pointer_in_range(__p + __pos + 1, __p + __sz, __s)) {
          if (__p + __pos + __n1 <= __s)
            __s += __n2 - __n1;
          else
          {
            traits_type::move(__p + __pos, __s, __n1);
            __pos += __n1;
            __s += __n2;
            __n2 -= __n1;
            __n1 = 0;
          }
        }
        traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
      }
    }
    traits_type::move(__p + __pos, __s, __n2);
    return __null_terminate_at(__p, __sz + (__n2 - __n1));
  } else
    __grow_by_and_replace(__cap, __sz - __n1 + __n2 - __cap, __sz, __pos, __n1, __n2, __s);
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, size_type __n2, value_type __c) {
  size_type __sz = size();
  if (__pos > __sz)
    __throw_out_of_range();
  __n1 = std::min(__n1, __sz - __pos);
  size_type __cap = capacity();
  value_type* __p;
  if (__cap - __sz + __n1 >= __n2) {
    __p = std::__to_address(__get_pointer());
    if (__n1 != __n2) {
      if (__n2 > __n1)
        __annotate_increase(__n2 - __n1);
      size_type __n_move = __sz - __pos - __n1;
      if (__n_move != 0)
        traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
    }
  } else {
    __grow_by_without_replace(__cap, __sz - __n1 + __n2 - __cap, __sz, __pos, __n1, __n2);
    __p = std::__to_address(__get_long_pointer());
  }
  traits_type::assign(__p + __pos, __n2, __c);
  return __null_terminate_at(__p, __sz - (__n1 - __n2));
}

template <class _CharT, class _Traits, class _Allocator>
template <class _InputIterator, __enable_if_t<__has_input_iterator_category<_InputIterator>::value, int> >
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::replace(
    const_iterator __i1, const_iterator __i2, _InputIterator __j1, _InputIterator __j2) {
  const basic_string __temp(__j1, __j2, __alloc());
  return replace(__i1, __i2, __temp);
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::replace(
    size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2) {
  size_type __str_sz = __str.size();
  if (__pos2 > __str_sz)
    __throw_out_of_range();
  return replace(__pos1, __n1, __str.data() + __pos2, std::min(__n2, __str_sz - __pos2));
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp,
          __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                            !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
                        int> >
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::replace(
    size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2) {
  __self_view __sv = __t;
  size_type __str_sz = __sv.size();
  if (__pos2 > __str_sz)
    __throw_out_of_range();
  return replace(__pos1, __n1, __sv.data() + __pos2, std::min(__n2, __str_sz - __pos2));
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, const value_type* __s) {
  ((void)0);
  return replace(__pos, __n1, __s, traits_type::length(__s));
}





template <class _CharT, class _Traits, class _Allocator>
                              __attribute__((__noinline__)) void
basic_string<_CharT, _Traits, _Allocator>::__erase_external_with_move(size_type __pos, size_type __n) {
  if (__n) {
    size_type __sz = size();
    value_type* __p = std::__to_address(__get_pointer());
    __n = std::min(__n, __sz - __pos);
    size_type __n_move = __sz - __pos - __n;
    if (__n_move != 0)
      traits_type::move(__p + __pos, __p + __pos + __n, __n_move);
    __null_terminate_at(__p, __sz - __n);
  }
}

template <class _CharT, class _Traits, class _Allocator>
                              basic_string<_CharT, _Traits, _Allocator>&
basic_string<_CharT, _Traits, _Allocator>::erase(size_type __pos, size_type __n) {
  if (__pos > size())
    __throw_out_of_range();
  if (__n == npos) {
    __erase_to_end(__pos);
  } else {
    __erase_external_with_move(__pos, __n);
  }
  return *this;
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::iterator
basic_string<_CharT, _Traits, _Allocator>::erase(const_iterator __pos) {
  ((void)0);

  iterator __b = begin();
  size_type __r = static_cast<size_type>(__pos - __b);
  erase(__r, 1);
  return __b + static_cast<difference_type>(__r);
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::iterator
basic_string<_CharT, _Traits, _Allocator>::erase(const_iterator __first, const_iterator __last) {
  ((void)0);
  iterator __b = begin();
  size_type __r = static_cast<size_type>(__first - __b);
  erase(__r, static_cast<size_type>(__last - __first));
  return __b + static_cast<difference_type>(__r);
}

template <class _CharT, class _Traits, class _Allocator>
inline void basic_string<_CharT, _Traits, _Allocator>::pop_back() {
  ((void)0);
  __erase_to_end(size() - 1);
}

template <class _CharT, class _Traits, class _Allocator>
inline void basic_string<_CharT, _Traits, _Allocator>::clear() noexcept {
  size_type __old_size = size();
  if (__is_long()) {
    traits_type::assign(*__get_long_pointer(), value_type());
    __set_long_size(0);
  } else {
    traits_type::assign(*__get_short_pointer(), value_type());
    __set_short_size(0);
  }
  __annotate_shrink(__old_size);
}

template <class _CharT, class _Traits, class _Allocator>
                              void basic_string<_CharT, _Traits, _Allocator>::resize(size_type __n, value_type __c) {
  size_type __sz = size();
  if (__n > __sz)
    append(__n - __sz, __c);
  else
    __erase_to_end(__n);
}

template <class _CharT, class _Traits, class _Allocator>
                              inline void
basic_string<_CharT, _Traits, _Allocator>::__resize_default_init(size_type __n) {
  size_type __sz = size();
  if (__n > __sz) {
    __append_default_init(__n - __sz);
  } else
    __erase_to_end(__n);
}

template <class _CharT, class _Traits, class _Allocator>
                              void basic_string<_CharT, _Traits, _Allocator>::reserve(size_type __requested_capacity) {
  if (__requested_capacity > max_size())
    __throw_length_error();




  if (__requested_capacity <= capacity())
    return;

  size_type __target_capacity = std::max(__requested_capacity, size());
  __target_capacity = __recommend(__target_capacity);
  if (__target_capacity == capacity())
    return;

  __shrink_or_extend(__target_capacity);
}

template <class _CharT, class _Traits, class _Allocator>
inline void basic_string<_CharT, _Traits, _Allocator>::shrink_to_fit() noexcept {
  size_type __target_capacity = __recommend(size());
  if (__target_capacity == capacity())
    return;

  __shrink_or_extend(__target_capacity);
}

template <class _CharT, class _Traits, class _Allocator>
inline void
basic_string<_CharT, _Traits, _Allocator>::__shrink_or_extend(size_type __target_capacity) {
  __annotate_delete();
  size_type __cap = capacity();
  size_type __sz = size();

  pointer __new_data, __p;
  bool __was_long, __now_long;
  if (__fits_in_sso(__target_capacity)) {
    __was_long = true;
    __now_long = false;
    __new_data = __get_short_pointer();
    __p = __get_long_pointer();
  } else {
    if (__target_capacity > __cap) {


      auto __allocation = std::__allocate_at_least(__alloc(), __target_capacity + 1);
      __new_data = __allocation.ptr;
      __target_capacity = __allocation.count - 1;
    } else {




      try {

        auto __allocation = std::__allocate_at_least(__alloc(), __target_capacity + 1);




        if (__allocation.count - 1 > __target_capacity) {
          __alloc_traits::deallocate(__alloc(), __allocation.ptr, __allocation.count);
          __annotate_new(__sz);
          return;
        }
        __new_data = __allocation.ptr;
        __target_capacity = __allocation.count - 1;

      } catch (...) {
        return;
      }

    }
    __begin_lifetime(__new_data, __target_capacity + 1);
    __now_long = true;
    __was_long = __is_long();
    __p = __get_pointer();
  }
  traits_type::copy(std::__to_address(__new_data), std::__to_address(__p), size() + 1);
  if (__was_long)
    __alloc_traits::deallocate(__alloc(), __p, __cap + 1);
  if (__now_long) {
    __set_long_cap(__target_capacity + 1);
    __set_long_size(__sz);
    __set_long_pointer(__new_data);
  } else
    __set_short_size(__sz);
  __annotate_new(__sz);
}

template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::const_reference
basic_string<_CharT, _Traits, _Allocator>::at(size_type __n) const {
  if (__n >= size())
    __throw_out_of_range();
  return (*this)[__n];
}

template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::reference
basic_string<_CharT, _Traits, _Allocator>::at(size_type __n) {
  if (__n >= size())
    __throw_out_of_range();
  return (*this)[__n];
}

template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::copy(value_type* __s, size_type __n, size_type __pos) const {
  size_type __sz = size();
  if (__pos > __sz)
    __throw_out_of_range();
  size_type __rlen = std::min(__n, __sz - __pos);
  traits_type::copy(__s, data() + __pos, __rlen);
  return __rlen;
}

template <class _CharT, class _Traits, class _Allocator>
inline void basic_string<_CharT, _Traits, _Allocator>::swap(basic_string& __str)

    noexcept



{
  ((void)0);



  if (!__is_long())
    __annotate_delete();
  if (this != &__str && !__str.__is_long())
    __str.__annotate_delete();
  std::swap(__r_.first(), __str.__r_.first());
  std::__swap_allocator(__alloc(), __str.__alloc());
  if (!__is_long())
    __annotate_new(__get_short_size());
  if (this != &__str && !__str.__is_long())
    __str.__annotate_new(__str.__get_short_size());
}



template <class _Traits>
struct __attribute__((__visibility__("hidden"))) __traits_eq {
  typedef typename _Traits::char_type char_type;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const char_type& __x, const char_type& __y) noexcept {
    return _Traits::eq(__x, __y);
  }
};

template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find(const value_type* __s, size_type __pos, size_type __n) const noexcept {
  ((void)0);
  return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find(const basic_string& __str, size_type __pos) const noexcept {
  return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __str.data(), __pos, __str.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find(const _Tp& __t, size_type __pos) const noexcept {
  __self_view __sv = __t;
  return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __sv.data(), __pos, __sv.size());
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find(const value_type* __s, size_type __pos) const noexcept {
  ((void)0);
  return std::__str_find<value_type, size_type, traits_type, npos>(
      data(), size(), __s, __pos, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find(value_type __c, size_type __pos) const noexcept {
  return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
}



template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::rfind(
    const value_type* __s, size_type __pos, size_type __n) const noexcept {
  ((void)0);
  return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::rfind(const basic_string& __str, size_type __pos) const noexcept {
  return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __str.data(), __pos, __str.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::rfind(const _Tp& __t, size_type __pos) const noexcept {
  __self_view __sv = __t;
  return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __sv.data(), __pos, __sv.size());
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::rfind(const value_type* __s, size_type __pos) const noexcept {
  ((void)0);
  return std::__str_rfind<value_type, size_type, traits_type, npos>(
      data(), size(), __s, __pos, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::rfind(value_type __c, size_type __pos) const noexcept {
  return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
}



template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_of(
    const value_type* __s, size_type __pos, size_type __n) const noexcept {
  ((void)0);
  return std::__str_find_first_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_of(const basic_string& __str, size_type __pos) const noexcept {
  return std::__str_find_first_of<value_type, size_type, traits_type, npos>(
      data(), size(), __str.data(), __pos, __str.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_of(const _Tp& __t, size_type __pos) const noexcept {
  __self_view __sv = __t;
  return std::__str_find_first_of<value_type, size_type, traits_type, npos>(
      data(), size(), __sv.data(), __pos, __sv.size());
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_of(const value_type* __s, size_type __pos) const noexcept {
  ((void)0);
  return std::__str_find_first_of<value_type, size_type, traits_type, npos>(
      data(), size(), __s, __pos, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_of(value_type __c, size_type __pos) const noexcept {
  return find(__c, __pos);
}



template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_of(
    const value_type* __s, size_type __pos, size_type __n) const noexcept {
  ((void)0);
  return std::__str_find_last_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_of(const basic_string& __str, size_type __pos) const noexcept {
  return std::__str_find_last_of<value_type, size_type, traits_type, npos>(
      data(), size(), __str.data(), __pos, __str.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_of(const _Tp& __t, size_type __pos) const noexcept {
  __self_view __sv = __t;
  return std::__str_find_last_of<value_type, size_type, traits_type, npos>(
      data(), size(), __sv.data(), __pos, __sv.size());
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_of(const value_type* __s, size_type __pos) const noexcept {
  ((void)0);
  return std::__str_find_last_of<value_type, size_type, traits_type, npos>(
      data(), size(), __s, __pos, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_of(value_type __c, size_type __pos) const noexcept {
  return rfind(__c, __pos);
}



template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(
    const value_type* __s, size_type __pos, size_type __n) const noexcept {
  ((void)0);
  return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(
    const basic_string& __str, size_type __pos) const noexcept {
  return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(
      data(), size(), __str.data(), __pos, __str.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const _Tp& __t, size_type __pos) const noexcept {
  __self_view __sv = __t;
  return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(
      data(), size(), __sv.data(), __pos, __sv.size());
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const value_type* __s, size_type __pos) const noexcept {
  ((void)0);
  return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(
      data(), size(), __s, __pos, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(value_type __c, size_type __pos) const noexcept {
  return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
}



template <class _CharT, class _Traits, class _Allocator>
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(
    const value_type* __s, size_type __pos, size_type __n) const noexcept {
  ((void)0);
  return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(
    const basic_string& __str, size_type __pos) const noexcept {
  return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(
      data(), size(), __str.data(), __pos, __str.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
                              typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const _Tp& __t, size_type __pos) const noexcept {
  __self_view __sv = __t;
  return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(
      data(), size(), __sv.data(), __pos, __sv.size());
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const value_type* __s, size_type __pos) const noexcept {
  ((void)0);
  return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(
      data(), size(), __s, __pos, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
inline typename basic_string<_CharT, _Traits, _Allocator>::size_type
basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(value_type __c, size_type __pos) const noexcept {
  return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
}



template <class _CharT, class _Traits, class _Allocator>
template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
                              int basic_string<_CharT, _Traits, _Allocator>::compare(const _Tp& __t) const noexcept {
  __self_view __sv = __t;
  size_t __lhs_sz = size();
  size_t __rhs_sz = __sv.size();
  int __result = traits_type::compare(data(), __sv.data(), std::min(__lhs_sz, __rhs_sz));
  if (__result != 0)
    return __result;
  if (__lhs_sz < __rhs_sz)
    return -1;
  if (__lhs_sz > __rhs_sz)
    return 1;
  return 0;
}

template <class _CharT, class _Traits, class _Allocator>
inline int
basic_string<_CharT, _Traits, _Allocator>::compare(const basic_string& __str) const noexcept {
  return compare(__self_view(__str));
}

template <class _CharT, class _Traits, class _Allocator>
inline int basic_string<_CharT, _Traits, _Allocator>::compare(
    size_type __pos1, size_type __n1, const value_type* __s, size_type __n2) const {
  ((void)0);
  size_type __sz = size();
  if (__pos1 > __sz || __n2 == npos)
    __throw_out_of_range();
  size_type __rlen = std::min(__n1, __sz - __pos1);
  int __r = traits_type::compare(data() + __pos1, __s, std::min(__rlen, __n2));
  if (__r == 0) {
    if (__rlen < __n2)
      __r = -1;
    else if (__rlen > __n2)
      __r = 1;
  }
  return __r;
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
                              int
basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1, size_type __n1, const _Tp& __t) const {
  __self_view __sv = __t;
  return compare(__pos1, __n1, __sv.data(), __sv.size());
}

template <class _CharT, class _Traits, class _Allocator>
inline int
basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1, size_type __n1, const basic_string& __str) const {
  return compare(__pos1, __n1, __str.data(), __str.size());
}

template <class _CharT, class _Traits, class _Allocator>
template <class _Tp,
          __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
                            !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
                        int> >
                              int basic_string<_CharT, _Traits, _Allocator>::compare(
    size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2) const {
  __self_view __sv = __t;
  return __self_view(*this).substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
}

template <class _CharT, class _Traits, class _Allocator>
                              int basic_string<_CharT, _Traits, _Allocator>::compare(
    size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2) const {
  return compare(__pos1, __n1, __self_view(__str), __pos2, __n2);
}

template <class _CharT, class _Traits, class _Allocator>
                              int
basic_string<_CharT, _Traits, _Allocator>::compare(const value_type* __s) const noexcept {
  ((void)0);
  return compare(0, npos, __s, traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Allocator>
                              int
basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1, size_type __n1, const value_type* __s) const {
  ((void)0);
  return compare(__pos1, __n1, __s, traits_type::length(__s));
}



template <class _CharT, class _Traits, class _Allocator>
inline bool basic_string<_CharT, _Traits, _Allocator>::__invariants() const {
  if (size() > capacity())
    return false;
  if (capacity() < __min_cap - 1)
    return false;
  if (data() == nullptr)
    return false;
  if (!_Traits::eq(data()[size()], value_type()))
    return false;
  return true;
}



template <class _CharT, class _Traits, class _Allocator>
inline void basic_string<_CharT, _Traits, _Allocator>::__clear_and_shrink() noexcept {
  clear();
  if (__is_long()) {
    __annotate_delete();
    __alloc_traits::deallocate(__alloc(), __get_long_pointer(), capacity() + 1);
    __r_.first() = __rep();
  }
}



template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator==(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
           const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {



  size_t __lhs_sz = __lhs.size();
  return __lhs_sz == __rhs.size() && _Traits::compare(__lhs.data(), __rhs.data(), __lhs_sz) == 0;

}

template <class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator==(const basic_string<char, char_traits<char>, _Allocator>& __lhs,
           const basic_string<char, char_traits<char>, _Allocator>& __rhs) noexcept {
  size_t __sz = __lhs.size();
  if (__sz != __rhs.size())
    return false;
  return char_traits<char>::compare(__lhs.data(), __rhs.data(), __sz) == 0;
}


template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator==(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  typedef basic_string<_CharT, _Traits, _Allocator> _String;
  ((void)0);
  size_t __lhs_len = _Traits::length(__lhs);
  if (__lhs_len != __rhs.size())
    return false;
  return __rhs.compare(0, _String::npos, __lhs, __lhs_len) == 0;
}


template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator==(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) noexcept {



  typedef basic_string<_CharT, _Traits, _Allocator> _String;
  ((void)0);
  size_t __rhs_len = _Traits::length(__rhs);
  if (__rhs_len != __lhs.size())
    return false;
  return __lhs.compare(0, _String::npos, __rhs, __rhs_len) == 0;

}
# 3886 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
                                             const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return !(__lhs == __rhs);
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator!=(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return !(__lhs == __rhs);
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator!=(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) noexcept {
  return !(__lhs == __rhs);
}



template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
                                            const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return __lhs.compare(__rhs) < 0;
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator<(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) noexcept {
  return __lhs.compare(__rhs) < 0;
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator<(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return __rhs.compare(__lhs) > 0;
}



template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
                                            const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return __rhs < __lhs;
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator>(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) noexcept {
  return __rhs < __lhs;
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator>(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return __rhs < __lhs;
}



template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
                                             const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return !(__rhs < __lhs);
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator<=(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) noexcept {
  return !(__rhs < __lhs);
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator<=(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return !(__rhs < __lhs);
}



template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
                                             const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return !(__lhs < __rhs);
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator>=(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) noexcept {
  return !(__lhs < __rhs);
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator>=(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
  return !(__lhs < __rhs);
}




template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, _Allocator>
operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
          const basic_string<_CharT, _Traits, _Allocator>& __rhs) {
  using _String = basic_string<_CharT, _Traits, _Allocator>;
  auto __lhs_sz = __lhs.size();
  auto __rhs_sz = __rhs.size();
  _String __r(__uninitialized_size_tag(),
              __lhs_sz + __rhs_sz,
              _String::__alloc_traits::select_on_container_copy_construction(__lhs.get_allocator()));
  auto __ptr = std::__to_address(__r.__get_pointer());
  _Traits::copy(__ptr, __lhs.data(), __lhs_sz);
  _Traits::copy(__ptr + __lhs_sz, __rhs.data(), __rhs_sz);
  _Traits::assign(__ptr + __lhs_sz + __rhs_sz, 1, _CharT());
  return __r;
}

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) basic_string<_CharT, _Traits, _Allocator>
operator+(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) {
  using _String = basic_string<_CharT, _Traits, _Allocator>;
  auto __lhs_sz = _Traits::length(__lhs);
  auto __rhs_sz = __rhs.size();
  _String __r(__uninitialized_size_tag(),
              __lhs_sz + __rhs_sz,
              _String::__alloc_traits::select_on_container_copy_construction(__rhs.get_allocator()));
  auto __ptr = std::__to_address(__r.__get_pointer());
  _Traits::copy(__ptr, __lhs, __lhs_sz);
  _Traits::copy(__ptr + __lhs_sz, __rhs.data(), __rhs_sz);
  _Traits::assign(__ptr + __lhs_sz + __rhs_sz, 1, _CharT());
  return __r;
}

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, _Allocator>
operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) {
  using _String = basic_string<_CharT, _Traits, _Allocator>;
  typename _String::size_type __rhs_sz = __rhs.size();
  _String __r(__uninitialized_size_tag(),
              __rhs_sz + 1,
              _String::__alloc_traits::select_on_container_copy_construction(__rhs.get_allocator()));
  auto __ptr = std::__to_address(__r.__get_pointer());
  _Traits::assign(__ptr, 1, __lhs);
  _Traits::copy(__ptr + 1, __rhs.data(), __rhs_sz);
  _Traits::assign(__ptr + 1 + __rhs_sz, 1, _CharT());
  return __r;
}

template <class _CharT, class _Traits, class _Allocator>
inline basic_string<_CharT, _Traits, _Allocator>
operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) {
  using _String = basic_string<_CharT, _Traits, _Allocator>;
  typename _String::size_type __lhs_sz = __lhs.size();
  typename _String::size_type __rhs_sz = _Traits::length(__rhs);
  _String __r(__uninitialized_size_tag(),
              __lhs_sz + __rhs_sz,
              _String::__alloc_traits::select_on_container_copy_construction(__lhs.get_allocator()));
  auto __ptr = std::__to_address(__r.__get_pointer());
  _Traits::copy(__ptr, __lhs.data(), __lhs_sz);
  _Traits::copy(__ptr + __lhs_sz, __rhs, __rhs_sz);
  _Traits::assign(__ptr + __lhs_sz + __rhs_sz, 1, _CharT());
  return __r;
}

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, _Allocator>
operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, _CharT __rhs) {
  using _String = basic_string<_CharT, _Traits, _Allocator>;
  typename _String::size_type __lhs_sz = __lhs.size();
  _String __r(__uninitialized_size_tag(),
              __lhs_sz + 1,
              _String::__alloc_traits::select_on_container_copy_construction(__lhs.get_allocator()));
  auto __ptr = std::__to_address(__r.__get_pointer());
  _Traits::copy(__ptr, __lhs.data(), __lhs_sz);
  _Traits::assign(__ptr + __lhs_sz, 1, __rhs);
  _Traits::assign(__ptr + 1 + __lhs_sz, 1, _CharT());
  return __r;
}



template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, _Allocator>
operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) {
  return std::move(__lhs.append(__rhs));
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, _Allocator>
operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs) {
  return std::move(__rhs.insert(0, __lhs));
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, _Allocator>
operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs) {
  return std::move(__lhs.append(__rhs));
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, _Allocator>
operator+(const _CharT* __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs) {
  return std::move(__rhs.insert(0, __lhs));
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, _Allocator>
operator+(_CharT __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs) {
  __rhs.insert(__rhs.begin(), __lhs);
  return std::move(__rhs);
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, _Allocator>
operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const _CharT* __rhs) {
  return std::move(__lhs.append(__rhs));
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, _Allocator>
operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, _CharT __rhs) {
  __lhs.push_back(__rhs);
  return std::move(__lhs);
}
# 4170 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
swap(basic_string<_CharT, _Traits, _Allocator>& __lhs, basic_string<_CharT, _Traits, _Allocator>& __rhs)
    noexcept(noexcept(__lhs.swap(__rhs))) {
  __lhs.swap(__rhs);
}

__attribute__((__visibility__("default"))) int stoi(const string& __str, size_t* __idx = nullptr, int __base = 10);
__attribute__((__visibility__("default"))) long stol(const string& __str, size_t* __idx = nullptr, int __base = 10);
__attribute__((__visibility__("default"))) unsigned long stoul(const string& __str, size_t* __idx = nullptr, int __base = 10);
__attribute__((__visibility__("default"))) long long stoll(const string& __str, size_t* __idx = nullptr, int __base = 10);
__attribute__((__visibility__("default"))) unsigned long long stoull(const string& __str, size_t* __idx = nullptr, int __base = 10);

__attribute__((__visibility__("default"))) float stof(const string& __str, size_t* __idx = nullptr);
__attribute__((__visibility__("default"))) double stod(const string& __str, size_t* __idx = nullptr);
__attribute__((__visibility__("default"))) long double stold(const string& __str, size_t* __idx = nullptr);

__attribute__((__visibility__("default"))) string to_string(int __val);
__attribute__((__visibility__("default"))) string to_string(unsigned __val);
__attribute__((__visibility__("default"))) string to_string(long __val);
__attribute__((__visibility__("default"))) string to_string(unsigned long __val);
__attribute__((__visibility__("default"))) string to_string(long long __val);
__attribute__((__visibility__("default"))) string to_string(unsigned long long __val);
__attribute__((__visibility__("default"))) string to_string(float __val);
__attribute__((__visibility__("default"))) string to_string(double __val);
__attribute__((__visibility__("default"))) string to_string(long double __val);


__attribute__((__visibility__("default"))) int stoi(const wstring& __str, size_t* __idx = nullptr, int __base = 10);
__attribute__((__visibility__("default"))) long stol(const wstring& __str, size_t* __idx = nullptr, int __base = 10);
__attribute__((__visibility__("default"))) unsigned long stoul(const wstring& __str, size_t* __idx = nullptr, int __base = 10);
__attribute__((__visibility__("default"))) long long stoll(const wstring& __str, size_t* __idx = nullptr, int __base = 10);
__attribute__((__visibility__("default"))) unsigned long long stoull(const wstring& __str, size_t* __idx = nullptr, int __base = 10);

__attribute__((__visibility__("default"))) float stof(const wstring& __str, size_t* __idx = nullptr);
__attribute__((__visibility__("default"))) double stod(const wstring& __str, size_t* __idx = nullptr);
__attribute__((__visibility__("default"))) long double stold(const wstring& __str, size_t* __idx = nullptr);

__attribute__((__visibility__("default"))) wstring to_wstring(int __val);
__attribute__((__visibility__("default"))) wstring to_wstring(unsigned __val);
__attribute__((__visibility__("default"))) wstring to_wstring(long __val);
__attribute__((__visibility__("default"))) wstring to_wstring(unsigned long __val);
__attribute__((__visibility__("default"))) wstring to_wstring(long long __val);
__attribute__((__visibility__("default"))) wstring to_wstring(unsigned long long __val);
__attribute__((__visibility__("default"))) wstring to_wstring(float __val);
__attribute__((__visibility__("default"))) wstring to_wstring(double __val);
__attribute__((__visibility__("default"))) wstring to_wstring(long double __val);


template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("default"))) const typename basic_string<_CharT, _Traits, _Allocator>::size_type
    basic_string<_CharT, _Traits, _Allocator>::npos;

template <class _CharT, class _Allocator>
struct __string_hash : public __unary_function<basic_string<_CharT, char_traits<_CharT>, _Allocator>, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t
  operator()(const basic_string<_CharT, char_traits<_CharT>, _Allocator>& __val) const noexcept {
    return std::__do_string_hash(__val.data(), __val.data() + __val.size());
  }
};

template <class _Allocator>
struct hash<basic_string<char, char_traits<char>, _Allocator> > : __string_hash<char, _Allocator> {};






template <class _Allocator>
struct hash<basic_string<char16_t, char_traits<char16_t>, _Allocator> > : __string_hash<char16_t, _Allocator> {};

template <class _Allocator>
struct hash<basic_string<char32_t, char_traits<char32_t>, _Allocator> > : __string_hash<char32_t, _Allocator> {};


template <class _Allocator>
struct hash<basic_string<wchar_t, char_traits<wchar_t>, _Allocator> > : __string_hash<wchar_t, _Allocator> {};


template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, const basic_string<_CharT, _Traits, _Allocator>& __str);

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
operator>>(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT, _Traits, _Allocator>& __str);

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm);

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT, _Traits, _Allocator>& __str);

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>&& __is, basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm);

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>&& __is, basic_string<_CharT, _Traits, _Allocator>& __str);
# 4294 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
inline namespace literals {
inline namespace string_literals {
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<char>
operator""s(const char* __str, size_t __len) {
  return basic_string<char>(__str, __len);
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<wchar_t>
operator""s(const wchar_t* __str, size_t __len) {
  return basic_string<wchar_t>(__str, __len);
}
# 4314 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<char16_t>
operator""s(const char16_t* __str, size_t __len) {
  return basic_string<char16_t>(__str, __len);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<char32_t>
operator""s(const char32_t* __str, size_t __len) {
  return basic_string<char32_t>(__str, __len);
}
}
}
# 4337 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
}}
# 4337 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/string" 3
#pragma clang diagnostic pop
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 2 3
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3


#pragma clang diagnostic push
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

class __attribute__((__visibility__("default"))) locale;

template <class _Facet>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool has_facet(const locale&) noexcept;

template <class _Facet>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Facet& use_facet(const locale&);

class __attribute__((__visibility__("default"))) locale {
public:

  using __trivially_relocatable = locale;


  class __attribute__((__visibility__("default"))) facet;
  class __attribute__((__visibility__("default"))) id;

  typedef int category;

  static const category
      none = 0,
      collate = (1 << 0), ctype = (1 << 1), monetary = (1 << 3), numeric = (1 << 4),
      time = (1 << 5), messages = (1 << 2), all = collate | ctype | monetary | numeric | time | messages;


  locale() noexcept;
  locale(const locale&) noexcept;
  explicit locale(const char*);
  explicit locale(const string&);
  locale(const locale&, const char*, category);
  locale(const locale&, const string&, category);
  template <class _Facet>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) locale(const locale&, _Facet*);
  locale(const locale&, const locale&, category);

  ~locale();

  const locale& operator=(const locale&) noexcept;

  template <class _Facet>
  inline __attribute__((__visibility__("hidden"))) locale combine(const locale&) const;


  string name() const;
  bool operator==(const locale&) const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const locale& __y) const { return !(*this == __y); }

  template <class _CharT, class _Traits, class _Allocator>
  inline __attribute__((__visibility__("hidden"))) bool
  operator()(const basic_string<_CharT, _Traits, _Allocator>&, const basic_string<_CharT, _Traits, _Allocator>&) const;


  static locale global(const locale&);
  static const locale& classic();

private:
  class __imp;
  __imp* __locale_;

  template <class>
  friend struct __no_destroy;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit locale(__private_constructor_tag, __imp* __loc) : __locale_(__loc) {}

  void __install_ctor(const locale&, facet*, long);
  static locale& __global();
  bool has_facet(id&) const;
  const facet* use_facet(id&) const;

  template <class _Facet>
  friend bool has_facet(const locale&) noexcept;
  template <class _Facet>
  friend const _Facet& use_facet(const locale&);
};

class __attribute__((__visibility__("default"))) locale::facet : public __shared_count {
protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit facet(size_t __refs = 0) : __shared_count(static_cast<long>(__refs) - 1) {}

  ~facet() override;




private:
  void __on_zero_shared() noexcept override;
};

class __attribute__((__visibility__("default"))) locale::id {
  once_flag __flag_;
  int32_t __id_;

  static int32_t __next_id;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr id() : __id_(0) {}
  void operator=(const id&) = delete;
  id(const id&) = delete;

public:
  long __get();

  friend class locale;
  friend class locale::__imp;
};

template <class _Facet>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) locale::locale(const locale& __other, _Facet* __f) {
  __install_ctor(__other, __f, __f ? __f->id.__get() : 0);
}

template <class _Facet>
locale locale::combine(const locale& __other) const {
  if (!std::has_facet<_Facet>(__other))
    __throw_runtime_error("locale::combine: locale missing facet");

  return locale(*this, &const_cast<_Facet&>(std::use_facet<_Facet>(__other)));
}

template <class _Facet>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool has_facet(const locale& __l) noexcept {
  return __l.has_facet(_Facet::id);
}

template <class _Facet>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Facet& use_facet(const locale& __l) {
  return static_cast<const _Facet&>(*__l.use_facet(_Facet::id));
}



template <class _CharT>
class collate : public locale::facet {
public:
  typedef _CharT char_type;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit collate(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int
  compare(const char_type* __lo1, const char_type* __hi1, const char_type* __lo2, const char_type* __hi2) const {
    return do_compare(__lo1, __hi1, __lo2, __hi2);
  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__always_inline__)) string_type
  transform(const char_type* __lo, const char_type* __hi) const {
    return do_transform(__lo, __hi);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long hash(const char_type* __lo, const char_type* __hi) const { return do_hash(__lo, __hi); }

  static locale::id id;

protected:
  ~collate() override;
  virtual int
  do_compare(const char_type* __lo1, const char_type* __hi1, const char_type* __lo2, const char_type* __hi2) const;
  virtual string_type do_transform(const char_type* __lo, const char_type* __hi) const {
    return string_type(__lo, __hi);
  }
  virtual long do_hash(const char_type* __lo, const char_type* __hi) const;
};

template <class _CharT>
locale::id collate<_CharT>::id;

template <class _CharT>
collate<_CharT>::~collate() {}

template <class _CharT>
int collate<_CharT>::do_compare(
    const char_type* __lo1, const char_type* __hi1, const char_type* __lo2, const char_type* __hi2) const {
  for (; __lo2 != __hi2; ++__lo1, ++__lo2) {
    if (__lo1 == __hi1 || *__lo1 < *__lo2)
      return -1;
    if (*__lo2 < *__lo1)
      return 1;
  }
  return __lo1 != __hi1;
}

template <class _CharT>
long collate<_CharT>::do_hash(const char_type* __lo, const char_type* __hi) const {
  size_t __h = 0;
  const size_t __sr = 8 * sizeof(size_t) - 8;
  const size_t __mask = size_t(0xF) << (__sr + 4);
  for (const char_type* __p = __lo; __p != __hi; ++__p) {
    __h = (__h << 4) + static_cast<size_t>(*__p);
    size_t __g = __h & __mask;
    __h ^= __g | (__g >> __sr);
  }
  return static_cast<long>(__h);
}

extern template class __attribute__((__visibility__("default"))) collate<char>;

extern template class __attribute__((__visibility__("default"))) collate<wchar_t>;




template <class _CharT>
class collate_byname;

template <>
class __attribute__((__visibility__("default"))) collate_byname<char> : public collate<char> {
  locale_t __l_;

public:
  typedef char char_type;
  typedef basic_string<char_type> string_type;

  explicit collate_byname(const char* __n, size_t __refs = 0);
  explicit collate_byname(const string& __n, size_t __refs = 0);

protected:
  ~collate_byname() override;
  int do_compare(
      const char_type* __lo1, const char_type* __hi1, const char_type* __lo2, const char_type* __hi2) const override;
  string_type do_transform(const char_type* __lo, const char_type* __hi) const override;
};


template <>
class __attribute__((__visibility__("default"))) collate_byname<wchar_t> : public collate<wchar_t> {
  locale_t __l_;

public:
  typedef wchar_t char_type;
  typedef basic_string<char_type> string_type;

  explicit collate_byname(const char* __n, size_t __refs = 0);
  explicit collate_byname(const string& __n, size_t __refs = 0);

protected:
  ~collate_byname() override;

  int do_compare(
      const char_type* __lo1, const char_type* __hi1, const char_type* __lo2, const char_type* __hi2) const override;
  string_type do_transform(const char_type* __lo, const char_type* __hi) const override;
};


template <class _CharT, class _Traits, class _Allocator>
bool locale::operator()(const basic_string<_CharT, _Traits, _Allocator>& __x,
                        const basic_string<_CharT, _Traits, _Allocator>& __y) const {
  return std::use_facet<std::collate<_CharT> >(*this).compare(
             __x.data(), __x.data() + __x.size(), __y.data(), __y.data() + __y.size()) < 0;
}



class __attribute__((__visibility__("default"))) ctype_base {
public:
# 351 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
  typedef __uint32_t mask;





  static const mask space = 0x00004000L;
  static const mask print = 0x00040000L;
  static const mask cntrl = 0x00000200L;
  static const mask upper = 0x00008000L;
  static const mask lower = 0x00001000L;
  static const mask alpha = 0x00000100L;
  static const mask digit = 0x00000400L;
  static const mask punct = 0x00002000L;
  static const mask xdigit = 0x00010000L;







  static const mask blank = 0x00020000L;
  static const mask __regex_word = 0x80;
# 439 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
  static const mask alnum = alpha | digit;
  static const mask graph = alnum | punct;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ctype_base() {}

  static_assert((__regex_word & ~(std::make_unsigned<mask>::type)(space | print | cntrl | upper | lower | alpha |
                                                                  digit | punct | xdigit | blank)) == __regex_word,
                "__regex_word can't overlap other bits");
};

template <class _CharT>
class ctype;


template <>
class __attribute__((__visibility__("default"))) ctype<wchar_t> : public locale::facet, public ctype_base {
public:
  typedef wchar_t char_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit ctype(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool is(mask __m, char_type __c) const { return do_is(__m, __c); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const char_type* is(const char_type* __low, const char_type* __high, mask* __vec) const {
    return do_is(__low, __high, __vec);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const char_type* scan_is(mask __m, const char_type* __low, const char_type* __high) const {
    return do_scan_is(__m, __low, __high);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const char_type* scan_not(mask __m, const char_type* __low, const char_type* __high) const {
    return do_scan_not(__m, __low, __high);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type toupper(char_type __c) const { return do_toupper(__c); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const char_type* toupper(char_type* __low, const char_type* __high) const {
    return do_toupper(__low, __high);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type tolower(char_type __c) const { return do_tolower(__c); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const char_type* tolower(char_type* __low, const char_type* __high) const {
    return do_tolower(__low, __high);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type widen(char __c) const { return do_widen(__c); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const char* widen(const char* __low, const char* __high, char_type* __to) const {
    return do_widen(__low, __high, __to);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char narrow(char_type __c, char __dfault) const { return do_narrow(__c, __dfault); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const char_type*
  narrow(const char_type* __low, const char_type* __high, char __dfault, char* __to) const {
    return do_narrow(__low, __high, __dfault, __to);
  }

  static locale::id id;

protected:
  ~ctype() override;
  virtual bool do_is(mask __m, char_type __c) const;
  virtual const char_type* do_is(const char_type* __low, const char_type* __high, mask* __vec) const;
  virtual const char_type* do_scan_is(mask __m, const char_type* __low, const char_type* __high) const;
  virtual const char_type* do_scan_not(mask __m, const char_type* __low, const char_type* __high) const;
  virtual char_type do_toupper(char_type) const;
  virtual const char_type* do_toupper(char_type* __low, const char_type* __high) const;
  virtual char_type do_tolower(char_type) const;
  virtual const char_type* do_tolower(char_type* __low, const char_type* __high) const;
  virtual char_type do_widen(char) const;
  virtual const char* do_widen(const char* __low, const char* __high, char_type* __dest) const;
  virtual char do_narrow(char_type, char __dfault) const;
  virtual const char_type*
  do_narrow(const char_type* __low, const char_type* __high, char __dfault, char* __dest) const;
};


template <>
class __attribute__((__visibility__("default"))) ctype<char> : public locale::facet, public ctype_base {
  const mask* __tab_;
  bool __del_;

public:
  typedef char char_type;

  explicit ctype(const mask* __tab = nullptr, bool __del = false, size_t __refs = 0);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool is(mask __m, char_type __c) const {
    return isascii(__c) ? (__tab_[static_cast<int>(__c)] & __m) != 0 : false;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const char_type* is(const char_type* __low, const char_type* __high, mask* __vec) const {
    for (; __low != __high; ++__low, ++__vec)
      *__vec = isascii(*__low) ? __tab_[static_cast<int>(*__low)] : 0;
    return __low;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const char_type* scan_is(mask __m, const char_type* __low, const char_type* __high) const {
    for (; __low != __high; ++__low)
      if (isascii(*__low) && (__tab_[static_cast<int>(*__low)] & __m))
        break;
    return __low;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const char_type* scan_not(mask __m, const char_type* __low, const char_type* __high) const {
    for (; __low != __high; ++__low)
      if (!isascii(*__low) || !(__tab_[static_cast<int>(*__low)] & __m))
        break;
    return __low;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type toupper(char_type __c) const { return do_toupper(__c); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const char_type* toupper(char_type* __low, const char_type* __high) const {
    return do_toupper(__low, __high);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type tolower(char_type __c) const { return do_tolower(__c); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const char_type* tolower(char_type* __low, const char_type* __high) const {
    return do_tolower(__low, __high);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type widen(char __c) const { return do_widen(__c); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const char* widen(const char* __low, const char* __high, char_type* __to) const {
    return do_widen(__low, __high, __to);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char narrow(char_type __c, char __dfault) const { return do_narrow(__c, __dfault); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const char*
  narrow(const char_type* __low, const char_type* __high, char __dfault, char* __to) const {
    return do_narrow(__low, __high, __dfault, __to);
  }

  static locale::id id;


  static const size_t table_size = (1 <<8 );



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const mask* table() const noexcept { return __tab_; }
  static const mask* classic_table() noexcept;
# 600 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
protected:
  ~ctype() override;
  virtual char_type do_toupper(char_type __c) const;
  virtual const char_type* do_toupper(char_type* __low, const char_type* __high) const;
  virtual char_type do_tolower(char_type __c) const;
  virtual const char_type* do_tolower(char_type* __low, const char_type* __high) const;
  virtual char_type do_widen(char __c) const;
  virtual const char* do_widen(const char* __low, const char* __high, char_type* __to) const;
  virtual char do_narrow(char_type __c, char __dfault) const;
  virtual const char* do_narrow(const char_type* __low, const char_type* __high, char __dfault, char* __to) const;
};



template <class _CharT>
class ctype_byname;

template <>
class __attribute__((__visibility__("default"))) ctype_byname<char> : public ctype<char> {
  locale_t __l_;

public:
  explicit ctype_byname(const char*, size_t = 0);
  explicit ctype_byname(const string&, size_t = 0);

protected:
  ~ctype_byname() override;
  char_type do_toupper(char_type) const override;
  const char_type* do_toupper(char_type* __low, const char_type* __high) const override;
  char_type do_tolower(char_type) const override;
  const char_type* do_tolower(char_type* __low, const char_type* __high) const override;
};


template <>
class __attribute__((__visibility__("default"))) ctype_byname<wchar_t> : public ctype<wchar_t> {
  locale_t __l_;

public:
  explicit ctype_byname(const char*, size_t = 0);
  explicit ctype_byname(const string&, size_t = 0);

protected:
  ~ctype_byname() override;
  bool do_is(mask __m, char_type __c) const override;
  const char_type* do_is(const char_type* __low, const char_type* __high, mask* __vec) const override;
  const char_type* do_scan_is(mask __m, const char_type* __low, const char_type* __high) const override;
  const char_type* do_scan_not(mask __m, const char_type* __low, const char_type* __high) const override;
  char_type do_toupper(char_type) const override;
  const char_type* do_toupper(char_type* __low, const char_type* __high) const override;
  char_type do_tolower(char_type) const override;
  const char_type* do_tolower(char_type* __low, const char_type* __high) const override;
  char_type do_widen(char) const override;
  const char* do_widen(const char* __low, const char* __high, char_type* __dest) const override;
  char do_narrow(char_type, char __dfault) const override;
  const char_type*
  do_narrow(const char_type* __low, const char_type* __high, char __dfault, char* __dest) const override;
};


template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isspace(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isprint(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool iscntrl(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isupper(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool islower(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isalpha(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isdigit(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool ispunct(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isxdigit(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isalnum(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isgraph(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c);
}

template <class _CharT>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool isblank(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::blank, __c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _CharT toupper(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).toupper(__c);
}

template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _CharT tolower(_CharT __c, const locale& __loc) {
  return std::use_facet<ctype<_CharT> >(__loc).tolower(__c);
}



class __attribute__((__visibility__("default"))) codecvt_base {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) codecvt_base() {}
  enum result { ok, partial, error, noconv };
};



template <class _InternT, class _ExternT, class _StateT>
class codecvt;



template <>
class __attribute__((__visibility__("default"))) codecvt<char, char, mbstate_t> : public locale::facet, public codecvt_base {
public:
  typedef char intern_type;
  typedef char extern_type;
  typedef mbstate_t state_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit codecvt(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result
  out(state_type& __st,
      const intern_type* __frm,
      const intern_type* __frm_end,
      const intern_type*& __frm_nxt,
      extern_type* __to,
      extern_type* __to_end,
      extern_type*& __to_nxt) const {
    return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result
  unshift(state_type& __st, extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const {
    return do_unshift(__st, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result
  in(state_type& __st,
     const extern_type* __frm,
     const extern_type* __frm_end,
     const extern_type*& __frm_nxt,
     intern_type* __to,
     intern_type* __to_end,
     intern_type*& __to_nxt) const {
    return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int encoding() const noexcept { return do_encoding(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool always_noconv() const noexcept { return do_always_noconv(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int
  length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const {
    return do_length(__st, __frm, __end, __mx);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int max_length() const noexcept { return do_max_length(); }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit codecvt(const char*, size_t __refs = 0) : locale::facet(__refs) {}

  ~codecvt() override;

  virtual result
  do_out(state_type& __st,
         const intern_type* __frm,
         const intern_type* __frm_end,
         const intern_type*& __frm_nxt,
         extern_type* __to,
         extern_type* __to_end,
         extern_type*& __to_nxt) const;
  virtual result
  do_in(state_type& __st,
        const extern_type* __frm,
        const extern_type* __frm_end,
        const extern_type*& __frm_nxt,
        intern_type* __to,
        intern_type* __to_end,
        intern_type*& __to_nxt) const;
  virtual result do_unshift(state_type& __st, extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
  virtual int do_encoding() const noexcept;
  virtual bool do_always_noconv() const noexcept;
  virtual int do_length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
  virtual int do_max_length() const noexcept;
};




template <>
class __attribute__((__visibility__("default"))) codecvt<wchar_t, char, mbstate_t> : public locale::facet, public codecvt_base {
  locale_t __l_;

public:
  typedef wchar_t intern_type;
  typedef char extern_type;
  typedef mbstate_t state_type;

  explicit codecvt(size_t __refs = 0);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result
  out(state_type& __st,
      const intern_type* __frm,
      const intern_type* __frm_end,
      const intern_type*& __frm_nxt,
      extern_type* __to,
      extern_type* __to_end,
      extern_type*& __to_nxt) const {
    return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result
  unshift(state_type& __st, extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const {
    return do_unshift(__st, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result
  in(state_type& __st,
     const extern_type* __frm,
     const extern_type* __frm_end,
     const extern_type*& __frm_nxt,
     intern_type* __to,
     intern_type* __to_end,
     intern_type*& __to_nxt) const {
    return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int encoding() const noexcept { return do_encoding(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool always_noconv() const noexcept { return do_always_noconv(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int
  length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const {
    return do_length(__st, __frm, __end, __mx);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int max_length() const noexcept { return do_max_length(); }

  static locale::id id;

protected:
  explicit codecvt(const char*, size_t __refs = 0);

  ~codecvt() override;

  virtual result
  do_out(state_type& __st,
         const intern_type* __frm,
         const intern_type* __frm_end,
         const intern_type*& __frm_nxt,
         extern_type* __to,
         extern_type* __to_end,
         extern_type*& __to_nxt) const;
  virtual result
  do_in(state_type& __st,
        const extern_type* __frm,
        const extern_type* __frm_end,
        const extern_type*& __frm_nxt,
        intern_type* __to,
        intern_type* __to_end,
        intern_type*& __to_nxt) const;
  virtual result do_unshift(state_type& __st, extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
  virtual int do_encoding() const noexcept;
  virtual bool do_always_noconv() const noexcept;
  virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
  virtual int do_max_length() const noexcept;
};




template <>
class __attribute__((__visibility__("default"))) codecvt<char16_t, char, mbstate_t>
    : public locale::facet, public codecvt_base {
public:
  typedef char16_t intern_type;
  typedef char extern_type;
  typedef mbstate_t state_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit codecvt(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result
  out(state_type& __st,
      const intern_type* __frm,
      const intern_type* __frm_end,
      const intern_type*& __frm_nxt,
      extern_type* __to,
      extern_type* __to_end,
      extern_type*& __to_nxt) const {
    return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result
  unshift(state_type& __st, extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const {
    return do_unshift(__st, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result
  in(state_type& __st,
     const extern_type* __frm,
     const extern_type* __frm_end,
     const extern_type*& __frm_nxt,
     intern_type* __to,
     intern_type* __to_end,
     intern_type*& __to_nxt) const {
    return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int encoding() const noexcept { return do_encoding(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool always_noconv() const noexcept { return do_always_noconv(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int
  length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const {
    return do_length(__st, __frm, __end, __mx);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int max_length() const noexcept { return do_max_length(); }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit codecvt(const char*, size_t __refs = 0) : locale::facet(__refs) {}

  ~codecvt() override;

  virtual result
  do_out(state_type& __st,
         const intern_type* __frm,
         const intern_type* __frm_end,
         const intern_type*& __frm_nxt,
         extern_type* __to,
         extern_type* __to_end,
         extern_type*& __to_nxt) const;
  virtual result
  do_in(state_type& __st,
        const extern_type* __frm,
        const extern_type* __frm_end,
        const extern_type*& __frm_nxt,
        intern_type* __to,
        intern_type* __to_end,
        intern_type*& __to_nxt) const;
  virtual result do_unshift(state_type& __st, extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
  virtual int do_encoding() const noexcept;
  virtual bool do_always_noconv() const noexcept;
  virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
  virtual int do_max_length() const noexcept;
};
# 1070 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
template <>
class __attribute__((__visibility__("default"))) codecvt<char32_t, char, mbstate_t>
    : public locale::facet, public codecvt_base {
public:
  typedef char32_t intern_type;
  typedef char extern_type;
  typedef mbstate_t state_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit codecvt(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result
  out(state_type& __st,
      const intern_type* __frm,
      const intern_type* __frm_end,
      const intern_type*& __frm_nxt,
      extern_type* __to,
      extern_type* __to_end,
      extern_type*& __to_nxt) const {
    return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result
  unshift(state_type& __st, extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const {
    return do_unshift(__st, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result
  in(state_type& __st,
     const extern_type* __frm,
     const extern_type* __frm_end,
     const extern_type*& __frm_nxt,
     intern_type* __to,
     intern_type* __to_end,
     intern_type*& __to_nxt) const {
    return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int encoding() const noexcept { return do_encoding(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool always_noconv() const noexcept { return do_always_noconv(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int
  length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const {
    return do_length(__st, __frm, __end, __mx);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int max_length() const noexcept { return do_max_length(); }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit codecvt(const char*, size_t __refs = 0) : locale::facet(__refs) {}

  ~codecvt() override;

  virtual result
  do_out(state_type& __st,
         const intern_type* __frm,
         const intern_type* __frm_end,
         const intern_type*& __frm_nxt,
         extern_type* __to,
         extern_type* __to_end,
         extern_type*& __to_nxt) const;
  virtual result
  do_in(state_type& __st,
        const extern_type* __frm,
        const extern_type* __frm_end,
        const extern_type*& __frm_nxt,
        intern_type* __to,
        intern_type* __to_end,
        intern_type*& __to_nxt) const;
  virtual result do_unshift(state_type& __st, extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
  virtual int do_encoding() const noexcept;
  virtual bool do_always_noconv() const noexcept;
  virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
  virtual int do_max_length() const noexcept;
};
# 1233 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
template <class _InternT, class _ExternT, class _StateT>
class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT> {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit codecvt_byname(const char* __nm, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__nm, __refs) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit codecvt_byname(const string& __nm, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__nm.c_str(), __refs) {}

protected:
  ~codecvt_byname() override;
};

#pragma GCC diagnostic push
# 1245 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 1245 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _InternT, class _ExternT, class _StateT>
codecvt_byname<_InternT, _ExternT, _StateT>::~codecvt_byname() {}
#pragma GCC diagnostic pop

extern template class __attribute__((__visibility__("default"))) codecvt_byname<char, char, mbstate_t>;

extern template class __attribute__((__visibility__("default"))) codecvt_byname<wchar_t, char, mbstate_t>;

extern template class
__attribute__((__visibility__("default"))) codecvt_byname<char16_t, char, mbstate_t>;
extern template class
__attribute__((__visibility__("default"))) codecvt_byname<char32_t, char, mbstate_t>;





template <size_t _Np>
struct __narrow_to_utf8 {
  template <class _OutputIterator, class _CharT>
  _OutputIterator operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const;
};

template <>
struct __narrow_to_utf8<8> {
  template <class _OutputIterator, class _CharT>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const {
    for (; __wb < __we; ++__wb, ++__s)
      *__s = *__wb;
    return __s;
  }
};

#pragma GCC diagnostic push
# 1279 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 1279 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <>
struct __attribute__((__visibility__("default"))) __narrow_to_utf8<16> : public codecvt<char16_t, char, mbstate_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __narrow_to_utf8() : codecvt<char16_t, char, mbstate_t>(1) {}
#pragma GCC diagnostic pop

  ~__narrow_to_utf8() override;

  template <class _OutputIterator, class _CharT>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const {
    result __r = ok;
    mbstate_t __mb;
    while (__wb < __we && __r != error) {
      const int __sz = 32;
      char __buf[__sz];
      char* __bn;
      const char16_t* __wn = (const char16_t*)__wb;
      __r = do_out(__mb, (const char16_t*)__wb, (const char16_t*)__we, __wn, __buf, __buf + __sz, __bn);
      if (__r == codecvt_base::error || __wn == (const char16_t*)__wb)
        __throw_runtime_error("locale not supported");
      for (const char* __p = __buf; __p < __bn; ++__p, ++__s)
        *__s = *__p;
      __wb = (const _CharT*)__wn;
    }
    return __s;
  }
};

#pragma GCC diagnostic push
# 1307 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 1307 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <>
struct __attribute__((__visibility__("default"))) __narrow_to_utf8<32> : public codecvt<char32_t, char, mbstate_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __narrow_to_utf8() : codecvt<char32_t, char, mbstate_t>(1) {}
#pragma GCC diagnostic pop

  ~__narrow_to_utf8() override;

  template <class _OutputIterator, class _CharT>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const {
    result __r = ok;
    mbstate_t __mb;
    while (__wb < __we && __r != error) {
      const int __sz = 32;
      char __buf[__sz];
      char* __bn;
      const char32_t* __wn = (const char32_t*)__wb;
      __r = do_out(__mb, (const char32_t*)__wb, (const char32_t*)__we, __wn, __buf, __buf + __sz, __bn);
      if (__r == codecvt_base::error || __wn == (const char32_t*)__wb)
        __throw_runtime_error("locale not supported");
      for (const char* __p = __buf; __p < __bn; ++__p, ++__s)
        *__s = *__p;
      __wb = (const _CharT*)__wn;
    }
    return __s;
  }
};

template <size_t _Np>
struct __widen_from_utf8 {
  template <class _OutputIterator>
  _OutputIterator operator()(_OutputIterator __s, const char* __nb, const char* __ne) const;
};

template <>
struct __widen_from_utf8<8> {
  template <class _OutputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator operator()(_OutputIterator __s, const char* __nb, const char* __ne) const {
    for (; __nb < __ne; ++__nb, ++__s)
      *__s = *__nb;
    return __s;
  }
};

#pragma GCC diagnostic push
# 1351 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 1351 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <>
struct __attribute__((__visibility__("default"))) __widen_from_utf8<16> : public codecvt<char16_t, char, mbstate_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __widen_from_utf8() : codecvt<char16_t, char, mbstate_t>(1) {}
#pragma GCC diagnostic pop

  ~__widen_from_utf8() override;

  template <class _OutputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator operator()(_OutputIterator __s, const char* __nb, const char* __ne) const {
    result __r = ok;
    mbstate_t __mb;
    while (__nb < __ne && __r != error) {
      const int __sz = 32;
      char16_t __buf[__sz];
      char16_t* __bn;
      const char* __nn = __nb;
      __r = do_in(__mb, __nb, __ne - __nb > __sz ? __nb + __sz : __ne, __nn, __buf, __buf + __sz, __bn);
      if (__r == codecvt_base::error || __nn == __nb)
        __throw_runtime_error("locale not supported");
      for (const char16_t* __p = __buf; __p < __bn; ++__p, ++__s)
        *__s = *__p;
      __nb = __nn;
    }
    return __s;
  }
};

#pragma GCC diagnostic push
# 1379 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 1379 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <>
struct __attribute__((__visibility__("default"))) __widen_from_utf8<32> : public codecvt<char32_t, char, mbstate_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __widen_from_utf8() : codecvt<char32_t, char, mbstate_t>(1) {}
#pragma GCC diagnostic pop

  ~__widen_from_utf8() override;

  template <class _OutputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator operator()(_OutputIterator __s, const char* __nb, const char* __ne) const {
    result __r = ok;
    mbstate_t __mb;
    while (__nb < __ne && __r != error) {
      const int __sz = 32;
      char32_t __buf[__sz];
      char32_t* __bn;
      const char* __nn = __nb;
      __r = do_in(__mb, __nb, __ne - __nb > __sz ? __nb + __sz : __ne, __nn, __buf, __buf + __sz, __bn);
      if (__r == codecvt_base::error || __nn == __nb)
        __throw_runtime_error("locale not supported");
      for (const char32_t* __p = __buf; __p < __bn; ++__p, ++__s)
        *__s = *__p;
      __nb = __nn;
    }
    return __s;
  }
};



template <class _CharT>
class numpunct;

template <>
class __attribute__((__visibility__("default"))) numpunct<char> : public locale::facet {
public:
  typedef char char_type;
  typedef basic_string<char_type> string_type;

  explicit numpunct(size_t __refs = 0);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type decimal_point() const { return do_decimal_point(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type thousands_sep() const { return do_thousands_sep(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) string grouping() const { return do_grouping(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) string_type truename() const { return do_truename(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) string_type falsename() const { return do_falsename(); }

  static locale::id id;

protected:
  ~numpunct() override;
  virtual char_type do_decimal_point() const;
  virtual char_type do_thousands_sep() const;
  virtual string do_grouping() const;
  virtual string_type do_truename() const;
  virtual string_type do_falsename() const;

  char_type __decimal_point_;
  char_type __thousands_sep_;
  string __grouping_;
};


template <>
class __attribute__((__visibility__("default"))) numpunct<wchar_t> : public locale::facet {
public:
  typedef wchar_t char_type;
  typedef basic_string<char_type> string_type;

  explicit numpunct(size_t __refs = 0);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type decimal_point() const { return do_decimal_point(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type thousands_sep() const { return do_thousands_sep(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) string grouping() const { return do_grouping(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) string_type truename() const { return do_truename(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) string_type falsename() const { return do_falsename(); }

  static locale::id id;

protected:
  ~numpunct() override;
  virtual char_type do_decimal_point() const;
  virtual char_type do_thousands_sep() const;
  virtual string do_grouping() const;
  virtual string_type do_truename() const;
  virtual string_type do_falsename() const;

  char_type __decimal_point_;
  char_type __thousands_sep_;
  string __grouping_;
};




template <class _CharT>
class numpunct_byname;

template <>
class __attribute__((__visibility__("default"))) numpunct_byname<char> : public numpunct<char> {
public:
  typedef char char_type;
  typedef basic_string<char_type> string_type;

  explicit numpunct_byname(const char* __nm, size_t __refs = 0);
  explicit numpunct_byname(const string& __nm, size_t __refs = 0);

protected:
  ~numpunct_byname() override;

private:
  void __init(const char*);
};


template <>
class __attribute__((__visibility__("default"))) numpunct_byname<wchar_t> : public numpunct<wchar_t> {
public:
  typedef wchar_t char_type;
  typedef basic_string<char_type> string_type;

  explicit numpunct_byname(const char* __nm, size_t __refs = 0);
  explicit numpunct_byname(const string& __nm, size_t __refs = 0);

protected:
  ~numpunct_byname() override;

private:
  void __init(const char*);
};


}}
# 1511 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale" 3
#pragma clang diagnostic pop
# 221 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_category.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_category.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_category.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_category.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_category.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_category.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_category.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_category.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

class __attribute__((__visibility__("default"))) error_condition;
class __attribute__((__visibility__("default"))) error_code;

class __attribute__((__visibility__("hidden"))) __do_message;

class __attribute__((__visibility__("default"))) error_category {
public:
  virtual ~error_category() noexcept;




  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr error_category() noexcept = default;

  error_category(const error_category&) = delete;
  error_category& operator=(const error_category&) = delete;

  virtual const char* name() const noexcept = 0;
  virtual error_condition default_error_condition(int __ev) const noexcept;
  virtual bool equivalent(int __code, const error_condition& __condition) const noexcept;
  virtual bool equivalent(const error_code& __code, int __condition) const noexcept;
  virtual string message(int __ev) const = 0;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const error_category& __rhs) const noexcept { return this == &__rhs; }
# 56 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_category.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const error_category& __rhs) const noexcept { return !(*this == __rhs); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(const error_category& __rhs) const noexcept { return this < &__rhs; }



  friend class __attribute__((__visibility__("hidden"))) __do_message;
};

class __attribute__((__visibility__("hidden"))) __do_message : public error_category {
public:
  string message(int __ev) const override;
};

__attribute__((__const__)) __attribute__((__visibility__("default"))) const error_category& generic_category() noexcept;
__attribute__((__const__)) __attribute__((__visibility__("default"))) const error_category& system_category() noexcept;

}}
# 73 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_category.h" 3
#pragma clang diagnostic pop
# 222 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_code.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_code.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 1 3
# 104 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cerrno" 1 3
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cerrno" 3
# 105 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 2 3
# 108 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
# 128 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
#pragma clang diagnostic push
# 128 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 128 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 128 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 128 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 128 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 128 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 143 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
enum class errc{
    address_family_not_supported = 47,
    address_in_use = 48,
    address_not_available = 49,
    already_connected = 56,
    argument_list_too_long = 7,
    argument_out_of_domain = 33,
    bad_address = 14,
    bad_file_descriptor = 9,
    bad_message = 94,
    broken_pipe = 32,
    connection_aborted = 53,
    connection_already_in_progress = 37,
    connection_refused = 61,
    connection_reset = 54,
    cross_device_link = 18,
    destination_address_required = 39,
    device_or_resource_busy = 16,
    directory_not_empty = 66,
    executable_format_error = 8,
    file_exists = 17,
    file_too_large = 27,
    filename_too_long = 63,
    function_not_supported = 78,
    host_unreachable = 65,
    identifier_removed = 90,
    illegal_byte_sequence = 92,
    inappropriate_io_control_operation = 25,
    interrupted = 4,
    invalid_argument = 22,
    invalid_seek = 29,
    io_error = 5,
    is_a_directory = 21,
    message_size = 40,
    network_down = 50,
    network_reset = 52,
    network_unreachable = 51,
    no_buffer_space = 55,
    no_child_process = 10,
    no_link = 97,
    no_lock_available = 77,

    no_message_available __attribute__((__deprecated__)) =
#pragma GCC diagnostic push
# 186 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 186 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

                                              96



#pragma GCC diagnostic pop
    ,

    no_message = 91,
    no_protocol_option = 42,
    no_space_on_device = 28,

    no_stream_resources __attribute__((__deprecated__)) =
#pragma GCC diagnostic push
# 200 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 200 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

                                              98



#pragma GCC diagnostic pop
    ,

    no_such_device_or_address = 6,
    no_such_device = 19,
    no_such_file_or_directory = 2,
    no_such_process = 3,
    not_a_directory = 20,
    not_a_socket = 38,

    not_a_stream __attribute__((__deprecated__)) =
#pragma GCC diagnostic push
# 217 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 217 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

                                      99



#pragma GCC diagnostic pop
    ,

    not_connected = 57,
    not_enough_memory = 12,
    not_supported = 45,
    operation_canceled = 89,
    operation_in_progress = 36,
    operation_not_permitted = 1,
    operation_not_supported = 102,
    operation_would_block = 35,
    owner_dead = 105,
    permission_denied = 13,
    protocol_error = 100,
    protocol_not_supported = 43,
    read_only_file_system = 30,
    resource_deadlock_would_occur = 11,
    resource_unavailable_try_again = 35,
    result_out_of_range = 34,
    state_not_recoverable = 104,

    stream_timeout __attribute__((__deprecated__)) =
#pragma GCC diagnostic push
# 245 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 245 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

                                        101



#pragma GCC diagnostic pop
    ,

    text_file_busy = 26,
    timed_out = 60,
    too_many_files_open_in_system = 23,
    too_many_files_open = 24,
    too_many_links = 31,
    too_many_symbolic_link_levels = 62,
    value_too_large = 84,
    wrong_protocol_type = 41};


}}
# 264 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/errc.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_code.h" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_condition.h" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_condition.h" 3


#pragma clang diagnostic push
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_condition.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_condition.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_condition.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_condition.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_condition.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_condition.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_error_condition_enum : public false_type {};


template <class _Tp>
inline constexpr bool is_error_condition_enum_v = is_error_condition_enum<_Tp>::value;


template <>
struct is_error_condition_enum<errc> : true_type {};






namespace __adl_only {


void make_error_condition() = delete;
}

class __attribute__((__visibility__("default"))) error_condition {
  int __val_;
  const error_category* __cat_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) error_condition() noexcept : __val_(0), __cat_(&generic_category()) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) error_condition(int __val, const error_category& __cat) noexcept
      : __val_(__val),
        __cat_(&__cat) {}

  template <class _Ep, __enable_if_t<is_error_condition_enum<_Ep>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) error_condition(_Ep __e) noexcept {
    using __adl_only::make_error_condition;
    *this = make_error_condition(__e);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void assign(int __val, const error_category& __cat) noexcept {
    __val_ = __val;
    __cat_ = &__cat;
  }

  template <class _Ep, __enable_if_t<is_error_condition_enum<_Ep>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) error_condition& operator=(_Ep __e) noexcept {
    using __adl_only::make_error_condition;
    *this = make_error_condition(__e);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void clear() noexcept {
    __val_ = 0;
    __cat_ = &generic_category();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int value() const noexcept { return __val_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const error_category& category() const noexcept { return *__cat_; }
  string message() const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit operator bool() const noexcept { return __val_ != 0; }
};

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) error_condition make_error_condition(errc __e) noexcept {
  return error_condition(static_cast<int>(__e), generic_category());
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const error_condition& __x, const error_condition& __y) noexcept {
  return __x.category() == __y.category() && __x.value() == __y.value();
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const error_condition& __x, const error_condition& __y) noexcept {
  return !(__x == __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(const error_condition& __x, const error_condition& __y) noexcept {
  return __x.category() < __y.category() || (__x.category() == __y.category() && __x.value() < __y.value());
}
# 121 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_condition.h" 3
template <>
struct hash<error_condition> : public __unary_function<error_condition, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(const error_condition& __ec) const noexcept {
    return static_cast<size_t>(__ec.value());
  }
};

}}
# 128 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_condition.h" 3
#pragma clang diagnostic pop
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_code.h" 2 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_code.h" 3


#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_code.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_code.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_code.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_code.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_code.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_code.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_error_code_enum : public false_type {};


template <class _Tp>
inline constexpr bool is_error_code_enum_v = is_error_code_enum<_Tp>::value;


namespace __adl_only {


void make_error_code() = delete;
}

class __attribute__((__visibility__("default"))) error_code {
  int __val_;
  const error_category* __cat_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) error_code() noexcept : __val_(0), __cat_(&system_category()) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) error_code(int __val, const error_category& __cat) noexcept : __val_(__val), __cat_(&__cat) {}

  template <class _Ep, __enable_if_t<is_error_code_enum<_Ep>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) error_code(_Ep __e) noexcept {
    using __adl_only::make_error_code;
    *this = make_error_code(__e);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void assign(int __val, const error_category& __cat) noexcept {
    __val_ = __val;
    __cat_ = &__cat;
  }

  template <class _Ep, __enable_if_t<is_error_code_enum<_Ep>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) error_code& operator=(_Ep __e) noexcept {
    using __adl_only::make_error_code;
    *this = make_error_code(__e);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void clear() noexcept {
    __val_ = 0;
    __cat_ = &system_category();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int value() const noexcept { return __val_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const error_category& category() const noexcept { return *__cat_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) error_condition default_error_condition() const noexcept {
    return __cat_->default_error_condition(__val_);
  }

  string message() const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit operator bool() const noexcept { return __val_ != 0; }
};

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) error_code make_error_code(errc __e) noexcept {
  return error_code(static_cast<int>(__e), generic_category());
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const error_code& __x, const error_code& __y) noexcept {
  return __x.category() == __y.category() && __x.value() == __y.value();
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const error_code& __x, const error_condition& __y) noexcept {
  return __x.category().equivalent(__x.value(), __y) || __y.category().equivalent(__x, __y.value());
}


inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const error_condition& __x, const error_code& __y) noexcept {
  return __y == __x;
}




inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const error_code& __x, const error_code& __y) noexcept {
  return !(__x == __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const error_code& __x, const error_condition& __y) noexcept {
  return !(__x == __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const error_condition& __x, const error_code& __y) noexcept {
  return !(__x == __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(const error_code& __x, const error_code& __y) noexcept {
  return __x.category() < __y.category() || (__x.category() == __y.category() && __x.value() < __y.value());
}
# 134 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_code.h" 3
template <>
struct hash<error_code> : public __unary_function<error_code, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(const error_code& __ec) const noexcept {
    return static_cast<size_t>(__ec.value());
  }
};

}}
# 141 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/error_code.h" 3
#pragma clang diagnostic pop
# 223 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/system_error.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/system_error.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/system_error.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/system_error.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/system_error.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/system_error.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/system_error.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/system_error.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

class __attribute__((__visibility__("default"))) system_error : public runtime_error {
  error_code __ec_;

public:
  system_error(error_code __ec, const string& __what_arg);
  system_error(error_code __ec, const char* __what_arg);
  system_error(error_code __ec);
  system_error(int __ev, const error_category& __ecat, const string& __what_arg);
  system_error(int __ev, const error_category& __ecat, const char* __what_arg);
  system_error(int __ev, const error_category& __ecat);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) system_error(const system_error&) noexcept = default;
  ~system_error() noexcept override;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const error_code& code() const noexcept { return __ec_; }
};

[[noreturn]] __attribute__((__visibility__("default"))) void __throw_system_error(int __ev, const char* __what_arg);
[[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline void __throw_system_error(error_code __ec, const char* __what_arg) {

  throw system_error(__ec, __what_arg);




}

}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__system_error/system_error.h" 3
#pragma clang diagnostic pop
# 225 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 2 3
# 240 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 244 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 2 3

#pragma clang diagnostic push
# 245 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 245 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 245 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 245 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 245 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 245 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

typedef ptrdiff_t streamsize;

class __attribute__((__visibility__("default"))) ios_base {
public:
  class __attribute__((__visibility__("default"))) failure;

  typedef unsigned int fmtflags;
  static const fmtflags boolalpha = 0x0001;
  static const fmtflags dec = 0x0002;
  static const fmtflags fixed = 0x0004;
  static const fmtflags hex = 0x0008;
  static const fmtflags internal = 0x0010;
  static const fmtflags left = 0x0020;
  static const fmtflags oct = 0x0040;
  static const fmtflags right = 0x0080;
  static const fmtflags scientific = 0x0100;
  static const fmtflags showbase = 0x0200;
  static const fmtflags showpoint = 0x0400;
  static const fmtflags showpos = 0x0800;
  static const fmtflags skipws = 0x1000;
  static const fmtflags unitbuf = 0x2000;
  static const fmtflags uppercase = 0x4000;
  static const fmtflags adjustfield = left | right | internal;
  static const fmtflags basefield = dec | oct | hex;
  static const fmtflags floatfield = scientific | fixed;

  typedef unsigned int iostate;
  static const iostate badbit = 0x1;
  static const iostate eofbit = 0x2;
  static const iostate failbit = 0x4;
  static const iostate goodbit = 0x0;

  typedef unsigned int openmode;
  static const openmode app = 0x01;
  static const openmode ate = 0x02;
  static const openmode binary = 0x04;
  static const openmode in = 0x08;
  static const openmode out = 0x10;
  static const openmode trunc = 0x20;




  enum seekdir { beg, cur, end };
# 301 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 3
  class __attribute__((__visibility__("default"))) Init;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) fmtflags flags() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) fmtflags flags(fmtflags __fmtfl);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) fmtflags setf(fmtflags __fmtfl);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) fmtflags setf(fmtflags __fmtfl, fmtflags __mask);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void unsetf(fmtflags __mask);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) streamsize precision() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) streamsize precision(streamsize __prec);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) streamsize width() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) streamsize width(streamsize __wide);


  locale imbue(const locale& __loc);
  locale getloc() const;


  static int xalloc();
  long& iword(int __index);
  void*& pword(int __index);


  virtual ~ios_base();


  enum event { erase_event, imbue_event, copyfmt_event };
  typedef void (*event_callback)(event, ios_base&, int __index);
  void register_callback(event_callback __fn, int __index);

  ios_base(const ios_base&) = delete;
  ios_base& operator=(const ios_base&) = delete;

  static bool sync_with_stdio(bool __sync = true);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iostate rdstate() const;
  void clear(iostate __state = goodbit);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void setstate(iostate __state);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool good() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool eof() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool fail() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool bad() const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iostate exceptions() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void exceptions(iostate __iostate);

  void __set_badbit_and_consider_rethrow();
  void __set_failbit_and_consider_rethrow();

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __setstate_nothrow(iostate __state) {
    if (__rdbuf_)
      __rdstate_ |= __state;
    else
      __rdstate_ |= __state | ios_base::badbit;
  }

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ios_base() : __loc_(nullptr) {






  }

  void init(void* __sb);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void* rdbuf() const { return __rdbuf_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void rdbuf(void* __sb) {
    __rdbuf_ = __sb;
    clear();
  }

  void __call_callbacks(event);
  void copyfmt(const ios_base&);
  void move(ios_base&);
  void swap(ios_base&) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void set_rdbuf(void* __sb) { __rdbuf_ = __sb; }

private:

  fmtflags __fmtflags_;
  streamsize __precision_;
  streamsize __width_;
  iostate __rdstate_;
  iostate __exceptions_;
  void* __rdbuf_;
  void* __loc_;
  event_callback* __fn_;
  int* __index_;
  size_t __event_size_;
  size_t __event_cap_;



  static atomic<int> __xindex_;



  long* __iarray_;
  size_t __iarray_size_;
  size_t __iarray_cap_;
  void** __parray_;
  size_t __parray_size_;
  size_t __parray_cap_;
};


enum class io_errc{stream = 1};


template <>
struct is_error_code_enum<io_errc> : public true_type {};






__attribute__((__visibility__("default"))) const error_category& iostream_category() noexcept;

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) error_code make_error_code(io_errc __e) noexcept {
  return error_code(static_cast<int>(__e), iostream_category());
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) error_condition make_error_condition(io_errc __e) noexcept {
  return error_condition(static_cast<int>(__e), iostream_category());
}

class __attribute__((__visibility__("default"))) ios_base::failure : public system_error {
public:
  explicit failure(const string& __msg, const error_code& __ec = io_errc::stream);
  explicit failure(const char* __msg, const error_code& __ec = io_errc::stream);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) failure(const failure&) noexcept = default;
  ~failure() noexcept override;
};

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_failure(char const* __msg) {

  throw ios_base::failure(__msg);



}

class __attribute__((__visibility__("default"))) ios_base::Init {
public:
  Init();
  ~Init();
};



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ios_base::fmtflags ios_base::flags() const { return __fmtflags_; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ios_base::fmtflags ios_base::flags(fmtflags __fmtfl) {
  fmtflags __r = __fmtflags_;
  __fmtflags_ = __fmtfl;
  return __r;
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ios_base::fmtflags ios_base::setf(fmtflags __fmtfl) {
  fmtflags __r = __fmtflags_;
  __fmtflags_ |= __fmtfl;
  return __r;
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void ios_base::unsetf(fmtflags __mask) { __fmtflags_ &= ~__mask; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ios_base::fmtflags ios_base::setf(fmtflags __fmtfl, fmtflags __mask) {
  fmtflags __r = __fmtflags_;
  unsetf(__mask);
  __fmtflags_ |= __fmtfl & __mask;
  return __r;
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) streamsize ios_base::precision() const { return __precision_; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) streamsize ios_base::precision(streamsize __prec) {
  streamsize __r = __precision_;
  __precision_ = __prec;
  return __r;
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) streamsize ios_base::width() const { return __width_; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) streamsize ios_base::width(streamsize __wide) {
  streamsize __r = __width_;
  __width_ = __wide;
  return __r;
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ios_base::iostate ios_base::rdstate() const { return __rdstate_; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void ios_base::setstate(iostate __state) { clear(__rdstate_ | __state); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool ios_base::good() const { return __rdstate_ == 0; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool ios_base::eof() const { return (__rdstate_ & eofbit) != 0; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool ios_base::fail() const { return (__rdstate_ & (failbit | badbit)) != 0; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool ios_base::bad() const { return (__rdstate_ & badbit) != 0; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ios_base::iostate ios_base::exceptions() const { return __exceptions_; }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void ios_base::exceptions(iostate __iostate) {
  __exceptions_ = __iostate;
  clear(__rdstate_);
}

template <class _Traits>


struct __attribute__((__packed__)) _FillHelper {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __init() { __set_ = false; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _FillHelper& operator=(typename _Traits::int_type __x) {
    __set_ = true;
    __fill_val_ = __x;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __is_set() const { return __set_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename _Traits::int_type __get() const { return __fill_val_; }

private:
  typename _Traits::int_type __fill_val_;
  bool __set_;
};

template <class _Traits>
struct __attribute__((__packed__)) _SentinelValueFill {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __init() { __fill_val_ = _Traits::eof(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _SentinelValueFill& operator=(typename _Traits::int_type __x) {
    __fill_val_ = __x;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __is_set() const { return __fill_val_ != _Traits::eof(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename _Traits::int_type __get() const { return __fill_val_; }

private:
  typename _Traits::int_type __fill_val_;
};

template <class _CharT, class _Traits>
class basic_ios : public ios_base {
public:

  typedef _CharT char_type;
  typedef _Traits traits_type;

  typedef typename traits_type::int_type int_type;
  typedef typename traits_type::pos_type pos_type;
  typedef typename traits_type::off_type off_type;

  static_assert(is_same<_CharT, typename traits_type::char_type>::value,
                "traits_type::char_type must be the same type as CharT");






  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit operator bool() const { return !fail(); }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!() const { return fail(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iostate rdstate() const { return ios_base::rdstate(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void clear(iostate __state = goodbit) { ios_base::clear(__state); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void setstate(iostate __state) { ios_base::setstate(__state); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool good() const { return ios_base::good(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool eof() const { return ios_base::eof(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool fail() const { return ios_base::fail(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool bad() const { return ios_base::bad(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iostate exceptions() const { return ios_base::exceptions(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void exceptions(iostate __iostate) { ios_base::exceptions(__iostate); }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit basic_ios(basic_streambuf<char_type, traits_type>* __sb);
  ~basic_ios() override;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<char_type, traits_type>* tie() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<char_type, traits_type>* tie(basic_ostream<char_type, traits_type>* __tiestr);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_streambuf<char_type, traits_type>* rdbuf() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_streambuf<char_type, traits_type>* rdbuf(basic_streambuf<char_type, traits_type>* __sb);

  basic_ios& copyfmt(const basic_ios& __rhs);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type fill() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type fill(char_type __ch);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) locale imbue(const locale& __loc);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char narrow(char_type __c, char __dfault) const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type widen(char __c) const;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ios() {


  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void init(basic_streambuf<char_type, traits_type>* __sb);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void move(basic_ios& __rhs);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void move(basic_ios&& __rhs) { move(__rhs); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(basic_ios& __rhs) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void set_rdbuf(basic_streambuf<char_type, traits_type>* __sb);

private:
  basic_ostream<char_type, traits_type>* __tie_;




  using _FillType = _SentinelValueFill<traits_type>;

  mutable _FillType __fill_;
};

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ios<_CharT, _Traits>::basic_ios(basic_streambuf<char_type, traits_type>* __sb) {
  init(__sb);
}

template <class _CharT, class _Traits>
basic_ios<_CharT, _Traits>::~basic_ios() {}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void basic_ios<_CharT, _Traits>::init(basic_streambuf<char_type, traits_type>* __sb) {
  ios_base::init(__sb);
  __tie_ = nullptr;
  __fill_.__init();
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>* basic_ios<_CharT, _Traits>::tie() const {
  return __tie_;
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>*
basic_ios<_CharT, _Traits>::tie(basic_ostream<char_type, traits_type>* __tiestr) {
  basic_ostream<char_type, traits_type>* __r = __tie_;
  __tie_ = __tiestr;
  return __r;
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_streambuf<_CharT, _Traits>* basic_ios<_CharT, _Traits>::rdbuf() const {
  return static_cast<basic_streambuf<char_type, traits_type>*>(ios_base::rdbuf());
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_streambuf<_CharT, _Traits>*
basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<char_type, traits_type>* __sb) {
  basic_streambuf<char_type, traits_type>* __r = rdbuf();
  ios_base::rdbuf(__sb);
  return __r;
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) locale basic_ios<_CharT, _Traits>::imbue(const locale& __loc) {
  locale __r = getloc();
  ios_base::imbue(__loc);
  if (rdbuf())
    rdbuf()->pubimbue(__loc);
  return __r;
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char basic_ios<_CharT, _Traits>::narrow(char_type __c, char __dfault) const {
  return std::use_facet<ctype<char_type> >(getloc()).narrow(__c, __dfault);
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _CharT basic_ios<_CharT, _Traits>::widen(char __c) const {
  return std::use_facet<ctype<char_type> >(getloc()).widen(__c);
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _CharT basic_ios<_CharT, _Traits>::fill() const {
  if (!__fill_.__is_set())
    __fill_ = widen(' ');
  return __fill_.__get();
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _CharT basic_ios<_CharT, _Traits>::fill(char_type __ch) {
  if (!__fill_.__is_set())
    __fill_ = widen(' ');
  char_type __r = __fill_.__get();
  __fill_ = __ch;
  return __r;
}

template <class _CharT, class _Traits>
basic_ios<_CharT, _Traits>& basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs) {
  if (this != &__rhs) {
    __call_callbacks(erase_event);
    ios_base::copyfmt(__rhs);
    __tie_ = __rhs.__tie_;
    __fill_ = __rhs.__fill_;
    __call_callbacks(copyfmt_event);
    exceptions(__rhs.exceptions());
  }
  return *this;
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void basic_ios<_CharT, _Traits>::move(basic_ios& __rhs) {
  ios_base::move(__rhs);
  __tie_ = __rhs.__tie_;
  __rhs.__tie_ = nullptr;
  __fill_ = __rhs.__fill_;
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void basic_ios<_CharT, _Traits>::swap(basic_ios& __rhs) noexcept {
  ios_base::swap(__rhs);
  std::swap(__tie_, __rhs.__tie_);
  std::swap(__fill_, __rhs.__fill_);
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void basic_ios<_CharT, _Traits>::set_rdbuf(basic_streambuf<char_type, traits_type>* __sb) {
  ios_base::set_rdbuf(__sb);
}

extern template class __attribute__((__visibility__("default"))) basic_ios<char>;


extern template class __attribute__((__visibility__("default"))) basic_ios<wchar_t>;


__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& boolalpha(ios_base& __str) {
  __str.setf(ios_base::boolalpha);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& noboolalpha(ios_base& __str) {
  __str.unsetf(ios_base::boolalpha);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& showbase(ios_base& __str) {
  __str.setf(ios_base::showbase);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& noshowbase(ios_base& __str) {
  __str.unsetf(ios_base::showbase);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& showpoint(ios_base& __str) {
  __str.setf(ios_base::showpoint);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& noshowpoint(ios_base& __str) {
  __str.unsetf(ios_base::showpoint);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& showpos(ios_base& __str) {
  __str.setf(ios_base::showpos);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& noshowpos(ios_base& __str) {
  __str.unsetf(ios_base::showpos);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& skipws(ios_base& __str) {
  __str.setf(ios_base::skipws);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& noskipws(ios_base& __str) {
  __str.unsetf(ios_base::skipws);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& uppercase(ios_base& __str) {
  __str.setf(ios_base::uppercase);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& nouppercase(ios_base& __str) {
  __str.unsetf(ios_base::uppercase);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& unitbuf(ios_base& __str) {
  __str.setf(ios_base::unitbuf);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& nounitbuf(ios_base& __str) {
  __str.unsetf(ios_base::unitbuf);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& internal(ios_base& __str) {
  __str.setf(ios_base::internal, ios_base::adjustfield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& left(ios_base& __str) {
  __str.setf(ios_base::left, ios_base::adjustfield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& right(ios_base& __str) {
  __str.setf(ios_base::right, ios_base::adjustfield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& dec(ios_base& __str) {
  __str.setf(ios_base::dec, ios_base::basefield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& hex(ios_base& __str) {
  __str.setf(ios_base::hex, ios_base::basefield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& oct(ios_base& __str) {
  __str.setf(ios_base::oct, ios_base::basefield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& fixed(ios_base& __str) {
  __str.setf(ios_base::fixed, ios_base::floatfield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& scientific(ios_base& __str) {
  __str.setf(ios_base::scientific, ios_base::floatfield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& hexfloat(ios_base& __str) {
  __str.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);
  return __str;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline ios_base& defaultfloat(ios_base& __str) {
  __str.unsetf(ios_base::floatfield);
  return __str;
}

}}
# 867 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 3
#pragma clang diagnostic pop
# 881 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/mutex" 1 3
# 191 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/mutex" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__condition_variable/condition_variable.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__condition_variable/condition_variable.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/mutex.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/mutex.h" 3




#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/mutex.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/mutex.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/mutex.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/mutex.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/mutex.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/mutex.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

class __attribute__((__visibility__("default"))) mutex {
  __libcpp_mutex_t __m_ = {0x32AAABA7, {0}};

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr mutex() = default;

  mutex(const mutex&) = delete;
  mutex& operator=(const mutex&) = delete;




  ~mutex() noexcept;


  void lock() ;
  bool try_lock() noexcept ;
  void unlock() noexcept ;

  typedef __libcpp_mutex_t* native_handle_type;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) native_handle_type native_handle() { return &__m_; }
};

static_assert(is_nothrow_default_constructible<mutex>::value, "the default constructor for std::mutex must be nothrow");

}}
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/mutex.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__condition_variable/condition_variable.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/unique_lock.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/unique_lock.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/tag_types.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/tag_types.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/tag_types.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/tag_types.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/tag_types.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/tag_types.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/tag_types.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/tag_types.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

struct __attribute__((__visibility__("default"))) defer_lock_t {
  explicit defer_lock_t() = default;
};

struct __attribute__((__visibility__("default"))) try_to_lock_t {
  explicit try_to_lock_t() = default;
};

struct __attribute__((__visibility__("default"))) adopt_lock_t {
  explicit adopt_lock_t() = default;
};


inline constexpr defer_lock_t defer_lock = defer_lock_t();
inline constexpr try_to_lock_t try_to_lock = try_to_lock_t();
inline constexpr adopt_lock_t adopt_lock = adopt_lock_t();






}}
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/tag_types.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/unique_lock.h" 2 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/unique_lock.h" 3




#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/unique_lock.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/unique_lock.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/unique_lock.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/unique_lock.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/unique_lock.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/unique_lock.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Mutex>
class unique_lock {
public:
  typedef _Mutex mutex_type;

private:
  mutex_type* __m_;
  bool __owns_;

public:
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_lock() noexcept : __m_(nullptr), __owns_(false) {}
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit unique_lock(mutex_type& __m)
      : __m_(std::addressof(__m)), __owns_(true) {
    __m_->lock();
  }

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_lock(mutex_type& __m, defer_lock_t) noexcept
      : __m_(std::addressof(__m)),
        __owns_(false) {}

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_lock(mutex_type& __m, try_to_lock_t)
      : __m_(std::addressof(__m)), __owns_(__m.try_lock()) {}

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_lock(mutex_type& __m, adopt_lock_t)
      : __m_(std::addressof(__m)), __owns_(true) {}

  template <class _Clock, class _Duration>
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_lock(mutex_type& __m, const chrono::time_point<_Clock, _Duration>& __t)
      : __m_(std::addressof(__m)), __owns_(__m.try_lock_until(__t)) {}

  template <class _Rep, class _Period>
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_lock(mutex_type& __m, const chrono::duration<_Rep, _Period>& __d)
      : __m_(std::addressof(__m)), __owns_(__m.try_lock_for(__d)) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~unique_lock() {
    if (__owns_)
      __m_->unlock();
  }

  unique_lock(unique_lock const&) = delete;
  unique_lock& operator=(unique_lock const&) = delete;

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_lock(unique_lock&& __u) noexcept
      : __m_(__u.__m_),
        __owns_(__u.__owns_) {
    __u.__m_ = nullptr;
    __u.__owns_ = false;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unique_lock& operator=(unique_lock&& __u) noexcept {
    if (__owns_)
      __m_->unlock();

    __m_ = __u.__m_;
    __owns_ = __u.__owns_;
    __u.__m_ = nullptr;
    __u.__owns_ = false;
    return *this;
  }

  void lock();
  bool try_lock();

  template <class _Rep, class _Period>
  bool try_lock_for(const chrono::duration<_Rep, _Period>& __d);

  template <class _Clock, class _Duration>
  bool try_lock_until(const chrono::time_point<_Clock, _Duration>& __t);

  void unlock();

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(unique_lock& __u) noexcept {
    std::swap(__m_, __u.__m_);
    std::swap(__owns_, __u.__owns_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) mutex_type* release() noexcept {
    mutex_type* __m = __m_;
    __m_ = nullptr;
    __owns_ = false;
    return __m;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool owns_lock() const noexcept { return __owns_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit operator bool() const noexcept { return __owns_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) mutex_type* mutex() const noexcept { return __m_; }
};
template <class... _Tag> [[maybe_unused]] unique_lock(typename _Tag::__allow_ctad...)->unique_lock<_Tag...>;

template <class _Mutex>
void unique_lock<_Mutex>::lock() {
  if (__m_ == nullptr)
    __throw_system_error(1, "unique_lock::lock: references null mutex");
  if (__owns_)
    __throw_system_error(11, "unique_lock::lock: already locked");
  __m_->lock();
  __owns_ = true;
}

template <class _Mutex>
bool unique_lock<_Mutex>::try_lock() {
  if (__m_ == nullptr)
    __throw_system_error(1, "unique_lock::try_lock: references null mutex");
  if (__owns_)
    __throw_system_error(11, "unique_lock::try_lock: already locked");
  __owns_ = __m_->try_lock();
  return __owns_;
}

template <class _Mutex>
template <class _Rep, class _Period>
bool unique_lock<_Mutex>::try_lock_for(const chrono::duration<_Rep, _Period>& __d) {
  if (__m_ == nullptr)
    __throw_system_error(1, "unique_lock::try_lock_for: references null mutex");
  if (__owns_)
    __throw_system_error(11, "unique_lock::try_lock_for: already locked");
  __owns_ = __m_->try_lock_for(__d);
  return __owns_;
}

template <class _Mutex>
template <class _Clock, class _Duration>
bool unique_lock<_Mutex>::try_lock_until(const chrono::time_point<_Clock, _Duration>& __t) {
  if (__m_ == nullptr)
    __throw_system_error(1, "unique_lock::try_lock_until: references null mutex");
  if (__owns_)
    __throw_system_error(11, "unique_lock::try_lock_until: already locked");
  __owns_ = __m_->try_lock_until(__t);
  return __owns_;
}

template <class _Mutex>
void unique_lock<_Mutex>::unlock() {
  if (!__owns_)
    __throw_system_error(1, "unique_lock::unlock: not locked");
  __m_->unlock();
  __owns_ = false;
}

template <class _Mutex>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>& __y) noexcept {
  __x.swap(__y);
}

}}
# 173 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/unique_lock.h" 3
#pragma clang diagnostic pop
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__condition_variable/condition_variable.h" 2 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__condition_variable/condition_variable.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__condition_variable/condition_variable.h" 2 3

#pragma clang diagnostic push
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__condition_variable/condition_variable.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__condition_variable/condition_variable.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__condition_variable/condition_variable.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__condition_variable/condition_variable.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__condition_variable/condition_variable.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__condition_variable/condition_variable.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {




enum class cv_status{no_timeout, timeout};


class __attribute__((__visibility__("default"))) condition_variable {
  __libcpp_condvar_t __cv_ = {0x3CB0B1BB, {0}};

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr condition_variable() noexcept = default;




  ~condition_variable();


  condition_variable(const condition_variable&) = delete;
  condition_variable& operator=(const condition_variable&) = delete;

  void notify_one() noexcept;
  void notify_all() noexcept;

  void wait(unique_lock<mutex>& __lk) noexcept;
  template <class _Predicate>
  inline __attribute__((__visibility__("hidden"))) void wait(unique_lock<mutex>& __lk, _Predicate __pred);

  template <class _Clock, class _Duration>
  inline __attribute__((__visibility__("hidden"))) cv_status
  wait_until(unique_lock<mutex>& __lk, const chrono::time_point<_Clock, _Duration>& __t);

  template <class _Clock, class _Duration, class _Predicate>
  inline __attribute__((__visibility__("hidden"))) bool
  wait_until(unique_lock<mutex>& __lk, const chrono::time_point<_Clock, _Duration>& __t, _Predicate __pred);

  template <class _Rep, class _Period>
  inline __attribute__((__visibility__("hidden"))) cv_status
  wait_for(unique_lock<mutex>& __lk, const chrono::duration<_Rep, _Period>& __d);

  template <class _Rep, class _Period, class _Predicate>
  bool __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  wait_for(unique_lock<mutex>& __lk, const chrono::duration<_Rep, _Period>& __d, _Predicate __pred);

  typedef __libcpp_condvar_t* native_handle_type;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) native_handle_type native_handle() { return &__cv_; }

private:
  void
  __do_timed_wait(unique_lock<mutex>& __lk, chrono::time_point<chrono::system_clock, chrono::nanoseconds>) noexcept;




  template <class _Clock>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __do_timed_wait(unique_lock<mutex>& __lk, chrono::time_point<_Clock, chrono::nanoseconds>) noexcept;
};


template <class _Rep, class _Period, __enable_if_t<is_floating_point<_Rep>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) chrono::nanoseconds __safe_nanosecond_cast(chrono::duration<_Rep, _Period> __d) {
  using namespace chrono;
  using __ratio = ratio_divide<_Period, nano>;
  using __ns_rep = nanoseconds::rep;
  _Rep __result_float = __d.count() * __ratio::num / __ratio::den;

  _Rep __result_max = numeric_limits<__ns_rep>::max();
  if (__result_float >= __result_max) {
    return nanoseconds::max();
  }

  _Rep __result_min = numeric_limits<__ns_rep>::min();
  if (__result_float <= __result_min) {
    return nanoseconds::min();
  }

  return nanoseconds(static_cast<__ns_rep>(__result_float));
}

template <class _Rep, class _Period, __enable_if_t<!is_floating_point<_Rep>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) chrono::nanoseconds __safe_nanosecond_cast(chrono::duration<_Rep, _Period> __d) {
  using namespace chrono;
  if (__d.count() == 0) {
    return nanoseconds(0);
  }

  using __ratio = ratio_divide<_Period, nano>;
  using __ns_rep = nanoseconds::rep;
  __ns_rep __result_max = numeric_limits<__ns_rep>::max();
  if (__d.count() > 0 && __d.count() > __result_max / __ratio::num) {
    return nanoseconds::max();
  }

  __ns_rep __result_min = numeric_limits<__ns_rep>::min();
  if (__d.count() < 0 && __d.count() < __result_min / __ratio::num) {
    return nanoseconds::min();
  }

  __ns_rep __result = __d.count() * __ratio::num / __ratio::den;
  if (__result == 0) {
    return nanoseconds(1);
  }

  return nanoseconds(__result);
}


template <class _Predicate>
void condition_variable::wait(unique_lock<mutex>& __lk, _Predicate __pred) {
  while (!__pred())
    wait(__lk);
}

template <class _Clock, class _Duration>
cv_status condition_variable::wait_until(unique_lock<mutex>& __lk, const chrono::time_point<_Clock, _Duration>& __t) {
  using namespace chrono;
  using __clock_tp_ns = time_point<_Clock, nanoseconds>;

  typename _Clock::time_point __now = _Clock::now();
  if (__t <= __now)
    return cv_status::timeout;

  __clock_tp_ns __t_ns = __clock_tp_ns(std::__safe_nanosecond_cast(__t.time_since_epoch()));

  __do_timed_wait(__lk, __t_ns);
  return _Clock::now() < __t ? cv_status::no_timeout : cv_status::timeout;
}

template <class _Clock, class _Duration, class _Predicate>
bool condition_variable::wait_until(
    unique_lock<mutex>& __lk, const chrono::time_point<_Clock, _Duration>& __t, _Predicate __pred) {
  while (!__pred()) {
    if (wait_until(__lk, __t) == cv_status::timeout)
      return __pred();
  }
  return true;
}

template <class _Rep, class _Period>
cv_status condition_variable::wait_for(unique_lock<mutex>& __lk, const chrono::duration<_Rep, _Period>& __d) {
  using namespace chrono;
  if (__d <= __d.zero())
    return cv_status::timeout;
  using __ns_rep = nanoseconds::rep;
  steady_clock::time_point __c_now = steady_clock::now();





  using __clock_tp_ns = time_point<system_clock, nanoseconds>;
  __ns_rep __now_count_ns = std::__safe_nanosecond_cast(system_clock::now().time_since_epoch()).count();


  __ns_rep __d_ns_count = std::__safe_nanosecond_cast(__d).count();

  if (__now_count_ns > numeric_limits<__ns_rep>::max() - __d_ns_count) {
    __do_timed_wait(__lk, __clock_tp_ns::max());
  } else {
    __do_timed_wait(__lk, __clock_tp_ns(nanoseconds(__now_count_ns + __d_ns_count)));
  }

  return steady_clock::now() - __c_now < __d ? cv_status::no_timeout : cv_status::timeout;
}

template <class _Rep, class _Period, class _Predicate>
inline bool
condition_variable::wait_for(unique_lock<mutex>& __lk, const chrono::duration<_Rep, _Period>& __d, _Predicate __pred) {
  return wait_until(__lk, chrono::steady_clock::now() + __d, std::move(__pred));
}
# 232 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__condition_variable/condition_variable.h" 3
template <class _Clock>
inline void condition_variable::__do_timed_wait(unique_lock<mutex>& __lk,
                                                chrono::time_point<_Clock, chrono::nanoseconds> __tp) noexcept {
  wait_for(__lk, __tp - _Clock::now());
}



}}
# 240 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__condition_variable/condition_variable.h" 3
#pragma clang diagnostic pop
# 192 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/mutex" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/lock_guard.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/lock_guard.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/lock_guard.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/lock_guard.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/lock_guard.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/lock_guard.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/lock_guard.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/lock_guard.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Mutex>
class lock_guard {
public:
  typedef _Mutex mutex_type;

private:
  mutex_type& __m_;

public:
  [[__nodiscard__]]
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit lock_guard(mutex_type& __m)
      : __m_(__m) {
    __m_.lock();
  }

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) lock_guard(mutex_type& __m, adopt_lock_t)

      : __m_(__m) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~lock_guard() { __m_.unlock(); }

  lock_guard(lock_guard const&) = delete;
  lock_guard& operator=(lock_guard const&) = delete;
};
template <class... _Tag> [[maybe_unused]] lock_guard(typename _Tag::__allow_ctad...)->lock_guard<_Tag...>;

}}
# 46 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__mutex/lock_guard.h" 3
#pragma clang diagnostic pop
# 195 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/mutex" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/id.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/id.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/id.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/id.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/id.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/id.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/id.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/id.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


class __attribute__((__visibility__("default"))) __thread_id;

namespace this_thread {

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __thread_id get_id() noexcept;

}

template <>
struct hash<__thread_id>;

class __thread_id {



  __libcpp_thread_id __id_;

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  __lt_impl(__thread_id __x, __thread_id __y) noexcept {
    if (__x.__id_ == 0)
      return __y.__id_ != 0;
    if (__y.__id_ == 0)
      return false;
    return __libcpp_thread_id_less(__x.__id_, __y.__id_);
  }

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __thread_id() noexcept : __id_(0) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __reset() { __id_ = 0; }

  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(__thread_id __x, __thread_id __y) noexcept;

  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(__thread_id __x, __thread_id __y) noexcept;




  template <class _CharT, class _Traits>
  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>&
  operator<<(basic_ostream<_CharT, _Traits>& __os, __thread_id __id);

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __thread_id(__libcpp_thread_id __id) : __id_(__id) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend __libcpp_thread_id __get_underlying_id(const __thread_id __id) { return __id.__id_; }

  friend __thread_id this_thread::get_id() noexcept;
  friend class __attribute__((__visibility__("default"))) thread;
  friend struct hash<__thread_id>;
};

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(__thread_id __x, __thread_id __y) noexcept {

  if (__x.__id_ == 0)
    return __y.__id_ == 0;
  if (__y.__id_ == 0)
    return false;
  return __libcpp_thread_id_equal(__x.__id_, __y.__id_);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(__thread_id __x, __thread_id __y) noexcept { return !(__x == __y); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(__thread_id __x, __thread_id __y) noexcept {
  return __thread_id::__lt_impl(__x.__id_, __y.__id_);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<=(__thread_id __x, __thread_id __y) noexcept { return !(__y < __x); }
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>(__thread_id __x, __thread_id __y) noexcept { return __y < __x; }
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>=(__thread_id __x, __thread_id __y) noexcept { return !(__x < __y); }
# 111 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/id.h" 3
namespace this_thread {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __thread_id get_id() noexcept { return __libcpp_thread_get_current_id(); }

}



}}
# 119 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__thread/id.h" 3
#pragma clang diagnostic pop
# 200 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/mutex" 2 3
# 211 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/mutex" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 215 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/mutex" 2 3

#pragma clang diagnostic push
# 216 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/mutex" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 216 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/mutex" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 216 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/mutex" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 216 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/mutex" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 216 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/mutex" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 216 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/mutex" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



class __attribute__((__visibility__("default"))) recursive_mutex {
  __libcpp_recursive_mutex_t __m_;

public:
  recursive_mutex();
  ~recursive_mutex();

  recursive_mutex(const recursive_mutex&) = delete;
  recursive_mutex& operator=(const recursive_mutex&) = delete;

  void lock();
  bool try_lock() noexcept;
  void unlock() noexcept;

  typedef __libcpp_recursive_mutex_t* native_handle_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) native_handle_type native_handle() { return &__m_; }
};

class __attribute__((__visibility__("default"))) timed_mutex {
  mutex __m_;
  condition_variable __cv_;
  bool __locked_;

public:
  timed_mutex();
  ~timed_mutex();

  timed_mutex(const timed_mutex&) = delete;
  timed_mutex& operator=(const timed_mutex&) = delete;

public:
  void lock();
  bool try_lock() noexcept;
  template <class _Rep, class _Period>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool try_lock_for(const chrono::duration<_Rep, _Period>& __d) {
    return try_lock_until(chrono::steady_clock::now() + __d);
  }
  template <class _Clock, class _Duration>
  inline __attribute__((__visibility__("hidden"))) bool
  try_lock_until(const chrono::time_point<_Clock, _Duration>& __t);
  void unlock() noexcept;
};

template <class _Clock, class _Duration>
bool timed_mutex::try_lock_until(const chrono::time_point<_Clock, _Duration>& __t) {
  using namespace chrono;
  unique_lock<mutex> __lk(__m_);
  bool __no_timeout = _Clock::now() < __t;
  while (__no_timeout && __locked_)
    __no_timeout = __cv_.wait_until(__lk, __t) == cv_status::no_timeout;
  if (!__locked_) {
    __locked_ = true;
    return true;
  }
  return false;
}

class __attribute__((__visibility__("default"))) recursive_timed_mutex {
  mutex __m_;
  condition_variable __cv_;
  size_t __count_;
  __thread_id __id_;

public:
  recursive_timed_mutex();
  ~recursive_timed_mutex();

  recursive_timed_mutex(const recursive_timed_mutex&) = delete;
  recursive_timed_mutex& operator=(const recursive_timed_mutex&) = delete;

  void lock();
  bool try_lock() noexcept;
  template <class _Rep, class _Period>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool try_lock_for(const chrono::duration<_Rep, _Period>& __d) {
    return try_lock_until(chrono::steady_clock::now() + __d);
  }
  template <class _Clock, class _Duration>
  inline __attribute__((__visibility__("hidden"))) bool
  try_lock_until(const chrono::time_point<_Clock, _Duration>& __t);
  void unlock() noexcept;
};

template <class _Clock, class _Duration>
bool recursive_timed_mutex::try_lock_until(const chrono::time_point<_Clock, _Duration>& __t) {
  using namespace chrono;
  __thread_id __id = this_thread::get_id();
  unique_lock<mutex> __lk(__m_);
  if (__id == __id_) {
    if (__count_ == numeric_limits<size_t>::max())
      return false;
    ++__count_;
    return true;
  }
  bool __no_timeout = _Clock::now() < __t;
  while (__no_timeout && __count_ != 0)
    __no_timeout = __cv_.wait_until(__lk, __t) == cv_status::no_timeout;
  if (__count_ == 0) {
    __count_ = 1;
    __id_ = __id;
    return true;
  }
  return false;
}

template <class _L0, class _L1>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int try_lock(_L0& __l0, _L1& __l1) {
  unique_lock<_L0> __u0(__l0, try_to_lock_t());
  if (__u0.owns_lock()) {
    if (__l1.try_lock()) {
      __u0.release();
      return -1;
    } else
      return 1;
  }
  return 0;
}



template <class _L0, class _L1, class _L2, class... _L3>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int try_lock(_L0& __l0, _L1& __l1, _L2& __l2, _L3&... __l3) {
  int __r = 0;
  unique_lock<_L0> __u0(__l0, try_to_lock);
  if (__u0.owns_lock()) {
    __r = std::try_lock(__l1, __l2, __l3...);
    if (__r == -1)
      __u0.release();
    else
      ++__r;
  }
  return __r;
}



template <class _L0, class _L1>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void lock(_L0& __l0, _L1& __l1) {
  while (true) {
    {
      unique_lock<_L0> __u0(__l0);
      if (__l1.try_lock()) {
        __u0.release();
        break;
      }
    }
    __libcpp_thread_yield();
    {
      unique_lock<_L1> __u1(__l1);
      if (__l0.try_lock()) {
        __u1.release();
        break;
      }
    }
    __libcpp_thread_yield();
  }
}



template <class _L0, class _L1, class _L2, class... _L3>
void __lock_first(int __i, _L0& __l0, _L1& __l1, _L2& __l2, _L3&... __l3) {
  while (true) {
    switch (__i) {
    case 0: {
      unique_lock<_L0> __u0(__l0);
      __i = std::try_lock(__l1, __l2, __l3...);
      if (__i == -1) {
        __u0.release();
        return;
      }
    }
      ++__i;
      __libcpp_thread_yield();
      break;
    case 1: {
      unique_lock<_L1> __u1(__l1);
      __i = std::try_lock(__l2, __l3..., __l0);
      if (__i == -1) {
        __u1.release();
        return;
      }
    }
      if (__i == sizeof...(_L3) + 1)
        __i = 0;
      else
        __i += 2;
      __libcpp_thread_yield();
      break;
    default:
      std::__lock_first(__i - 2, __l2, __l3..., __l0, __l1);
      return;
    }
  }
}

template <class _L0, class _L1, class _L2, class... _L3>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void lock(_L0& __l0, _L1& __l1, _L2& __l2, _L3&... __l3) {
  std::__lock_first(0, __l0, __l1, __l2, __l3...);
}




template <class... _Mutexes>
class scoped_lock;

template <>
class scoped_lock<> {
public:
  [[nodiscard]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit scoped_lock() {}
  ~scoped_lock() = default;

  [[nodiscard]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit scoped_lock(adopt_lock_t) {}

  scoped_lock(scoped_lock const&) = delete;
  scoped_lock& operator=(scoped_lock const&) = delete;
};

template <class _Mutex>
class scoped_lock<_Mutex> {
public:
  typedef _Mutex mutex_type;

private:
  mutex_type& __m_;

public:
  [[nodiscard]]
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit scoped_lock(mutex_type& __m)
      : __m_(__m) {
    __m_.lock();
  }

  ~scoped_lock() { __m_.unlock(); }

  [[nodiscard]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit scoped_lock(adopt_lock_t, mutex_type& __m)

      : __m_(__m) {}

  scoped_lock(scoped_lock const&) = delete;
  scoped_lock& operator=(scoped_lock const&) = delete;
};

template <class... _MArgs>
class scoped_lock {
  static_assert(sizeof...(_MArgs) > 1, "At least 2 lock types required");
  typedef tuple<_MArgs&...> _MutexTuple;

public:
  [[nodiscard]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit scoped_lock(_MArgs&... __margs) : __t_(__margs...) {
    std::lock(__margs...);
  }

  [[nodiscard]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) scoped_lock(adopt_lock_t, _MArgs&... __margs) : __t_(__margs...) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~scoped_lock() {
    typedef typename __make_tuple_indices<sizeof...(_MArgs)>::type _Indices;
    __unlock_unpack(_Indices{}, __t_);
  }

  scoped_lock(scoped_lock const&) = delete;
  scoped_lock& operator=(scoped_lock const&) = delete;

private:
  template <size_t... _Indx>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static void __unlock_unpack(__tuple_indices<_Indx...>, _MutexTuple& __mt) {
    (std::get<_Indx>(__mt).unlock(), ...);
  }

  _MutexTuple __t_;
};
template <class... _Tag> [[maybe_unused]] scoped_lock(typename _Tag::__allow_ctad...)->scoped_lock<_Tag...>;




}}
# 497 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/mutex" 3
#pragma clang diagnostic pop
# 511 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/mutex" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/system_error" 1 3
# 162 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/system_error" 3
# 512 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/mutex" 2 3
# 882 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ios" 2 3
# 43 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iostream" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/istream" 1 3
# 164 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/istream" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ostream/basic_ostream.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ostream/basic_ostream.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bitset" 1 3
# 132 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bitset" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit_reference" 1 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit_reference" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit_reference" 2 3

#pragma clang diagnostic push
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit_reference" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit_reference" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit_reference" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit_reference" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit_reference" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit_reference" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Cp>
class __bit_const_reference;

template <class _Tp>
struct __has_storage_type {
  static const bool value = false;
};

template <class _Cp, bool = __has_storage_type<_Cp>::value>
class __bit_reference {
  using __storage_type = typename _Cp::__storage_type;
  using __storage_pointer = typename _Cp::__storage_pointer;

  __storage_pointer __seg_;
  __storage_type __mask_;

  friend typename _Cp::__self;

  friend class __bit_const_reference<_Cp>;
  friend class __bit_iterator<_Cp, false>;

public:
  using __container = typename _Cp::__self;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_reference(const __bit_reference&) = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) operator bool() const noexcept {
    return static_cast<bool>(*__seg_ & __mask_);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator~() const noexcept {
    return !static_cast<bool>(*this);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_reference& operator=(bool __x) noexcept {
    if (__x)
      *__seg_ |= __mask_;
    else
      *__seg_ &= ~__mask_;
    return *this;
  }
# 89 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit_reference" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_reference& operator=(const __bit_reference& __x) noexcept {
    return operator=(static_cast<bool>(__x));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void flip() noexcept { *__seg_ ^= __mask_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cp, false> operator&() const noexcept {
    return __bit_iterator<_Cp, false>(__seg_, static_cast<unsigned>(std::__libcpp_ctz(__mask_)));
  }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                                explicit __bit_reference(__storage_pointer __s, __storage_type __m) noexcept
      : __seg_(__s),
        __mask_(__m) {}
};

template <class _Cp>
class __bit_reference<_Cp, false> {};

template <class _Cp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
swap(__bit_reference<_Cp> __x, __bit_reference<_Cp> __y) noexcept {
  bool __t = __x;
  __x = __y;
  __y = __t;
}

template <class _Cp, class _Dp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
swap(__bit_reference<_Cp> __x, __bit_reference<_Dp> __y) noexcept {
  bool __t = __x;
  __x = __y;
  __y = __t;
}

template <class _Cp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(__bit_reference<_Cp> __x, bool& __y) noexcept {
  bool __t = __x;
  __x = __y;
  __y = __t;
}

template <class _Cp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(bool& __x, __bit_reference<_Cp> __y) noexcept {
  bool __t = __x;
  __x = __y;
  __y = __t;
}

template <class _Cp>
class __bit_const_reference {
  using __storage_type = typename _Cp::__storage_type;
  using __storage_pointer = typename _Cp::__const_storage_pointer;

  __storage_pointer __seg_;
  __storage_type __mask_;

  friend typename _Cp::__self;
  friend class __bit_iterator<_Cp, true>;

public:
  using __container = typename _Cp::__self;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_const_reference(const __bit_const_reference&) = default;
  __bit_const_reference& operator=(const __bit_const_reference&) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_const_reference(const __bit_reference<_Cp>& __x) noexcept
      : __seg_(__x.__seg_),
        __mask_(__x.__mask_) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr operator bool() const noexcept {
    return static_cast<bool>(*__seg_ & __mask_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cp, true> operator&() const noexcept {
    return __bit_iterator<_Cp, true>(__seg_, static_cast<unsigned>(std::__libcpp_ctz(__mask_)));
  }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  constexpr explicit __bit_const_reference(__storage_pointer __s, __storage_type __m) noexcept
      : __seg_(__s),
        __mask_(__m) {}
};



template <class _Cp, bool _IsConst>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cp, false> __copy_aligned(
    __bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result) {
  using _In = __bit_iterator<_Cp, _IsConst>;
  using difference_type = typename _In::difference_type;
  using __storage_type = typename _In::__storage_type;

  const int __bits_per_word = _In::__bits_per_word;
  difference_type __n = __last - __first;
  if (__n > 0) {

    if (__first.__ctz_ != 0) {
      unsigned __clz = __bits_per_word - __first.__ctz_;
      difference_type __dn = std::min(static_cast<difference_type>(__clz), __n);
      __n -= __dn;
      __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz - __dn));
      __storage_type __b = *__first.__seg_ & __m;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b;
      __result.__seg_ += (__dn + __result.__ctz_) / __bits_per_word;
      __result.__ctz_ = static_cast<unsigned>((__dn + __result.__ctz_) % __bits_per_word);
      ++__first.__seg_;

    }


    __storage_type __nw = __n / __bits_per_word;
    std::copy_n(std::__to_address(__first.__seg_), __nw, std::__to_address(__result.__seg_));
    __n -= __nw * __bits_per_word;
    __result.__seg_ += __nw;

    if (__n > 0) {
      __first.__seg_ += __nw;
      __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
      __storage_type __b = *__first.__seg_ & __m;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b;
      __result.__ctz_ = static_cast<unsigned>(__n);
    }
  }
  return __result;
}

template <class _Cp, bool _IsConst>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cp, false> __copy_unaligned(
    __bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result) {
  using _In = __bit_iterator<_Cp, _IsConst>;
  using difference_type = typename _In::difference_type;
  using __storage_type = typename _In::__storage_type;

  const int __bits_per_word = _In::__bits_per_word;
  difference_type __n = __last - __first;
  if (__n > 0) {

    if (__first.__ctz_ != 0) {
      unsigned __clz_f = __bits_per_word - __first.__ctz_;
      difference_type __dn = std::min(static_cast<difference_type>(__clz_f), __n);
      __n -= __dn;
      __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));
      __storage_type __b = *__first.__seg_ & __m;
      unsigned __clz_r = __bits_per_word - __result.__ctz_;
      __storage_type __ddn = std::min<__storage_type>(__dn, __clz_r);
      __m = (~__storage_type(0) << __result.__ctz_) & (~__storage_type(0) >> (__clz_r - __ddn));
      *__result.__seg_ &= ~__m;
      if (__result.__ctz_ > __first.__ctz_)
        *__result.__seg_ |= __b << (__result.__ctz_ - __first.__ctz_);
      else
        *__result.__seg_ |= __b >> (__first.__ctz_ - __result.__ctz_);
      __result.__seg_ += (__ddn + __result.__ctz_) / __bits_per_word;
      __result.__ctz_ = static_cast<unsigned>((__ddn + __result.__ctz_) % __bits_per_word);
      __dn -= __ddn;
      if (__dn > 0) {
        __m = ~__storage_type(0) >> (__bits_per_word - __dn);
        *__result.__seg_ &= ~__m;
        *__result.__seg_ |= __b >> (__first.__ctz_ + __ddn);
        __result.__ctz_ = static_cast<unsigned>(__dn);
      }
      ++__first.__seg_;

    }


    unsigned __clz_r = __bits_per_word - __result.__ctz_;
    __storage_type __m = ~__storage_type(0) << __result.__ctz_;
    for (; __n >= __bits_per_word; __n -= __bits_per_word, ++__first.__seg_) {
      __storage_type __b = *__first.__seg_;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b << __result.__ctz_;
      ++__result.__seg_;
      *__result.__seg_ &= __m;
      *__result.__seg_ |= __b >> __clz_r;
    }

    if (__n > 0) {
      __m = ~__storage_type(0) >> (__bits_per_word - __n);
      __storage_type __b = *__first.__seg_ & __m;
      __storage_type __dn = std::min(__n, static_cast<difference_type>(__clz_r));
      __m = (~__storage_type(0) << __result.__ctz_) & (~__storage_type(0) >> (__clz_r - __dn));
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b << __result.__ctz_;
      __result.__seg_ += (__dn + __result.__ctz_) / __bits_per_word;
      __result.__ctz_ = static_cast<unsigned>((__dn + __result.__ctz_) % __bits_per_word);
      __n -= __dn;
      if (__n > 0) {
        __m = ~__storage_type(0) >> (__bits_per_word - __n);
        *__result.__seg_ &= ~__m;
        *__result.__seg_ |= __b >> __dn;
        __result.__ctz_ = static_cast<unsigned>(__n);
      }
    }
  }
  return __result;
}

template <class _Cp, bool _IsConst>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cp, false>
copy(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result) {
  if (__first.__ctz_ == __result.__ctz_)
    return std::__copy_aligned(__first, __last, __result);
  return std::__copy_unaligned(__first, __last, __result);
}



template <class _Cp, bool _IsConst>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cp, false> __copy_backward_aligned(
    __bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result) {
  using _In = __bit_iterator<_Cp, _IsConst>;
  using difference_type = typename _In::difference_type;
  using __storage_type = typename _In::__storage_type;

  const int __bits_per_word = _In::__bits_per_word;
  difference_type __n = __last - __first;
  if (__n > 0) {

    if (__last.__ctz_ != 0) {
      difference_type __dn = std::min(static_cast<difference_type>(__last.__ctz_), __n);
      __n -= __dn;
      unsigned __clz = __bits_per_word - __last.__ctz_;
      __storage_type __m = (~__storage_type(0) << (__last.__ctz_ - __dn)) & (~__storage_type(0) >> __clz);
      __storage_type __b = *__last.__seg_ & __m;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b;
      __result.__ctz_ = static_cast<unsigned>(((-__dn & (__bits_per_word - 1)) + __result.__ctz_) % __bits_per_word);

    }



    __storage_type __nw = __n / __bits_per_word;
    __result.__seg_ -= __nw;
    __last.__seg_ -= __nw;
    std::copy_n(std::__to_address(__last.__seg_), __nw, std::__to_address(__result.__seg_));
    __n -= __nw * __bits_per_word;

    if (__n > 0) {
      __storage_type __m = ~__storage_type(0) << (__bits_per_word - __n);
      __storage_type __b = *--__last.__seg_ & __m;
      *--__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b;
      __result.__ctz_ = static_cast<unsigned>(-__n & (__bits_per_word - 1));
    }
  }
  return __result;
}

template <class _Cp, bool _IsConst>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cp, false> __copy_backward_unaligned(
    __bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result) {
  using _In = __bit_iterator<_Cp, _IsConst>;
  using difference_type = typename _In::difference_type;
  using __storage_type = typename _In::__storage_type;

  const int __bits_per_word = _In::__bits_per_word;
  difference_type __n = __last - __first;
  if (__n > 0) {

    if (__last.__ctz_ != 0) {
      difference_type __dn = std::min(static_cast<difference_type>(__last.__ctz_), __n);
      __n -= __dn;
      unsigned __clz_l = __bits_per_word - __last.__ctz_;
      __storage_type __m = (~__storage_type(0) << (__last.__ctz_ - __dn)) & (~__storage_type(0) >> __clz_l);
      __storage_type __b = *__last.__seg_ & __m;
      unsigned __clz_r = __bits_per_word - __result.__ctz_;
      __storage_type __ddn = std::min(__dn, static_cast<difference_type>(__result.__ctz_));
      if (__ddn > 0) {
        __m = (~__storage_type(0) << (__result.__ctz_ - __ddn)) & (~__storage_type(0) >> __clz_r);
        *__result.__seg_ &= ~__m;
        if (__result.__ctz_ > __last.__ctz_)
          *__result.__seg_ |= __b << (__result.__ctz_ - __last.__ctz_);
        else
          *__result.__seg_ |= __b >> (__last.__ctz_ - __result.__ctz_);
        __result.__ctz_ = static_cast<unsigned>(((-__ddn & (__bits_per_word - 1)) + __result.__ctz_) % __bits_per_word);
        __dn -= __ddn;
      }
      if (__dn > 0) {

        --__result.__seg_;
        __result.__ctz_ = static_cast<unsigned>(-__dn & (__bits_per_word - 1));
        __m = ~__storage_type(0) << __result.__ctz_;
        *__result.__seg_ &= ~__m;
        __last.__ctz_ -= __dn + __ddn;
        *__result.__seg_ |= __b << (__result.__ctz_ - __last.__ctz_);
      }

    }



    unsigned __clz_r = __bits_per_word - __result.__ctz_;
    __storage_type __m = ~__storage_type(0) >> __clz_r;
    for (; __n >= __bits_per_word; __n -= __bits_per_word) {
      __storage_type __b = *--__last.__seg_;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b >> __clz_r;
      *--__result.__seg_ &= __m;
      *__result.__seg_ |= __b << __result.__ctz_;
    }

    if (__n > 0) {
      __m = ~__storage_type(0) << (__bits_per_word - __n);
      __storage_type __b = *--__last.__seg_ & __m;
      __clz_r = __bits_per_word - __result.__ctz_;
      __storage_type __dn = std::min(__n, static_cast<difference_type>(__result.__ctz_));
      __m = (~__storage_type(0) << (__result.__ctz_ - __dn)) & (~__storage_type(0) >> __clz_r);
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b >> (__bits_per_word - __result.__ctz_);
      __result.__ctz_ = static_cast<unsigned>(((-__dn & (__bits_per_word - 1)) + __result.__ctz_) % __bits_per_word);
      __n -= __dn;
      if (__n > 0) {

        --__result.__seg_;
        __result.__ctz_ = static_cast<unsigned>(-__n & (__bits_per_word - 1));
        __m = ~__storage_type(0) << __result.__ctz_;
        *__result.__seg_ &= ~__m;
        *__result.__seg_ |= __b << (__result.__ctz_ - (__bits_per_word - __n - __dn));
      }
    }
  }
  return __result;
}

template <class _Cp, bool _IsConst>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cp, false> copy_backward(
    __bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result) {
  if (__last.__ctz_ == __result.__ctz_)
    return std::__copy_backward_aligned(__first, __last, __result);
  return std::__copy_backward_unaligned(__first, __last, __result);
}



template <class _Cp, bool _IsConst>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cp, false>
move(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result) {
  return std::copy(__first, __last, __result);
}



template <class _Cp, bool _IsConst>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cp, false> move_backward(
    __bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, __bit_iterator<_Cp, false> __result) {
  return std::copy_backward(__first, __last, __result);
}



template <class _Cl, class _Cr>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cr, false> __swap_ranges_aligned(
    __bit_iterator<_Cl, false> __first, __bit_iterator<_Cl, false> __last, __bit_iterator<_Cr, false> __result) {
  using _I1 = __bit_iterator<_Cl, false>;
  using difference_type = typename _I1::difference_type;
  using __storage_type = typename _I1::__storage_type;

  const int __bits_per_word = _I1::__bits_per_word;
  difference_type __n = __last - __first;
  if (__n > 0) {

    if (__first.__ctz_ != 0) {
      unsigned __clz = __bits_per_word - __first.__ctz_;
      difference_type __dn = std::min(static_cast<difference_type>(__clz), __n);
      __n -= __dn;
      __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz - __dn));
      __storage_type __b1 = *__first.__seg_ & __m;
      *__first.__seg_ &= ~__m;
      __storage_type __b2 = *__result.__seg_ & __m;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b1;
      *__first.__seg_ |= __b2;
      __result.__seg_ += (__dn + __result.__ctz_) / __bits_per_word;
      __result.__ctz_ = static_cast<unsigned>((__dn + __result.__ctz_) % __bits_per_word);
      ++__first.__seg_;

    }


    for (; __n >= __bits_per_word; __n -= __bits_per_word, ++__first.__seg_, ++__result.__seg_)
      swap(*__first.__seg_, *__result.__seg_);

    if (__n > 0) {
      __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
      __storage_type __b1 = *__first.__seg_ & __m;
      *__first.__seg_ &= ~__m;
      __storage_type __b2 = *__result.__seg_ & __m;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b1;
      *__first.__seg_ |= __b2;
      __result.__ctz_ = static_cast<unsigned>(__n);
    }
  }
  return __result;
}

template <class _Cl, class _Cr>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cr, false> __swap_ranges_unaligned(
    __bit_iterator<_Cl, false> __first, __bit_iterator<_Cl, false> __last, __bit_iterator<_Cr, false> __result) {
  using _I1 = __bit_iterator<_Cl, false>;
  using difference_type = typename _I1::difference_type;
  using __storage_type = typename _I1::__storage_type;

  const int __bits_per_word = _I1::__bits_per_word;
  difference_type __n = __last - __first;
  if (__n > 0) {

    if (__first.__ctz_ != 0) {
      unsigned __clz_f = __bits_per_word - __first.__ctz_;
      difference_type __dn = std::min(static_cast<difference_type>(__clz_f), __n);
      __n -= __dn;
      __storage_type __m = (~__storage_type(0) << __first.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));
      __storage_type __b1 = *__first.__seg_ & __m;
      *__first.__seg_ &= ~__m;
      unsigned __clz_r = __bits_per_word - __result.__ctz_;
      __storage_type __ddn = std::min<__storage_type>(__dn, __clz_r);
      __m = (~__storage_type(0) << __result.__ctz_) & (~__storage_type(0) >> (__clz_r - __ddn));
      __storage_type __b2 = *__result.__seg_ & __m;
      *__result.__seg_ &= ~__m;
      if (__result.__ctz_ > __first.__ctz_) {
        unsigned __s = __result.__ctz_ - __first.__ctz_;
        *__result.__seg_ |= __b1 << __s;
        *__first.__seg_ |= __b2 >> __s;
      } else {
        unsigned __s = __first.__ctz_ - __result.__ctz_;
        *__result.__seg_ |= __b1 >> __s;
        *__first.__seg_ |= __b2 << __s;
      }
      __result.__seg_ += (__ddn + __result.__ctz_) / __bits_per_word;
      __result.__ctz_ = static_cast<unsigned>((__ddn + __result.__ctz_) % __bits_per_word);
      __dn -= __ddn;
      if (__dn > 0) {
        __m = ~__storage_type(0) >> (__bits_per_word - __dn);
        __b2 = *__result.__seg_ & __m;
        *__result.__seg_ &= ~__m;
        unsigned __s = __first.__ctz_ + __ddn;
        *__result.__seg_ |= __b1 >> __s;
        *__first.__seg_ |= __b2 << __s;
        __result.__ctz_ = static_cast<unsigned>(__dn);
      }
      ++__first.__seg_;

    }


    __storage_type __m = ~__storage_type(0) << __result.__ctz_;
    unsigned __clz_r = __bits_per_word - __result.__ctz_;
    for (; __n >= __bits_per_word; __n -= __bits_per_word, ++__first.__seg_) {
      __storage_type __b1 = *__first.__seg_;
      __storage_type __b2 = *__result.__seg_ & __m;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b1 << __result.__ctz_;
      *__first.__seg_ = __b2 >> __result.__ctz_;
      ++__result.__seg_;
      __b2 = *__result.__seg_ & ~__m;
      *__result.__seg_ &= __m;
      *__result.__seg_ |= __b1 >> __clz_r;
      *__first.__seg_ |= __b2 << __clz_r;
    }

    if (__n > 0) {
      __m = ~__storage_type(0) >> (__bits_per_word - __n);
      __storage_type __b1 = *__first.__seg_ & __m;
      *__first.__seg_ &= ~__m;
      __storage_type __dn = std::min<__storage_type>(__n, __clz_r);
      __m = (~__storage_type(0) << __result.__ctz_) & (~__storage_type(0) >> (__clz_r - __dn));
      __storage_type __b2 = *__result.__seg_ & __m;
      *__result.__seg_ &= ~__m;
      *__result.__seg_ |= __b1 << __result.__ctz_;
      *__first.__seg_ |= __b2 >> __result.__ctz_;
      __result.__seg_ += (__dn + __result.__ctz_) / __bits_per_word;
      __result.__ctz_ = static_cast<unsigned>((__dn + __result.__ctz_) % __bits_per_word);
      __n -= __dn;
      if (__n > 0) {
        __m = ~__storage_type(0) >> (__bits_per_word - __n);
        __b2 = *__result.__seg_ & __m;
        *__result.__seg_ &= ~__m;
        *__result.__seg_ |= __b1 >> __dn;
        *__first.__seg_ |= __b2 << __dn;
        __result.__ctz_ = static_cast<unsigned>(__n);
      }
    }
  }
  return __result;
}

template <class _Cl, class _Cr>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cr, false> swap_ranges(
    __bit_iterator<_Cl, false> __first1, __bit_iterator<_Cl, false> __last1, __bit_iterator<_Cr, false> __first2) {
  if (__first1.__ctz_ == __first2.__ctz_)
    return std::__swap_ranges_aligned(__first1, __last1, __first2);
  return std::__swap_ranges_unaligned(__first1, __last1, __first2);
}



template <class _Cp>
struct __bit_array {
  using difference_type = typename _Cp::difference_type;
  using __storage_type = typename _Cp::__storage_type;
  using __storage_pointer = typename _Cp::__storage_pointer;
  using iterator = typename _Cp::iterator;

  static const unsigned __bits_per_word = _Cp::__bits_per_word;
  static const unsigned _Np = 4;

  difference_type __size_;
  __storage_type __word_[_Np];

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static difference_type capacity() {
    return static_cast<difference_type>(_Np * __bits_per_word);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __bit_array(difference_type __s) : __size_(__s) {
    if (__libcpp_is_constant_evaluated()) {
      for (size_t __i = 0; __i != __bit_array<_Cp>::_Np; ++__i)
        std::__construct_at(__word_ + __i, 0);
    }
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator begin() {
    return iterator(pointer_traits<__storage_pointer>::pointer_to(__word_[0]), 0);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator end() {
    return iterator(pointer_traits<__storage_pointer>::pointer_to(__word_[0]) + __size_ / __bits_per_word,
                    static_cast<unsigned>(__size_ % __bits_per_word));
  }
};

template <class _Cp>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator<_Cp, false>
rotate(__bit_iterator<_Cp, false> __first, __bit_iterator<_Cp, false> __middle, __bit_iterator<_Cp, false> __last) {
  using _I1 = __bit_iterator<_Cp, false>;
  using difference_type = typename _I1::difference_type;

  difference_type __d1 = __middle - __first;
  difference_type __d2 = __last - __middle;
  _I1 __r = __first + __d2;
  while (__d1 != 0 && __d2 != 0) {
    if (__d1 <= __d2) {
      if (__d1 <= __bit_array<_Cp>::capacity()) {
        __bit_array<_Cp> __b(__d1);
        std::copy(__first, __middle, __b.begin());
        std::copy(__b.begin(), __b.end(), std::copy(__middle, __last, __first));
        break;
      } else {
        __bit_iterator<_Cp, false> __mp = std::swap_ranges(__first, __middle, __middle);
        __first = __middle;
        __middle = __mp;
        __d2 -= __d1;
      }
    } else {
      if (__d2 <= __bit_array<_Cp>::capacity()) {
        __bit_array<_Cp> __b(__d2);
        std::copy(__middle, __last, __b.begin());
        std::copy_backward(__b.begin(), __b.end(), std::copy_backward(__first, __middle, __last));
        break;
      } else {
        __bit_iterator<_Cp, false> __mp = __first + __d2;
        std::swap_ranges(__first, __mp, __middle);
        __first = __mp;
        __d1 -= __d2;
      }
    }
  }
  return __r;
}



template <class _Cp, bool _IC1, bool _IC2>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __equal_unaligned(
    __bit_iterator<_Cp, _IC1> __first1, __bit_iterator<_Cp, _IC1> __last1, __bit_iterator<_Cp, _IC2> __first2) {
  using _It = __bit_iterator<_Cp, _IC1>;
  using difference_type = typename _It::difference_type;
  using __storage_type = typename _It::__storage_type;

  const int __bits_per_word = _It::__bits_per_word;
  difference_type __n = __last1 - __first1;
  if (__n > 0) {

    if (__first1.__ctz_ != 0) {
      unsigned __clz_f = __bits_per_word - __first1.__ctz_;
      difference_type __dn = std::min(static_cast<difference_type>(__clz_f), __n);
      __n -= __dn;
      __storage_type __m = (~__storage_type(0) << __first1.__ctz_) & (~__storage_type(0) >> (__clz_f - __dn));
      __storage_type __b = *__first1.__seg_ & __m;
      unsigned __clz_r = __bits_per_word - __first2.__ctz_;
      __storage_type __ddn = std::min<__storage_type>(__dn, __clz_r);
      __m = (~__storage_type(0) << __first2.__ctz_) & (~__storage_type(0) >> (__clz_r - __ddn));
      if (__first2.__ctz_ > __first1.__ctz_) {
        if ((*__first2.__seg_ & __m) != (__b << (__first2.__ctz_ - __first1.__ctz_)))
          return false;
      } else {
        if ((*__first2.__seg_ & __m) != (__b >> (__first1.__ctz_ - __first2.__ctz_)))
          return false;
      }
      __first2.__seg_ += (__ddn + __first2.__ctz_) / __bits_per_word;
      __first2.__ctz_ = static_cast<unsigned>((__ddn + __first2.__ctz_) % __bits_per_word);
      __dn -= __ddn;
      if (__dn > 0) {
        __m = ~__storage_type(0) >> (__bits_per_word - __dn);
        if ((*__first2.__seg_ & __m) != (__b >> (__first1.__ctz_ + __ddn)))
          return false;
        __first2.__ctz_ = static_cast<unsigned>(__dn);
      }
      ++__first1.__seg_;

    }


    unsigned __clz_r = __bits_per_word - __first2.__ctz_;
    __storage_type __m = ~__storage_type(0) << __first2.__ctz_;
    for (; __n >= __bits_per_word; __n -= __bits_per_word, ++__first1.__seg_) {
      __storage_type __b = *__first1.__seg_;
      if ((*__first2.__seg_ & __m) != (__b << __first2.__ctz_))
        return false;
      ++__first2.__seg_;
      if ((*__first2.__seg_ & ~__m) != (__b >> __clz_r))
        return false;
    }

    if (__n > 0) {
      __m = ~__storage_type(0) >> (__bits_per_word - __n);
      __storage_type __b = *__first1.__seg_ & __m;
      __storage_type __dn = std::min(__n, static_cast<difference_type>(__clz_r));
      __m = (~__storage_type(0) << __first2.__ctz_) & (~__storage_type(0) >> (__clz_r - __dn));
      if ((*__first2.__seg_ & __m) != (__b << __first2.__ctz_))
        return false;
      __first2.__seg_ += (__dn + __first2.__ctz_) / __bits_per_word;
      __first2.__ctz_ = static_cast<unsigned>((__dn + __first2.__ctz_) % __bits_per_word);
      __n -= __dn;
      if (__n > 0) {
        __m = ~__storage_type(0) >> (__bits_per_word - __n);
        if ((*__first2.__seg_ & __m) != (__b >> __dn))
          return false;
      }
    }
  }
  return true;
}

template <class _Cp, bool _IC1, bool _IC2>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __equal_aligned(
    __bit_iterator<_Cp, _IC1> __first1, __bit_iterator<_Cp, _IC1> __last1, __bit_iterator<_Cp, _IC2> __first2) {
  using _It = __bit_iterator<_Cp, _IC1>;
  using difference_type = typename _It::difference_type;
  using __storage_type = typename _It::__storage_type;

  const int __bits_per_word = _It::__bits_per_word;
  difference_type __n = __last1 - __first1;
  if (__n > 0) {

    if (__first1.__ctz_ != 0) {
      unsigned __clz = __bits_per_word - __first1.__ctz_;
      difference_type __dn = std::min(static_cast<difference_type>(__clz), __n);
      __n -= __dn;
      __storage_type __m = (~__storage_type(0) << __first1.__ctz_) & (~__storage_type(0) >> (__clz - __dn));
      if ((*__first2.__seg_ & __m) != (*__first1.__seg_ & __m))
        return false;
      ++__first2.__seg_;
      ++__first1.__seg_;


    }



    for (; __n >= __bits_per_word; __n -= __bits_per_word, ++__first1.__seg_, ++__first2.__seg_)
      if (*__first2.__seg_ != *__first1.__seg_)
        return false;

    if (__n > 0) {
      __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
      if ((*__first2.__seg_ & __m) != (*__first1.__seg_ & __m))
        return false;
    }
  }
  return true;
}

template <class _Cp, bool _IC1, bool _IC2>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
equal(__bit_iterator<_Cp, _IC1> __first1, __bit_iterator<_Cp, _IC1> __last1, __bit_iterator<_Cp, _IC2> __first2) {
  if (__first1.__ctz_ == __first2.__ctz_)
    return std::__equal_aligned(__first1, __last1, __first2);
  return std::__equal_unaligned(__first1, __last1, __first2);
}

template <class _Cp, bool _IsConst, typename _Cp::__storage_type>
class __bit_iterator {
public:
  using difference_type = typename _Cp::difference_type;
  using value_type = bool;
  using pointer = __bit_iterator;

  using reference = __conditional_t<_IsConst, __bit_const_reference<_Cp>, __bit_reference<_Cp> >;



  using iterator_category = random_access_iterator_tag;

private:
  using __storage_type = typename _Cp::__storage_type;
  using __storage_pointer =
      __conditional_t<_IsConst, typename _Cp::__const_storage_pointer, typename _Cp::__storage_pointer>;

  static const unsigned __bits_per_word = _Cp::__bits_per_word;

  __storage_pointer __seg_;
  unsigned __ctz_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator() noexcept

      : __seg_(nullptr),
        __ctz_(0)

  {
  }






  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator(const __bit_iterator<_Cp, false>& __it) noexcept
      : __seg_(__it.__seg_),
        __ctz_(__it.__ctz_) {}






  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator&
  operator=(const _If<_IsConst, struct __private_nat, __bit_iterator>& __it) {
    __seg_ = __it.__seg_;
    __ctz_ = __it.__ctz_;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference operator*() const noexcept {
    return __conditional_t<_IsConst, __bit_const_reference<_Cp>, __bit_reference<_Cp> >(
        __seg_, __storage_type(1) << __ctz_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator& operator++() {
    if (__ctz_ != __bits_per_word - 1)
      ++__ctz_;
    else {
      __ctz_ = 0;
      ++__seg_;
    }
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator operator++(int) {
    __bit_iterator __tmp = *this;
    ++(*this);
    return __tmp;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator& operator--() {
    if (__ctz_ != 0)
      --__ctz_;
    else {
      __ctz_ = __bits_per_word - 1;
      --__seg_;
    }
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator operator--(int) {
    __bit_iterator __tmp = *this;
    --(*this);
    return __tmp;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator& operator+=(difference_type __n) {
    if (__n >= 0)
      __seg_ += (__n + __ctz_) / __bits_per_word;
    else
      __seg_ += static_cast<difference_type>(__n - __bits_per_word + __ctz_ + 1) /
                static_cast<difference_type>(__bits_per_word);
    __n &= (__bits_per_word - 1);
    __ctz_ = static_cast<unsigned>((__n + __ctz_) % __bits_per_word);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator& operator-=(difference_type __n) {
    return *this += -__n;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator operator+(difference_type __n) const {
    __bit_iterator __t(*this);
    __t += __n;
    return __t;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bit_iterator operator-(difference_type __n) const {
    __bit_iterator __t(*this);
    __t -= __n;
    return __t;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend __bit_iterator
  operator+(difference_type __n, const __bit_iterator& __it) {
    return __it + __n;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend difference_type
  operator-(const __bit_iterator& __x, const __bit_iterator& __y) {
    return (__x.__seg_ - __y.__seg_) * __bits_per_word + __x.__ctz_ - __y.__ctz_;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference operator[](difference_type __n) const {
    return *(*this + __n);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool
  operator==(const __bit_iterator& __x, const __bit_iterator& __y) {
    return __x.__seg_ == __y.__seg_ && __x.__ctz_ == __y.__ctz_;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool
  operator!=(const __bit_iterator& __x, const __bit_iterator& __y) {
    return !(__x == __y);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool
  operator<(const __bit_iterator& __x, const __bit_iterator& __y) {
    return __x.__seg_ < __y.__seg_ || (__x.__seg_ == __y.__seg_ && __x.__ctz_ < __y.__ctz_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool
  operator>(const __bit_iterator& __x, const __bit_iterator& __y) {
    return __y < __x;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool
  operator<=(const __bit_iterator& __x, const __bit_iterator& __y) {
    return !(__y < __x);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool
  operator>=(const __bit_iterator& __x, const __bit_iterator& __y) {
    return !(__x < __y);
  }
# 955 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit_reference" 3
private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                                explicit __bit_iterator(__storage_pointer __s, unsigned __ctz) noexcept
      : __seg_(__s),
        __ctz_(__ctz) {}

  friend typename _Cp::__self;

  friend class __bit_reference<_Cp>;
  friend class __bit_const_reference<_Cp>;
  friend class __bit_iterator<_Cp, true>;
  template <class _Dp>
  friend struct __bit_array;

  template <bool _FillVal, class _Dp>
                                friend void
  __fill_n_bool(__bit_iterator<_Dp, false> __first, typename _Dp::size_type __n);

  template <class _Dp, bool _IC>
                                friend __bit_iterator<_Dp, false> __copy_aligned(
      __bit_iterator<_Dp, _IC> __first, __bit_iterator<_Dp, _IC> __last, __bit_iterator<_Dp, false> __result);
  template <class _Dp, bool _IC>
                                friend __bit_iterator<_Dp, false> __copy_unaligned(
      __bit_iterator<_Dp, _IC> __first, __bit_iterator<_Dp, _IC> __last, __bit_iterator<_Dp, false> __result);
  template <class _Dp, bool _IC>
                                friend __bit_iterator<_Dp, false>
  copy(__bit_iterator<_Dp, _IC> __first, __bit_iterator<_Dp, _IC> __last, __bit_iterator<_Dp, false> __result);
  template <class _Dp, bool _IC>
                                friend __bit_iterator<_Dp, false> __copy_backward_aligned(
      __bit_iterator<_Dp, _IC> __first, __bit_iterator<_Dp, _IC> __last, __bit_iterator<_Dp, false> __result);
  template <class _Dp, bool _IC>
                                friend __bit_iterator<_Dp, false> __copy_backward_unaligned(
      __bit_iterator<_Dp, _IC> __first, __bit_iterator<_Dp, _IC> __last, __bit_iterator<_Dp, false> __result);
  template <class _Dp, bool _IC>
                                friend __bit_iterator<_Dp, false>
  copy_backward(__bit_iterator<_Dp, _IC> __first, __bit_iterator<_Dp, _IC> __last, __bit_iterator<_Dp, false> __result);
  template <class _Cl, class _Cr>
  friend __bit_iterator<_Cr, false>
      __swap_ranges_aligned(__bit_iterator<_Cl, false>, __bit_iterator<_Cl, false>, __bit_iterator<_Cr, false>);
  template <class _Cl, class _Cr>
  friend __bit_iterator<_Cr, false>
      __swap_ranges_unaligned(__bit_iterator<_Cl, false>, __bit_iterator<_Cl, false>, __bit_iterator<_Cr, false>);
  template <class _Cl, class _Cr>
  friend __bit_iterator<_Cr, false>
      swap_ranges(__bit_iterator<_Cl, false>, __bit_iterator<_Cl, false>, __bit_iterator<_Cr, false>);
  template <class _Dp>
                                friend __bit_iterator<_Dp, false>
      rotate(__bit_iterator<_Dp, false>, __bit_iterator<_Dp, false>, __bit_iterator<_Dp, false>);
  template <class _Dp, bool _IC1, bool _IC2>
                                friend bool
      __equal_aligned(__bit_iterator<_Dp, _IC1>, __bit_iterator<_Dp, _IC1>, __bit_iterator<_Dp, _IC2>);
  template <class _Dp, bool _IC1, bool _IC2>
                                friend bool
      __equal_unaligned(__bit_iterator<_Dp, _IC1>, __bit_iterator<_Dp, _IC1>, __bit_iterator<_Dp, _IC2>);
  template <class _Dp, bool _IC1, bool _IC2>
                                friend bool
      equal(__bit_iterator<_Dp, _IC1>, __bit_iterator<_Dp, _IC1>, __bit_iterator<_Dp, _IC2>);
  template <bool _ToFind, class _Dp, bool _IC>
                                friend __bit_iterator<_Dp, _IC>
      __find_bool(__bit_iterator<_Dp, _IC>, typename _Dp::size_type);
  template <bool _ToCount, class _Dp, bool _IC>
  friend typename __bit_iterator<_Dp, _IC>::difference_type __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
                                __count_bool(__bit_iterator<_Dp, _IC>, typename _Dp::size_type);
};

}}
# 1020 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__bit_reference" 3
#pragma clang diagnostic pop
# 133 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bitset" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_char_like_type.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_char_like_type.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_char_like_type.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_char_like_type.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_char_like_type.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_char_like_type.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_char_like_type.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_char_like_type.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _CharT>
using _IsCharLikeType = _And<is_standard_layout<_CharT>, is_trivial<_CharT> >;

}}
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/is_char_like_type.h" 3
#pragma clang diagnostic pop
# 137 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bitset" 2 3
# 151 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bitset" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 155 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bitset" 2 3

#pragma clang diagnostic push
# 156 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bitset" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 156 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bitset" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 156 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bitset" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 156 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bitset" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 156 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bitset" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 156 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bitset" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <size_t _N_words, size_t _Size>
class __bitset;

template <size_t _N_words, size_t _Size>
struct __has_storage_type<__bitset<_N_words, _Size> > {
  static const bool value = true;
};

template <size_t _N_words, size_t _Size>
class __bitset {
public:
  typedef ptrdiff_t difference_type;
  typedef size_t size_type;
  typedef size_type __storage_type;

protected:
  typedef __bitset __self;
  typedef __storage_type* __storage_pointer;
  typedef const __storage_type* __const_storage_pointer;
  static const unsigned __bits_per_word = static_cast<unsigned>(sizeof(__storage_type) * 8);

  friend class __bit_reference<__bitset>;
  friend class __bit_const_reference<__bitset>;
  friend class __bit_iterator<__bitset, false>;
  friend class __bit_iterator<__bitset, true>;
  friend struct __bit_array<__bitset>;

  __storage_type __first_[_N_words];

  typedef __bit_reference<__bitset> reference;
  typedef __bit_const_reference<__bitset> const_reference;
  typedef __bit_iterator<__bitset, false> iterator;
  typedef __bit_iterator<__bitset, true> const_iterator;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __bitset() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr __bitset(unsigned long long __v) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference __make_ref(size_t __pos) noexcept {
    return reference(__first_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reference __make_ref(size_t __pos) const noexcept {
    return const_reference(__first_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __make_iter(size_t __pos) noexcept {
    return iterator(__first_ + __pos / __bits_per_word, __pos % __bits_per_word);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator __make_iter(size_t __pos) const noexcept {
    return const_iterator(__first_ + __pos / __bits_per_word, __pos % __bits_per_word);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator&=(const __bitset& __v) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator|=(const __bitset& __v) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator^=(const __bitset& __v) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void flip() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long to_ulong() const {
    return to_ulong(integral_constant < bool, _Size< sizeof(unsigned long) * 8>());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long long to_ullong() const {
    return to_ullong(integral_constant < bool, _Size< sizeof(unsigned long long) * 8>());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool all() const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool any() const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t __hash_code() const noexcept;

private:




  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long to_ulong(false_type) const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long to_ulong(true_type) const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long long to_ullong(false_type) const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long long to_ullong(true_type) const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long long to_ullong(true_type, false_type) const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long long to_ullong(true_type, true_type) const;
};

template <size_t _N_words, size_t _Size>
inline constexpr __bitset<_N_words, _Size>::__bitset() noexcept

    : __first_{0}

{



}
# 276 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bitset" 3
template <size_t _N_words, size_t _Size>
inline constexpr __bitset<_N_words, _Size>::__bitset(unsigned long long __v) noexcept


    : __first_{__v}
# 291 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bitset" 3
{



}

template <size_t _N_words, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__bitset<_N_words, _Size>::operator&=(const __bitset& __v) noexcept {
  for (size_type __i = 0; __i < _N_words; ++__i)
    __first_[__i] &= __v.__first_[__i];
}

template <size_t _N_words, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__bitset<_N_words, _Size>::operator|=(const __bitset& __v) noexcept {
  for (size_type __i = 0; __i < _N_words; ++__i)
    __first_[__i] |= __v.__first_[__i];
}

template <size_t _N_words, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__bitset<_N_words, _Size>::operator^=(const __bitset& __v) noexcept {
  for (size_type __i = 0; __i < _N_words; ++__i)
    __first_[__i] ^= __v.__first_[__i];
}

template <size_t _N_words, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __bitset<_N_words, _Size>::flip() noexcept {

  size_type __n = _Size;
  __storage_pointer __p = __first_;
  for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)
    *__p = ~*__p;

  if (__n > 0) {
    __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
    __storage_type __b = *__p & __m;
    *__p &= ~__m;
    *__p |= ~__b & __m;
  }
}

template <size_t _N_words, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long
__bitset<_N_words, _Size>::to_ulong(false_type) const {
  const_iterator __e = __make_iter(_Size);
  const_iterator __i = std::find(__make_iter(sizeof(unsigned long) * 8), __e, true);
  if (__i != __e)
    __throw_overflow_error("bitset to_ulong overflow error");

  return __first_[0];
}

template <size_t _N_words, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long
__bitset<_N_words, _Size>::to_ulong(true_type) const {
  return __first_[0];
}

template <size_t _N_words, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long long
__bitset<_N_words, _Size>::to_ullong(false_type) const {
  const_iterator __e = __make_iter(_Size);
  const_iterator __i = std::find(__make_iter(sizeof(unsigned long long) * 8), __e, true);
  if (__i != __e)
    __throw_overflow_error("bitset to_ullong overflow error");

  return to_ullong(true_type());
}

template <size_t _N_words, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long long
__bitset<_N_words, _Size>::to_ullong(true_type) const {
  return to_ullong(true_type(), integral_constant<bool, sizeof(__storage_type) < sizeof(unsigned long long)>());
}

template <size_t _N_words, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long long
__bitset<_N_words, _Size>::to_ullong(true_type, false_type) const {
  return __first_[0];
}

template <size_t _N_words, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long long
__bitset<_N_words, _Size>::to_ullong(true_type, true_type) const {
  unsigned long long __r = __first_[0];
#pragma clang diagnostic push

  for (size_t __i = 1; __i < sizeof(unsigned long long) / sizeof(__storage_type); ++__i)
    __r |= static_cast<unsigned long long>(__first_[__i]) << (sizeof(__storage_type) * 8);
#pragma clang diagnostic pop
  return __r;
}

template <size_t _N_words, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __bitset<_N_words, _Size>::all() const noexcept {

  size_type __n = _Size;
  __const_storage_pointer __p = __first_;
  for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)
    if (~*__p)
      return false;

  if (__n > 0) {
    __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
    if (~*__p & __m)
      return false;
  }
  return true;
}

template <size_t _N_words, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __bitset<_N_words, _Size>::any() const noexcept {

  size_type __n = _Size;
  __const_storage_pointer __p = __first_;
  for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)
    if (*__p)
      return true;

  if (__n > 0) {
    __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
    if (*__p & __m)
      return true;
  }
  return false;
}

template <size_t _N_words, size_t _Size>
inline size_t __bitset<_N_words, _Size>::__hash_code() const noexcept {
  size_t __h = 0;
  for (size_type __i = 0; __i < _N_words; ++__i)
    __h ^= __first_[__i];
  return __h;
}

template <size_t _Size>
class __bitset<1, _Size> {
public:
  typedef ptrdiff_t difference_type;
  typedef size_t size_type;
  typedef size_type __storage_type;

protected:
  typedef __bitset __self;
  typedef __storage_type* __storage_pointer;
  typedef const __storage_type* __const_storage_pointer;
  static const unsigned __bits_per_word = static_cast<unsigned>(sizeof(__storage_type) * 8);

  friend class __bit_reference<__bitset>;
  friend class __bit_const_reference<__bitset>;
  friend class __bit_iterator<__bitset, false>;
  friend class __bit_iterator<__bitset, true>;
  friend struct __bit_array<__bitset>;

  __storage_type __first_;

  typedef __bit_reference<__bitset> reference;
  typedef __bit_const_reference<__bitset> const_reference;
  typedef __bit_iterator<__bitset, false> iterator;
  typedef __bit_iterator<__bitset, true> const_iterator;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __bitset() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr __bitset(unsigned long long __v) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference __make_ref(size_t __pos) noexcept {
    return reference(&__first_, __storage_type(1) << __pos);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reference __make_ref(size_t __pos) const noexcept {
    return const_reference(&__first_, __storage_type(1) << __pos);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __make_iter(size_t __pos) noexcept {
    return iterator(&__first_ + __pos / __bits_per_word, __pos % __bits_per_word);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator __make_iter(size_t __pos) const noexcept {
    return const_iterator(&__first_ + __pos / __bits_per_word, __pos % __bits_per_word);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator&=(const __bitset& __v) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator|=(const __bitset& __v) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator^=(const __bitset& __v) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void flip() noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long to_ulong() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long long to_ullong() const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool all() const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool any() const noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t __hash_code() const noexcept;
};

template <size_t _Size>
inline constexpr __bitset<1, _Size>::__bitset() noexcept : __first_(0) {}

template <size_t _Size>
inline constexpr __bitset<1, _Size>::__bitset(unsigned long long __v) noexcept
    : __first_(_Size == __bits_per_word ? static_cast<__storage_type>(__v)
                                        : static_cast<__storage_type>(__v) & ((__storage_type(1) << _Size) - 1)) {}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__bitset<1, _Size>::operator&=(const __bitset& __v) noexcept {
  __first_ &= __v.__first_;
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__bitset<1, _Size>::operator|=(const __bitset& __v) noexcept {
  __first_ |= __v.__first_;
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__bitset<1, _Size>::operator^=(const __bitset& __v) noexcept {
  __first_ ^= __v.__first_;
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __bitset<1, _Size>::flip() noexcept {
  __storage_type __m = ~__storage_type(0) >> (__bits_per_word - _Size);
  __first_ = ~__first_;
  __first_ &= __m;
}

template <size_t _Size>
inline unsigned long __bitset<1, _Size>::to_ulong() const {
  return __first_;
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long long __bitset<1, _Size>::to_ullong() const {
  return __first_;
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __bitset<1, _Size>::all() const noexcept {
  __storage_type __m = ~__storage_type(0) >> (__bits_per_word - _Size);
  return !(~__first_ & __m);
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __bitset<1, _Size>::any() const noexcept {
  __storage_type __m = ~__storage_type(0) >> (__bits_per_word - _Size);
  return __first_ & __m;
}

template <size_t _Size>
inline size_t __bitset<1, _Size>::__hash_code() const noexcept {
  return __first_;
}

template <>
class __bitset<0, 0> {
public:
  typedef ptrdiff_t difference_type;
  typedef size_t size_type;
  typedef size_type __storage_type;

protected:
  typedef __bitset __self;
  typedef __storage_type* __storage_pointer;
  typedef const __storage_type* __const_storage_pointer;
  static const unsigned __bits_per_word = static_cast<unsigned>(sizeof(__storage_type) * 8);

  friend class __bit_reference<__bitset>;
  friend class __bit_const_reference<__bitset>;
  friend class __bit_iterator<__bitset, false>;
  friend class __bit_iterator<__bitset, true>;
  friend struct __bit_array<__bitset>;

  typedef __bit_reference<__bitset> reference;
  typedef __bit_const_reference<__bitset> const_reference;
  typedef __bit_iterator<__bitset, false> iterator;
  typedef __bit_iterator<__bitset, true> const_iterator;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr __bitset() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr __bitset(unsigned long long) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference __make_ref(size_t) noexcept {
    return reference(nullptr, 1);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reference __make_ref(size_t) const noexcept {
    return const_reference(nullptr, 1);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __make_iter(size_t) noexcept {
    return iterator(nullptr, 0);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator __make_iter(size_t) const noexcept {
    return const_iterator(nullptr, 0);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator&=(const __bitset&) noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator|=(const __bitset&) noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator^=(const __bitset&) noexcept {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void flip() noexcept {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long to_ulong() const { return 0; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long long to_ullong() const { return 0; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool all() const noexcept { return true; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool any() const noexcept { return false; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t __hash_code() const noexcept { return 0; }
};

inline constexpr __bitset<0, 0>::__bitset() noexcept {}

inline constexpr __bitset<0, 0>::__bitset(unsigned long long) noexcept {}

template <size_t _Size>
class bitset;
template <size_t _Size>
struct hash<bitset<_Size> >;

template <size_t _Size>
class bitset
    : private __bitset<_Size == 0 ? 0 : (_Size - 1) / (sizeof(size_t) * 8) + 1, _Size> {
public:
  static const unsigned __n_words = _Size == 0 ? 0 : (_Size - 1) / (sizeof(size_t) * 8) + 1;
  typedef __bitset<__n_words, _Size> base;

public:
  typedef typename base::reference reference;
  typedef typename base::const_reference const_reference;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bitset() noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bitset(unsigned long long __v) noexcept : base(__v) {}
  template <class _CharT, __enable_if_t<_IsCharLikeType<_CharT>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit bitset(
      const _CharT* __str,



      typename basic_string<_CharT>::size_type __n = basic_string<_CharT>::npos,

      _CharT __zero = _CharT('0'),
      _CharT __one = _CharT('1')) {

    size_t __rlen = std::min(__n, char_traits<_CharT>::length(__str));
    __init_from_string_view(basic_string_view<_CharT>(__str, __rlen), __zero, __one);
  }
# 652 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bitset" 3
  template <class _CharT, class _Traits, class _Allocator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit bitset(
      const basic_string<_CharT, _Traits, _Allocator>& __str,
      typename basic_string<_CharT, _Traits, _Allocator>::size_type __pos = 0,
      typename basic_string<_CharT, _Traits, _Allocator>::size_type __n =
          basic_string<_CharT, _Traits, _Allocator>::npos,
      _CharT __zero = _CharT('0'),
      _CharT __one = _CharT('1')) {
    if (__pos > __str.size())
      std::__throw_out_of_range("bitset string pos out of range");

    size_t __rlen = std::min(__n, __str.size() - __pos);
    __init_from_string_view(basic_string_view<_CharT, _Traits>(__str.data() + __pos, __rlen), __zero, __one);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset& operator&=(const bitset& __rhs) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset& operator|=(const bitset& __rhs) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset& operator^=(const bitset& __rhs) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset& operator<<=(size_t __pos) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset& operator>>=(size_t __pos) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset& set() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset& set(size_t __pos, bool __val = true);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset& reset() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset& reset(size_t __pos);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset operator~() const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset& flip() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset& flip(size_t __pos);





  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reference operator[](size_t __p) const { return base::__make_ref(__p); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference operator[](size_t __p) { return base::__make_ref(__p); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long to_ulong() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long long to_ullong() const;
  template <class _CharT, class _Traits, class _Allocator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, _Allocator>
  to_string(_CharT __zero = _CharT('0'), _CharT __one = _CharT('1')) const;
  template <class _CharT, class _Traits>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, allocator<_CharT> >
  to_string(_CharT __zero = _CharT('0'), _CharT __one = _CharT('1')) const;
  template <class _CharT>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, char_traits<_CharT>, allocator<_CharT> >
  to_string(_CharT __zero = _CharT('0'), _CharT __one = _CharT('1')) const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<char, char_traits<char>, allocator<char> >
  to_string(char __zero = '0', char __one = '1') const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t count() const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr size_t size() const noexcept { return _Size; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const bitset& __rhs) const noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const bitset& __rhs) const noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool test(size_t __pos) const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool all() const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool any() const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool none() const noexcept { return !any(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset operator<<(size_t __pos) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset operator>>(size_t __pos) const noexcept;

private:
  template <class _CharT, class _Traits>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __init_from_string_view(basic_string_view<_CharT, _Traits> __str, _CharT __zero, _CharT __one) {
    for (size_t __i = 0; __i < __str.size(); ++__i)
      if (!_Traits::eq(__str[__i], __zero) && !_Traits::eq(__str[__i], __one))
        std::__throw_invalid_argument("bitset string ctor has invalid argument");

    size_t __mp = std::min(__str.size(), _Size);
    size_t __i = 0;
    for (; __i < __mp; ++__i) {
      _CharT __c = __str[__mp - 1 - __i];
      (*this)[__i] = _Traits::eq(__c, __one);
    }
    std::fill(base::__make_iter(__i), base::__make_iter(_Size), false);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t __hash_code() const noexcept { return base::__hash_code(); }

  friend struct hash<bitset>;
};

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size>&
bitset<_Size>::operator&=(const bitset& __rhs) noexcept {
  base::operator&=(__rhs);
  return *this;
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size>&
bitset<_Size>::operator|=(const bitset& __rhs) noexcept {
  base::operator|=(__rhs);
  return *this;
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size>&
bitset<_Size>::operator^=(const bitset& __rhs) noexcept {
  base::operator^=(__rhs);
  return *this;
}

template <size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size>& bitset<_Size>::operator<<=(size_t __pos) noexcept {
  __pos = std::min(__pos, _Size);
  std::copy_backward(base::__make_iter(0), base::__make_iter(_Size - __pos), base::__make_iter(_Size));
  std::fill_n(base::__make_iter(0), __pos, false);
  return *this;
}

template <size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size>& bitset<_Size>::operator>>=(size_t __pos) noexcept {
  __pos = std::min(__pos, _Size);
  std::copy(base::__make_iter(__pos), base::__make_iter(_Size), base::__make_iter(0));
  std::fill_n(base::__make_iter(_Size - __pos), __pos, false);
  return *this;
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size>& bitset<_Size>::set() noexcept {
  std::fill_n(base::__make_iter(0), _Size, true);
  return *this;
}

template <size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size>& bitset<_Size>::set(size_t __pos, bool __val) {
  if (__pos >= _Size)
    __throw_out_of_range("bitset set argument out of range");

  (*this)[__pos] = __val;
  return *this;
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size>& bitset<_Size>::reset() noexcept {
  std::fill_n(base::__make_iter(0), _Size, false);
  return *this;
}

template <size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size>& bitset<_Size>::reset(size_t __pos) {
  if (__pos >= _Size)
    __throw_out_of_range("bitset reset argument out of range");

  (*this)[__pos] = false;
  return *this;
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size> bitset<_Size>::operator~() const noexcept {
  bitset __x(*this);
  __x.flip();
  return __x;
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size>& bitset<_Size>::flip() noexcept {
  base::flip();
  return *this;
}

template <size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size>& bitset<_Size>::flip(size_t __pos) {
  if (__pos >= _Size)
    __throw_out_of_range("bitset flip argument out of range");

  reference __r = base::__make_ref(__pos);
  __r = ~__r;
  return *this;
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long bitset<_Size>::to_ulong() const {
  return base::to_ulong();
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unsigned long long bitset<_Size>::to_ullong() const {
  return base::to_ullong();
}

template <size_t _Size>
template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, _Allocator>
bitset<_Size>::to_string(_CharT __zero, _CharT __one) const {
  basic_string<_CharT, _Traits, _Allocator> __r(_Size, __zero);
  for (size_t __i = 0; __i != _Size; ++__i) {
    if ((*this)[__i])
      __r[_Size - 1 - __i] = __one;
  }
  return __r;
}

template <size_t _Size>
template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, _Traits, allocator<_CharT> >
bitset<_Size>::to_string(_CharT __zero, _CharT __one) const {
  return to_string<_CharT, _Traits, allocator<_CharT> >(__zero, __one);
}

template <size_t _Size>
template <class _CharT>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<_CharT, char_traits<_CharT>, allocator<_CharT> >
bitset<_Size>::to_string(_CharT __zero, _CharT __one) const {
  return to_string<_CharT, char_traits<_CharT>, allocator<_CharT> >(__zero, __one);
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_string<char, char_traits<char>, allocator<char> >
bitset<_Size>::to_string(char __zero, char __one) const {
  return to_string<char, char_traits<char>, allocator<char> >(__zero, __one);
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t bitset<_Size>::count() const noexcept {
  return static_cast<size_t>(std::count(base::__make_iter(0), base::__make_iter(_Size), true));
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
bitset<_Size>::operator==(const bitset& __rhs) const noexcept {
  return std::equal(base::__make_iter(0), base::__make_iter(_Size), __rhs.__make_iter(0));
}



template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool bitset<_Size>::operator!=(const bitset& __rhs) const noexcept {
  return !(*this == __rhs);
}



template <size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool bitset<_Size>::test(size_t __pos) const {
  if (__pos >= _Size)
    __throw_out_of_range("bitset test argument out of range");

  return (*this)[__pos];
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool bitset<_Size>::all() const noexcept {
  return base::all();
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool bitset<_Size>::any() const noexcept {
  return base::any();
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size>
bitset<_Size>::operator<<(size_t __pos) const noexcept {
  bitset __r = *this;
  __r <<= __pos;
  return __r;
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size>
bitset<_Size>::operator>>(size_t __pos) const noexcept {
  bitset __r = *this;
  __r >>= __pos;
  return __r;
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size>
operator&(const bitset<_Size>& __x, const bitset<_Size>& __y) noexcept {
  bitset<_Size> __r = __x;
  __r &= __y;
  return __r;
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size>
operator|(const bitset<_Size>& __x, const bitset<_Size>& __y) noexcept {
  bitset<_Size> __r = __x;
  __r |= __y;
  return __r;
}

template <size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bitset<_Size>
operator^(const bitset<_Size>& __x, const bitset<_Size>& __y) noexcept {
  bitset<_Size> __r = __x;
  __r ^= __y;
  return __r;
}

template <size_t _Size>
struct hash<bitset<_Size> > : public __unary_function<bitset<_Size>, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(const bitset<_Size>& __bs) const noexcept { return __bs.__hash_code(); }
};

template <class _CharT, class _Traits, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
operator>>(basic_istream<_CharT, _Traits>& __is, bitset<_Size>& __x);

template <class _CharT, class _Traits, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, const bitset<_Size>& __x);

}}
# 959 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/bitset" 3
#pragma clang diagnostic pop
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ostream/basic_ostream.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 1 3
# 215 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/streambuf" 1 3
# 123 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/streambuf" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 127 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/streambuf" 2 3

#pragma clang diagnostic push
# 128 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/streambuf" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 128 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/streambuf" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 128 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/streambuf" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 128 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/streambuf" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 128 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/streambuf" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 128 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/streambuf" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _CharT, class _Traits>
class basic_streambuf {
public:

  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef typename traits_type::int_type int_type;
  typedef typename traits_type::pos_type pos_type;
  typedef typename traits_type::off_type off_type;

  static_assert(is_same<_CharT, typename traits_type::char_type>::value,
                "traits_type::char_type must be the same type as CharT");

  virtual ~basic_streambuf();


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) locale pubimbue(const locale& __loc) {
    imbue(__loc);
    locale __r = __loc_;
    __loc_ = __loc;
    return __r;
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) locale getloc() const { return __loc_; }


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_streambuf* pubsetbuf(char_type* __s, streamsize __n) {
    return setbuf(__s, __n);
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pos_type
  pubseekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __which = ios_base::in | ios_base::out) {
    return seekoff(__off, __way, __which);
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pos_type
  pubseekpos(pos_type __sp, ios_base::openmode __which = ios_base::in | ios_base::out) {
    return seekpos(__sp, __which);
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int pubsync() { return sync(); }



  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) streamsize in_avail() {
    if (__ninp_ < __einp_)
      return static_cast<streamsize>(__einp_ - __ninp_);
    return showmanyc();
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int_type snextc() {
    if (sbumpc() == traits_type::eof())
      return traits_type::eof();
    return sgetc();
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int_type sbumpc() {
    if (__ninp_ == __einp_)
      return uflow();
    return traits_type::to_int_type(*__ninp_++);
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int_type sgetc() {
    if (__ninp_ == __einp_)
      return underflow();
    return traits_type::to_int_type(*__ninp_);
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) streamsize sgetn(char_type* __s, streamsize __n) { return xsgetn(__s, __n); }


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int_type sputbackc(char_type __c) {
    if (__binp_ == __ninp_ || !traits_type::eq(__c, __ninp_[-1]))
      return pbackfail(traits_type::to_int_type(__c));
    return traits_type::to_int_type(*--__ninp_);
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int_type sungetc() {
    if (__binp_ == __ninp_)
      return pbackfail();
    return traits_type::to_int_type(*--__ninp_);
  }


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int_type sputc(char_type __c) {
    if (__nout_ == __eout_)
      return overflow(traits_type::to_int_type(__c));
    *__nout_++ = __c;
    return traits_type::to_int_type(__c);
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) streamsize sputn(const char_type* __s, streamsize __n) {
    return xsputn(__s, __n);
  }

protected:
  basic_streambuf();
  basic_streambuf(const basic_streambuf& __rhs);
  basic_streambuf& operator=(const basic_streambuf& __rhs);
  void swap(basic_streambuf& __rhs);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type* eback() const { return __binp_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type* gptr() const { return __ninp_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type* egptr() const { return __einp_; }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void gbump(int __n) { __ninp_ += __n; }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void setg(char_type* __gbeg, char_type* __gnext, char_type* __gend) {
    ((void)0);
    ((void)0);
    ((void)0);
    __binp_ = __gbeg;
    __ninp_ = __gnext;
    __einp_ = __gend;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type* pbase() const { return __bout_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type* pptr() const { return __nout_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type* epptr() const { return __eout_; }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void pbump(int __n) { __nout_ += __n; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __pbump(streamsize __n) { __nout_ += __n; }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void setp(char_type* __pbeg, char_type* __pend) {
    ((void)0);
    __bout_ = __nout_ = __pbeg;
    __eout_ = __pend;
  }



  virtual void imbue(const locale& __loc);


  virtual basic_streambuf* setbuf(char_type* __s, streamsize __n);
  virtual pos_type
  seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __which = ios_base::in | ios_base::out);
  virtual pos_type seekpos(pos_type __sp, ios_base::openmode __which = ios_base::in | ios_base::out);
  virtual int sync();


  virtual streamsize showmanyc();
  virtual streamsize xsgetn(char_type* __s, streamsize __n);
  virtual int_type underflow();
  virtual int_type uflow();


  virtual int_type pbackfail(int_type __c = traits_type::eof());


  virtual streamsize xsputn(const char_type* __s, streamsize __n);
  virtual int_type overflow(int_type __c = traits_type::eof());

private:
  locale __loc_;
  char_type* __binp_;
  char_type* __ninp_;
  char_type* __einp_;
  char_type* __bout_;
  char_type* __nout_;
  char_type* __eout_;
};

template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>::~basic_streambuf() {}

template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>::basic_streambuf()
    : __binp_(nullptr), __ninp_(nullptr), __einp_(nullptr), __bout_(nullptr), __nout_(nullptr), __eout_(nullptr) {}

template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>::basic_streambuf(const basic_streambuf& __sb)
    : __loc_(__sb.__loc_),
      __binp_(__sb.__binp_),
      __ninp_(__sb.__ninp_),
      __einp_(__sb.__einp_),
      __bout_(__sb.__bout_),
      __nout_(__sb.__nout_),
      __eout_(__sb.__eout_) {}

template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>& basic_streambuf<_CharT, _Traits>::operator=(const basic_streambuf& __sb) {
  __loc_ = __sb.__loc_;
  __binp_ = __sb.__binp_;
  __ninp_ = __sb.__ninp_;
  __einp_ = __sb.__einp_;
  __bout_ = __sb.__bout_;
  __nout_ = __sb.__nout_;
  __eout_ = __sb.__eout_;
  return *this;
}

template <class _CharT, class _Traits>
void basic_streambuf<_CharT, _Traits>::swap(basic_streambuf& __sb) {
  std::swap(__loc_, __sb.__loc_);
  std::swap(__binp_, __sb.__binp_);
  std::swap(__ninp_, __sb.__ninp_);
  std::swap(__einp_, __sb.__einp_);
  std::swap(__bout_, __sb.__bout_);
  std::swap(__nout_, __sb.__nout_);
  std::swap(__eout_, __sb.__eout_);
}

template <class _CharT, class _Traits>
void basic_streambuf<_CharT, _Traits>::imbue(const locale&) {}

template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>* basic_streambuf<_CharT, _Traits>::setbuf(char_type*, streamsize) {
  return this;
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::pos_type
basic_streambuf<_CharT, _Traits>::seekoff(off_type, ios_base::seekdir, ios_base::openmode) {
  return pos_type(off_type(-1));
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::pos_type
basic_streambuf<_CharT, _Traits>::seekpos(pos_type, ios_base::openmode) {
  return pos_type(off_type(-1));
}

template <class _CharT, class _Traits>
int basic_streambuf<_CharT, _Traits>::sync() {
  return 0;
}

template <class _CharT, class _Traits>
streamsize basic_streambuf<_CharT, _Traits>::showmanyc() {
  return 0;
}

template <class _CharT, class _Traits>
streamsize basic_streambuf<_CharT, _Traits>::xsgetn(char_type* __s, streamsize __n) {
  const int_type __eof = traits_type::eof();
  int_type __c;
  streamsize __i = 0;
  while (__i < __n) {
    if (__ninp_ < __einp_) {
      const streamsize __len = std::min(static_cast<streamsize>(2147483647), std::min(__einp_ - __ninp_, __n - __i));
      traits_type::copy(__s, __ninp_, __len);
      __s += __len;
      __i += __len;
      this->gbump(__len);
    } else if ((__c = uflow()) != __eof) {
      *__s = traits_type::to_char_type(__c);
      ++__s;
      ++__i;
    } else
      break;
  }
  return __i;
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type basic_streambuf<_CharT, _Traits>::underflow() {
  return traits_type::eof();
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type basic_streambuf<_CharT, _Traits>::uflow() {
  if (underflow() == traits_type::eof())
    return traits_type::eof();
  return traits_type::to_int_type(*__ninp_++);
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type basic_streambuf<_CharT, _Traits>::pbackfail(int_type) {
  return traits_type::eof();
}

template <class _CharT, class _Traits>
streamsize basic_streambuf<_CharT, _Traits>::xsputn(const char_type* __s, streamsize __n) {
  streamsize __i = 0;
  int_type __eof = traits_type::eof();
  while (__i < __n) {
    if (__nout_ >= __eout_) {
      if (overflow(traits_type::to_int_type(*__s)) == __eof)
        break;
      ++__s;
      ++__i;
    } else {
      streamsize __chunk_size = std::min(__eout_ - __nout_, __n - __i);
      traits_type::copy(__nout_, __s, __chunk_size);
      __nout_ += __chunk_size;
      __s += __chunk_size;
      __i += __chunk_size;
    }
  }
  return __i;
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type basic_streambuf<_CharT, _Traits>::overflow(int_type) {
  return traits_type::eof();
}

extern template class __attribute__((__visibility__("default"))) basic_streambuf<char>;


extern template class __attribute__((__visibility__("default"))) basic_streambuf<wchar_t>;


}}
# 437 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/streambuf" 3
#pragma clang diagnostic pop
# 216 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 2 3
# 225 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/nl_types.h" 1 3 4
# 45 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/nl_types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 1 3 4
# 84 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_u_char.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_u_char.h" 3 4
typedef unsigned char u_char;
# 85 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_u_short.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_u_short.h" 3 4
typedef unsigned short u_short;
# 86 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_u_int.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_u_int.h" 3 4
typedef unsigned int u_int;
# 87 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4

typedef unsigned long u_long;


typedef unsigned short ushort;

typedef unsigned int uint;




typedef u_int64_t u_quad_t;
typedef int64_t quad_t;
typedef quad_t * qaddr_t;

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_caddr_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_caddr_t.h" 3 4
typedef char * caddr_t;
# 103 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4

typedef int32_t daddr_t;



typedef u_int32_t fixpt_t;

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_blkcnt_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_blkcnt_t.h" 3 4
typedef __darwin_blkcnt_t blkcnt_t;
# 111 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_blksize_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_blksize_t.h" 3 4
typedef __darwin_blksize_t blksize_t;
# 112 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_gid_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_gid_t.h" 3 4
typedef __darwin_gid_t gid_t;
# 113 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_in_addr_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_in_addr_t.h" 3 4
typedef __uint32_t in_addr_t;
# 114 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_in_port_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_in_port_t.h" 3 4
typedef __uint16_t in_port_t;
# 115 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_ino_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_ino_t.h" 3 4
typedef __darwin_ino_t ino_t;
# 116 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_ino64_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_ino64_t.h" 3 4
typedef __darwin_ino64_t ino64_t;
# 119 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_key_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_key_t.h" 3 4
typedef __int32_t key_t;
# 122 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_nlink_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_nlink_t.h" 3 4
typedef __uint16_t nlink_t;
# 124 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4




typedef int32_t segsz_t;
typedef int32_t swblk_t;
# 141 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 3 4
static inline __int32_t
major(__uint32_t _x)
{
 return (__int32_t)(((__uint32_t)_x >> 24) & 0xff);
}

static inline __int32_t
minor(__uint32_t _x)
{
 return (__int32_t)((_x) & 0xffffff);
}

static inline dev_t
makedev(__uint32_t _major, __uint32_t _minor)
{
 return (dev_t)(((_major) << 24) | (_minor));
}
# 169 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 170 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_useconds_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_useconds_t.h" 3 4
typedef __darwin_useconds_t useconds_t;
# 174 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_suseconds_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_suseconds_t.h" 3 4
typedef __darwin_suseconds_t suseconds_t;
# 175 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_rsize_t.h" 1 3 4
# 178 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4
# 187 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_fd_def.h" 1 3 4
# 49 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_fd_def.h" 3 4
extern "C" {
typedef struct fd_set {
 __int32_t fds_bits[((((1024) % ((sizeof(__int32_t) * 8))) == 0) ? ((1024) / ((sizeof(__int32_t) * 8))) : (((1024) / ((sizeof(__int32_t) * 8))) + 1))];
} fd_set;

int __darwin_check_fd_set_overflow(int, const void *, int) __attribute__((availability(macos,introduced=11.0))) __attribute__((availability(ios,introduced=14.0))) __attribute__((availability(tvos,introduced=14.0))) __attribute__((availability(watchos,introduced=7.0)));
}

inline __attribute__ ((__always_inline__)) int
__darwin_check_fd_set(int _a, const void *_b)
{

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunguarded-availability-new"

 if ((uintptr_t)&__darwin_check_fd_set_overflow != (uintptr_t) 0) {



  return __darwin_check_fd_set_overflow(_a, _b, 0);

 } else {
  return 1;
 }

#pragma clang diagnostic pop

}


inline __attribute__ ((__always_inline__)) int
__darwin_fd_isset(int _fd, const struct fd_set *_p)
{
 if (__darwin_check_fd_set(_fd, (const void *) _p)) {
  return _p->fds_bits[(unsigned long)_fd / (sizeof(__int32_t) * 8)] & ((__int32_t)(((unsigned long)1) << ((unsigned long)_fd % (sizeof(__int32_t) * 8))));
 }

 return 0;
}

inline __attribute__ ((__always_inline__)) void
__darwin_fd_set(int _fd, struct fd_set *const _p)
{
 if (__darwin_check_fd_set(_fd, (const void *) _p)) {
  (_p->fds_bits[(unsigned long)_fd / (sizeof(__int32_t) * 8)] |= ((__int32_t)(((unsigned long)1) << ((unsigned long)_fd % (sizeof(__int32_t) * 8)))));
 }
}

inline __attribute__ ((__always_inline__)) void
__darwin_fd_clr(int _fd, struct fd_set *const _p)
{
 if (__darwin_check_fd_set(_fd, (const void *) _p)) {
  (_p->fds_bits[(unsigned long)_fd / (sizeof(__int32_t) * 8)] &= ~((__int32_t)(((unsigned long)1) << ((unsigned long)_fd % (sizeof(__int32_t) * 8)))));
 }
}
# 188 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4




typedef __int32_t fd_mask;







# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_fd_setsize.h" 1 3 4
# 201 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_fd_set.h" 1 3 4
# 202 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_fd_clr.h" 1 3 4
# 203 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_fd_zero.h" 1 3 4
# 204 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_fd_isset.h" 1 3 4
# 205 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_fd_copy.h" 1 3 4
# 208 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4
# 235 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_fsblkcnt_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_fsblkcnt_t.h" 3 4
typedef __darwin_fsblkcnt_t fsblkcnt_t;
# 236 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_fsfilcnt_t.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/_types/_fsfilcnt_t.h" 3 4
typedef __darwin_fsfilcnt_t fsfilcnt_t;
# 237 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/sys/types.h" 2 3 4
# 46 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/nl_types.h" 2 3 4
# 89 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/nl_types.h" 3 4
typedef struct __nl_cat_d {
 void *__data;
 int __size;
} *nl_catd;

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_nl_item.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/_types/_nl_item.h" 3 4
typedef __darwin_nl_item nl_item;
# 95 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/nl_types.h" 2 3 4

extern "C" {
nl_catd catopen(const char *, int);
char *catgets(nl_catd, int, int, const char *)
 __attribute__((__format_arg__(4)));
int catclose(nl_catd);
}
# 226 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale_dir/locale_base_api/bsd_locale_defaults.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__locale_dir/locale_base_api/bsd_locale_defaults.h" 3
# 231 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 2 3





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/xlocale.h" 1 3 4
# 237 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 2 3
# 241 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 245 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 2 3

#pragma clang diagnostic push
# 246 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 246 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 246 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 246 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 246 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 246 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 277 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
template <class _InputIterator, class _ForwardIterator, class _Ctype>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ForwardIterator __scan_keyword(
    _InputIterator& __b,
    _InputIterator __e,
    _ForwardIterator __kb,
    _ForwardIterator __ke,
    const _Ctype& __ct,
    ios_base::iostate& __err,
    bool __case_sensitive = true) {
  typedef typename iterator_traits<_InputIterator>::value_type _CharT;
  size_t __nkw = static_cast<size_t>(std::distance(__kb, __ke));
  const unsigned char __doesnt_match = '\0';
  const unsigned char __might_match = '\1';
  const unsigned char __does_match = '\2';
  unsigned char __statbuf[100];
  unsigned char* __status = __statbuf;
  unique_ptr<unsigned char, void (*)(void*)> __stat_hold(nullptr, free);
  if (__nkw > sizeof(__statbuf)) {
    __status = (unsigned char*)malloc(__nkw);
    if (__status == nullptr)
      __throw_bad_alloc();
    __stat_hold.reset(__status);
  }
  size_t __n_might_match = __nkw;
  size_t __n_does_match = 0;

  unsigned char* __st = __status;
  for (_ForwardIterator __ky = __kb; __ky != __ke; ++__ky, (void)++__st) {
    if (!__ky->empty())
      *__st = __might_match;
    else {
      *__st = __does_match;
      --__n_might_match;
      ++__n_does_match;
    }
  }

  for (size_t __indx = 0; __b != __e && __n_might_match > 0; ++__indx) {

    _CharT __c = *__b;
    if (!__case_sensitive)
      __c = __ct.toupper(__c);
    bool __consume = false;






    __st = __status;
    for (_ForwardIterator __ky = __kb; __ky != __ke; ++__ky, (void)++__st) {
      if (*__st == __might_match) {
        _CharT __kc = (*__ky)[__indx];
        if (!__case_sensitive)
          __kc = __ct.toupper(__kc);
        if (__c == __kc) {
          __consume = true;
          if (__ky->size() == __indx + 1) {
            *__st = __does_match;
            --__n_might_match;
            ++__n_does_match;
          }
        } else {
          *__st = __doesnt_match;
          --__n_might_match;
        }
      }
    }

    if (__consume) {
      ++__b;



      if (__n_might_match + __n_does_match > 1) {
        __st = __status;
        for (_ForwardIterator __ky = __kb; __ky != __ke; ++__ky, (void)++__st) {
          if (*__st == __does_match && __ky->size() != __indx + 1) {
            *__st = __doesnt_match;
            --__n_does_match;
          }
        }
      }
    }
  }

  if (__b == __e)
    __err |= ios_base::eofbit;

  for (__st = __status; __kb != __ke; ++__kb, (void)++__st)
    if (*__st == __does_match)
      break;
  if (__kb == __ke)
    __err |= ios_base::failbit;
  return __kb;
}

struct __attribute__((__visibility__("default"))) __num_get_base {
  static const int __num_get_buf_sz = 40;

  static int __get_base(ios_base&);
  static const char __src[33];

  static const size_t __int_chr_cnt = 26;

  static const size_t __fp_chr_cnt = 28;
};

__attribute__((__visibility__("default"))) void
__check_grouping(const string& __grouping, unsigned* __g, unsigned* __g_end, ios_base::iostate& __err);

template <class _CharT>
struct __num_get : protected __num_get_base {
  static string __stage2_float_prep(ios_base& __iob, _CharT* __atoms, _CharT& __decimal_point, _CharT& __thousands_sep);

  static int __stage2_float_loop(
      _CharT __ct,
      bool& __in_units,
      char& __exp,
      char* __a,
      char*& __a_end,
      _CharT __decimal_point,
      _CharT __thousands_sep,
      const string& __grouping,
      unsigned* __g,
      unsigned*& __g_end,
      unsigned& __dc,
      _CharT* __atoms);

  static string __stage2_int_prep(ios_base& __iob, _CharT* __atoms, _CharT& __thousands_sep);
  static int __stage2_int_loop(
      _CharT __ct,
      int __base,
      char* __a,
      char*& __a_end,
      unsigned& __dc,
      _CharT __thousands_sep,
      const string& __grouping,
      unsigned* __g,
      unsigned*& __g_end,
      _CharT* __atoms);
# 455 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
};


template <class _CharT>
string __num_get<_CharT>::__stage2_int_prep(ios_base& __iob, _CharT* __atoms, _CharT& __thousands_sep) {
  locale __loc = __iob.getloc();
  std::use_facet<ctype<_CharT> >(__loc).widen(__src, __src + __int_chr_cnt, __atoms);
  const numpunct<_CharT>& __np = std::use_facet<numpunct<_CharT> >(__loc);
  __thousands_sep = __np.thousands_sep();
  return __np.grouping();
}


template <class _CharT>
string __num_get<_CharT>::__stage2_float_prep(
    ios_base& __iob, _CharT* __atoms, _CharT& __decimal_point, _CharT& __thousands_sep) {
  locale __loc = __iob.getloc();
  std::use_facet<ctype<_CharT> >(__loc).widen(__src, __src + __fp_chr_cnt, __atoms);
  const numpunct<_CharT>& __np = std::use_facet<numpunct<_CharT> >(__loc);
  __decimal_point = __np.decimal_point();
  __thousands_sep = __np.thousands_sep();
  return __np.grouping();
}

template <class _CharT>
int

__num_get<_CharT>::__stage2_int_loop(_CharT __ct, int __base, char* __a, char*& __a_end,
                  unsigned& __dc, _CharT __thousands_sep, const string& __grouping,
                  unsigned* __g, unsigned*& __g_end, _CharT* __atoms)






{
  if (__a_end == __a && (__ct == __atoms[24] || __ct == __atoms[25])) {
    *__a_end++ = __ct == __atoms[24] ? '+' : '-';
    __dc = 0;
    return 0;
  }
  if (__grouping.size() != 0 && __ct == __thousands_sep) {
    if (__g_end - __g < __num_get_buf_sz) {
      *__g_end++ = __dc;
      __dc = 0;
    }
    return 0;
  }
  ptrdiff_t __f = std::find(__atoms, __atoms + __int_chr_cnt, __ct) - __atoms;
  if (__f >= 24)
    return -1;
  switch (__base) {
  case 8:
  case 10:
    if (__f >= __base)
      return -1;
    break;
  case 16:
    if (__f < 22)
      break;
    if (__a_end != __a && __a_end - __a <= 2 && __a_end[-1] == '0') {
      __dc = 0;
      *__a_end++ = __src[__f];
      return 0;
    }
    return -1;
  }
  *__a_end++ = __src[__f];
  ++__dc;
  return 0;
}

template <class _CharT>
int __num_get<_CharT>::__stage2_float_loop(
    _CharT __ct,
    bool& __in_units,
    char& __exp,
    char* __a,
    char*& __a_end,
    _CharT __decimal_point,
    _CharT __thousands_sep,
    const string& __grouping,
    unsigned* __g,
    unsigned*& __g_end,
    unsigned& __dc,
    _CharT* __atoms) {
  if (__ct == __decimal_point) {
    if (!__in_units)
      return -1;
    __in_units = false;
    *__a_end++ = '.';
    if (__grouping.size() != 0 && __g_end - __g < __num_get_buf_sz)
      *__g_end++ = __dc;
    return 0;
  }
  if (__ct == __thousands_sep && __grouping.size() != 0) {
    if (!__in_units)
      return -1;
    if (__g_end - __g < __num_get_buf_sz) {
      *__g_end++ = __dc;
      __dc = 0;
    }
    return 0;
  }
  ptrdiff_t __f = std::find(__atoms, __atoms + __num_get_base::__fp_chr_cnt, __ct) - __atoms;
  if (__f >= static_cast<ptrdiff_t>(__num_get_base::__fp_chr_cnt))
    return -1;
  char __x = __src[__f];
  if (__x == '-' || __x == '+') {
    if (__a_end == __a || (std::toupper(__a_end[-1]) == std::toupper(__exp))) {
      *__a_end++ = __x;
      return 0;
    }
    return -1;
  }
  if (__x == 'x' || __x == 'X')
    __exp = 'P';
  else if (std::toupper(__x) == __exp) {
    __exp = std::tolower(__exp);
    if (__in_units) {
      __in_units = false;
      if (__grouping.size() != 0 && __g_end - __g < __num_get_buf_sz)
        *__g_end++ = __dc;
    }
  }
  *__a_end++ = __x;
  if (__f >= 22)
    return 0;
  ++__dc;
  return 0;
}

extern template struct __attribute__((__visibility__("default"))) __num_get<char>;

extern template struct __attribute__((__visibility__("default"))) __num_get<wchar_t>;


template <class _CharT, class _InputIterator = istreambuf_iterator<_CharT> >
class num_get : public locale::facet, private __num_get<_CharT> {
public:
  typedef _CharT char_type;
  typedef _InputIterator iter_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit num_get(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, bool& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, long& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, long long& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, unsigned short& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, unsigned int& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, unsigned long& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, unsigned long long& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, float& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, double& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, long double& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, void*& __v) const {
    return do_get(__b, __e, __iob, __err, __v);
  }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~num_get() override {}

  template <class _Fp>
  inline __attribute__((__visibility__("hidden"))) iter_type
  __do_get_floating_point(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, _Fp& __v) const;

  template <class _Signed>
  inline __attribute__((__visibility__("hidden"))) iter_type
  __do_get_signed(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, _Signed& __v) const;

  template <class _Unsigned>
  inline __attribute__((__visibility__("hidden"))) iter_type
  __do_get_unsigned(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, _Unsigned& __v) const;

  virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, bool& __v) const;

  virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, long& __v) const {
    return this->__do_get_signed(__b, __e, __iob, __err, __v);
  }

  virtual iter_type
  do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, long long& __v) const {
    return this->__do_get_signed(__b, __e, __iob, __err, __v);
  }

  virtual iter_type
  do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, unsigned short& __v) const {
    return this->__do_get_unsigned(__b, __e, __iob, __err, __v);
  }

  virtual iter_type
  do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, unsigned int& __v) const {
    return this->__do_get_unsigned(__b, __e, __iob, __err, __v);
  }

  virtual iter_type
  do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, unsigned long& __v) const {
    return this->__do_get_unsigned(__b, __e, __iob, __err, __v);
  }

  virtual iter_type
  do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, unsigned long long& __v) const {
    return this->__do_get_unsigned(__b, __e, __iob, __err, __v);
  }

  virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, float& __v) const {
    return this->__do_get_floating_point(__b, __e, __iob, __err, __v);
  }

  virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, double& __v) const {
    return this->__do_get_floating_point(__b, __e, __iob, __err, __v);
  }

  virtual iter_type
  do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, long double& __v) const {
    return this->__do_get_floating_point(__b, __e, __iob, __err, __v);
  }

  virtual iter_type do_get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, void*& __v) const;
};

template <class _CharT, class _InputIterator>
locale::id num_get<_CharT, _InputIterator>::id;

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
__num_get_signed_integral(const char* __a, const char* __a_end, ios_base::iostate& __err, int __base) {
  if (__a != __a_end) {
    __libcpp_remove_reference_t<decltype((*__error()))> __save_errno = (*__error());
    (*__error()) = 0;
    char* __p2;
    long long __ll = strtoll_l(__a, &__p2, __base, 0);
    __libcpp_remove_reference_t<decltype((*__error()))> __current_errno = (*__error());
    if (__current_errno == 0)
      (*__error()) = __save_errno;
    if (__p2 != __a_end) {
      __err = ios_base::failbit;
      return 0;
    } else if (__current_errno == 34 || __ll < numeric_limits<_Tp>::min() || numeric_limits<_Tp>::max() < __ll) {
      __err = ios_base::failbit;
      if (__ll > 0)
        return numeric_limits<_Tp>::max();
      else
        return numeric_limits<_Tp>::min();
    }
    return static_cast<_Tp>(__ll);
  }
  __err = ios_base::failbit;
  return 0;
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp
__num_get_unsigned_integral(const char* __a, const char* __a_end, ios_base::iostate& __err, int __base) {
  if (__a != __a_end) {
    const bool __negate = *__a == '-';
    if (__negate && ++__a == __a_end) {
      __err = ios_base::failbit;
      return 0;
    }
    __libcpp_remove_reference_t<decltype((*__error()))> __save_errno = (*__error());
    (*__error()) = 0;
    char* __p2;
    unsigned long long __ll = strtoull_l(__a, &__p2, __base, 0);
    __libcpp_remove_reference_t<decltype((*__error()))> __current_errno = (*__error());
    if (__current_errno == 0)
      (*__error()) = __save_errno;
    if (__p2 != __a_end) {
      __err = ios_base::failbit;
      return 0;
    } else if (__current_errno == 34 || numeric_limits<_Tp>::max() < __ll) {
      __err = ios_base::failbit;
      return numeric_limits<_Tp>::max();
    }
    _Tp __res = static_cast<_Tp>(__ll);
    if (__negate)
      __res = -__res;
    return __res;
  }
  __err = ios_base::failbit;
  return 0;
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp __do_strtod(const char* __a, char** __p2);

template <>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float __do_strtod<float>(const char* __a, char** __p2) {
  return strtof_l(__a, __p2, 0);
}

template <>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) double __do_strtod<double>(const char* __a, char** __p2) {
  return strtod_l(__a, __p2, 0);
}

template <>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) long double __do_strtod<long double>(const char* __a, char** __p2) {
  return strtold_l(__a, __p2, 0);
}

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp __num_get_float(const char* __a, const char* __a_end, ios_base::iostate& __err) {
  if (__a != __a_end) {
    __libcpp_remove_reference_t<decltype((*__error()))> __save_errno = (*__error());
    (*__error()) = 0;
    char* __p2;
    _Tp __ld = std::__do_strtod<_Tp>(__a, &__p2);
    __libcpp_remove_reference_t<decltype((*__error()))> __current_errno = (*__error());
    if (__current_errno == 0)
      (*__error()) = __save_errno;
    if (__p2 != __a_end) {
      __err = ios_base::failbit;
      return 0;
    } else if (__current_errno == 34)
      __err = ios_base::failbit;
    return __ld;
  }
  __err = ios_base::failbit;
  return 0;
}

template <class _CharT, class _InputIterator>
_InputIterator num_get<_CharT, _InputIterator>::do_get(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, bool& __v) const {
  if ((__iob.flags() & ios_base::boolalpha) == 0) {
    long __lv = -1;
    __b = do_get(__b, __e, __iob, __err, __lv);
    switch (__lv) {
    case 0:
      __v = false;
      break;
    case 1:
      __v = true;
      break;
    default:
      __v = true;
      __err = ios_base::failbit;
      break;
    }
    return __b;
  }
  const ctype<_CharT>& __ct = std::use_facet<ctype<_CharT> >(__iob.getloc());
  const numpunct<_CharT>& __np = std::use_facet<numpunct<_CharT> >(__iob.getloc());
  typedef typename numpunct<_CharT>::string_type string_type;
  const string_type __names[2] = {__np.truename(), __np.falsename()};
  const string_type* __i = std::__scan_keyword(__b, __e, __names, __names + 2, __ct, __err);
  __v = __i == __names;
  return __b;
}



template <class _CharT, class _InputIterator>
template <class _Signed>
_InputIterator num_get<_CharT, _InputIterator>::__do_get_signed(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, _Signed& __v) const {

  int __base = this->__get_base(__iob);

  char_type __thousands_sep;
  const int __atoms_size = __num_get_base::__int_chr_cnt;





  char_type __atoms[__atoms_size];
  string __grouping = this->__stage2_int_prep(__iob, __atoms, __thousands_sep);

  string __buf;
  __buf.resize(__buf.capacity());
  char* __a = &__buf[0];
  char* __a_end = __a;
  unsigned __g[__num_get_base::__num_get_buf_sz];
  unsigned* __g_end = __g;
  unsigned __dc = 0;
  for (; __b != __e; ++__b) {
    if (__a_end == __a + __buf.size()) {
      size_t __tmp = __buf.size();
      __buf.resize(2 * __buf.size());
      __buf.resize(__buf.capacity());
      __a = &__buf[0];
      __a_end = __a + __tmp;
    }
    if (this->__stage2_int_loop(*__b, __base, __a, __a_end, __dc, __thousands_sep, __grouping, __g, __g_end, __atoms))
      break;
  }
  if (__grouping.size() != 0 && __g_end - __g < __num_get_base::__num_get_buf_sz)
    *__g_end++ = __dc;

  __v = std::__num_get_signed_integral<_Signed>(__a, __a_end, __err, __base);

  __check_grouping(__grouping, __g, __g_end, __err);

  if (__b == __e)
    __err |= ios_base::eofbit;
  return __b;
}



template <class _CharT, class _InputIterator>
template <class _Unsigned>
_InputIterator num_get<_CharT, _InputIterator>::__do_get_unsigned(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, _Unsigned& __v) const {

  int __base = this->__get_base(__iob);

  char_type __thousands_sep;
  const int __atoms_size = __num_get_base::__int_chr_cnt;





  char_type __atoms[__atoms_size];
  string __grouping = this->__stage2_int_prep(__iob, __atoms, __thousands_sep);

  string __buf;
  __buf.resize(__buf.capacity());
  char* __a = &__buf[0];
  char* __a_end = __a;
  unsigned __g[__num_get_base::__num_get_buf_sz];
  unsigned* __g_end = __g;
  unsigned __dc = 0;
  for (; __b != __e; ++__b) {
    if (__a_end == __a + __buf.size()) {
      size_t __tmp = __buf.size();
      __buf.resize(2 * __buf.size());
      __buf.resize(__buf.capacity());
      __a = &__buf[0];
      __a_end = __a + __tmp;
    }
    if (this->__stage2_int_loop(*__b, __base, __a, __a_end, __dc, __thousands_sep, __grouping, __g, __g_end, __atoms))
      break;
  }
  if (__grouping.size() != 0 && __g_end - __g < __num_get_base::__num_get_buf_sz)
    *__g_end++ = __dc;

  __v = std::__num_get_unsigned_integral<_Unsigned>(__a, __a_end, __err, __base);

  __check_grouping(__grouping, __g, __g_end, __err);

  if (__b == __e)
    __err |= ios_base::eofbit;
  return __b;
}



template <class _CharT, class _InputIterator>
template <class _Fp>
_InputIterator num_get<_CharT, _InputIterator>::__do_get_floating_point(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, _Fp& __v) const {


  char_type __atoms[__num_get_base::__fp_chr_cnt];
  char_type __decimal_point;
  char_type __thousands_sep;
  string __grouping = this->__stage2_float_prep(__iob, __atoms, __decimal_point, __thousands_sep);
  string __buf;
  __buf.resize(__buf.capacity());
  char* __a = &__buf[0];
  char* __a_end = __a;
  unsigned __g[__num_get_base::__num_get_buf_sz];
  unsigned* __g_end = __g;
  unsigned __dc = 0;
  bool __in_units = true;
  char __exp = 'E';
  bool __is_leading_parsed = false;
  for (; __b != __e; ++__b) {
    if (__a_end == __a + __buf.size()) {
      size_t __tmp = __buf.size();
      __buf.resize(2 * __buf.size());
      __buf.resize(__buf.capacity());
      __a = &__buf[0];
      __a_end = __a + __tmp;
    }
    if (this->__stage2_float_loop(
            *__b,
            __in_units,
            __exp,
            __a,
            __a_end,
            __decimal_point,
            __thousands_sep,
            __grouping,
            __g,
            __g_end,
            __dc,
            __atoms))
      break;


    if (!__is_leading_parsed) {
      if (__a_end - __a >= 1 && __a[0] != '-' && __a[0] != '+') {
        if (('0' <= __a[0] && __a[0] <= '9') || __a[0] == '.')
          __is_leading_parsed = true;
        else
          break;
      } else if (__a_end - __a >= 2 && (__a[0] == '-' || __a[0] == '+')) {
        if (('0' <= __a[1] && __a[1] <= '9') || __a[1] == '.')
          __is_leading_parsed = true;
        else
          break;
      }
    }
  }
  if (__grouping.size() != 0 && __in_units && __g_end - __g < __num_get_base::__num_get_buf_sz)
    *__g_end++ = __dc;

  __v = std::__num_get_float<_Fp>(__a, __a_end, __err);

  __check_grouping(__grouping, __g, __g_end, __err);

  if (__b == __e)
    __err |= ios_base::eofbit;
  return __b;
}

template <class _CharT, class _InputIterator>
_InputIterator num_get<_CharT, _InputIterator>::do_get(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, void*& __v) const {

  int __base = 16;

  char_type __atoms[__num_get_base::__int_chr_cnt];
  char_type __thousands_sep = char_type();
  string __grouping;
  std::use_facet<ctype<_CharT> >(__iob.getloc())
      .widen(__num_get_base::__src, __num_get_base::__src + __num_get_base::__int_chr_cnt, __atoms);
  string __buf;
  __buf.resize(__buf.capacity());
  char* __a = &__buf[0];
  char* __a_end = __a;
  unsigned __g[__num_get_base::__num_get_buf_sz];
  unsigned* __g_end = __g;
  unsigned __dc = 0;
  for (; __b != __e; ++__b) {
    if (__a_end == __a + __buf.size()) {
      size_t __tmp = __buf.size();
      __buf.resize(2 * __buf.size());
      __buf.resize(__buf.capacity());
      __a = &__buf[0];
      __a_end = __a + __tmp;
    }
    if (this->__stage2_int_loop(*__b, __base, __a, __a_end, __dc, __thousands_sep, __grouping, __g, __g_end, __atoms))
      break;
  }

  __buf.resize(__a_end - __a);
  if (sscanf_l(__buf.c_str(), 0, "%p", &__v) != 1)
    __err = ios_base::failbit;

  if (__b == __e)
    __err |= ios_base::eofbit;
  return __b;
}

extern template class __attribute__((__visibility__("default"))) num_get<char>;

extern template class __attribute__((__visibility__("default"))) num_get<wchar_t>;


struct __attribute__((__visibility__("default"))) __num_put_base {
protected:
  static void __format_int(char* __fmt, const char* __len, bool __signd, ios_base::fmtflags __flags);
  static bool __format_float(char* __fmt, const char* __len, ios_base::fmtflags __flags);
  static char* __identify_padding(char* __nb, char* __ne, const ios_base& __iob);
};

template <class _CharT>
struct __num_put : protected __num_put_base {
  static void __widen_and_group_int(
      char* __nb, char* __np, char* __ne, _CharT* __ob, _CharT*& __op, _CharT*& __oe, const locale& __loc);
  static void __widen_and_group_float(
      char* __nb, char* __np, char* __ne, _CharT* __ob, _CharT*& __op, _CharT*& __oe, const locale& __loc);
};

template <class _CharT>
void __num_put<_CharT>::__widen_and_group_int(
    char* __nb, char* __np, char* __ne, _CharT* __ob, _CharT*& __op, _CharT*& __oe, const locale& __loc) {
  const ctype<_CharT>& __ct = std::use_facet<ctype<_CharT> >(__loc);
  const numpunct<_CharT>& __npt = std::use_facet<numpunct<_CharT> >(__loc);
  string __grouping = __npt.grouping();
  if (__grouping.empty()) {
    __ct.widen(__nb, __ne, __ob);
    __oe = __ob + (__ne - __nb);
  } else {
    __oe = __ob;
    char* __nf = __nb;
    if (*__nf == '-' || *__nf == '+')
      *__oe++ = __ct.widen(*__nf++);
    if (__ne - __nf >= 2 && __nf[0] == '0' && (__nf[1] == 'x' || __nf[1] == 'X')) {
      *__oe++ = __ct.widen(*__nf++);
      *__oe++ = __ct.widen(*__nf++);
    }
    std::reverse(__nf, __ne);
    _CharT __thousands_sep = __npt.thousands_sep();
    unsigned __dc = 0;
    unsigned __dg = 0;
    for (char* __p = __nf; __p < __ne; ++__p) {
      if (static_cast<unsigned>(__grouping[__dg]) > 0 && __dc == static_cast<unsigned>(__grouping[__dg])) {
        *__oe++ = __thousands_sep;
        __dc = 0;
        if (__dg < __grouping.size() - 1)
          ++__dg;
      }
      *__oe++ = __ct.widen(*__p);
      ++__dc;
    }
    std::reverse(__ob + (__nf - __nb), __oe);
  }
  if (__np == __ne)
    __op = __oe;
  else
    __op = __ob + (__np - __nb);
}

template <class _CharT>
void __num_put<_CharT>::__widen_and_group_float(
    char* __nb, char* __np, char* __ne, _CharT* __ob, _CharT*& __op, _CharT*& __oe, const locale& __loc) {
  const ctype<_CharT>& __ct = std::use_facet<ctype<_CharT> >(__loc);
  const numpunct<_CharT>& __npt = std::use_facet<numpunct<_CharT> >(__loc);
  string __grouping = __npt.grouping();
  __oe = __ob;
  char* __nf = __nb;
  if (*__nf == '-' || *__nf == '+')
    *__oe++ = __ct.widen(*__nf++);
  char* __ns;
  if (__ne - __nf >= 2 && __nf[0] == '0' && (__nf[1] == 'x' || __nf[1] == 'X')) {
    *__oe++ = __ct.widen(*__nf++);
    *__oe++ = __ct.widen(*__nf++);
    for (__ns = __nf; __ns < __ne; ++__ns)
      if (!isxdigit_l(*__ns, 0))
        break;
  } else {
    for (__ns = __nf; __ns < __ne; ++__ns)
      if (!isdigit_l(*__ns, 0))
        break;
  }
  if (__grouping.empty()) {
    __ct.widen(__nf, __ns, __oe);
    __oe += __ns - __nf;
  } else {
    std::reverse(__nf, __ns);
    _CharT __thousands_sep = __npt.thousands_sep();
    unsigned __dc = 0;
    unsigned __dg = 0;
    for (char* __p = __nf; __p < __ns; ++__p) {
      if (__grouping[__dg] > 0 && __dc == static_cast<unsigned>(__grouping[__dg])) {
        *__oe++ = __thousands_sep;
        __dc = 0;
        if (__dg < __grouping.size() - 1)
          ++__dg;
      }
      *__oe++ = __ct.widen(*__p);
      ++__dc;
    }
    std::reverse(__ob + (__nf - __nb), __oe);
  }
  for (__nf = __ns; __nf < __ne; ++__nf) {
    if (*__nf == '.') {
      *__oe++ = __npt.decimal_point();
      ++__nf;
      break;
    } else
      *__oe++ = __ct.widen(*__nf);
  }
  __ct.widen(__nf, __ne, __oe);
  __oe += __ne - __nf;
  if (__np == __ne)
    __op = __oe;
  else
    __op = __ob + (__np - __nb);
}

extern template struct __attribute__((__visibility__("default"))) __num_put<char>;

extern template struct __attribute__((__visibility__("default"))) __num_put<wchar_t>;


template <class _CharT, class _OutputIterator = ostreambuf_iterator<_CharT> >
class num_put : public locale::facet, private __num_put<_CharT> {
public:
  typedef _CharT char_type;
  typedef _OutputIterator iter_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit num_put(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type put(iter_type __s, ios_base& __iob, char_type __fl, bool __v) const {
    return do_put(__s, __iob, __fl, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type put(iter_type __s, ios_base& __iob, char_type __fl, long __v) const {
    return do_put(__s, __iob, __fl, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type put(iter_type __s, ios_base& __iob, char_type __fl, long long __v) const {
    return do_put(__s, __iob, __fl, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type put(iter_type __s, ios_base& __iob, char_type __fl, unsigned long __v) const {
    return do_put(__s, __iob, __fl, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type put(iter_type __s, ios_base& __iob, char_type __fl, unsigned long long __v) const {
    return do_put(__s, __iob, __fl, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type put(iter_type __s, ios_base& __iob, char_type __fl, double __v) const {
    return do_put(__s, __iob, __fl, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type put(iter_type __s, ios_base& __iob, char_type __fl, long double __v) const {
    return do_put(__s, __iob, __fl, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type put(iter_type __s, ios_base& __iob, char_type __fl, const void* __v) const {
    return do_put(__s, __iob, __fl, __v);
  }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~num_put() override {}

  virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl, bool __v) const;
  virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl, long __v) const;
  virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl, long long __v) const;
  virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl, unsigned long) const;
  virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl, unsigned long long) const;
  virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl, double __v) const;
  virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl, long double __v) const;
  virtual iter_type do_put(iter_type __s, ios_base& __iob, char_type __fl, const void* __v) const;

  template <class _Integral>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline _OutputIterator
  __do_put_integral(iter_type __s, ios_base& __iob, char_type __fl, _Integral __v, char const* __len) const;

  template <class _Float>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline _OutputIterator
  __do_put_floating_point(iter_type __s, ios_base& __iob, char_type __fl, _Float __v, char const* __len) const;
};

template <class _CharT, class _OutputIterator>
locale::id num_put<_CharT, _OutputIterator>::id;

template <class _CharT, class _OutputIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _OutputIterator __pad_and_output(
    _OutputIterator __s, const _CharT* __ob, const _CharT* __op, const _CharT* __oe, ios_base& __iob, _CharT __fl) {
  streamsize __sz = __oe - __ob;
  streamsize __ns = __iob.width();
  if (__ns > __sz)
    __ns -= __sz;
  else
    __ns = 0;
  for (; __ob < __op; ++__ob, ++__s)
    *__s = *__ob;
  for (; __ns; --__ns, ++__s)
    *__s = __fl;
  for (; __ob < __oe; ++__ob, ++__s)
    *__s = *__ob;
  __iob.width(0);
  return __s;
}

template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ostreambuf_iterator<_CharT, _Traits> __pad_and_output(
    ostreambuf_iterator<_CharT, _Traits> __s,
    const _CharT* __ob,
    const _CharT* __op,
    const _CharT* __oe,
    ios_base& __iob,
    _CharT __fl) {
  if (__s.__sbuf_ == nullptr)
    return __s;
  streamsize __sz = __oe - __ob;
  streamsize __ns = __iob.width();
  if (__ns > __sz)
    __ns -= __sz;
  else
    __ns = 0;
  streamsize __np = __op - __ob;
  if (__np > 0) {
    if (__s.__sbuf_->sputn(__ob, __np) != __np) {
      __s.__sbuf_ = nullptr;
      return __s;
    }
  }
  if (__ns > 0) {
    basic_string<_CharT, _Traits> __sp(__ns, __fl);
    if (__s.__sbuf_->sputn(__sp.data(), __ns) != __ns) {
      __s.__sbuf_ = nullptr;
      return __s;
    }
  }
  __np = __oe - __op;
  if (__np > 0) {
    if (__s.__sbuf_->sputn(__op, __np) != __np) {
      __s.__sbuf_ = nullptr;
      return __s;
    }
  }
  __iob.width(0);
  return __s;
}

template <class _CharT, class _OutputIterator>
_OutputIterator
num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob, char_type __fl, bool __v) const {
  if ((__iob.flags() & ios_base::boolalpha) == 0)
    return do_put(__s, __iob, __fl, (unsigned long)__v);
  const numpunct<char_type>& __np = std::use_facet<numpunct<char_type> >(__iob.getloc());
  typedef typename numpunct<char_type>::string_type string_type;
  string_type __nm = __v ? __np.truename() : __np.falsename();
  for (typename string_type::iterator __i = __nm.begin(); __i != __nm.end(); ++__i, ++__s)
    *__s = *__i;
  return __s;
}

template <class _CharT, class _OutputIterator>
template <class _Integral>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline _OutputIterator num_put<_CharT, _OutputIterator>::__do_put_integral(
    iter_type __s, ios_base& __iob, char_type __fl, _Integral __v, char const* __len) const {

  char __fmt[8] = {'%', 0};
  this->__format_int(__fmt + 1, __len, is_signed<_Integral>::value, __iob.flags());


  using _Unsigned = typename make_unsigned<_Integral>::type;
  constexpr const unsigned __nbuf =
      (numeric_limits<_Unsigned>::digits / 3)
      + ((numeric_limits<_Unsigned>::digits % 3) != 0)
      + 2;
  char __nar[__nbuf];
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wformat-nonliteral"

  int __nc = snprintf_l(__nar, sizeof(__nar), 0, __fmt, __v);
#pragma clang diagnostic pop
  char* __ne = __nar + __nc;
  char* __np = this->__identify_padding(__nar, __ne, __iob);

  char_type __o[2 * (__nbuf - 1) - 1];
  char_type* __op;
  char_type* __oe;
  this->__widen_and_group_int(__nar, __np, __ne, __o, __op, __oe, __iob.getloc());


  return std::__pad_and_output(__s, __o, __op, __oe, __iob, __fl);
}

template <class _CharT, class _OutputIterator>
_OutputIterator
num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob, char_type __fl, long __v) const {
  return this->__do_put_integral(__s, __iob, __fl, __v, "l");
}

template <class _CharT, class _OutputIterator>
_OutputIterator
num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob, char_type __fl, long long __v) const {
  return this->__do_put_integral(__s, __iob, __fl, __v, "ll");
}

template <class _CharT, class _OutputIterator>
_OutputIterator
num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob, char_type __fl, unsigned long __v) const {
  return this->__do_put_integral(__s, __iob, __fl, __v, "l");
}

template <class _CharT, class _OutputIterator>
_OutputIterator
num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob, char_type __fl, unsigned long long __v) const {
  return this->__do_put_integral(__s, __iob, __fl, __v, "ll");
}

template <class _CharT, class _OutputIterator>
template <class _Float>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline _OutputIterator num_put<_CharT, _OutputIterator>::__do_put_floating_point(
    iter_type __s, ios_base& __iob, char_type __fl, _Float __v, char const* __len) const {

  char __fmt[8] = {'%', 0};
  bool __specify_precision = this->__format_float(__fmt + 1, __len, __iob.flags());
  const unsigned __nbuf = 30;
  char __nar[__nbuf];
  char* __nb = __nar;
  int __nc;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wformat-nonliteral"

  if (__specify_precision)
    __nc = snprintf_l(__nb, __nbuf, 0, __fmt, (int)__iob.precision(), __v);
  else
    __nc = snprintf_l(__nb, __nbuf, 0, __fmt, __v);
  unique_ptr<char, void (*)(void*)> __nbh(nullptr, free);
  if (__nc > static_cast<int>(__nbuf - 1)) {
    if (__specify_precision)
      __nc = asprintf_l(&__nb, 0, __fmt, (int)__iob.precision(), __v);
    else
      __nc = asprintf_l(&__nb, 0, __fmt, __v);
    if (__nc == -1)
      __throw_bad_alloc();
    __nbh.reset(__nb);
  }
#pragma clang diagnostic pop
  char* __ne = __nb + __nc;
  char* __np = this->__identify_padding(__nb, __ne, __iob);

  char_type __o[2 * (__nbuf - 1) - 1];
  char_type* __ob = __o;
  unique_ptr<char_type, void (*)(void*)> __obh(0, free);
  if (__nb != __nar) {
    __ob = (char_type*)malloc(2 * static_cast<size_t>(__nc) * sizeof(char_type));
    if (__ob == 0)
      __throw_bad_alloc();
    __obh.reset(__ob);
  }
  char_type* __op;
  char_type* __oe;
  this->__widen_and_group_float(__nb, __np, __ne, __ob, __op, __oe, __iob.getloc());


  __s = std::__pad_and_output(__s, __ob, __op, __oe, __iob, __fl);
  return __s;
}

template <class _CharT, class _OutputIterator>
_OutputIterator
num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob, char_type __fl, double __v) const {
  return this->__do_put_floating_point(__s, __iob, __fl, __v, "");
}

template <class _CharT, class _OutputIterator>
_OutputIterator
num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob, char_type __fl, long double __v) const {
  return this->__do_put_floating_point(__s, __iob, __fl, __v, "L");
}

template <class _CharT, class _OutputIterator>
_OutputIterator
num_put<_CharT, _OutputIterator>::do_put(iter_type __s, ios_base& __iob, char_type __fl, const void* __v) const {

  const unsigned __nbuf = 20;
  char __nar[__nbuf];
  int __nc = snprintf_l(__nar, sizeof(__nar), 0, "%p", __v);
  char* __ne = __nar + __nc;
  char* __np = this->__identify_padding(__nar, __ne, __iob);

  char_type __o[2 * (__nbuf - 1) - 1];
  char_type* __op;
  char_type* __oe;
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__iob.getloc());
  __ct.widen(__nar, __ne, __o);
  __oe = __o + (__ne - __nar);
  if (__np == __ne)
    __op = __oe;
  else
    __op = __o + (__np - __nar);


  return std::__pad_and_output(__s, __o, __op, __oe, __iob, __fl);
}

extern template class __attribute__((__visibility__("default"))) num_put<char>;

extern template class __attribute__((__visibility__("default"))) num_put<wchar_t>;


template <class _CharT, class _InputIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __get_up_to_n_digits(
    _InputIterator& __b, _InputIterator __e, ios_base::iostate& __err, const ctype<_CharT>& __ct, int __n) {

  if (__b == __e) {
    __err |= ios_base::eofbit | ios_base::failbit;
    return 0;
  }

  _CharT __c = *__b;
  if (!__ct.is(ctype_base::digit, __c)) {
    __err |= ios_base::failbit;
    return 0;
  }
  int __r = __ct.narrow(__c, 0) - '0';
  for (++__b, (void)--__n; __b != __e && __n > 0; ++__b, (void)--__n) {

    __c = *__b;
    if (!__ct.is(ctype_base::digit, __c))
      return __r;
    __r = __r * 10 + __ct.narrow(__c, 0) - '0';
  }
  if (__b == __e)
    __err |= ios_base::eofbit;
  return __r;
}

class __attribute__((__visibility__("default"))) time_base {
public:
  enum dateorder { no_order, dmy, mdy, ymd, ydm };
};

template <class _CharT>
class __time_get_c_storage {
protected:
  typedef basic_string<_CharT> string_type;

  virtual const string_type* __weeks() const;
  virtual const string_type* __months() const;
  virtual const string_type* __am_pm() const;
  virtual const string_type& __c() const;
  virtual const string_type& __r() const;
  virtual const string_type& __x() const;
  virtual const string_type& __X() const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__time_get_c_storage() {}
};

template <>
__attribute__((__visibility__("default"))) const string* __time_get_c_storage<char>::__weeks() const;
template <>
__attribute__((__visibility__("default"))) const string* __time_get_c_storage<char>::__months() const;
template <>
__attribute__((__visibility__("default"))) const string* __time_get_c_storage<char>::__am_pm() const;
template <>
__attribute__((__visibility__("default"))) const string& __time_get_c_storage<char>::__c() const;
template <>
__attribute__((__visibility__("default"))) const string& __time_get_c_storage<char>::__r() const;
template <>
__attribute__((__visibility__("default"))) const string& __time_get_c_storage<char>::__x() const;
template <>
__attribute__((__visibility__("default"))) const string& __time_get_c_storage<char>::__X() const;


template <>
__attribute__((__visibility__("default"))) const wstring* __time_get_c_storage<wchar_t>::__weeks() const;
template <>
__attribute__((__visibility__("default"))) const wstring* __time_get_c_storage<wchar_t>::__months() const;
template <>
__attribute__((__visibility__("default"))) const wstring* __time_get_c_storage<wchar_t>::__am_pm() const;
template <>
__attribute__((__visibility__("default"))) const wstring& __time_get_c_storage<wchar_t>::__c() const;
template <>
__attribute__((__visibility__("default"))) const wstring& __time_get_c_storage<wchar_t>::__r() const;
template <>
__attribute__((__visibility__("default"))) const wstring& __time_get_c_storage<wchar_t>::__x() const;
template <>
__attribute__((__visibility__("default"))) const wstring& __time_get_c_storage<wchar_t>::__X() const;


template <class _CharT, class _InputIterator = istreambuf_iterator<_CharT> >
class time_get : public locale::facet, public time_base, private __time_get_c_storage<_CharT> {
public:
  typedef _CharT char_type;
  typedef _InputIterator iter_type;
  typedef time_base::dateorder dateorder;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit time_get(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) dateorder date_order() const { return this->do_date_order(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get_time(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
    return do_get_time(__b, __e, __iob, __err, __tm);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get_date(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
    return do_get_date(__b, __e, __iob, __err, __tm);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get_weekday(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
    return do_get_weekday(__b, __e, __iob, __err, __tm);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get_monthname(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
    return do_get_monthname(__b, __e, __iob, __err, __tm);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get_year(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
    return do_get_year(__b, __e, __iob, __err, __tm);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm, char __fmt, char __mod = 0)
      const {
    return do_get(__b, __e, __iob, __err, __tm, __fmt, __mod);
  }

  iter_type
  get(iter_type __b,
      iter_type __e,
      ios_base& __iob,
      ios_base::iostate& __err,
      tm* __tm,
      const char_type* __fmtb,
      const char_type* __fmte) const;

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~time_get() override {}

  virtual dateorder do_date_order() const;
  virtual iter_type
  do_get_time(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const;
  virtual iter_type
  do_get_date(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const;
  virtual iter_type
  do_get_weekday(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const;
  virtual iter_type
  do_get_monthname(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const;
  virtual iter_type
  do_get_year(iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const;
  virtual iter_type do_get(
      iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm, char __fmt, char __mod) const;

private:
  void __get_white_space(iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void __get_percent(iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;

  void __get_weekdayname(
      int& __m, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void __get_monthname(
      int& __m, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void __get_day(int& __d, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_month(int& __m, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_year(int& __y, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_year4(int& __y, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_hour(int& __d, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_12_hour(int& __h, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_am_pm(int& __h, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_minute(int& __m, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_second(int& __s, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void
  __get_weekday(int& __w, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
  void __get_day_year_num(
      int& __w, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const;
};

template <class _CharT, class _InputIterator>
locale::id time_get<_CharT, _InputIterator>::id;



template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_weekdayname(
    int& __w, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {

  const string_type* __wk = this->__weeks();
  ptrdiff_t __i = std::__scan_keyword(__b, __e, __wk, __wk + 14, __ct, __err, false) - __wk;
  if (__i < 14)
    __w = __i % 7;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_monthname(
    int& __m, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {

  const string_type* __month = this->__months();
  ptrdiff_t __i = std::__scan_keyword(__b, __e, __month, __month + 24, __ct, __err, false) - __month;
  if (__i < 24)
    __m = __i % 12;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_day(
    int& __d, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 2);
  if (!(__err & ios_base::failbit) && 1 <= __t && __t <= 31)
    __d = __t;
  else
    __err |= ios_base::failbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_month(
    int& __m, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 2) - 1;
  if (!(__err & ios_base::failbit) && 0 <= __t && __t <= 11)
    __m = __t;
  else
    __err |= ios_base::failbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_year(
    int& __y, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 4);
  if (!(__err & ios_base::failbit)) {
    if (__t < 69)
      __t += 2000;
    else if (69 <= __t && __t <= 99)
      __t += 1900;
    __y = __t - 1900;
  }
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_year4(
    int& __y, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 4);
  if (!(__err & ios_base::failbit))
    __y = __t - 1900;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_hour(
    int& __h, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 2);
  if (!(__err & ios_base::failbit) && __t <= 23)
    __h = __t;
  else
    __err |= ios_base::failbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_12_hour(
    int& __h, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 2);
  if (!(__err & ios_base::failbit) && 1 <= __t && __t <= 12)
    __h = __t;
  else
    __err |= ios_base::failbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_minute(
    int& __m, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 2);
  if (!(__err & ios_base::failbit) && __t <= 59)
    __m = __t;
  else
    __err |= ios_base::failbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_second(
    int& __s, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 2);
  if (!(__err & ios_base::failbit) && __t <= 60)
    __s = __t;
  else
    __err |= ios_base::failbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_weekday(
    int& __w, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 1);
  if (!(__err & ios_base::failbit) && __t <= 6)
    __w = __t;
  else
    __err |= ios_base::failbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_day_year_num(
    int& __d, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  int __t = std::__get_up_to_n_digits(__b, __e, __err, __ct, 3);
  if (!(__err & ios_base::failbit) && __t <= 365)
    __d = __t;
  else
    __err |= ios_base::failbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_white_space(
    iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  for (; __b != __e && __ct.is(ctype_base::space, *__b); ++__b)
    ;
  if (__b == __e)
    __err |= ios_base::eofbit;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_am_pm(
    int& __h, iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  const string_type* __ap = this->__am_pm();
  if (__ap[0].size() + __ap[1].size() == 0) {
    __err |= ios_base::failbit;
    return;
  }
  ptrdiff_t __i = std::__scan_keyword(__b, __e, __ap, __ap + 2, __ct, __err, false) - __ap;
  if (__i == 0 && __h == 12)
    __h = 0;
  else if (__i == 1 && __h < 12)
    __h += 12;
}

template <class _CharT, class _InputIterator>
void time_get<_CharT, _InputIterator>::__get_percent(
    iter_type& __b, iter_type __e, ios_base::iostate& __err, const ctype<char_type>& __ct) const {
  if (__b == __e) {
    __err |= ios_base::eofbit | ios_base::failbit;
    return;
  }
  if (__ct.narrow(*__b, 0) != '%')
    __err |= ios_base::failbit;
  else if (++__b == __e)
    __err |= ios_base::eofbit;
}



template <class _CharT, class _InputIterator>
_InputIterator time_get<_CharT, _InputIterator>::get(
    iter_type __b,
    iter_type __e,
    ios_base& __iob,
    ios_base::iostate& __err,
    tm* __tm,
    const char_type* __fmtb,
    const char_type* __fmte) const {
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__iob.getloc());
  __err = ios_base::goodbit;
  while (__fmtb != __fmte && __err == ios_base::goodbit) {
    if (__b == __e) {
      __err = ios_base::failbit;
      break;
    }
    if (__ct.narrow(*__fmtb, 0) == '%') {
      if (++__fmtb == __fmte) {
        __err = ios_base::failbit;
        break;
      }
      char __cmd = __ct.narrow(*__fmtb, 0);
      char __opt = '\0';
      if (__cmd == 'E' || __cmd == '0') {
        if (++__fmtb == __fmte) {
          __err = ios_base::failbit;
          break;
        }
        __opt = __cmd;
        __cmd = __ct.narrow(*__fmtb, 0);
      }
      __b = do_get(__b, __e, __iob, __err, __tm, __cmd, __opt);
      ++__fmtb;
    } else if (__ct.is(ctype_base::space, *__fmtb)) {
      for (++__fmtb; __fmtb != __fmte && __ct.is(ctype_base::space, *__fmtb); ++__fmtb)
        ;
      for (; __b != __e && __ct.is(ctype_base::space, *__b); ++__b)
        ;
    } else if (__ct.toupper(*__b) == __ct.toupper(*__fmtb)) {
      ++__b;
      ++__fmtb;
    } else
      __err = ios_base::failbit;
  }
  if (__b == __e)
    __err |= ios_base::eofbit;
  return __b;
}

template <class _CharT, class _InputIterator>
typename time_get<_CharT, _InputIterator>::dateorder time_get<_CharT, _InputIterator>::do_date_order() const {
  return mdy;
}

template <class _CharT, class _InputIterator>
_InputIterator time_get<_CharT, _InputIterator>::do_get_time(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
  const char_type __fmt[] = {'%', 'H', ':', '%', 'M', ':', '%', 'S'};
  return get(__b, __e, __iob, __err, __tm, __fmt, __fmt + sizeof(__fmt) / sizeof(__fmt[0]));
}

template <class _CharT, class _InputIterator>
_InputIterator time_get<_CharT, _InputIterator>::do_get_date(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
  const string_type& __fmt = this->__x();
  return get(__b, __e, __iob, __err, __tm, __fmt.data(), __fmt.data() + __fmt.size());
}

template <class _CharT, class _InputIterator>
_InputIterator time_get<_CharT, _InputIterator>::do_get_weekday(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__iob.getloc());
  __get_weekdayname(__tm->tm_wday, __b, __e, __err, __ct);
  return __b;
}

template <class _CharT, class _InputIterator>
_InputIterator time_get<_CharT, _InputIterator>::do_get_monthname(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__iob.getloc());
  __get_monthname(__tm->tm_mon, __b, __e, __err, __ct);
  return __b;
}

template <class _CharT, class _InputIterator>
_InputIterator time_get<_CharT, _InputIterator>::do_get_year(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm) const {
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__iob.getloc());
  __get_year(__tm->tm_year, __b, __e, __err, __ct);
  return __b;
}

template <class _CharT, class _InputIterator>
_InputIterator time_get<_CharT, _InputIterator>::do_get(
    iter_type __b, iter_type __e, ios_base& __iob, ios_base::iostate& __err, tm* __tm, char __fmt, char) const {
  __err = ios_base::goodbit;
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__iob.getloc());
  switch (__fmt) {
  case 'a':
  case 'A':
    __get_weekdayname(__tm->tm_wday, __b, __e, __err, __ct);
    break;
  case 'b':
  case 'B':
  case 'h':
    __get_monthname(__tm->tm_mon, __b, __e, __err, __ct);
    break;
  case 'c': {
    const string_type& __fm = this->__c();
    __b = get(__b, __e, __iob, __err, __tm, __fm.data(), __fm.data() + __fm.size());
  } break;
  case 'd':
  case 'e':
    __get_day(__tm->tm_mday, __b, __e, __err, __ct);
    break;
  case 'D': {
    const char_type __fm[] = {'%', 'm', '/', '%', 'd', '/', '%', 'y'};
    __b = get(__b, __e, __iob, __err, __tm, __fm, __fm + sizeof(__fm) / sizeof(__fm[0]));
  } break;
  case 'F': {
    const char_type __fm[] = {'%', 'Y', '-', '%', 'm', '-', '%', 'd'};
    __b = get(__b, __e, __iob, __err, __tm, __fm, __fm + sizeof(__fm) / sizeof(__fm[0]));
  } break;
  case 'H':
    __get_hour(__tm->tm_hour, __b, __e, __err, __ct);
    break;
  case 'I':
    __get_12_hour(__tm->tm_hour, __b, __e, __err, __ct);
    break;
  case 'j':
    __get_day_year_num(__tm->tm_yday, __b, __e, __err, __ct);
    break;
  case 'm':
    __get_month(__tm->tm_mon, __b, __e, __err, __ct);
    break;
  case 'M':
    __get_minute(__tm->tm_min, __b, __e, __err, __ct);
    break;
  case 'n':
  case 't':
    __get_white_space(__b, __e, __err, __ct);
    break;
  case 'p':
    __get_am_pm(__tm->tm_hour, __b, __e, __err, __ct);
    break;
  case 'r': {
    const char_type __fm[] = {'%', 'I', ':', '%', 'M', ':', '%', 'S', ' ', '%', 'p'};
    __b = get(__b, __e, __iob, __err, __tm, __fm, __fm + sizeof(__fm) / sizeof(__fm[0]));
  } break;
  case 'R': {
    const char_type __fm[] = {'%', 'H', ':', '%', 'M'};
    __b = get(__b, __e, __iob, __err, __tm, __fm, __fm + sizeof(__fm) / sizeof(__fm[0]));
  } break;
  case 'S':
    __get_second(__tm->tm_sec, __b, __e, __err, __ct);
    break;
  case 'T': {
    const char_type __fm[] = {'%', 'H', ':', '%', 'M', ':', '%', 'S'};
    __b = get(__b, __e, __iob, __err, __tm, __fm, __fm + sizeof(__fm) / sizeof(__fm[0]));
  } break;
  case 'w':
    __get_weekday(__tm->tm_wday, __b, __e, __err, __ct);
    break;
  case 'x':
    return do_get_date(__b, __e, __iob, __err, __tm);
  case 'X': {
    const string_type& __fm = this->__X();
    __b = get(__b, __e, __iob, __err, __tm, __fm.data(), __fm.data() + __fm.size());
  } break;
  case 'y':
    __get_year(__tm->tm_year, __b, __e, __err, __ct);
    break;
  case 'Y':
    __get_year4(__tm->tm_year, __b, __e, __err, __ct);
    break;
  case '%':
    __get_percent(__b, __e, __err, __ct);
    break;
  default:
    __err |= ios_base::failbit;
  }
  return __b;
}

extern template class __attribute__((__visibility__("default"))) time_get<char>;

extern template class __attribute__((__visibility__("default"))) time_get<wchar_t>;


class __attribute__((__visibility__("default"))) __time_get {
protected:
  locale_t __loc_;

  __time_get(const char* __nm);
  __time_get(const string& __nm);
  ~__time_get();
};

template <class _CharT>
class __time_get_storage : public __time_get {
protected:
  typedef basic_string<_CharT> string_type;

  string_type __weeks_[14];
  string_type __months_[24];
  string_type __am_pm_[2];
  string_type __c_;
  string_type __r_;
  string_type __x_;
  string_type __X_;

  explicit __time_get_storage(const char* __nm);
  explicit __time_get_storage(const string& __nm);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__time_get_storage() {}

  time_base::dateorder __do_date_order() const;

private:
  void init(const ctype<_CharT>&);
  string_type __analyze(char __fmt, const ctype<_CharT>&);
};
# 2060 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
template <> __attribute__((__visibility__("default"))) time_base::dateorder __time_get_storage<char>::__do_date_order() const; template <> __attribute__((__visibility__("default"))) __time_get_storage<char>::__time_get_storage(const char*); template <> __attribute__((__visibility__("default"))) __time_get_storage<char>::__time_get_storage(const string&); template <> __attribute__((__visibility__("default"))) void __time_get_storage<char>::init(const ctype<char>&); template <> __attribute__((__visibility__("default"))) __time_get_storage<char>::string_type __time_get_storage<char>::__analyze( char, const ctype<char>&); extern template __attribute__((__visibility__("default"))) time_base::dateorder __time_get_storage<char>::__do_date_order() const; extern template __attribute__((__visibility__("default"))) __time_get_storage<char>::__time_get_storage(const char*); extern template __attribute__((__visibility__("default"))) __time_get_storage<char>::__time_get_storage(const string&); extern template __attribute__((__visibility__("default"))) void __time_get_storage<char>::init(const ctype<char>&); extern template __attribute__((__visibility__("default"))) __time_get_storage<char>::string_type __time_get_storage<char>::__analyze(char, const ctype<char>&);

template <> __attribute__((__visibility__("default"))) time_base::dateorder __time_get_storage<wchar_t>::__do_date_order() const; template <> __attribute__((__visibility__("default"))) __time_get_storage<wchar_t>::__time_get_storage(const char*); template <> __attribute__((__visibility__("default"))) __time_get_storage<wchar_t>::__time_get_storage(const string&); template <> __attribute__((__visibility__("default"))) void __time_get_storage<wchar_t>::init(const ctype<wchar_t>&); template <> __attribute__((__visibility__("default"))) __time_get_storage<wchar_t>::string_type __time_get_storage<wchar_t>::__analyze( char, const ctype<wchar_t>&); extern template __attribute__((__visibility__("default"))) time_base::dateorder __time_get_storage<wchar_t>::__do_date_order() const; extern template __attribute__((__visibility__("default"))) __time_get_storage<wchar_t>::__time_get_storage(const char*); extern template __attribute__((__visibility__("default"))) __time_get_storage<wchar_t>::__time_get_storage(const string&); extern template __attribute__((__visibility__("default"))) void __time_get_storage<wchar_t>::init(const ctype<wchar_t>&); extern template __attribute__((__visibility__("default"))) __time_get_storage<wchar_t>::string_type __time_get_storage<wchar_t>::__analyze(char, const ctype<wchar_t>&);



template <class _CharT, class _InputIterator = istreambuf_iterator<_CharT> >
class time_get_byname
    : public time_get<_CharT, _InputIterator>,
      private __time_get_storage<_CharT> {
public:
  typedef time_base::dateorder dateorder;
  typedef _InputIterator iter_type;
  typedef _CharT char_type;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit time_get_byname(const char* __nm, size_t __refs = 0)
      : time_get<_CharT, _InputIterator>(__refs), __time_get_storage<_CharT>(__nm) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit time_get_byname(const string& __nm, size_t __refs = 0)
      : time_get<_CharT, _InputIterator>(__refs), __time_get_storage<_CharT>(__nm) {}

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~time_get_byname() override {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) dateorder do_date_order() const override { return this->__do_date_order(); }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) const string_type* __weeks() const override { return this->__weeks_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) const string_type* __months() const override { return this->__months_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) const string_type* __am_pm() const override { return this->__am_pm_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) const string_type& __c() const override { return this->__c_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) const string_type& __r() const override { return this->__r_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) const string_type& __x() const override { return this->__x_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) const string_type& __X() const override { return this->__X_; }
};

extern template class __attribute__((__visibility__("default"))) time_get_byname<char>;

extern template class __attribute__((__visibility__("default"))) time_get_byname<wchar_t>;


class __attribute__((__visibility__("default"))) __time_put {
  locale_t __loc_;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __time_put() : __loc_(0) {}
  __time_put(const char* __nm);
  __time_put(const string& __nm);
  ~__time_put();
  void __do_put(char* __nb, char*& __ne, const tm* __tm, char __fmt, char __mod) const;

  void __do_put(wchar_t* __wb, wchar_t*& __we, const tm* __tm, char __fmt, char __mod) const;

};

template <class _CharT, class _OutputIterator = ostreambuf_iterator<_CharT> >
class time_put : public locale::facet, private __time_put {
public:
  typedef _CharT char_type;
  typedef _OutputIterator iter_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit time_put(size_t __refs = 0) : locale::facet(__refs) {}

  iter_type
  put(iter_type __s, ios_base& __iob, char_type __fl, const tm* __tm, const char_type* __pb, const char_type* __pe)
      const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  put(iter_type __s, ios_base& __iob, char_type __fl, const tm* __tm, char __fmt, char __mod = 0) const {
    return do_put(__s, __iob, __fl, __tm, __fmt, __mod);
  }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~time_put() override {}
  virtual iter_type do_put(iter_type __s, ios_base&, char_type, const tm* __tm, char __fmt, char __mod) const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit time_put(const char* __nm, size_t __refs) : locale::facet(__refs), __time_put(__nm) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit time_put(const string& __nm, size_t __refs)
      : locale::facet(__refs), __time_put(__nm) {}
};

template <class _CharT, class _OutputIterator>
locale::id time_put<_CharT, _OutputIterator>::id;

template <class _CharT, class _OutputIterator>
_OutputIterator time_put<_CharT, _OutputIterator>::put(
    iter_type __s, ios_base& __iob, char_type __fl, const tm* __tm, const char_type* __pb, const char_type* __pe)
    const {
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__iob.getloc());
  for (; __pb != __pe; ++__pb) {
    if (__ct.narrow(*__pb, 0) == '%') {
      if (++__pb == __pe) {
        *__s++ = __pb[-1];
        break;
      }
      char __mod = 0;
      char __fmt = __ct.narrow(*__pb, 0);
      if (__fmt == 'E' || __fmt == 'O') {
        if (++__pb == __pe) {
          *__s++ = __pb[-2];
          *__s++ = __pb[-1];
          break;
        }
        __mod = __fmt;
        __fmt = __ct.narrow(*__pb, 0);
      }
      __s = do_put(__s, __iob, __fl, __tm, __fmt, __mod);
    } else
      *__s++ = *__pb;
  }
  return __s;
}

template <class _CharT, class _OutputIterator>
_OutputIterator time_put<_CharT, _OutputIterator>::do_put(
    iter_type __s, ios_base&, char_type, const tm* __tm, char __fmt, char __mod) const {
  char_type __nar[100];
  char_type* __nb = __nar;
  char_type* __ne = __nb + 100;
  __do_put(__nb, __ne, __tm, __fmt, __mod);
  return std::copy(__nb, __ne, __s);
}

extern template class __attribute__((__visibility__("default"))) time_put<char>;

extern template class __attribute__((__visibility__("default"))) time_put<wchar_t>;


template <class _CharT, class _OutputIterator = ostreambuf_iterator<_CharT> >
class time_put_byname : public time_put<_CharT, _OutputIterator> {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit time_put_byname(const char* __nm, size_t __refs = 0)
      : time_put<_CharT, _OutputIterator>(__nm, __refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit time_put_byname(const string& __nm, size_t __refs = 0)
      : time_put<_CharT, _OutputIterator>(__nm, __refs) {}

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~time_put_byname() override {}
};

extern template class __attribute__((__visibility__("default"))) time_put_byname<char>;

extern template class __attribute__((__visibility__("default"))) time_put_byname<wchar_t>;




class __attribute__((__visibility__("default"))) money_base {
public:
  enum part { none, space, symbol, sign, value };
  struct pattern {
    char field[4];
  };

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) money_base() {}
};



template <class _CharT, bool _International = false>
class moneypunct : public locale::facet, public money_base {
public:
  typedef _CharT char_type;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit moneypunct(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type decimal_point() const { return do_decimal_point(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char_type thousands_sep() const { return do_thousands_sep(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) string grouping() const { return do_grouping(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) string_type curr_symbol() const { return do_curr_symbol(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) string_type positive_sign() const { return do_positive_sign(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) string_type negative_sign() const { return do_negative_sign(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int frac_digits() const { return do_frac_digits(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pattern pos_format() const { return do_pos_format(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pattern neg_format() const { return do_neg_format(); }

  static locale::id id;
  static const bool intl = _International;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~moneypunct() override {}

  virtual char_type do_decimal_point() const { return numeric_limits<char_type>::max(); }
  virtual char_type do_thousands_sep() const { return numeric_limits<char_type>::max(); }
  virtual string do_grouping() const { return string(); }
  virtual string_type do_curr_symbol() const { return string_type(); }
  virtual string_type do_positive_sign() const { return string_type(); }
  virtual string_type do_negative_sign() const { return string_type(1, '-'); }
  virtual int do_frac_digits() const { return 0; }
  virtual pattern do_pos_format() const {
    pattern __p = {{symbol, sign, none, value}};
    return __p;
  }
  virtual pattern do_neg_format() const {
    pattern __p = {{symbol, sign, none, value}};
    return __p;
  }
};

template <class _CharT, bool _International>
locale::id moneypunct<_CharT, _International>::id;

template <class _CharT, bool _International>
const bool moneypunct<_CharT, _International>::intl;

extern template class __attribute__((__visibility__("default"))) moneypunct<char, false>;
extern template class __attribute__((__visibility__("default"))) moneypunct<char, true>;

extern template class __attribute__((__visibility__("default"))) moneypunct<wchar_t, false>;
extern template class __attribute__((__visibility__("default"))) moneypunct<wchar_t, true>;




template <class _CharT, bool _International = false>
class moneypunct_byname : public moneypunct<_CharT, _International> {
public:
  typedef money_base::pattern pattern;
  typedef _CharT char_type;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit moneypunct_byname(const char* __nm, size_t __refs = 0)
      : moneypunct<_CharT, _International>(__refs) {
    init(__nm);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit moneypunct_byname(const string& __nm, size_t __refs = 0)
      : moneypunct<_CharT, _International>(__refs) {
    init(__nm.c_str());
  }

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~moneypunct_byname() override {}

  char_type do_decimal_point() const override { return __decimal_point_; }
  char_type do_thousands_sep() const override { return __thousands_sep_; }
  string do_grouping() const override { return __grouping_; }
  string_type do_curr_symbol() const override { return __curr_symbol_; }
  string_type do_positive_sign() const override { return __positive_sign_; }
  string_type do_negative_sign() const override { return __negative_sign_; }
  int do_frac_digits() const override { return __frac_digits_; }
  pattern do_pos_format() const override { return __pos_format_; }
  pattern do_neg_format() const override { return __neg_format_; }

private:
  char_type __decimal_point_;
  char_type __thousands_sep_;
  string __grouping_;
  string_type __curr_symbol_;
  string_type __positive_sign_;
  string_type __negative_sign_;
  int __frac_digits_;
  pattern __pos_format_;
  pattern __neg_format_;

  void init(const char*);
};

template <>
__attribute__((__visibility__("default"))) void moneypunct_byname<char, false>::init(const char*);
template <>
__attribute__((__visibility__("default"))) void moneypunct_byname<char, true>::init(const char*);
extern template class __attribute__((__visibility__("default"))) moneypunct_byname<char, false>;
extern template class __attribute__((__visibility__("default"))) moneypunct_byname<char, true>;


template <>
__attribute__((__visibility__("default"))) void moneypunct_byname<wchar_t, false>::init(const char*);
template <>
__attribute__((__visibility__("default"))) void moneypunct_byname<wchar_t, true>::init(const char*);
extern template class __attribute__((__visibility__("default"))) moneypunct_byname<wchar_t, false>;
extern template class __attribute__((__visibility__("default"))) moneypunct_byname<wchar_t, true>;




template <class _CharT>
class __money_get {
protected:
  typedef _CharT char_type;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __money_get() {}

  static void __gather_info(
      bool __intl,
      const locale& __loc,
      money_base::pattern& __pat,
      char_type& __dp,
      char_type& __ts,
      string& __grp,
      string_type& __sym,
      string_type& __psn,
      string_type& __nsn,
      int& __fd);
};

template <class _CharT>
void __money_get<_CharT>::__gather_info(
    bool __intl,
    const locale& __loc,
    money_base::pattern& __pat,
    char_type& __dp,
    char_type& __ts,
    string& __grp,
    string_type& __sym,
    string_type& __psn,
    string_type& __nsn,
    int& __fd) {
  if (__intl) {
    const moneypunct<char_type, true>& __mp = std::use_facet<moneypunct<char_type, true> >(__loc);
    __pat = __mp.neg_format();
    __nsn = __mp.negative_sign();
    __psn = __mp.positive_sign();
    __dp = __mp.decimal_point();
    __ts = __mp.thousands_sep();
    __grp = __mp.grouping();
    __sym = __mp.curr_symbol();
    __fd = __mp.frac_digits();
  } else {
    const moneypunct<char_type, false>& __mp = std::use_facet<moneypunct<char_type, false> >(__loc);
    __pat = __mp.neg_format();
    __nsn = __mp.negative_sign();
    __psn = __mp.positive_sign();
    __dp = __mp.decimal_point();
    __ts = __mp.thousands_sep();
    __grp = __mp.grouping();
    __sym = __mp.curr_symbol();
    __fd = __mp.frac_digits();
  }
}

extern template class __attribute__((__visibility__("default"))) __money_get<char>;

extern template class __attribute__((__visibility__("default"))) __money_get<wchar_t>;


template <class _CharT, class _InputIterator = istreambuf_iterator<_CharT> >
class money_get : public locale::facet, private __money_get<_CharT> {
public:
  typedef _CharT char_type;
  typedef _InputIterator iter_type;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit money_get(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get(iter_type __b, iter_type __e, bool __intl, ios_base& __iob, ios_base::iostate& __err, long double& __v) const {
    return do_get(__b, __e, __intl, __iob, __err, __v);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  get(iter_type __b, iter_type __e, bool __intl, ios_base& __iob, ios_base::iostate& __err, string_type& __v) const {
    return do_get(__b, __e, __intl, __iob, __err, __v);
  }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~money_get() override {}

  virtual iter_type
  do_get(iter_type __b, iter_type __e, bool __intl, ios_base& __iob, ios_base::iostate& __err, long double& __v) const;
  virtual iter_type
  do_get(iter_type __b, iter_type __e, bool __intl, ios_base& __iob, ios_base::iostate& __err, string_type& __v) const;

private:
  static bool __do_get(
      iter_type& __b,
      iter_type __e,
      bool __intl,
      const locale& __loc,
      ios_base::fmtflags __flags,
      ios_base::iostate& __err,
      bool& __neg,
      const ctype<char_type>& __ct,
      unique_ptr<char_type, void (*)(void*)>& __wb,
      char_type*& __wn,
      char_type* __we);
};

template <class _CharT, class _InputIterator>
locale::id money_get<_CharT, _InputIterator>::id;

__attribute__((__visibility__("default"))) void __do_nothing(void*);

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __double_or_nothing(unique_ptr<_Tp, void (*)(void*)>& __b, _Tp*& __n, _Tp*& __e) {
  bool __owns = __b.get_deleter() != __do_nothing;
  size_t __cur_cap = static_cast<size_t>(__e - __b.get()) * sizeof(_Tp);
  size_t __new_cap = __cur_cap < numeric_limits<size_t>::max() / 2 ? 2 * __cur_cap : numeric_limits<size_t>::max();
  if (__new_cap == 0)
    __new_cap = sizeof(_Tp);
  size_t __n_off = static_cast<size_t>(__n - __b.get());
  _Tp* __t = (_Tp*)std::realloc(__owns ? __b.get() : 0, __new_cap);
  if (__t == 0)
    __throw_bad_alloc();
  if (__owns)
    __b.release();
  __b = unique_ptr<_Tp, void (*)(void*)>(__t, free);
  __new_cap /= sizeof(_Tp);
  __n = __b.get() + __n_off;
  __e = __b.get() + __new_cap;
}


template <class _CharT, class _InputIterator>
bool money_get<_CharT, _InputIterator>::__do_get(
    iter_type& __b,
    iter_type __e,
    bool __intl,
    const locale& __loc,
    ios_base::fmtflags __flags,
    ios_base::iostate& __err,
    bool& __neg,
    const ctype<char_type>& __ct,
    unique_ptr<char_type, void (*)(void*)>& __wb,
    char_type*& __wn,
    char_type* __we) {
  if (__b == __e) {
    __err |= ios_base::failbit;
    return false;
  }
  const unsigned __bz = 100;
  unsigned __gbuf[__bz];
  unique_ptr<unsigned, void (*)(void*)> __gb(__gbuf, __do_nothing);
  unsigned* __gn = __gb.get();
  unsigned* __ge = __gn + __bz;
  money_base::pattern __pat;
  char_type __dp;
  char_type __ts;
  string __grp;
  string_type __sym;
  string_type __psn;
  string_type __nsn;


  string_type __spaces;
  int __fd;
  __money_get<_CharT>::__gather_info(__intl, __loc, __pat, __dp, __ts, __grp, __sym, __psn, __nsn, __fd);
  const string_type* __trailing_sign = 0;
  __wn = __wb.get();
  for (unsigned __p = 0; __p < 4 && __b != __e; ++__p) {
    switch (__pat.field[__p]) {
    case money_base::space:
      if (__p != 3) {
        if (__ct.is(ctype_base::space, *__b))
          __spaces.push_back(*__b++);
        else {
          __err |= ios_base::failbit;
          return false;
        }
      }
      [[fallthrough]];
    case money_base::none:
      if (__p != 3) {
        while (__b != __e && __ct.is(ctype_base::space, *__b))
          __spaces.push_back(*__b++);
      }
      break;
    case money_base::sign:
      if (__psn.size() > 0 && *__b == __psn[0]) {
        ++__b;
        __neg = false;
        if (__psn.size() > 1)
          __trailing_sign = &__psn;
        break;
      }
      if (__nsn.size() > 0 && *__b == __nsn[0]) {
        ++__b;
        __neg = true;
        if (__nsn.size() > 1)
          __trailing_sign = &__nsn;
        break;
      }
      if (__psn.size() > 0 && __nsn.size() > 0) {
        __err |= ios_base::failbit;
        return false;
      }
      if (__psn.size() == 0 && __nsn.size() == 0)

        break;
      __neg = (__nsn.size() == 0);
      break;
    case money_base::symbol: {
      bool __more_needed =
          __trailing_sign || (__p < 2) || (__p == 2 && __pat.field[3] != static_cast<char>(money_base::none));
      bool __sb = (__flags & ios_base::showbase) != 0;
      if (__sb || __more_needed) {
        typename string_type::const_iterator __sym_space_end = __sym.begin();
        if (__p > 0 && (__pat.field[__p - 1] == money_base::none || __pat.field[__p - 1] == money_base::space)) {


          while (__sym_space_end != __sym.end() && __ct.is(ctype_base::space, *__sym_space_end))
            ++__sym_space_end;
          const size_t __num_spaces = __sym_space_end - __sym.begin();
          if (__num_spaces > __spaces.size() ||
              !std::equal(__spaces.end() - __num_spaces, __spaces.end(), __sym.begin())) {



            __sym_space_end = __sym.begin();
          }
        }
        typename string_type::const_iterator __sym_curr_char = __sym_space_end;
        while (__sym_curr_char != __sym.end() && __b != __e && *__b == *__sym_curr_char) {
          ++__b;
          ++__sym_curr_char;
        }
        if (__sb && __sym_curr_char != __sym.end()) {
          __err |= ios_base::failbit;
          return false;
        }
      }
    } break;
    case money_base::value: {
      unsigned __ng = 0;
      for (; __b != __e; ++__b) {
        char_type __c = *__b;
        if (__ct.is(ctype_base::digit, __c)) {
          if (__wn == __we)
            std::__double_or_nothing(__wb, __wn, __we);
          *__wn++ = __c;
          ++__ng;
        } else if (__grp.size() > 0 && __ng > 0 && __c == __ts) {
          if (__gn == __ge)
            std::__double_or_nothing(__gb, __gn, __ge);
          *__gn++ = __ng;
          __ng = 0;
        } else
          break;
      }
      if (__gb.get() != __gn && __ng > 0) {
        if (__gn == __ge)
          std::__double_or_nothing(__gb, __gn, __ge);
        *__gn++ = __ng;
      }
      if (__fd > 0) {
        if (__b == __e || *__b != __dp) {
          __err |= ios_base::failbit;
          return false;
        }
        for (++__b; __fd > 0; --__fd, ++__b) {
          if (__b == __e || !__ct.is(ctype_base::digit, *__b)) {
            __err |= ios_base::failbit;
            return false;
          }
          if (__wn == __we)
            std::__double_or_nothing(__wb, __wn, __we);
          *__wn++ = *__b;
        }
      }
      if (__wn == __wb.get()) {
        __err |= ios_base::failbit;
        return false;
      }
    } break;
    }
  }
  if (__trailing_sign) {
    for (unsigned __i = 1; __i < __trailing_sign->size(); ++__i, ++__b) {
      if (__b == __e || *__b != (*__trailing_sign)[__i]) {
        __err |= ios_base::failbit;
        return false;
      }
    }
  }
  if (__gb.get() != __gn) {
    ios_base::iostate __et = ios_base::goodbit;
    __check_grouping(__grp, __gb.get(), __gn, __et);
    if (__et) {
      __err |= ios_base::failbit;
      return false;
    }
  }
  return true;
}

template <class _CharT, class _InputIterator>
_InputIterator money_get<_CharT, _InputIterator>::do_get(
    iter_type __b, iter_type __e, bool __intl, ios_base& __iob, ios_base::iostate& __err, long double& __v) const {
  const int __bz = 100;
  char_type __wbuf[__bz];
  unique_ptr<char_type, void (*)(void*)> __wb(__wbuf, __do_nothing);
  char_type* __wn;
  char_type* __we = __wbuf + __bz;
  locale __loc = __iob.getloc();
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__loc);
  bool __neg = false;
  if (__do_get(__b, __e, __intl, __loc, __iob.flags(), __err, __neg, __ct, __wb, __wn, __we)) {
    const char __src[] = "0123456789";
    char_type __atoms[sizeof(__src) - 1];
    __ct.widen(__src, __src + (sizeof(__src) - 1), __atoms);
    char __nbuf[__bz];
    char* __nc = __nbuf;
    unique_ptr<char, void (*)(void*)> __h(nullptr, free);
    if (__wn - __wb.get() > __bz - 2) {
      __h.reset((char*)malloc(static_cast<size_t>(__wn - __wb.get() + 2)));
      if (__h.get() == nullptr)
        __throw_bad_alloc();
      __nc = __h.get();
    }
    if (__neg)
      *__nc++ = '-';
    for (const char_type* __w = __wb.get(); __w < __wn; ++__w, ++__nc)
      *__nc = __src[std::find(__atoms, std::end(__atoms), *__w) - __atoms];
    *__nc = char();
    if (sscanf(__nbuf, "%Lf", &__v) != 1)
      __throw_runtime_error("money_get error");
  }
  if (__b == __e)
    __err |= ios_base::eofbit;
  return __b;
}

template <class _CharT, class _InputIterator>
_InputIterator money_get<_CharT, _InputIterator>::do_get(
    iter_type __b, iter_type __e, bool __intl, ios_base& __iob, ios_base::iostate& __err, string_type& __v) const {
  const int __bz = 100;
  char_type __wbuf[__bz];
  unique_ptr<char_type, void (*)(void*)> __wb(__wbuf, __do_nothing);
  char_type* __wn;
  char_type* __we = __wbuf + __bz;
  locale __loc = __iob.getloc();
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__loc);
  bool __neg = false;
  if (__do_get(__b, __e, __intl, __loc, __iob.flags(), __err, __neg, __ct, __wb, __wn, __we)) {
    __v.clear();
    if (__neg)
      __v.push_back(__ct.widen('-'));
    char_type __z = __ct.widen('0');
    char_type* __w;
    for (__w = __wb.get(); __w < __wn - 1; ++__w)
      if (*__w != __z)
        break;
    __v.append(__w, __wn);
  }
  if (__b == __e)
    __err |= ios_base::eofbit;
  return __b;
}

extern template class __attribute__((__visibility__("default"))) money_get<char>;

extern template class __attribute__((__visibility__("default"))) money_get<wchar_t>;




template <class _CharT>
class __money_put {
protected:
  typedef _CharT char_type;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __money_put() {}

  static void __gather_info(
      bool __intl,
      bool __neg,
      const locale& __loc,
      money_base::pattern& __pat,
      char_type& __dp,
      char_type& __ts,
      string& __grp,
      string_type& __sym,
      string_type& __sn,
      int& __fd);
  static void __format(
      char_type* __mb,
      char_type*& __mi,
      char_type*& __me,
      ios_base::fmtflags __flags,
      const char_type* __db,
      const char_type* __de,
      const ctype<char_type>& __ct,
      bool __neg,
      const money_base::pattern& __pat,
      char_type __dp,
      char_type __ts,
      const string& __grp,
      const string_type& __sym,
      const string_type& __sn,
      int __fd);
};

template <class _CharT>
void __money_put<_CharT>::__gather_info(
    bool __intl,
    bool __neg,
    const locale& __loc,
    money_base::pattern& __pat,
    char_type& __dp,
    char_type& __ts,
    string& __grp,
    string_type& __sym,
    string_type& __sn,
    int& __fd) {
  if (__intl) {
    const moneypunct<char_type, true>& __mp = std::use_facet<moneypunct<char_type, true> >(__loc);
    if (__neg) {
      __pat = __mp.neg_format();
      __sn = __mp.negative_sign();
    } else {
      __pat = __mp.pos_format();
      __sn = __mp.positive_sign();
    }
    __dp = __mp.decimal_point();
    __ts = __mp.thousands_sep();
    __grp = __mp.grouping();
    __sym = __mp.curr_symbol();
    __fd = __mp.frac_digits();
  } else {
    const moneypunct<char_type, false>& __mp = std::use_facet<moneypunct<char_type, false> >(__loc);
    if (__neg) {
      __pat = __mp.neg_format();
      __sn = __mp.negative_sign();
    } else {
      __pat = __mp.pos_format();
      __sn = __mp.positive_sign();
    }
    __dp = __mp.decimal_point();
    __ts = __mp.thousands_sep();
    __grp = __mp.grouping();
    __sym = __mp.curr_symbol();
    __fd = __mp.frac_digits();
  }
}

template <class _CharT>
void __money_put<_CharT>::__format(
    char_type* __mb,
    char_type*& __mi,
    char_type*& __me,
    ios_base::fmtflags __flags,
    const char_type* __db,
    const char_type* __de,
    const ctype<char_type>& __ct,
    bool __neg,
    const money_base::pattern& __pat,
    char_type __dp,
    char_type __ts,
    const string& __grp,
    const string_type& __sym,
    const string_type& __sn,
    int __fd) {
  __me = __mb;
  for (char __p : __pat.field) {
    switch (__p) {
    case money_base::none:
      __mi = __me;
      break;
    case money_base::space:
      __mi = __me;
      *__me++ = __ct.widen(' ');
      break;
    case money_base::sign:
      if (!__sn.empty())
        *__me++ = __sn[0];
      break;
    case money_base::symbol:
      if (!__sym.empty() && (__flags & ios_base::showbase))
        __me = std::copy(__sym.begin(), __sym.end(), __me);
      break;
    case money_base::value: {

      char_type* __t = __me;

      if (__neg)
        ++__db;

      const char_type* __d;
      for (__d = __db; __d < __de; ++__d)
        if (!__ct.is(ctype_base::digit, *__d))
          break;

      if (__fd > 0) {
        int __f;
        for (__f = __fd; __d > __db && __f > 0; --__f)
          *__me++ = *--__d;
        char_type __z = __f > 0 ? __ct.widen('0') : char_type();
        for (; __f > 0; --__f)
          *__me++ = __z;
        *__me++ = __dp;
      }

      if (__d == __db) {
        *__me++ = __ct.widen('0');
      } else {
        unsigned __ng = 0;
        unsigned __ig = 0;
        unsigned __gl = __grp.empty() ? numeric_limits<unsigned>::max() : static_cast<unsigned>(__grp[__ig]);
        while (__d != __db) {
          if (__ng == __gl) {
            *__me++ = __ts;
            __ng = 0;
            if (++__ig < __grp.size())
              __gl = __grp[__ig] == numeric_limits<char>::max()
                       ? numeric_limits<unsigned>::max()
                       : static_cast<unsigned>(__grp[__ig]);
          }
          *__me++ = *--__d;
          ++__ng;
        }
      }

      std::reverse(__t, __me);
    } break;
    }
  }

  if (__sn.size() > 1)
    __me = std::copy(__sn.begin() + 1, __sn.end(), __me);

  if ((__flags & ios_base::adjustfield) == ios_base::left)
    __mi = __me;
  else if ((__flags & ios_base::adjustfield) != ios_base::internal)
    __mi = __mb;
}

extern template class __attribute__((__visibility__("default"))) __money_put<char>;

extern template class __attribute__((__visibility__("default"))) __money_put<wchar_t>;


template <class _CharT, class _OutputIterator = ostreambuf_iterator<_CharT> >
class money_put : public locale::facet, private __money_put<_CharT> {
public:
  typedef _CharT char_type;
  typedef _OutputIterator iter_type;
  typedef basic_string<char_type> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit money_put(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  put(iter_type __s, bool __intl, ios_base& __iob, char_type __fl, long double __units) const {
    return do_put(__s, __intl, __iob, __fl, __units);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iter_type
  put(iter_type __s, bool __intl, ios_base& __iob, char_type __fl, const string_type& __digits) const {
    return do_put(__s, __intl, __iob, __fl, __digits);
  }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~money_put() override {}

  virtual iter_type do_put(iter_type __s, bool __intl, ios_base& __iob, char_type __fl, long double __units) const;
  virtual iter_type
  do_put(iter_type __s, bool __intl, ios_base& __iob, char_type __fl, const string_type& __digits) const;
};

template <class _CharT, class _OutputIterator>
locale::id money_put<_CharT, _OutputIterator>::id;

template <class _CharT, class _OutputIterator>
_OutputIterator money_put<_CharT, _OutputIterator>::do_put(
    iter_type __s, bool __intl, ios_base& __iob, char_type __fl, long double __units) const {

  const size_t __bs = 100;
  char __buf[__bs];
  char* __bb = __buf;
  char_type __digits[__bs];
  char_type* __db = __digits;
  int __n = snprintf(__bb, __bs, "%.0Lf", __units);
  unique_ptr<char, void (*)(void*)> __hn(nullptr, free);
  unique_ptr<char_type, void (*)(void*)> __hd(0, free);

  if (static_cast<size_t>(__n) > __bs - 1) {
    __n = asprintf_l(&__bb, 0, "%.0Lf", __units);
    if (__n == -1)
      __throw_bad_alloc();
    __hn.reset(__bb);
    __hd.reset((char_type*)malloc(static_cast<size_t>(__n) * sizeof(char_type)));
    if (__hd == nullptr)
      __throw_bad_alloc();
    __db = __hd.get();
  }

  locale __loc = __iob.getloc();
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__loc);
  __ct.widen(__bb, __bb + __n, __db);
  bool __neg = __n > 0 && __bb[0] == '-';
  money_base::pattern __pat;
  char_type __dp;
  char_type __ts;
  string __grp;
  string_type __sym;
  string_type __sn;
  int __fd;
  this->__gather_info(__intl, __neg, __loc, __pat, __dp, __ts, __grp, __sym, __sn, __fd);

  char_type __mbuf[__bs];
  char_type* __mb = __mbuf;
  unique_ptr<char_type, void (*)(void*)> __hw(0, free);
  size_t __exn = __n > __fd ? (static_cast<size_t>(__n) - static_cast<size_t>(__fd)) * 2 + __sn.size() + __sym.size() +
                                  static_cast<size_t>(__fd) + 1
                            : __sn.size() + __sym.size() + static_cast<size_t>(__fd) + 2;
  if (__exn > __bs) {
    __hw.reset((char_type*)malloc(__exn * sizeof(char_type)));
    __mb = __hw.get();
    if (__mb == 0)
      __throw_bad_alloc();
  }

  char_type* __mi;
  char_type* __me;
  this->__format(
      __mb, __mi, __me, __iob.flags(), __db, __db + __n, __ct, __neg, __pat, __dp, __ts, __grp, __sym, __sn, __fd);
  return std::__pad_and_output(__s, __mb, __mi, __me, __iob, __fl);
}

template <class _CharT, class _OutputIterator>
_OutputIterator money_put<_CharT, _OutputIterator>::do_put(
    iter_type __s, bool __intl, ios_base& __iob, char_type __fl, const string_type& __digits) const {

  locale __loc = __iob.getloc();
  const ctype<char_type>& __ct = std::use_facet<ctype<char_type> >(__loc);
  bool __neg = __digits.size() > 0 && __digits[0] == __ct.widen('-');
  money_base::pattern __pat;
  char_type __dp;
  char_type __ts;
  string __grp;
  string_type __sym;
  string_type __sn;
  int __fd;
  this->__gather_info(__intl, __neg, __loc, __pat, __dp, __ts, __grp, __sym, __sn, __fd);

  char_type __mbuf[100];
  char_type* __mb = __mbuf;
  unique_ptr<char_type, void (*)(void*)> __h(0, free);
  size_t __exn =
      static_cast<int>(__digits.size()) > __fd
          ? (__digits.size() - static_cast<size_t>(__fd)) * 2 + __sn.size() + __sym.size() + static_cast<size_t>(__fd) +
                1
          : __sn.size() + __sym.size() + static_cast<size_t>(__fd) + 2;
  if (__exn > 100) {
    __h.reset((char_type*)malloc(__exn * sizeof(char_type)));
    __mb = __h.get();
    if (__mb == 0)
      __throw_bad_alloc();
  }

  char_type* __mi;
  char_type* __me;
  this->__format(
      __mb,
      __mi,
      __me,
      __iob.flags(),
      __digits.data(),
      __digits.data() + __digits.size(),
      __ct,
      __neg,
      __pat,
      __dp,
      __ts,
      __grp,
      __sym,
      __sn,
      __fd);
  return std::__pad_and_output(__s, __mb, __mi, __me, __iob, __fl);
}

extern template class __attribute__((__visibility__("default"))) money_put<char>;

extern template class __attribute__((__visibility__("default"))) money_put<wchar_t>;




class __attribute__((__visibility__("default"))) messages_base {
public:
  typedef intptr_t catalog;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) messages_base() {}
};

template <class _CharT>
class messages : public locale::facet, public messages_base {
public:
  typedef _CharT char_type;
  typedef basic_string<_CharT> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit messages(size_t __refs = 0) : locale::facet(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) catalog open(const basic_string<char>& __nm, const locale& __loc) const {
    return do_open(__nm, __loc);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) string_type get(catalog __c, int __set, int __msgid, const string_type& __dflt) const {
    return do_get(__c, __set, __msgid, __dflt);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void close(catalog __c) const { do_close(__c); }

  static locale::id id;

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~messages() override {}

  virtual catalog do_open(const basic_string<char>&, const locale&) const;
  virtual string_type do_get(catalog, int __set, int __msgid, const string_type& __dflt) const;
  virtual void do_close(catalog) const;
};

template <class _CharT>
locale::id messages<_CharT>::id;

template <class _CharT>
typename messages<_CharT>::catalog messages<_CharT>::do_open(const basic_string<char>& __nm, const locale&) const {

  return (catalog)catopen(__nm.c_str(), 1);




}

template <class _CharT>
typename messages<_CharT>::string_type
messages<_CharT>::do_get(catalog __c, int __set, int __msgid, const string_type& __dflt) const {

  string __ndflt;
  __narrow_to_utf8<sizeof(char_type) * 8>()(
      std::back_inserter(__ndflt), __dflt.c_str(), __dflt.c_str() + __dflt.size());
  nl_catd __cat = (nl_catd)__c;
  static_assert(sizeof(catalog) >= sizeof(nl_catd), "Unexpected nl_catd type");
  char* __n = catgets(__cat, __set, __msgid, __ndflt.c_str());
  string_type __w;
  __widen_from_utf8<sizeof(char_type) * 8>()(std::back_inserter(__w), __n, __n + std::strlen(__n));
  return __w;






}

template <class _CharT>
void messages<_CharT>::do_close(catalog __c) const {

  catclose((nl_catd)__c);



}

extern template class __attribute__((__visibility__("default"))) messages<char>;

extern template class __attribute__((__visibility__("default"))) messages<wchar_t>;


template <class _CharT>
class messages_byname : public messages<_CharT> {
public:
  typedef messages_base::catalog catalog;
  typedef basic_string<_CharT> string_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit messages_byname(const char*, size_t __refs = 0) : messages<_CharT>(__refs) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit messages_byname(const string&, size_t __refs = 0) : messages<_CharT>(__refs) {}

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) ~messages_byname() override {}
};

extern template class __attribute__((__visibility__("default"))) messages_byname<char>;

extern template class __attribute__((__visibility__("default"))) messages_byname<wchar_t>;




template <class _Codecvt,
          class _Elem = wchar_t,
          class _WideAlloc = allocator<_Elem>,
          class _ByteAlloc = allocator<char> >
class __attribute__((__deprecated__)) wstring_convert {
public:
  typedef basic_string<char, char_traits<char>, _ByteAlloc> byte_string;
  typedef basic_string<_Elem, char_traits<_Elem>, _WideAlloc> wide_string;
  typedef typename _Codecvt::state_type state_type;
  typedef typename wide_string::traits_type::int_type int_type;

private:
  byte_string __byte_err_string_;
  wide_string __wide_err_string_;
  _Codecvt* __cvtptr_;
  state_type __cvtstate_;
  size_t __cvtcount_;

public:

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) wstring_convert() : wstring_convert(new _Codecvt) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit wstring_convert(_Codecvt* __pcvt);




  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) wstring_convert(_Codecvt* __pcvt, state_type __state);
  explicit __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  wstring_convert(const byte_string& __byte_err, const wide_string& __wide_err = wide_string());

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) wstring_convert(wstring_convert&& __wc);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~wstring_convert();

  wstring_convert(const wstring_convert& __wc) = delete;
  wstring_convert& operator=(const wstring_convert& __wc) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) wide_string from_bytes(char __byte) { return from_bytes(&__byte, &__byte + 1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) wide_string from_bytes(const char* __ptr) {
    return from_bytes(__ptr, __ptr + char_traits<char>::length(__ptr));
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) wide_string from_bytes(const byte_string& __str) {
    return from_bytes(__str.data(), __str.data() + __str.size());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) wide_string from_bytes(const char* __first, const char* __last);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) byte_string to_bytes(_Elem __wchar) { return to_bytes(&__wchar, &__wchar + 1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) byte_string to_bytes(const _Elem* __wptr) {
    return to_bytes(__wptr, __wptr + char_traits<_Elem>::length(__wptr));
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) byte_string to_bytes(const wide_string& __wstr) {
    return to_bytes(__wstr.data(), __wstr.data() + __wstr.size());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) byte_string to_bytes(const _Elem* __first, const _Elem* __last);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t converted() const noexcept { return __cvtcount_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) state_type state() const { return __cvtstate_; }
};

#pragma GCC diagnostic push
# 3200 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 3200 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Codecvt, class _Elem, class _WideAlloc, class _ByteAlloc>
inline wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::wstring_convert(_Codecvt* __pcvt)
    : __cvtptr_(__pcvt), __cvtstate_(), __cvtcount_(0) {}
#pragma GCC diagnostic pop

template <class _Codecvt, class _Elem, class _WideAlloc, class _ByteAlloc>
inline wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::wstring_convert(_Codecvt* __pcvt, state_type __state)
    : __cvtptr_(__pcvt), __cvtstate_(__state), __cvtcount_(0) {}

template <class _Codecvt, class _Elem, class _WideAlloc, class _ByteAlloc>
wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::wstring_convert(
    const byte_string& __byte_err, const wide_string& __wide_err)
    : __byte_err_string_(__byte_err), __wide_err_string_(__wide_err), __cvtstate_(), __cvtcount_(0) {
  __cvtptr_ = new _Codecvt;
}



template <class _Codecvt, class _Elem, class _WideAlloc, class _ByteAlloc>
inline wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::wstring_convert(wstring_convert&& __wc)
    : __byte_err_string_(std::move(__wc.__byte_err_string_)),
      __wide_err_string_(std::move(__wc.__wide_err_string_)),
      __cvtptr_(__wc.__cvtptr_),
      __cvtstate_(__wc.__cvtstate_),
      __cvtcount_(__wc.__cvtcount_) {
  __wc.__cvtptr_ = nullptr;
}



#pragma GCC diagnostic push
# 3231 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 3231 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Codecvt, class _Elem, class _WideAlloc, class _ByteAlloc>
wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::~wstring_convert() {
  delete __cvtptr_;
}

template <class _Codecvt, class _Elem, class _WideAlloc, class _ByteAlloc>
typename wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::wide_string
wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::from_bytes(const char* __frm, const char* __frm_end) {
#pragma GCC diagnostic pop
  __cvtcount_ = 0;
  if (__cvtptr_ != nullptr) {
    wide_string __ws(2 * (__frm_end - __frm), _Elem());
    if (__frm != __frm_end)
      __ws.resize(__ws.capacity());
    codecvt_base::result __r = codecvt_base::ok;
    state_type __st = __cvtstate_;
    if (__frm != __frm_end) {
      _Elem* __to = &__ws[0];
      _Elem* __to_end = __to + __ws.size();
      const char* __frm_nxt;
      do {
        _Elem* __to_nxt;
        __r = __cvtptr_->in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        __cvtcount_ += __frm_nxt - __frm;
        if (__frm_nxt == __frm) {
          __r = codecvt_base::error;
        } else if (__r == codecvt_base::noconv) {
          __ws.resize(__to - &__ws[0]);

          __ws.append((const _Elem*)__frm, (const _Elem*)__frm_end);
          __frm = __frm_nxt;
          __r = codecvt_base::ok;
        } else if (__r == codecvt_base::ok) {
          __ws.resize(__to_nxt - &__ws[0]);
          __frm = __frm_nxt;
        } else if (__r == codecvt_base::partial) {
          ptrdiff_t __s = __to_nxt - &__ws[0];
          __ws.resize(2 * __s);
          __to = &__ws[0] + __s;
          __to_end = &__ws[0] + __ws.size();
          __frm = __frm_nxt;
        }
      } while (__r == codecvt_base::partial && __frm_nxt < __frm_end);
    }
    if (__r == codecvt_base::ok)
      return __ws;
  }

  if (__wide_err_string_.empty())
    __throw_range_error("wstring_convert: from_bytes error");

  return __wide_err_string_;
}

template <class _Codecvt, class _Elem, class _WideAlloc, class _ByteAlloc>
typename wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::byte_string
wstring_convert<_Codecvt, _Elem, _WideAlloc, _ByteAlloc>::to_bytes(const _Elem* __frm, const _Elem* __frm_end) {
  __cvtcount_ = 0;
  if (__cvtptr_ != nullptr) {
    byte_string __bs(2 * (__frm_end - __frm), char());
    if (__frm != __frm_end)
      __bs.resize(__bs.capacity());
    codecvt_base::result __r = codecvt_base::ok;
    state_type __st = __cvtstate_;
    if (__frm != __frm_end) {
      char* __to = &__bs[0];
      char* __to_end = __to + __bs.size();
      const _Elem* __frm_nxt;
      do {
        char* __to_nxt;
        __r = __cvtptr_->out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        __cvtcount_ += __frm_nxt - __frm;
        if (__frm_nxt == __frm) {
          __r = codecvt_base::error;
        } else if (__r == codecvt_base::noconv) {
          __bs.resize(__to - &__bs[0]);

          __bs.append((const char*)__frm, (const char*)__frm_end);
          __frm = __frm_nxt;
          __r = codecvt_base::ok;
        } else if (__r == codecvt_base::ok) {
          __bs.resize(__to_nxt - &__bs[0]);
          __frm = __frm_nxt;
        } else if (__r == codecvt_base::partial) {
          ptrdiff_t __s = __to_nxt - &__bs[0];
          __bs.resize(2 * __s);
          __to = &__bs[0] + __s;
          __to_end = &__bs[0] + __bs.size();
          __frm = __frm_nxt;
        }
      } while (__r == codecvt_base::partial && __frm_nxt < __frm_end);
    }
    if (__r == codecvt_base::ok) {
      size_t __s = __bs.size();
      __bs.resize(__bs.capacity());
      char* __to = &__bs[0] + __s;
      char* __to_end = __to + __bs.size();
      do {
        char* __to_nxt;
        __r = __cvtptr_->unshift(__st, __to, __to_end, __to_nxt);
        if (__r == codecvt_base::noconv) {
          __bs.resize(__to - &__bs[0]);
          __r = codecvt_base::ok;
        } else if (__r == codecvt_base::ok) {
          __bs.resize(__to_nxt - &__bs[0]);
        } else if (__r == codecvt_base::partial) {
          ptrdiff_t __sp = __to_nxt - &__bs[0];
          __bs.resize(2 * __sp);
          __to = &__bs[0] + __sp;
          __to_end = &__bs[0] + __bs.size();
        }
      } while (__r == codecvt_base::partial);
      if (__r == codecvt_base::ok)
        return __bs;
    }
  }

  if (__byte_err_string_.empty())
    __throw_range_error("wstring_convert: to_bytes error");

  return __byte_err_string_;
}

template <class _Codecvt, class _Elem = wchar_t, class _Tr = char_traits<_Elem> >
class __attribute__((__deprecated__)) wbuffer_convert : public basic_streambuf<_Elem, _Tr> {
public:

  typedef _Elem char_type;
  typedef _Tr traits_type;
  typedef typename traits_type::int_type int_type;
  typedef typename traits_type::pos_type pos_type;
  typedef typename traits_type::off_type off_type;
  typedef typename _Codecvt::state_type state_type;

private:
  char* __extbuf_;
  const char* __extbufnext_;
  const char* __extbufend_;
  char __extbuf_min_[8];
  size_t __ebs_;
  char_type* __intbuf_;
  size_t __ibs_;
  streambuf* __bufptr_;
  _Codecvt* __cv_;
  state_type __st_;
  ios_base::openmode __cm_;
  bool __owns_eb_;
  bool __owns_ib_;
  bool __always_noconv_;

public:

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) wbuffer_convert() : wbuffer_convert(nullptr) {}
  explicit __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  wbuffer_convert(streambuf* __bytebuf, _Codecvt* __pcvt = new _Codecvt, state_type __state = state_type());





  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~wbuffer_convert();

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) streambuf* rdbuf() const { return __bufptr_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) streambuf* rdbuf(streambuf* __bytebuf) {
    streambuf* __r = __bufptr_;
    __bufptr_ = __bytebuf;
    return __r;
  }

  wbuffer_convert(const wbuffer_convert&) = delete;
  wbuffer_convert& operator=(const wbuffer_convert&) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) state_type state() const { return __st_; }

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual int_type underflow();
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual int_type pbackfail(int_type __c = traits_type::eof());
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual int_type overflow(int_type __c = traits_type::eof());
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual basic_streambuf<char_type, traits_type>* setbuf(char_type* __s, streamsize __n);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual pos_type
  seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __wch = ios_base::in | ios_base::out);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual pos_type
  seekpos(pos_type __sp, ios_base::openmode __wch = ios_base::in | ios_base::out);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual int sync();

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) bool __read_mode();
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) void __write_mode();
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) wbuffer_convert* __close();
};

#pragma GCC diagnostic push
# 3423 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 3423 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Codecvt, class _Elem, class _Tr>
wbuffer_convert<_Codecvt, _Elem, _Tr>::wbuffer_convert(streambuf* __bytebuf, _Codecvt* __pcvt, state_type __state)
    : __extbuf_(nullptr),
      __extbufnext_(nullptr),
      __extbufend_(nullptr),
      __ebs_(0),
      __intbuf_(0),
      __ibs_(0),
      __bufptr_(__bytebuf),
      __cv_(__pcvt),
      __st_(__state),
      __cm_(0),
      __owns_eb_(false),
      __owns_ib_(false),
      __always_noconv_(__cv_ ? __cv_->always_noconv() : false) {
  setbuf(0, 4096);
}

template <class _Codecvt, class _Elem, class _Tr>
wbuffer_convert<_Codecvt, _Elem, _Tr>::~wbuffer_convert() {
  __close();
  delete __cv_;
  if (__owns_eb_)
    delete[] __extbuf_;
  if (__owns_ib_)
    delete[] __intbuf_;
}

template <class _Codecvt, class _Elem, class _Tr>
typename wbuffer_convert<_Codecvt, _Elem, _Tr>::int_type wbuffer_convert<_Codecvt, _Elem, _Tr>::underflow() {
#pragma GCC diagnostic pop
  if (__cv_ == 0 || __bufptr_ == nullptr)
    return traits_type::eof();
  bool __initial = __read_mode();
  char_type __1buf;
  if (this->gptr() == 0)
    this->setg(&__1buf, &__1buf + 1, &__1buf + 1);
  const size_t __unget_sz = __initial ? 0 : std::min<size_t>((this->egptr() - this->eback()) / 2, 4);
  int_type __c = traits_type::eof();
  if (this->gptr() == this->egptr()) {
    std::memmove(this->eback(), this->egptr() - __unget_sz, __unget_sz * sizeof(char_type));
    if (__always_noconv_) {
      streamsize __nmemb = static_cast<streamsize>(this->egptr() - this->eback() - __unget_sz);
      __nmemb = __bufptr_->sgetn((char*)this->eback() + __unget_sz, __nmemb);
      if (__nmemb != 0) {
        this->setg(this->eback(), this->eback() + __unget_sz, this->eback() + __unget_sz + __nmemb);
        __c = *this->gptr();
      }
    } else {
      if (__extbufend_ != __extbufnext_) {
        ((void)0);
        ((void)0);
        std::memmove(__extbuf_, __extbufnext_, __extbufend_ - __extbufnext_);
      }
      __extbufnext_ = __extbuf_ + (__extbufend_ - __extbufnext_);
      __extbufend_ = __extbuf_ + (__extbuf_ == __extbuf_min_ ? sizeof(__extbuf_min_) : __ebs_);
      streamsize __nmemb = std::min(static_cast<streamsize>(this->egptr() - this->eback() - __unget_sz),
                                    static_cast<streamsize>(__extbufend_ - __extbufnext_));
      codecvt_base::result __r;


      streamsize __nr = __bufptr_->sgetn(const_cast<char*>(__extbufnext_), __nmemb);
      if (__nr != 0) {
        __extbufend_ = __extbufnext_ + __nr;
        char_type* __inext;
        __r = __cv_->in(
            __st_, __extbuf_, __extbufend_, __extbufnext_, this->eback() + __unget_sz, this->egptr(), __inext);
        if (__r == codecvt_base::noconv) {
          this->setg((char_type*)__extbuf_, (char_type*)__extbuf_, (char_type*)const_cast<char*>(__extbufend_));
          __c = *this->gptr();
        } else if (__inext != this->eback() + __unget_sz) {
          this->setg(this->eback(), this->eback() + __unget_sz, __inext);
          __c = *this->gptr();
        }
      }
    }
  } else
    __c = *this->gptr();
  if (this->eback() == &__1buf)
    this->setg(0, 0, 0);
  return __c;
}

#pragma GCC diagnostic push
# 3507 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 3507 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Codecvt, class _Elem, class _Tr>
typename wbuffer_convert<_Codecvt, _Elem, _Tr>::int_type
wbuffer_convert<_Codecvt, _Elem, _Tr>::pbackfail(int_type __c) {
#pragma GCC diagnostic pop
  if (__cv_ != 0 && __bufptr_ && this->eback() < this->gptr()) {
    if (traits_type::eq_int_type(__c, traits_type::eof())) {
      this->gbump(-1);
      return traits_type::not_eof(__c);
    }
    if (traits_type::eq(traits_type::to_char_type(__c), this->gptr()[-1])) {
      this->gbump(-1);
      *this->gptr() = traits_type::to_char_type(__c);
      return __c;
    }
  }
  return traits_type::eof();
}

#pragma GCC diagnostic push
# 3526 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 3526 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Codecvt, class _Elem, class _Tr>
typename wbuffer_convert<_Codecvt, _Elem, _Tr>::int_type wbuffer_convert<_Codecvt, _Elem, _Tr>::overflow(int_type __c) {
#pragma GCC diagnostic pop
  if (__cv_ == 0 || !__bufptr_)
    return traits_type::eof();
  __write_mode();
  char_type __1buf;
  char_type* __pb_save = this->pbase();
  char_type* __epb_save = this->epptr();
  if (!traits_type::eq_int_type(__c, traits_type::eof())) {
    if (this->pptr() == 0)
      this->setp(&__1buf, &__1buf + 1);
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }
  if (this->pptr() != this->pbase()) {
    if (__always_noconv_) {
      streamsize __nmemb = static_cast<streamsize>(this->pptr() - this->pbase());
      if (__bufptr_->sputn((const char*)this->pbase(), __nmemb) != __nmemb)
        return traits_type::eof();
    } else {
      char* __extbe = __extbuf_;
      codecvt_base::result __r;
      do {
        const char_type* __e;
        __r = __cv_->out(__st_, this->pbase(), this->pptr(), __e, __extbuf_, __extbuf_ + __ebs_, __extbe);
        if (__e == this->pbase())
          return traits_type::eof();
        if (__r == codecvt_base::noconv) {
          streamsize __nmemb = static_cast<size_t>(this->pptr() - this->pbase());
          if (__bufptr_->sputn((const char*)this->pbase(), __nmemb) != __nmemb)
            return traits_type::eof();
        } else if (__r == codecvt_base::ok || __r == codecvt_base::partial) {
          streamsize __nmemb = static_cast<size_t>(__extbe - __extbuf_);
          if (__bufptr_->sputn(__extbuf_, __nmemb) != __nmemb)
            return traits_type::eof();
          if (__r == codecvt_base::partial) {
            this->setp(const_cast<char_type*>(__e), this->pptr());
            this->__pbump(this->epptr() - this->pbase());
          }
        } else
          return traits_type::eof();
      } while (__r == codecvt_base::partial);
    }
    this->setp(__pb_save, __epb_save);
  }
  return traits_type::not_eof(__c);
}

#pragma GCC diagnostic push
# 3576 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 3576 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Codecvt, class _Elem, class _Tr>
basic_streambuf<_Elem, _Tr>* wbuffer_convert<_Codecvt, _Elem, _Tr>::setbuf(char_type* __s, streamsize __n) {
#pragma GCC diagnostic pop
  this->setg(0, 0, 0);
  this->setp(0, 0);
  if (__owns_eb_)
    delete[] __extbuf_;
  if (__owns_ib_)
    delete[] __intbuf_;
  __ebs_ = __n;
  if (__ebs_ > sizeof(__extbuf_min_)) {
    if (__always_noconv_ && __s) {
      __extbuf_ = (char*)__s;
      __owns_eb_ = false;
    } else {
      __extbuf_ = new char[__ebs_];
      __owns_eb_ = true;
    }
  } else {
    __extbuf_ = __extbuf_min_;
    __ebs_ = sizeof(__extbuf_min_);
    __owns_eb_ = false;
  }
  if (!__always_noconv_) {
    __ibs_ = max<streamsize>(__n, sizeof(__extbuf_min_));
    if (__s && __ibs_ >= sizeof(__extbuf_min_)) {
      __intbuf_ = __s;
      __owns_ib_ = false;
    } else {
      __intbuf_ = new char_type[__ibs_];
      __owns_ib_ = true;
    }
  } else {
    __ibs_ = 0;
    __intbuf_ = 0;
    __owns_ib_ = false;
  }
  return this;
}

#pragma GCC diagnostic push
# 3617 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 3617 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Codecvt, class _Elem, class _Tr>
typename wbuffer_convert<_Codecvt, _Elem, _Tr>::pos_type
wbuffer_convert<_Codecvt, _Elem, _Tr>::seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __om) {
  int __width = __cv_->encoding();
  if (__cv_ == 0 || !__bufptr_ || (__width <= 0 && __off != 0) || sync())
    return pos_type(off_type(-1));

  if (__way != ios_base::beg && __way != ios_base::cur && __way != ios_base::end)
    return pos_type(off_type(-1));
  pos_type __r = __bufptr_->pubseekoff(__width * __off, __way, __om);
  __r.state(__st_);
  return __r;
}

template <class _Codecvt, class _Elem, class _Tr>
typename wbuffer_convert<_Codecvt, _Elem, _Tr>::pos_type
wbuffer_convert<_Codecvt, _Elem, _Tr>::seekpos(pos_type __sp, ios_base::openmode __wch) {
  if (__cv_ == 0 || !__bufptr_ || sync())
    return pos_type(off_type(-1));
  if (__bufptr_->pubseekpos(__sp, __wch) == pos_type(off_type(-1)))
    return pos_type(off_type(-1));
  return __sp;
}

template <class _Codecvt, class _Elem, class _Tr>
int wbuffer_convert<_Codecvt, _Elem, _Tr>::sync() {
#pragma GCC diagnostic pop
  if (__cv_ == 0 || !__bufptr_)
    return 0;
  if (__cm_ & ios_base::out) {
    if (this->pptr() != this->pbase())
      if (overflow() == traits_type::eof())
        return -1;
    codecvt_base::result __r;
    do {
      char* __extbe;
      __r = __cv_->unshift(__st_, __extbuf_, __extbuf_ + __ebs_, __extbe);
      streamsize __nmemb = static_cast<streamsize>(__extbe - __extbuf_);
      if (__bufptr_->sputn(__extbuf_, __nmemb) != __nmemb)
        return -1;
    } while (__r == codecvt_base::partial);
    if (__r == codecvt_base::error)
      return -1;
    if (__bufptr_->pubsync())
      return -1;
  } else if (__cm_ & ios_base::in) {
    off_type __c;
    if (__always_noconv_)
      __c = this->egptr() - this->gptr();
    else {
      int __width = __cv_->encoding();
      __c = __extbufend_ - __extbufnext_;
      if (__width > 0)
        __c += __width * (this->egptr() - this->gptr());
      else {
        if (this->gptr() != this->egptr()) {
          std::reverse(this->gptr(), this->egptr());
          codecvt_base::result __r;
          const char_type* __e = this->gptr();
          char* __extbe;
          do {
            __r = __cv_->out(__st_, __e, this->egptr(), __e, __extbuf_, __extbuf_ + __ebs_, __extbe);
            switch (__r) {
            case codecvt_base::noconv:
              __c += this->egptr() - this->gptr();
              break;
            case codecvt_base::ok:
            case codecvt_base::partial:
              __c += __extbe - __extbuf_;
              break;
            default:
              return -1;
            }
          } while (__r == codecvt_base::partial);
        }
      }
    }
    if (__bufptr_->pubseekoff(-__c, ios_base::cur, __cm_) == pos_type(off_type(-1)))
      return -1;
    this->setg(0, 0, 0);
    __cm_ = 0;
  }
  return 0;
}

#pragma GCC diagnostic push
# 3703 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 3703 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Codecvt, class _Elem, class _Tr>
bool wbuffer_convert<_Codecvt, _Elem, _Tr>::__read_mode() {
  if (!(__cm_ & ios_base::in)) {
    this->setp(0, 0);
    if (__always_noconv_)
      this->setg((char_type*)__extbuf_, (char_type*)__extbuf_ + __ebs_, (char_type*)__extbuf_ + __ebs_);
    else
      this->setg(__intbuf_, __intbuf_ + __ibs_, __intbuf_ + __ibs_);
    __cm_ = ios_base::in;
    return true;
  }
  return false;
}

template <class _Codecvt, class _Elem, class _Tr>
void wbuffer_convert<_Codecvt, _Elem, _Tr>::__write_mode() {
  if (!(__cm_ & ios_base::out)) {
    this->setg(0, 0, 0);
    if (__ebs_ > sizeof(__extbuf_min_)) {
      if (__always_noconv_)
        this->setp((char_type*)__extbuf_, (char_type*)__extbuf_ + (__ebs_ - 1));
      else
        this->setp(__intbuf_, __intbuf_ + (__ibs_ - 1));
    } else
      this->setp(0, 0);
    __cm_ = ios_base::out;
  }
}

template <class _Codecvt, class _Elem, class _Tr>
wbuffer_convert<_Codecvt, _Elem, _Tr>* wbuffer_convert<_Codecvt, _Elem, _Tr>::__close() {
  wbuffer_convert* __rt = nullptr;
  if (__cv_ != nullptr && __bufptr_ != nullptr) {
    __rt = this;
    if ((__cm_ & ios_base::out) && sync())
      __rt = nullptr;
  }
  return __rt;
}

#pragma GCC diagnostic pop



}}
# 3748 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
#pragma clang diagnostic pop
# 3759 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdarg" 1 3
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdarg" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/lib/clang/19/include/stdarg.h" 1 3
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdarg" 2 3
# 46 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdarg" 3


#pragma clang diagnostic push
# 48 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdarg" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 48 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdarg" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 48 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdarg" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 48 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdarg" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 48 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdarg" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 48 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdarg" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

using ::va_list __attribute__((__using_if_exists__));

}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/cstdarg" 3
#pragma clang diagnostic pop
# 3760 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/locale" 2 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ostream/basic_ostream.h" 2 3
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ostream/basic_ostream.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ostream/basic_ostream.h" 2 3

#pragma clang diagnostic push
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ostream/basic_ostream.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ostream/basic_ostream.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ostream/basic_ostream.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ostream/basic_ostream.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ostream/basic_ostream.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ostream/basic_ostream.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _CharT, class _Traits>
class basic_ostream : virtual public basic_ios<_CharT, _Traits> {
public:

  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef typename traits_type::int_type int_type;
  typedef typename traits_type::pos_type pos_type;
  typedef typename traits_type::off_type off_type;


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit basic_ostream(basic_streambuf<char_type, traits_type>* __sb) {
    this->init(__sb);
  }
  ~basic_ostream() override;

  basic_ostream(const basic_ostream& __rhs) = delete;
  basic_ostream& operator=(const basic_ostream& __rhs) = delete;

protected:
  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream(basic_ostream&& __rhs);


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream& operator=(basic_ostream&& __rhs);

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(basic_ostream& __rhs) {
    basic_ios<char_type, traits_type>::swap(__rhs);
  }

public:

  class sentry;


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream& operator<<(basic_ostream& (*__pf)(basic_ostream&)) {
    return __pf(*this);
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream&
  operator<<(basic_ios<char_type, traits_type>& (*__pf)(basic_ios<char_type, traits_type>&)) {
    __pf(*this);
    return *this;
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream& operator<<(ios_base& (*__pf)(ios_base&)) {
    __pf(*this);
    return *this;
  }

  basic_ostream& operator<<(bool __n);
  basic_ostream& operator<<(short __n);
  basic_ostream& operator<<(unsigned short __n);
  basic_ostream& operator<<(int __n);
  basic_ostream& operator<<(unsigned int __n);
  basic_ostream& operator<<(long __n);
  basic_ostream& operator<<(unsigned long __n);
  basic_ostream& operator<<(long long __n);
  basic_ostream& operator<<(unsigned long long __n);
  basic_ostream& operator<<(float __f);
  basic_ostream& operator<<(double __f);
  basic_ostream& operator<<(long double __f);
  basic_ostream& operator<<(const void* __p);







  basic_ostream& operator<<(basic_streambuf<char_type, traits_type>* __sb);




  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream& operator<<(nullptr_t) { return *this << "nullptr"; }



  basic_ostream& put(char_type __c);
  basic_ostream& write(const char_type* __s, streamsize __n);
  basic_ostream& flush();


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pos_type tellp();
  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream& seekp(pos_type __pos);
  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream& seekp(off_type __off, ios_base::seekdir __dir);

protected:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream() {}
};

template <class _CharT, class _Traits>
class basic_ostream<_CharT, _Traits>::sentry {
  bool __ok_;
  basic_ostream<_CharT, _Traits>& __os_;

public:
  explicit sentry(basic_ostream<_CharT, _Traits>& __os);
  ~sentry();
  sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit operator bool() const { return __ok_; }
};

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>::sentry::sentry(basic_ostream<_CharT, _Traits>& __os) : __ok_(false), __os_(__os) {
  if (__os.good()) {
    if (__os.tie())
      __os.tie()->flush();
    __ok_ = true;
  }
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>::sentry::~sentry() {
  if (__os_.rdbuf() && __os_.good() && (__os_.flags() & ios_base::unitbuf) && !uncaught_exception()) {

    try {

      if (__os_.rdbuf()->pubsync() == -1)
        __os_.setstate(ios_base::badbit);

    } catch (...) {
    }

  }
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>::basic_ostream(basic_ostream&& __rhs) {
  this->move(__rhs);
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator=(basic_ostream&& __rhs) {
  swap(__rhs);
  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>::~basic_ostream() {}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>&
basic_ostream<_CharT, _Traits>::operator<<(basic_streambuf<char_type, traits_type>* __sb) {

  try {

    sentry __s(*this);
    if (__s) {
      if (__sb) {

        try {

          typedef istreambuf_iterator<_CharT, _Traits> _Ip;
          typedef ostreambuf_iterator<_CharT, _Traits> _Op;
          _Ip __i(__sb);
          _Ip __eof;
          _Op __o(*this);
          size_t __c = 0;
          for (; __i != __eof; ++__i, ++__o, ++__c) {
            *__o = *__i;
            if (__o.failed())
              break;
          }
          if (__c == 0)
            this->setstate(ios_base::failbit);

        } catch (...) {
          this->__set_failbit_and_consider_rethrow();
        }

      } else
        this->setstate(ios_base::badbit);
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(bool __n) {

  try {

    sentry __s(*this);
    if (__s) {
      typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;
      const _Fp& __f = std::use_facet<_Fp>(this->getloc());
      if (__f.put(*this, *this, this->fill(), __n).failed())
        this->setstate(ios_base::badbit | ios_base::failbit);
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(short __n) {

  try {

    sentry __s(*this);
    if (__s) {
      ios_base::fmtflags __flags = ios_base::flags() & ios_base::basefield;
      typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;
      const _Fp& __f = std::use_facet<_Fp>(this->getloc());
      if (__f.put(*this,
                  *this,
                  this->fill(),
                  __flags == ios_base::oct || __flags == ios_base::hex
                      ? static_cast<long>(static_cast<unsigned short>(__n))
                      : static_cast<long>(__n))
              .failed())
        this->setstate(ios_base::badbit | ios_base::failbit);
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(unsigned short __n) {

  try {

    sentry __s(*this);
    if (__s) {
      typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;
      const _Fp& __f = std::use_facet<_Fp>(this->getloc());
      if (__f.put(*this, *this, this->fill(), static_cast<unsigned long>(__n)).failed())
        this->setstate(ios_base::badbit | ios_base::failbit);
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(int __n) {

  try {

    sentry __s(*this);
    if (__s) {
      ios_base::fmtflags __flags = ios_base::flags() & ios_base::basefield;
      typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;
      const _Fp& __f = std::use_facet<_Fp>(this->getloc());
      if (__f.put(*this,
                  *this,
                  this->fill(),
                  __flags == ios_base::oct || __flags == ios_base::hex
                      ? static_cast<long>(static_cast<unsigned int>(__n))
                      : static_cast<long>(__n))
              .failed())
        this->setstate(ios_base::badbit | ios_base::failbit);
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(unsigned int __n) {

  try {

    sentry __s(*this);
    if (__s) {
      typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;
      const _Fp& __f = std::use_facet<_Fp>(this->getloc());
      if (__f.put(*this, *this, this->fill(), static_cast<unsigned long>(__n)).failed())
        this->setstate(ios_base::badbit | ios_base::failbit);
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(long __n) {

  try {

    sentry __s(*this);
    if (__s) {
      typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;
      const _Fp& __f = std::use_facet<_Fp>(this->getloc());
      if (__f.put(*this, *this, this->fill(), __n).failed())
        this->setstate(ios_base::badbit | ios_base::failbit);
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(unsigned long __n) {

  try {

    sentry __s(*this);
    if (__s) {
      typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;
      const _Fp& __f = std::use_facet<_Fp>(this->getloc());
      if (__f.put(*this, *this, this->fill(), __n).failed())
        this->setstate(ios_base::badbit | ios_base::failbit);
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(long long __n) {

  try {

    sentry __s(*this);
    if (__s) {
      typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;
      const _Fp& __f = std::use_facet<_Fp>(this->getloc());
      if (__f.put(*this, *this, this->fill(), __n).failed())
        this->setstate(ios_base::badbit | ios_base::failbit);
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(unsigned long long __n) {

  try {

    sentry __s(*this);
    if (__s) {
      typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;
      const _Fp& __f = std::use_facet<_Fp>(this->getloc());
      if (__f.put(*this, *this, this->fill(), __n).failed())
        this->setstate(ios_base::badbit | ios_base::failbit);
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(float __n) {

  try {

    sentry __s(*this);
    if (__s) {
      typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;
      const _Fp& __f = std::use_facet<_Fp>(this->getloc());
      if (__f.put(*this, *this, this->fill(), static_cast<double>(__n)).failed())
        this->setstate(ios_base::badbit | ios_base::failbit);
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(double __n) {

  try {

    sentry __s(*this);
    if (__s) {
      typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;
      const _Fp& __f = std::use_facet<_Fp>(this->getloc());
      if (__f.put(*this, *this, this->fill(), __n).failed())
        this->setstate(ios_base::badbit | ios_base::failbit);
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(long double __n) {

  try {

    sentry __s(*this);
    if (__s) {
      typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;
      const _Fp& __f = std::use_facet<_Fp>(this->getloc());
      if (__f.put(*this, *this, this->fill(), __n).failed())
        this->setstate(ios_base::badbit | ios_base::failbit);
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(const void* __n) {

  try {

    sentry __s(*this);
    if (__s) {
      typedef num_put<char_type, ostreambuf_iterator<char_type, traits_type> > _Fp;
      const _Fp& __f = std::use_facet<_Fp>(this->getloc());
      if (__f.put(*this, *this, this->fill(), __n).failed())
        this->setstate(ios_base::badbit | ios_base::failbit);
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>&
__put_character_sequence(basic_ostream<_CharT, _Traits>& __os, const _CharT* __str, size_t __len) {

  try {

    typename basic_ostream<_CharT, _Traits>::sentry __s(__os);
    if (__s) {
      typedef ostreambuf_iterator<_CharT, _Traits> _Ip;
      if (std::__pad_and_output(
              _Ip(__os),
              __str,
              (__os.flags() & ios_base::adjustfield) == ios_base::left ? __str + __len : __str,
              __str + __len,
              __os,
              __os.fill())
              .failed())
        __os.setstate(ios_base::badbit | ios_base::failbit);
    }

  } catch (...) {
    __os.__set_badbit_and_consider_rethrow();
  }

  return __os;
}

template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>& operator<<(basic_ostream<_CharT, _Traits>& __os, _CharT __c) {
  return std::__put_character_sequence(__os, &__c, 1);
}

template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>& operator<<(basic_ostream<_CharT, _Traits>& __os, char __cn) {

  try {

    typename basic_ostream<_CharT, _Traits>::sentry __s(__os);
    if (__s) {
      _CharT __c = __os.widen(__cn);
      typedef ostreambuf_iterator<_CharT, _Traits> _Ip;
      if (std::__pad_and_output(
              _Ip(__os),
              &__c,
              (__os.flags() & ios_base::adjustfield) == ios_base::left ? &__c + 1 : &__c,
              &__c + 1,
              __os,
              __os.fill())
              .failed())
        __os.setstate(ios_base::badbit | ios_base::failbit);
    }

  } catch (...) {
    __os.__set_badbit_and_consider_rethrow();
  }

  return __os;
}

template <class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& __os, char __c) {
  return std::__put_character_sequence(__os, &__c, 1);
}

template <class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& __os, signed char __c) {
  return std::__put_character_sequence(__os, (char*)&__c, 1);
}

template <class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& __os, unsigned char __c) {
  return std::__put_character_sequence(__os, (char*)&__c, 1);
}

template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, const _CharT* __str) {
  return std::__put_character_sequence(__os, __str, _Traits::length(__str));
}

template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, const char* __strn) {

  try {

    typename basic_ostream<_CharT, _Traits>::sentry __s(__os);
    if (__s) {
      typedef ostreambuf_iterator<_CharT, _Traits> _Ip;
      size_t __len = char_traits<char>::length(__strn);
      const int __bs = 100;
      _CharT __wbb[__bs];
      _CharT* __wb = __wbb;
      unique_ptr<_CharT, void (*)(void*)> __h(0, free);
      if (__len > __bs) {
        __wb = (_CharT*)malloc(__len * sizeof(_CharT));
        if (__wb == 0)
          __throw_bad_alloc();
        __h.reset(__wb);
      }
      for (_CharT* __p = __wb; *__strn != '\0'; ++__strn, ++__p)
        *__p = __os.widen(*__strn);
      if (std::__pad_and_output(
              _Ip(__os),
              __wb,
              (__os.flags() & ios_base::adjustfield) == ios_base::left ? __wb + __len : __wb,
              __wb + __len,
              __os,
              __os.fill())
              .failed())
        __os.setstate(ios_base::badbit | ios_base::failbit);
    }

  } catch (...) {
    __os.__set_badbit_and_consider_rethrow();
  }

  return __os;
}

template <class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& __os, const char* __str) {
  return std::__put_character_sequence(__os, __str, _Traits::length(__str));
}

template <class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<char, _Traits>&
operator<<(basic_ostream<char, _Traits>& __os, const signed char* __str) {
  const char* __s = (const char*)__str;
  return std::__put_character_sequence(__os, __s, _Traits::length(__s));
}

template <class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<char, _Traits>&
operator<<(basic_ostream<char, _Traits>& __os, const unsigned char* __str) {
  const char* __s = (const char*)__str;
  return std::__put_character_sequence(__os, __s, _Traits::length(__s));
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::put(char_type __c) {

  try {

    sentry __s(*this);
    if (__s) {
      typedef ostreambuf_iterator<_CharT, _Traits> _Op;
      _Op __o(*this);
      *__o = __c;
      if (__o.failed())
        this->setstate(ios_base::badbit);
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::write(const char_type* __s, streamsize __n) {

  try {

    sentry __sen(*this);
    if (__sen && __n) {
      if (this->rdbuf()->sputn(__s, __n) != __n)
        this->setstate(ios_base::badbit);
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::flush() {

  try {

    if (this->rdbuf()) {
      sentry __s(*this);
      if (__s) {
        if (this->rdbuf()->pubsync() == -1)
          this->setstate(ios_base::badbit);
      }
    }

  } catch (...) {
    this->__set_badbit_and_consider_rethrow();
  }

  return *this;
}

template <class _CharT, class _Traits>
typename basic_ostream<_CharT, _Traits>::pos_type basic_ostream<_CharT, _Traits>::tellp() {
  if (this->fail())
    return pos_type(-1);
  return this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::seekp(pos_type __pos) {
  sentry __s(*this);
  if (!this->fail()) {
    if (this->rdbuf()->pubseekpos(__pos, ios_base::out) == pos_type(-1))
      this->setstate(ios_base::failbit);
  }
  return *this;
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::seekp(off_type __off, ios_base::seekdir __dir) {
  sentry __s(*this);
  if (!this->fail()) {
    if (this->rdbuf()->pubseekoff(__off, __dir, ios_base::out) == pos_type(-1))
      this->setstate(ios_base::failbit);
  }
  return *this;
}

template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline basic_ostream<_CharT, _Traits>& endl(basic_ostream<_CharT, _Traits>& __os) {
  __os.put(__os.widen('\n'));
  __os.flush();
  return __os;
}

template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline basic_ostream<_CharT, _Traits>& ends(basic_ostream<_CharT, _Traits>& __os) {
  __os.put(_CharT());
  return __os;
}

template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline basic_ostream<_CharT, _Traits>& flush(basic_ostream<_CharT, _Traits>& __os) {
  __os.flush();
  return __os;
}

template <class _Stream, class _Tp, class = void>
struct __is_ostreamable : false_type {};

template <class _Stream, class _Tp>
struct __is_ostreamable<_Stream, _Tp, decltype(std::declval<_Stream>() << std::declval<_Tp>(), void())> : true_type {};

template <class _Stream,
          class _Tp,
          __enable_if_t<_And<is_base_of<ios_base, _Stream>, __is_ostreamable<_Stream&, const _Tp&> >::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Stream&& operator<<(_Stream&& __os, const _Tp& __x) {
  __os << __x;
  return std::move(__os);
}

template <class _CharT, class _Traits, class _Allocator>
basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, const basic_string<_CharT, _Traits, _Allocator>& __str) {
  return std::__put_character_sequence(__os, __str.data(), __str.size());
}

template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, basic_string_view<_CharT, _Traits> __sv) {
  return std::__put_character_sequence(__os, __sv.data(), __sv.size());
}

template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __ec) {
  return __os << __ec.category().name() << ':' << __ec.value();
}

template <class _CharT, class _Traits, class _Yp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, shared_ptr<_Yp> const& __p) {
  return __os << __p.get();
}

template <
    class _CharT,
    class _Traits,
    class _Yp,
    class _Dp,
    __enable_if_t<is_same<void,
                          __void_t<decltype((std::declval<basic_ostream<_CharT, _Traits>&>()
                                             << std::declval<typename unique_ptr<_Yp, _Dp>::pointer>()))> >::value,
                  int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, unique_ptr<_Yp, _Dp> const& __p) {
  return __os << __p.get();
}

template <class _CharT, class _Traits, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, const bitset<_Size>& __x) {
  return __os << __x.template to_string<_CharT, _Traits>(std::use_facet<ctype<_CharT> >(__os.getloc()).widen('0'),
                                                         std::use_facet<ctype<_CharT> >(__os.getloc()).widen('1'));
}
# 851 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ostream/basic_ostream.h" 3
extern template class __attribute__((__visibility__("default"))) basic_ostream<char>;

extern template class __attribute__((__visibility__("default"))) basic_ostream<wchar_t>;


}}
# 856 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__ostream/basic_ostream.h" 3
#pragma clang diagnostic pop
# 165 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/istream" 2 3
# 177 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/istream" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 181 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/istream" 2 3

#pragma clang diagnostic push
# 182 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/istream" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 182 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/istream" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 182 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/istream" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 182 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/istream" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 182 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/istream" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 182 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/istream" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _CharT, class _Traits>
class basic_istream : virtual public basic_ios<_CharT, _Traits> {
  streamsize __gc_;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __inc_gcount() {
    if (__gc_ < numeric_limits<streamsize>::max())
      ++__gc_;
  }

public:

  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef typename traits_type::int_type int_type;
  typedef typename traits_type::pos_type pos_type;
  typedef typename traits_type::off_type off_type;


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit basic_istream(basic_streambuf<char_type, traits_type>* __sb)
      : __gc_(0) {
    this->init(__sb);
  }
  ~basic_istream() override;

protected:
  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream(basic_istream&& __rhs);


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream& operator=(basic_istream&& __rhs);

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(basic_istream& __rhs) {
    std::swap(__gc_, __rhs.__gc_);
    basic_ios<char_type, traits_type>::swap(__rhs);
  }

public:
  basic_istream(const basic_istream& __rhs) = delete;
  basic_istream& operator=(const basic_istream& __rhs) = delete;


  class sentry;


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream& operator>>(basic_istream& (*__pf)(basic_istream&)) {
    return __pf(*this);
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream&
  operator>>(basic_ios<char_type, traits_type>& (*__pf)(basic_ios<char_type, traits_type>&)) {
    __pf(*this);
    return *this;
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream& operator>>(ios_base& (*__pf)(ios_base&)) {
    __pf(*this);
    return *this;
  }

  basic_istream& operator>>(basic_streambuf<char_type, traits_type>* __sb);
  basic_istream& operator>>(bool& __n);
  basic_istream& operator>>(short& __n);
  basic_istream& operator>>(unsigned short& __n);
  basic_istream& operator>>(int& __n);
  basic_istream& operator>>(unsigned int& __n);
  basic_istream& operator>>(long& __n);
  basic_istream& operator>>(unsigned long& __n);
  basic_istream& operator>>(long long& __n);
  basic_istream& operator>>(unsigned long long& __n);
  basic_istream& operator>>(float& __f);
  basic_istream& operator>>(double& __f);
  basic_istream& operator>>(long double& __f);
  basic_istream& operator>>(void*& __p);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) streamsize gcount() const { return __gc_; }
  int_type get();

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream& get(char_type& __c) {
    int_type __ch = get();
    if (__ch != traits_type::eof())
      __c = traits_type::to_char_type(__ch);
    return *this;
  }

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream& get(char_type* __s, streamsize __n) {
    return get(__s, __n, this->widen('\n'));
  }

  basic_istream& get(char_type* __s, streamsize __n, char_type __dlm);

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream& get(basic_streambuf<char_type, traits_type>& __sb) {
    return get(__sb, this->widen('\n'));
  }

  basic_istream& get(basic_streambuf<char_type, traits_type>& __sb, char_type __dlm);

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream& getline(char_type* __s, streamsize __n) {
    return getline(__s, __n, this->widen('\n'));
  }

  basic_istream& getline(char_type* __s, streamsize __n, char_type __dlm);

  basic_istream& ignore(streamsize __n = 1, int_type __dlm = traits_type::eof());
  int_type peek();
  basic_istream& read(char_type* __s, streamsize __n);
  streamsize readsome(char_type* __s, streamsize __n);

  basic_istream& putback(char_type __c);
  basic_istream& unget();
  int sync();

  pos_type tellg();
  basic_istream& seekg(pos_type __pos);
  basic_istream& seekg(off_type __off, ios_base::seekdir __dir);
};

template <class _CharT, class _Traits>
class basic_istream<_CharT, _Traits>::sentry {
  bool __ok_;

public:
  explicit sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit operator bool() const { return __ok_; }

  sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;
};

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>::sentry::sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws) : __ok_(false) {
  if (__is.good()) {
    if (__is.tie())
      __is.tie()->flush();
    if (!__noskipws && (__is.flags() & ios_base::skipws)) {
      typedef istreambuf_iterator<_CharT, _Traits> _Ip;
      const ctype<_CharT>& __ct = std::use_facet<ctype<_CharT> >(__is.getloc());
      _Ip __i(__is);
      _Ip __eof;
      for (; __i != __eof; ++__i)
        if (!__ct.is(__ct.space, *__i))
          break;
      if (__i == __eof)
        __is.setstate(ios_base::failbit | ios_base::eofbit);
    }
    __ok_ = __is.good();
  } else
    __is.setstate(ios_base::failbit);
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>::basic_istream(basic_istream&& __rhs) : __gc_(__rhs.__gc_) {
  __rhs.__gc_ = 0;
  this->move(__rhs);
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator=(basic_istream&& __rhs) {
  swap(__rhs);
  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>::~basic_istream() {}

template <class _Tp, class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
__input_arithmetic(basic_istream<_CharT, _Traits>& __is, _Tp& __n) {
  ios_base::iostate __state = ios_base::goodbit;
  typename basic_istream<_CharT, _Traits>::sentry __s(__is);
  if (__s) {

    try {

      typedef istreambuf_iterator<_CharT, _Traits> _Ip;
      typedef num_get<_CharT, _Ip> _Fp;
      std::use_facet<_Fp>(__is.getloc()).get(_Ip(__is), _Ip(), __is, __state, __n);

    } catch (...) {
      __state |= ios_base::badbit;
      __is.__setstate_nothrow(__state);
      if (__is.exceptions() & ios_base::badbit) {
        throw;
      }
    }

    __is.setstate(__state);
  }
  return __is;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>>(unsigned short& __n) {
  return std::__input_arithmetic<unsigned short>(*this, __n);
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>>(unsigned int& __n) {
  return std::__input_arithmetic<unsigned int>(*this, __n);
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>>(long& __n) {
  return std::__input_arithmetic<long>(*this, __n);
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>>(unsigned long& __n) {
  return std::__input_arithmetic<unsigned long>(*this, __n);
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>>(long long& __n) {
  return std::__input_arithmetic<long long>(*this, __n);
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>>(unsigned long long& __n) {
  return std::__input_arithmetic<unsigned long long>(*this, __n);
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>>(float& __n) {
  return std::__input_arithmetic<float>(*this, __n);
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>>(double& __n) {
  return std::__input_arithmetic<double>(*this, __n);
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>>(long double& __n) {
  return std::__input_arithmetic<long double>(*this, __n);
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>>(bool& __n) {
  return std::__input_arithmetic<bool>(*this, __n);
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>>(void*& __n) {
  return std::__input_arithmetic<void*>(*this, __n);
}

template <class _Tp, class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
__input_arithmetic_with_numeric_limits(basic_istream<_CharT, _Traits>& __is, _Tp& __n) {
  ios_base::iostate __state = ios_base::goodbit;
  typename basic_istream<_CharT, _Traits>::sentry __s(__is);
  if (__s) {

    try {

      typedef istreambuf_iterator<_CharT, _Traits> _Ip;
      typedef num_get<_CharT, _Ip> _Fp;
      long __temp;
      std::use_facet<_Fp>(__is.getloc()).get(_Ip(__is), _Ip(), __is, __state, __temp);
      if (__temp < numeric_limits<_Tp>::min()) {
        __state |= ios_base::failbit;
        __n = numeric_limits<_Tp>::min();
      } else if (__temp > numeric_limits<_Tp>::max()) {
        __state |= ios_base::failbit;
        __n = numeric_limits<_Tp>::max();
      } else {
        __n = static_cast<_Tp>(__temp);
      }

    } catch (...) {
      __state |= ios_base::badbit;
      __is.__setstate_nothrow(__state);
      if (__is.exceptions() & ios_base::badbit) {
        throw;
      }
    }

    __is.setstate(__state);
  }
  return __is;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>>(short& __n) {
  return std::__input_arithmetic_with_numeric_limits<short>(*this, __n);
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>>(int& __n) {
  return std::__input_arithmetic_with_numeric_limits<int>(*this, __n);
}

template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
__input_c_string(basic_istream<_CharT, _Traits>& __is, _CharT* __p, size_t __n) {
  ios_base::iostate __state = ios_base::goodbit;
  typename basic_istream<_CharT, _Traits>::sentry __sen(__is);
  if (__sen) {

    try {

      _CharT* __s = __p;
      const ctype<_CharT>& __ct = std::use_facet<ctype<_CharT> >(__is.getloc());
      while (__s != __p + (__n - 1)) {
        typename _Traits::int_type __i = __is.rdbuf()->sgetc();
        if (_Traits::eq_int_type(__i, _Traits::eof())) {
          __state |= ios_base::eofbit;
          break;
        }
        _CharT __ch = _Traits::to_char_type(__i);
        if (__ct.is(__ct.space, __ch))
          break;
        *__s++ = __ch;
        __is.rdbuf()->sbumpc();
      }
      *__s = _CharT();
      __is.width(0);
      if (__s == __p)
        __state |= ios_base::failbit;

    } catch (...) {
      __state |= ios_base::badbit;
      __is.__setstate_nothrow(__state);
      if (__is.exceptions() & ios_base::badbit) {
        throw;
      }
    }

    __is.setstate(__state);
  }
  return __is;
}
# 543 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/istream" 3
template <class _CharT, class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
operator>>(basic_istream<_CharT, _Traits>& __is, _CharT* __s) {
  streamsize __n = __is.width();
  if (__n <= 0)
    __n = numeric_limits<streamsize>::max() / sizeof(_CharT) - 1;
  return std::__input_c_string(__is, __s, size_t(__n));
}

template <class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<char, _Traits>&
operator>>(basic_istream<char, _Traits>& __is, unsigned char* __s) {
  return __is >> (char*)__s;
}

template <class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<char, _Traits>&
operator>>(basic_istream<char, _Traits>& __is, signed char* __s) {
  return __is >> (char*)__s;
}



template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>& operator>>(basic_istream<_CharT, _Traits>& __is, _CharT& __c) {
  ios_base::iostate __state = ios_base::goodbit;
  typename basic_istream<_CharT, _Traits>::sentry __sen(__is);
  if (__sen) {

    try {

      typename _Traits::int_type __i = __is.rdbuf()->sbumpc();
      if (_Traits::eq_int_type(__i, _Traits::eof()))
        __state |= ios_base::eofbit | ios_base::failbit;
      else
        __c = _Traits::to_char_type(__i);

    } catch (...) {
      __state |= ios_base::badbit;
      __is.__setstate_nothrow(__state);
      if (__is.exceptions() & ios_base::badbit) {
        throw;
      }
    }

    __is.setstate(__state);
  }
  return __is;
}

template <class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<char, _Traits>&
operator>>(basic_istream<char, _Traits>& __is, unsigned char& __c) {
  return __is >> (char&)__c;
}

template <class _Traits>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<char, _Traits>&
operator>>(basic_istream<char, _Traits>& __is, signed char& __c) {
  return __is >> (char&)__c;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::operator>>(basic_streambuf<char_type, traits_type>* __sb) {
  ios_base::iostate __state = ios_base::goodbit;
  __gc_ = 0;
  sentry __s(*this, true);
  if (__s) {
    if (__sb) {

      try {

        while (true) {
          typename traits_type::int_type __i = this->rdbuf()->sgetc();
          if (traits_type::eq_int_type(__i, _Traits::eof())) {
            __state |= ios_base::eofbit;
            break;
          }
          if (traits_type::eq_int_type(__sb->sputc(traits_type::to_char_type(__i)), traits_type::eof()))
            break;
          __inc_gcount();
          this->rdbuf()->sbumpc();
        }
        if (__gc_ == 0)
          __state |= ios_base::failbit;

      } catch (...) {
        __state |= ios_base::badbit;
        if (__gc_ == 0)
          __state |= ios_base::failbit;

        this->__setstate_nothrow(__state);
        if (this->exceptions() & ios_base::failbit || this->exceptions() & ios_base::badbit) {
          throw;
        }
      }

    } else {
      __state |= ios_base::failbit;
    }
    this->setstate(__state);
  }
  return *this;
}

template <class _CharT, class _Traits>
typename basic_istream<_CharT, _Traits>::int_type basic_istream<_CharT, _Traits>::get() {
  ios_base::iostate __state = ios_base::goodbit;
  __gc_ = 0;
  int_type __r = traits_type::eof();
  sentry __s(*this, true);
  if (__s) {

    try {

      __r = this->rdbuf()->sbumpc();
      if (traits_type::eq_int_type(__r, traits_type::eof()))
        __state |= ios_base::failbit | ios_base::eofbit;
      else
        __gc_ = 1;

    } catch (...) {
      this->__setstate_nothrow(this->rdstate() | ios_base::badbit);
      if (this->exceptions() & ios_base::badbit) {
        throw;
      }
    }

    this->setstate(__state);
  }
  return __r;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::get(char_type* __s, streamsize __n, char_type __dlm) {
  ios_base::iostate __state = ios_base::goodbit;
  __gc_ = 0;
  sentry __sen(*this, true);
  if (__sen) {
    if (__n > 0) {

      try {

        while (__gc_ < __n - 1) {
          int_type __i = this->rdbuf()->sgetc();
          if (traits_type::eq_int_type(__i, traits_type::eof())) {
            __state |= ios_base::eofbit;
            break;
          }
          char_type __ch = traits_type::to_char_type(__i);
          if (traits_type::eq(__ch, __dlm))
            break;
          *__s++ = __ch;
          __inc_gcount();
          this->rdbuf()->sbumpc();
        }
        if (__gc_ == 0)
          __state |= ios_base::failbit;

      } catch (...) {
        __state |= ios_base::badbit;
        this->__setstate_nothrow(__state);
        if (this->exceptions() & ios_base::badbit) {
          if (__n > 0)
            *__s = char_type();
          throw;
        }
      }

    } else {
      __state |= ios_base::failbit;
    }

    if (__n > 0)
      *__s = char_type();
    this->setstate(__state);
  }
  if (__n > 0)
    *__s = char_type();
  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::get(basic_streambuf<char_type, traits_type>& __sb, char_type __dlm) {
  ios_base::iostate __state = ios_base::goodbit;
  __gc_ = 0;
  sentry __sen(*this, true);
  if (__sen) {

    try {

      while (true) {
        typename traits_type::int_type __i = this->rdbuf()->sgetc();
        if (traits_type::eq_int_type(__i, traits_type::eof())) {
          __state |= ios_base::eofbit;
          break;
        }
        char_type __ch = traits_type::to_char_type(__i);
        if (traits_type::eq(__ch, __dlm))
          break;
        if (traits_type::eq_int_type(__sb.sputc(__ch), traits_type::eof()))
          break;
        __inc_gcount();
        this->rdbuf()->sbumpc();
      }

    } catch (...) {
      __state |= ios_base::badbit;

    }

    if (__gc_ == 0)
      __state |= ios_base::failbit;
    this->setstate(__state);
  }
  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::getline(char_type* __s, streamsize __n, char_type __dlm) {
  ios_base::iostate __state = ios_base::goodbit;
  __gc_ = 0;
  sentry __sen(*this, true);
  if (__sen) {

    try {

      while (true) {
        typename traits_type::int_type __i = this->rdbuf()->sgetc();
        if (traits_type::eq_int_type(__i, traits_type::eof())) {
          __state |= ios_base::eofbit;
          break;
        }
        char_type __ch = traits_type::to_char_type(__i);
        if (traits_type::eq(__ch, __dlm)) {
          this->rdbuf()->sbumpc();
          __inc_gcount();
          break;
        }
        if (__gc_ >= __n - 1) {
          __state |= ios_base::failbit;
          break;
        }
        *__s++ = __ch;
        this->rdbuf()->sbumpc();
        __inc_gcount();
      }

    } catch (...) {
      __state |= ios_base::badbit;
      this->__setstate_nothrow(__state);
      if (this->exceptions() & ios_base::badbit) {
        if (__n > 0)
          *__s = char_type();
        if (__gc_ == 0)
          __state |= ios_base::failbit;
        throw;
      }
    }

  }
  if (__n > 0)
    *__s = char_type();
  if (__gc_ == 0)
    __state |= ios_base::failbit;
  this->setstate(__state);
  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::ignore(streamsize __n, int_type __dlm) {
  ios_base::iostate __state = ios_base::goodbit;
  __gc_ = 0;
  sentry __sen(*this, true);
  if (__sen) {

    try {

      if (__n == numeric_limits<streamsize>::max()) {
        while (true) {
          typename traits_type::int_type __i = this->rdbuf()->sbumpc();
          if (traits_type::eq_int_type(__i, traits_type::eof())) {
            __state |= ios_base::eofbit;
            break;
          }
          __inc_gcount();
          if (traits_type::eq_int_type(__i, __dlm))
            break;
        }
      } else {
        while (__gc_ < __n) {
          typename traits_type::int_type __i = this->rdbuf()->sbumpc();
          if (traits_type::eq_int_type(__i, traits_type::eof())) {
            __state |= ios_base::eofbit;
            break;
          }
          __inc_gcount();
          if (traits_type::eq_int_type(__i, __dlm))
            break;
        }
      }

    } catch (...) {
      __state |= ios_base::badbit;
      this->__setstate_nothrow(__state);
      if (this->exceptions() & ios_base::badbit) {
        throw;
      }
    }

    this->setstate(__state);
  }
  return *this;
}

template <class _CharT, class _Traits>
typename basic_istream<_CharT, _Traits>::int_type basic_istream<_CharT, _Traits>::peek() {
  ios_base::iostate __state = ios_base::goodbit;
  __gc_ = 0;
  int_type __r = traits_type::eof();
  sentry __sen(*this, true);
  if (__sen) {

    try {

      __r = this->rdbuf()->sgetc();
      if (traits_type::eq_int_type(__r, traits_type::eof()))
        __state |= ios_base::eofbit;

    } catch (...) {
      __state |= ios_base::badbit;
      this->__setstate_nothrow(__state);
      if (this->exceptions() & ios_base::badbit) {
        throw;
      }
    }

    this->setstate(__state);
  }
  return __r;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::read(char_type* __s, streamsize __n) {
  ios_base::iostate __state = ios_base::goodbit;
  __gc_ = 0;
  sentry __sen(*this, true);
  if (__sen) {

    try {

      __gc_ = this->rdbuf()->sgetn(__s, __n);
      if (__gc_ != __n)
        __state |= ios_base::failbit | ios_base::eofbit;

    } catch (...) {
      __state |= ios_base::badbit;
      this->__setstate_nothrow(__state);
      if (this->exceptions() & ios_base::badbit) {
        throw;
      }
    }

  } else {
    __state |= ios_base::failbit;
  }
  this->setstate(__state);
  return *this;
}

template <class _CharT, class _Traits>
streamsize basic_istream<_CharT, _Traits>::readsome(char_type* __s, streamsize __n) {
  ios_base::iostate __state = ios_base::goodbit;
  __gc_ = 0;
  sentry __sen(*this, true);
  if (__sen) {

    try {

      streamsize __c = this->rdbuf()->in_avail();
      switch (__c) {
      case -1:
        __state |= ios_base::eofbit;
        break;
      case 0:
        break;
      default:
        __n = std::min(__c, __n);
        __gc_ = this->rdbuf()->sgetn(__s, __n);
        if (__gc_ != __n)
          __state |= ios_base::failbit | ios_base::eofbit;
        break;
      }

    } catch (...) {
      __state |= ios_base::badbit;
      this->__setstate_nothrow(__state);
      if (this->exceptions() & ios_base::badbit) {
        throw;
      }
    }

  } else {
    __state |= ios_base::failbit;
  }
  this->setstate(__state);
  return __gc_;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::putback(char_type __c) {
  ios_base::iostate __state = this->rdstate() & ~ios_base::eofbit;
  __gc_ = 0;
  this->clear(__state);
  sentry __sen(*this, true);
  if (__sen) {

    try {

      if (this->rdbuf() == nullptr || this->rdbuf()->sputbackc(__c) == traits_type::eof())
        __state |= ios_base::badbit;

    } catch (...) {
      __state |= ios_base::badbit;
      this->__setstate_nothrow(__state);
      if (this->exceptions() & ios_base::badbit) {
        throw;
      }
    }

  } else {
    __state |= ios_base::failbit;
  }
  this->setstate(__state);
  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::unget() {
  ios_base::iostate __state = this->rdstate() & ~ios_base::eofbit;
  __gc_ = 0;
  this->clear(__state);
  sentry __sen(*this, true);
  if (__sen) {

    try {

      if (this->rdbuf() == nullptr || this->rdbuf()->sungetc() == traits_type::eof())
        __state |= ios_base::badbit;

    } catch (...) {
      __state |= ios_base::badbit;
      this->__setstate_nothrow(__state);
      if (this->exceptions() & ios_base::badbit) {
        throw;
      }
    }

  } else {
    __state |= ios_base::failbit;
  }
  this->setstate(__state);
  return *this;
}

template <class _CharT, class _Traits>
int basic_istream<_CharT, _Traits>::sync() {
  ios_base::iostate __state = ios_base::goodbit;
  sentry __sen(*this, true);
  if (this->rdbuf() == nullptr)
    return -1;

  int __r = 0;
  if (__sen) {

    try {

      if (this->rdbuf()->pubsync() == -1) {
        __state |= ios_base::badbit;
        __r = -1;
      }

    } catch (...) {
      __state |= ios_base::badbit;
      this->__setstate_nothrow(__state);
      if (this->exceptions() & ios_base::badbit) {
        throw;
      }
    }

    this->setstate(__state);
  }
  return __r;
}

template <class _CharT, class _Traits>
typename basic_istream<_CharT, _Traits>::pos_type basic_istream<_CharT, _Traits>::tellg() {
  ios_base::iostate __state = ios_base::goodbit;
  pos_type __r(-1);
  sentry __sen(*this, true);
  if (__sen) {

    try {

      __r = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::in);

    } catch (...) {
      __state |= ios_base::badbit;
      this->__setstate_nothrow(__state);
      if (this->exceptions() & ios_base::badbit) {
        throw;
      }
    }

    this->setstate(__state);
  }
  return __r;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::seekg(pos_type __pos) {
  ios_base::iostate __state = this->rdstate() & ~ios_base::eofbit;
  this->clear(__state);
  sentry __sen(*this, true);
  if (__sen) {

    try {

      if (this->rdbuf()->pubseekpos(__pos, ios_base::in) == pos_type(-1))
        __state |= ios_base::failbit;

    } catch (...) {
      __state |= ios_base::badbit;
      this->__setstate_nothrow(__state);
      if (this->exceptions() & ios_base::badbit) {
        throw;
      }
    }

    this->setstate(__state);
  }
  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::seekg(off_type __off, ios_base::seekdir __dir) {
  ios_base::iostate __state = this->rdstate() & ~ios_base::eofbit;
  this->clear(__state);
  sentry __sen(*this, true);
  if (__sen) {

    try {

      if (this->rdbuf()->pubseekoff(__off, __dir, ios_base::in) == pos_type(-1))
        __state |= ios_base::failbit;

    } catch (...) {
      __state |= ios_base::badbit;
      this->__setstate_nothrow(__state);
      if (this->exceptions() & ios_base::badbit) {
        throw;
      }
    }

    this->setstate(__state);
  }
  return *this;
}

template <class _CharT, class _Traits>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>& ws(basic_istream<_CharT, _Traits>& __is) {
  ios_base::iostate __state = ios_base::goodbit;
  typename basic_istream<_CharT, _Traits>::sentry __sen(__is, true);
  if (__sen) {

    try {

      const ctype<_CharT>& __ct = std::use_facet<ctype<_CharT> >(__is.getloc());
      while (true) {
        typename _Traits::int_type __i = __is.rdbuf()->sgetc();
        if (_Traits::eq_int_type(__i, _Traits::eof())) {
          __state |= ios_base::eofbit;
          break;
        }
        if (!__ct.is(__ct.space, _Traits::to_char_type(__i)))
          break;
        __is.rdbuf()->sbumpc();
      }

    } catch (...) {
      __state |= ios_base::badbit;
      __is.__setstate_nothrow(__state);
      if (__is.exceptions() & ios_base::badbit) {
        throw;
      }
    }

    __is.setstate(__state);
  }
  return __is;
}

template <class _Stream, class _Tp, class = void>
struct __is_istreamable : false_type {};

template <class _Stream, class _Tp>
struct __is_istreamable<_Stream, _Tp, decltype(std::declval<_Stream>() >> std::declval<_Tp>(), void())> : true_type {};

template <class _Stream,
          class _Tp,
          __enable_if_t< _And<is_base_of<ios_base, _Stream>, __is_istreamable<_Stream&, _Tp&&> >::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Stream&& operator>>(_Stream&& __is, _Tp&& __x) {
  __is >> std::forward<_Tp>(__x);
  return std::move(__is);
}

template <class _CharT, class _Traits>
class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits> {
public:

  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef typename traits_type::int_type int_type;
  typedef typename traits_type::pos_type pos_type;
  typedef typename traits_type::off_type off_type;


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit basic_iostream(basic_streambuf<char_type, traits_type>* __sb)
      : basic_istream<_CharT, _Traits>(__sb) {}

  ~basic_iostream() override;

protected:
  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_iostream(basic_iostream&& __rhs);


  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_iostream& operator=(basic_iostream&& __rhs);

  inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(basic_iostream& __rhs) {
    basic_istream<char_type, traits_type>::swap(__rhs);
  }
};

template <class _CharT, class _Traits>
basic_iostream<_CharT, _Traits>::basic_iostream(basic_iostream&& __rhs)
    : basic_istream<_CharT, _Traits>(std::move(__rhs)) {}

template <class _CharT, class _Traits>
basic_iostream<_CharT, _Traits>& basic_iostream<_CharT, _Traits>::operator=(basic_iostream&& __rhs) {
  swap(__rhs);
  return *this;
}

template <class _CharT, class _Traits>
basic_iostream<_CharT, _Traits>::~basic_iostream() {}

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
operator>>(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT, _Traits, _Allocator>& __str) {
  ios_base::iostate __state = ios_base::goodbit;
  typename basic_istream<_CharT, _Traits>::sentry __sen(__is);
  if (__sen) {

    try {

      __str.clear();
      streamsize __n = __is.width();
      if (__n <= 0)
        __n = __str.max_size();
      if (__n <= 0)
        __n = numeric_limits<streamsize>::max();
      streamsize __c = 0;
      const ctype<_CharT>& __ct = std::use_facet<ctype<_CharT> >(__is.getloc());
      while (__c < __n) {
        typename _Traits::int_type __i = __is.rdbuf()->sgetc();
        if (_Traits::eq_int_type(__i, _Traits::eof())) {
          __state |= ios_base::eofbit;
          break;
        }
        _CharT __ch = _Traits::to_char_type(__i);
        if (__ct.is(__ct.space, __ch))
          break;
        __str.push_back(__ch);
        ++__c;
        __is.rdbuf()->sbumpc();
      }
      __is.width(0);
      if (__c == 0)
        __state |= ios_base::failbit;

    } catch (...) {
      __state |= ios_base::badbit;
      __is.__setstate_nothrow(__state);
      if (__is.exceptions() & ios_base::badbit) {
        throw;
      }
    }

    __is.setstate(__state);
  }
  return __is;
}

template <class _CharT, class _Traits, class _Allocator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm) {
  ios_base::iostate __state = ios_base::goodbit;
  typename basic_istream<_CharT, _Traits>::sentry __sen(__is, true);
  if (__sen) {

    try {

      __str.clear();
      streamsize __extr = 0;
      while (true) {
        typename _Traits::int_type __i = __is.rdbuf()->sbumpc();
        if (_Traits::eq_int_type(__i, _Traits::eof())) {
          __state |= ios_base::eofbit;
          break;
        }
        ++__extr;
        _CharT __ch = _Traits::to_char_type(__i);
        if (_Traits::eq(__ch, __dlm))
          break;
        __str.push_back(__ch);
        if (__str.size() == __str.max_size()) {
          __state |= ios_base::failbit;
          break;
        }
      }
      if (__extr == 0)
        __state |= ios_base::failbit;

    } catch (...) {
      __state |= ios_base::badbit;
      __is.__setstate_nothrow(__state);
      if (__is.exceptions() & ios_base::badbit) {
        throw;
      }
    }

    __is.setstate(__state);
  }
  return __is;
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT, _Traits, _Allocator>& __str) {
  return std::getline(__is, __str, __is.widen('\n'));
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>&& __is, basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm) {
  return std::getline(__is, __str, __dlm);
}

template <class _CharT, class _Traits, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>&& __is, basic_string<_CharT, _Traits, _Allocator>& __str) {
  return std::getline(__is, __str, __is.widen('\n'));
}

template <class _CharT, class _Traits, size_t _Size>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) basic_istream<_CharT, _Traits>&
operator>>(basic_istream<_CharT, _Traits>& __is, bitset<_Size>& __x) {
  ios_base::iostate __state = ios_base::goodbit;
  typename basic_istream<_CharT, _Traits>::sentry __sen(__is);
  if (__sen) {

    try {

      basic_string<_CharT, _Traits> __str;
      const ctype<_CharT>& __ct = std::use_facet<ctype<_CharT> >(__is.getloc());
      size_t __c = 0;
      _CharT __zero = __ct.widen('0');
      _CharT __one = __ct.widen('1');
      while (__c != _Size) {
        typename _Traits::int_type __i = __is.rdbuf()->sgetc();
        if (_Traits::eq_int_type(__i, _Traits::eof())) {
          __state |= ios_base::eofbit;
          break;
        }
        _CharT __ch = _Traits::to_char_type(__i);
        if (!_Traits::eq(__ch, __zero) && !_Traits::eq(__ch, __one))
          break;
        __str.push_back(__ch);
        ++__c;
        __is.rdbuf()->sbumpc();
      }
      __x = bitset<_Size>(__str);
      if (_Size > 0 && __c == 0)
        __state |= ios_base::failbit;

    } catch (...) {
      __state |= ios_base::badbit;
      __is.__setstate_nothrow(__state);
      if (__is.exceptions() & ios_base::badbit) {
        throw;
      }
    }

    __is.setstate(__state);
  }
  return __is;
}

extern template class __attribute__((__visibility__("default"))) basic_istream<char>;

extern template class __attribute__((__visibility__("default"))) basic_istream<wchar_t>;

extern template class __attribute__((__visibility__("default"))) basic_iostream<char>;

}}
# 1362 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/istream" 3
#pragma clang diagnostic pop




# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ostream" 1 3
# 187 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ostream" 3







# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/format" 1 3
# 228 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/format" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/array" 1 3
# 117 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/array" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare_three_way.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare_three_way.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/three_way_comp_ref_type.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/three_way_comp_ref_type.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/three_way_comp_ref_type.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/three_way_comp_ref_type.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/three_way_comp_ref_type.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/three_way_comp_ref_type.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/three_way_comp_ref_type.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/three_way_comp_ref_type.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 72 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/three_way_comp_ref_type.h" 3
}}
# 72 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/three_way_comp_ref_type.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare_three_way.h" 2 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare_three_way.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare_three_way.h" 2 3

#pragma clang diagnostic push
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare_three_way.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare_three_way.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare_three_way.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare_three_way.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare_three_way.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare_three_way.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 121 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare_three_way.h" 3
}}
# 121 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/lexicographical_compare_three_way.h" 3
#pragma clang diagnostic pop
# 118 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/array" 2 3
# 135 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/array" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/empty.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/empty.h" 3


#pragma clang diagnostic push
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/empty.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/empty.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/empty.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/empty.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/empty.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/empty.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

struct __empty {};

}}
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__utility/empty.h" 3
#pragma clang diagnostic pop
# 136 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/array" 2 3
# 161 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/array" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 165 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/array" 2 3

#pragma clang diagnostic push
# 166 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/array" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 166 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/array" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 166 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/array" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 166 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/array" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 166 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/array" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 166 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/array" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, size_t _Size>
struct array {
  using __trivially_relocatable = __conditional_t<__libcpp_is_trivially_relocatable<_Tp>::value, array, void>;


  using __self = array;
  using value_type = _Tp;
  using reference = value_type&;
  using const_reference = const value_type&;
  using pointer = value_type*;
  using const_pointer = const value_type*;




  using iterator = pointer;
  using const_iterator = const_pointer;

  using size_type = size_t;
  using difference_type = ptrdiff_t;
  using reverse_iterator = std::reverse_iterator<iterator>;
  using const_reverse_iterator = std::reverse_iterator<const_iterator>;

  _Tp __elems_[_Size];


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void fill(const value_type& __u) {
    std::fill_n(data(), _Size, __u);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(array& __a) noexcept(__is_nothrow_swappable_v<_Tp>) {
    std::swap_ranges(data(), data() + _Size, __a.data());
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr iterator begin() noexcept { return iterator(data()); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_iterator begin() const noexcept {
    return const_iterator(data());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr iterator end() noexcept { return iterator(data() + _Size); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_iterator end() const noexcept {
    return const_iterator(data() + _Size);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator rbegin() noexcept {
    return reverse_iterator(end());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reverse_iterator rbegin() const noexcept {
    return const_reverse_iterator(end());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator rend() noexcept {
    return reverse_iterator(begin());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reverse_iterator rend() const noexcept {
    return const_reverse_iterator(begin());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_iterator cbegin() const noexcept { return begin(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_iterator cend() const noexcept { return end(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reverse_iterator crbegin() const noexcept {
    return rbegin();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reverse_iterator crend() const noexcept { return rend(); }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr size_type size() const noexcept { return _Size; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr size_type max_size() const noexcept { return _Size; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool empty() const noexcept { return _Size == 0; }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference operator[](size_type __n) noexcept {
    ((void)0);
    return __elems_[__n];
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reference operator[](size_type __n) const noexcept {
    ((void)0);
    return __elems_[__n];
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference at(size_type __n) {
    if (__n >= _Size)
      __throw_out_of_range("array::at");
    return __elems_[__n];
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reference at(size_type __n) const {
    if (__n >= _Size)
      __throw_out_of_range("array::at");
    return __elems_[__n];
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference front() noexcept { return (*this)[0]; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reference front() const noexcept { return (*this)[0]; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference back() noexcept { return (*this)[_Size - 1]; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reference back() const noexcept {
    return (*this)[_Size - 1];
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr value_type* data() noexcept { return __elems_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const value_type* data() const noexcept { return __elems_; }
};

template <class _Tp>
struct array<_Tp, 0> {

  typedef array __self;
  typedef _Tp value_type;
  typedef value_type& reference;
  typedef const value_type& const_reference;
  typedef value_type* iterator;
  typedef const value_type* const_iterator;
  typedef value_type* pointer;
  typedef const value_type* const_pointer;
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef std::reverse_iterator<iterator> reverse_iterator;
  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

  typedef __conditional_t<is_const<_Tp>::value, const __empty, __empty> _EmptyType;

  struct _ArrayInStructT {
    _Tp __data_[1];
  };
  alignas(_ArrayInStructT) _EmptyType __elems_[sizeof(_ArrayInStructT)];

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr value_type* data() noexcept { return nullptr; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const value_type* data() const noexcept { return nullptr; }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void fill(const value_type&) {
    static_assert(!is_const<_Tp>::value, "cannot fill zero-sized array of type 'const T'");
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(array&) noexcept {
    static_assert(!is_const<_Tp>::value, "cannot swap zero-sized array of type 'const T'");
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr iterator begin() noexcept { return iterator(data()); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_iterator begin() const noexcept {
    return const_iterator(data());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr iterator end() noexcept { return iterator(data()); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_iterator end() const noexcept {
    return const_iterator(data());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator rbegin() noexcept {
    return reverse_iterator(end());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reverse_iterator rbegin() const noexcept {
    return const_reverse_iterator(end());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reverse_iterator rend() noexcept {
    return reverse_iterator(begin());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reverse_iterator rend() const noexcept {
    return const_reverse_iterator(begin());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_iterator cbegin() const noexcept { return begin(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_iterator cend() const noexcept { return end(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reverse_iterator crbegin() const noexcept {
    return rbegin();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reverse_iterator crend() const noexcept { return rend(); }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr size_type size() const noexcept { return 0; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr size_type max_size() const noexcept { return 0; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr bool empty() const noexcept { return true; }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference operator[](size_type) noexcept {
    ((void)0);
    __libcpp_unreachable();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reference operator[](size_type) const noexcept {
    ((void)0);
    __libcpp_unreachable();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference at(size_type) {
    __throw_out_of_range("array<T, 0>::at");
    __libcpp_unreachable();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reference at(size_type) const {
    __throw_out_of_range("array<T, 0>::at");
    __libcpp_unreachable();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference front() noexcept {
    ((void)0);
    __libcpp_unreachable();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reference front() const noexcept {
    ((void)0);
    __libcpp_unreachable();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr reference back() noexcept {
    ((void)0);
    __libcpp_unreachable();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const_reference back() const noexcept {
    ((void)0);
    __libcpp_unreachable();
  }
};


template <class _Tp, class... _Args, class = enable_if_t<__all<_IsSame<_Tp, _Args>::value...>::value> >
array(_Tp, _Args...) -> array<_Tp, 1 + sizeof...(_Args)>;


template <class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator==(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y) {
  return std::equal(__x.begin(), __x.end(), __y.begin());
}



template <class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y) {
  return !(__x == __y);
}

template <class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y) {
  return std::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());
}

template <class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y) {
  return __y < __x;
}

template <class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<=(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y) {
  return !(__y < __x);
}

template <class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>=(const array<_Tp, _Size>& __x, const array<_Tp, _Size>& __y) {
  return !(__x < __y);
}
# 431 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/array" 3
template <class _Tp, size_t _Size, __enable_if_t<_Size == 0 || __is_swappable_v<_Tp>, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(array<_Tp, _Size>& __x, array<_Tp, _Size>& __y)
    noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}

template <class _Tp, size_t _Size>
struct tuple_size<array<_Tp, _Size> > : public integral_constant<size_t, _Size> {};

template <size_t _Ip, class _Tp, size_t _Size>
struct tuple_element<_Ip, array<_Tp, _Size> > {
  static_assert(_Ip < _Size, "Index out of bounds in std::tuple_element<> (std::array)");
  typedef _Tp type;
};

template <size_t _Ip, class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp& get(array<_Tp, _Size>& __a) noexcept {
  static_assert(_Ip < _Size, "Index out of bounds in std::get<> (std::array)");
  return __a.__elems_[_Ip];
}

template <size_t _Ip, class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Tp& get(const array<_Tp, _Size>& __a) noexcept {
  static_assert(_Ip < _Size, "Index out of bounds in std::get<> (const std::array)");
  return __a.__elems_[_Ip];
}

template <size_t _Ip, class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr _Tp&& get(array<_Tp, _Size>&& __a) noexcept {
  static_assert(_Ip < _Size, "Index out of bounds in std::get<> (std::array &&)");
  return std::move(__a.__elems_[_Ip]);
}

template <size_t _Ip, class _Tp, size_t _Size>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr const _Tp&& get(const array<_Tp, _Size>&& __a) noexcept {
  static_assert(_Ip < _Size, "Index out of bounds in std::get<> (const std::array &&)");
  return std::move(__a.__elems_[_Ip]);
}
# 502 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/array" 3
}}
# 502 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/array" 3
#pragma clang diagnostic pop
# 232 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/format" 2 3
# 245 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/format" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 1 3
# 260 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_out_result.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_out_result.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_out_result.h" 2 3

#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_out_result.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_out_result.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_out_result.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_out_result.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_out_result.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_out_result.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_out_result.h" 3
}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_out_result.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy.h" 2 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy.h" 2 3
# 261 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/deque.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/deque.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/deque.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/deque.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/deque.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/deque.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/deque.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/deque.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Allocator = allocator<_Tp> >
class deque;

}}
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/deque.h" 3
#pragma clang diagnostic pop
# 264 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/queue.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/queue.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/vector.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/vector.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/vector.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/vector.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/vector.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/vector.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/vector.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/vector.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Alloc = allocator<_Tp> >
class vector;

}}
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/vector.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/queue.h" 2 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/queue.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/queue.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/queue.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/queue.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/queue.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/queue.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/queue.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Container = deque<_Tp> >
class queue;

template <class _Tp, class _Container = vector<_Tp>, class _Compare = less<typename _Container::value_type> >
class priority_queue;

}}
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/queue.h" 3
#pragma clang diagnostic pop
# 265 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 2 3








# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 1 3
# 205 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temp_value.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temp_value.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temp_value.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temp_value.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temp_value.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temp_value.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temp_value.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temp_value.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Alloc>
struct __temp_value {
  typedef allocator_traits<_Alloc> _Traits;




  union {
    _Tp __v;
  };

  _Alloc& __a;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* __addr() {



    return std::addressof(__v);

  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp& get() { return *__addr(); }

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__no_sanitize__("cfi"))) __temp_value(_Alloc& __alloc, _Args&&... __args)
      : __a(__alloc) {
    _Traits::construct(__a, __addr(), std::forward<_Args>(__args)...);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__temp_value() { _Traits::destroy(__a, __addr()); }
};

}}
# 56 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/temp_value.h" 3
#pragma clang diagnostic pop
# 206 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 2 3







# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__split_buffer" 1 3
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__split_buffer" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 46 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__split_buffer" 2 3

#pragma clang diagnostic push
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__split_buffer" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__split_buffer" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__split_buffer" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__split_buffer" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__split_buffer" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__split_buffer" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {





template <class _Tp, class _Allocator = allocator<_Tp> >
struct __split_buffer {
public:
  using value_type = _Tp;
  using allocator_type = _Allocator;
  using __alloc_rr = __libcpp_remove_reference_t<allocator_type>;
  using __alloc_traits = allocator_traits<__alloc_rr>;
  using reference = value_type&;
  using const_reference = const value_type&;
  using size_type = typename __alloc_traits::size_type;
  using difference_type = typename __alloc_traits::difference_type;
  using pointer = typename __alloc_traits::pointer;
  using const_pointer = typename __alloc_traits::const_pointer;
  using iterator = pointer;
  using const_iterator = const_pointer;





  using __trivially_relocatable = __conditional_t<
      __libcpp_is_trivially_relocatable<pointer>::value && __libcpp_is_trivially_relocatable<allocator_type>::value,
      __split_buffer,
      void>;

  pointer __first_;
  pointer __begin_;
  pointer __end_;
  __compressed_pair<pointer, allocator_type> __end_cap_;

  using __alloc_ref = __add_lvalue_reference_t<allocator_type>;
  using __alloc_const_ref = __add_lvalue_reference_t<allocator_type>;

  __split_buffer(const __split_buffer&) = delete;
  __split_buffer& operator=(const __split_buffer&) = delete;

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __split_buffer()
      noexcept(is_nothrow_default_constructible<allocator_type>::value)
      : __first_(nullptr), __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr, __default_init_tag()) {}

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __split_buffer(__alloc_rr& __a)
      : __first_(nullptr), __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr, __a) {}

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __split_buffer(const __alloc_rr& __a)
      : __first_(nullptr), __begin_(nullptr), __end_(nullptr), __end_cap_(nullptr, __a) {}

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  __split_buffer(size_type __cap, size_type __start, __alloc_rr& __a);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __split_buffer(__split_buffer&& __c)
      noexcept(is_nothrow_move_constructible<allocator_type>::value);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __split_buffer(__split_buffer&& __c, const __alloc_rr& __a);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __split_buffer& operator=(__split_buffer&& __c)
      noexcept((__alloc_traits::propagate_on_container_move_assignment::value && is_nothrow_move_assignable<allocator_type>::value) || !__alloc_traits::propagate_on_container_move_assignment::value);



                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__split_buffer();

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __alloc_rr& __alloc() noexcept { return __end_cap_.second(); }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const __alloc_rr& __alloc() const noexcept {
    return __end_cap_.second();
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer& __end_cap() noexcept { return __end_cap_.first(); }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const pointer& __end_cap() const noexcept {
    return __end_cap_.first();
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator begin() noexcept { return __begin_; }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator begin() const noexcept { return __begin_; }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator end() noexcept { return __end_; }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator end() const noexcept { return __end_; }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void clear() noexcept { __destruct_at_end(__begin_); }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type size() const {
    return static_cast<size_type>(__end_ - __begin_);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool empty() const { return __end_ == __begin_; }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type capacity() const {
    return static_cast<size_type>(__end_cap() - __first_);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __front_spare() const {
    return static_cast<size_type>(__begin_ - __first_);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __back_spare() const {
    return static_cast<size_type>(__end_cap() - __end_);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference front() { return *__begin_; }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference front() const { return *__begin_; }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference back() { return *(__end_ - 1); }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference back() const { return *(__end_ - 1); }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reserve(size_type __n);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void shrink_to_fit() noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push_front(const_reference __x);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push_back(const_reference __x);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push_front(value_type&& __x);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push_back(value_type&& __x);

  template <class... _Args>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void emplace_back(_Args&&... __args);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void pop_front() { __destruct_at_begin(__begin_ + 1); }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void pop_back() { __destruct_at_end(__end_ - 1); }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __construct_at_end(size_type __n);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __construct_at_end(size_type __n, const_reference __x);

  template <class _InputIter, __enable_if_t<__has_exactly_input_iterator_category<_InputIter>::value, int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __construct_at_end(_InputIter __first, _InputIter __last);

  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __construct_at_end(_ForwardIterator __first, _ForwardIterator __last);

  template <class _Iterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __construct_at_end_with_sentinel(_Iterator __first, _Sentinel __last);

  template <class _Iterator>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __construct_at_end_with_size(_Iterator __first, size_type __n);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __destruct_at_begin(pointer __new_begin) {
    __destruct_at_begin(__new_begin, is_trivially_destructible<value_type>());
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __destruct_at_begin(pointer __new_begin, false_type);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __destruct_at_begin(pointer __new_begin, true_type);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __destruct_at_end(pointer __new_last) noexcept {
    __destruct_at_end(__new_last, false_type());
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __destruct_at_end(pointer __new_last, false_type) noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __destruct_at_end(pointer __new_last, true_type) noexcept;

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(__split_buffer& __x)
      noexcept(!__alloc_traits::propagate_on_container_swap::value || __is_nothrow_swappable_v<__alloc_rr>);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __invariants() const;

private:
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(__split_buffer& __c, true_type)
      noexcept(is_nothrow_move_assignable<allocator_type>::value) {
    __alloc() = std::move(__c.__alloc());
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(__split_buffer&, false_type) noexcept {}

  struct _ConstructTransaction {

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit _ConstructTransaction(pointer* __p, size_type __n) noexcept
        : __pos_(*__p),
          __end_(*__p + __n),
          __dest_(__p) {}

                                  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~_ConstructTransaction() { *__dest_ = __pos_; }

    pointer __pos_;
    const pointer __end_;

  private:
    pointer* __dest_;
  };
};

template <class _Tp, class _Allocator>
                              bool __split_buffer<_Tp, _Allocator>::__invariants() const {
  if (__first_ == nullptr) {
    if (__begin_ != nullptr)
      return false;
    if (__end_ != nullptr)
      return false;
    if (__end_cap() != nullptr)
      return false;
  } else {
    if (__begin_ < __first_)
      return false;
    if (__end_ < __begin_)
      return false;
    if (__end_cap() < __end_)
      return false;
  }
  return true;
}






template <class _Tp, class _Allocator>
                              void __split_buffer<_Tp, _Allocator>::__construct_at_end(size_type __n) {
  _ConstructTransaction __tx(&this->__end_, __n);
  for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_) {
    __alloc_traits::construct(this->__alloc(), std::__to_address(__tx.__pos_));
  }
}







template <class _Tp, class _Allocator>
                              void
__split_buffer<_Tp, _Allocator>::__construct_at_end(size_type __n, const_reference __x) {
  _ConstructTransaction __tx(&this->__end_, __n);
  for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_) {
    __alloc_traits::construct(this->__alloc(), std::__to_address(__tx.__pos_), __x);
  }
}

template <class _Tp, class _Allocator>
template <class _InputIter, __enable_if_t<__has_exactly_input_iterator_category<_InputIter>::value, int> >
                              void
__split_buffer<_Tp, _Allocator>::__construct_at_end(_InputIter __first, _InputIter __last) {
  __construct_at_end_with_sentinel(__first, __last);
}

template <class _Tp, class _Allocator>
template <class _Iterator, class _Sentinel>
                              void
__split_buffer<_Tp, _Allocator>::__construct_at_end_with_sentinel(_Iterator __first, _Sentinel __last) {
  __alloc_rr& __a = this->__alloc();
  for (; __first != __last; ++__first) {
    if (__end_ == __end_cap()) {
      size_type __old_cap = __end_cap() - __first_;
      size_type __new_cap = std::max<size_type>(2 * __old_cap, 8);
      __split_buffer __buf(__new_cap, 0, __a);
      for (pointer __p = __begin_; __p != __end_; ++__p, (void)++__buf.__end_)
        __alloc_traits::construct(__buf.__alloc(), std::__to_address(__buf.__end_), std::move(*__p));
      swap(__buf);
    }
    __alloc_traits::construct(__a, std::__to_address(this->__end_), *__first);
    ++this->__end_;
  }
}
template <class _Tp, class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
                              void
__split_buffer<_Tp, _Allocator>::__construct_at_end(_ForwardIterator __first, _ForwardIterator __last) {
  __construct_at_end_with_size(__first, std::distance(__first, __last));
}

template <class _Tp, class _Allocator>
template <class _ForwardIterator>
                              void
__split_buffer<_Tp, _Allocator>::__construct_at_end_with_size(_ForwardIterator __first, size_type __n) {
  _ConstructTransaction __tx(&this->__end_, __n);
  for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_, (void)++__first) {
    __alloc_traits::construct(this->__alloc(), std::__to_address(__tx.__pos_), *__first);
  }
}

template <class _Tp, class _Allocator>
                              inline void
__split_buffer<_Tp, _Allocator>::__destruct_at_begin(pointer __new_begin, false_type) {
  while (__begin_ != __new_begin)
    __alloc_traits::destroy(__alloc(), std::__to_address(__begin_++));
}

template <class _Tp, class _Allocator>
                              inline void
__split_buffer<_Tp, _Allocator>::__destruct_at_begin(pointer __new_begin, true_type) {
  __begin_ = __new_begin;
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__split_buffer<_Tp, _Allocator>::__destruct_at_end(pointer __new_last, false_type) noexcept {
  while (__new_last != __end_)
    __alloc_traits::destroy(__alloc(), std::__to_address(--__end_));
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__split_buffer<_Tp, _Allocator>::__destruct_at_end(pointer __new_last, true_type) noexcept {
  __end_ = __new_last;
}

template <class _Tp, class _Allocator>

__split_buffer<_Tp, _Allocator>::__split_buffer(size_type __cap, size_type __start, __alloc_rr& __a)
    : __end_cap_(nullptr, __a) {
  if (__cap == 0) {
    __first_ = nullptr;
  } else {
    auto __allocation = std::__allocate_at_least(__alloc(), __cap);
    __first_ = __allocation.ptr;
    __cap = __allocation.count;
  }
  __begin_ = __end_ = __first_ + __start;
  __end_cap() = __first_ + __cap;
}

template <class _Tp, class _Allocator>
                              __split_buffer<_Tp, _Allocator>::~__split_buffer() {
  clear();
  if (__first_)
    __alloc_traits::deallocate(__alloc(), __first_, capacity());
}

template <class _Tp, class _Allocator>
                              __split_buffer<_Tp, _Allocator>::__split_buffer(__split_buffer&& __c)
    noexcept(is_nothrow_move_constructible<allocator_type>::value)
    : __first_(std::move(__c.__first_)),
      __begin_(std::move(__c.__begin_)),
      __end_(std::move(__c.__end_)),
      __end_cap_(std::move(__c.__end_cap_)) {
  __c.__first_ = nullptr;
  __c.__begin_ = nullptr;
  __c.__end_ = nullptr;
  __c.__end_cap() = nullptr;
}

template <class _Tp, class _Allocator>

__split_buffer<_Tp, _Allocator>::__split_buffer(__split_buffer&& __c, const __alloc_rr& __a)
    : __end_cap_(nullptr, __a) {
  if (__a == __c.__alloc()) {
    __first_ = __c.__first_;
    __begin_ = __c.__begin_;
    __end_ = __c.__end_;
    __end_cap() = __c.__end_cap();
    __c.__first_ = nullptr;
    __c.__begin_ = nullptr;
    __c.__end_ = nullptr;
    __c.__end_cap() = nullptr;
  } else {
    auto __allocation = std::__allocate_at_least(__alloc(), __c.size());
    __first_ = __allocation.ptr;
    __begin_ = __end_ = __first_;
    __end_cap() = __first_ + __allocation.count;
    typedef move_iterator<iterator> _Ip;
    __construct_at_end(_Ip(__c.begin()), _Ip(__c.end()));
  }
}

template <class _Tp, class _Allocator>
                              __split_buffer<_Tp, _Allocator>&
__split_buffer<_Tp, _Allocator>::operator=(__split_buffer&& __c)
    noexcept((__alloc_traits::propagate_on_container_move_assignment::value && is_nothrow_move_assignable<allocator_type>::value) || !__alloc_traits::propagate_on_container_move_assignment::value) {


  clear();
  shrink_to_fit();
  __first_ = __c.__first_;
  __begin_ = __c.__begin_;
  __end_ = __c.__end_;
  __end_cap() = __c.__end_cap();
  __move_assign_alloc(__c, integral_constant<bool, __alloc_traits::propagate_on_container_move_assignment::value>());
  __c.__first_ = __c.__begin_ = __c.__end_ = __c.__end_cap() = nullptr;
  return *this;
}

template <class _Tp, class _Allocator>
                              void __split_buffer<_Tp, _Allocator>::swap(__split_buffer& __x)
    noexcept(!__alloc_traits::propagate_on_container_swap::value || __is_nothrow_swappable_v<__alloc_rr>) {
  std::swap(__first_, __x.__first_);
  std::swap(__begin_, __x.__begin_);
  std::swap(__end_, __x.__end_);
  std::swap(__end_cap(), __x.__end_cap());
  std::__swap_allocator(__alloc(), __x.__alloc());
}

template <class _Tp, class _Allocator>
                              void __split_buffer<_Tp, _Allocator>::reserve(size_type __n) {
  if (__n < capacity()) {
    __split_buffer<value_type, __alloc_rr&> __t(__n, 0, __alloc());
    __t.__construct_at_end(move_iterator<pointer>(__begin_), move_iterator<pointer>(__end_));
    std::swap(__first_, __t.__first_);
    std::swap(__begin_, __t.__begin_);
    std::swap(__end_, __t.__end_);
    std::swap(__end_cap(), __t.__end_cap());
  }
}

template <class _Tp, class _Allocator>
                              void __split_buffer<_Tp, _Allocator>::shrink_to_fit() noexcept {
  if (capacity() > size()) {

    try {

      __split_buffer<value_type, __alloc_rr&> __t(size(), 0, __alloc());
      __t.__construct_at_end(move_iterator<pointer>(__begin_), move_iterator<pointer>(__end_));
      __t.__end_ = __t.__begin_ + (__end_ - __begin_);
      std::swap(__first_, __t.__first_);
      std::swap(__begin_, __t.__begin_);
      std::swap(__end_, __t.__end_);
      std::swap(__end_cap(), __t.__end_cap());

    } catch (...) {
    }

  }
}

template <class _Tp, class _Allocator>
                              void __split_buffer<_Tp, _Allocator>::push_front(const_reference __x) {
  if (__begin_ == __first_) {
    if (__end_ < __end_cap()) {
      difference_type __d = __end_cap() - __end_;
      __d = (__d + 1) / 2;
      __begin_ = std::move_backward(__begin_, __end_, __end_ + __d);
      __end_ += __d;
    } else {
      size_type __c = std::max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1);
      __split_buffer<value_type, __alloc_rr&> __t(__c, (__c + 3) / 4, __alloc());
      __t.__construct_at_end(move_iterator<pointer>(__begin_), move_iterator<pointer>(__end_));
      std::swap(__first_, __t.__first_);
      std::swap(__begin_, __t.__begin_);
      std::swap(__end_, __t.__end_);
      std::swap(__end_cap(), __t.__end_cap());
    }
  }
  __alloc_traits::construct(__alloc(), std::__to_address(__begin_ - 1), __x);
  --__begin_;
}

template <class _Tp, class _Allocator>
                              void __split_buffer<_Tp, _Allocator>::push_front(value_type&& __x) {
  if (__begin_ == __first_) {
    if (__end_ < __end_cap()) {
      difference_type __d = __end_cap() - __end_;
      __d = (__d + 1) / 2;
      __begin_ = std::move_backward(__begin_, __end_, __end_ + __d);
      __end_ += __d;
    } else {
      size_type __c = std::max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1);
      __split_buffer<value_type, __alloc_rr&> __t(__c, (__c + 3) / 4, __alloc());
      __t.__construct_at_end(move_iterator<pointer>(__begin_), move_iterator<pointer>(__end_));
      std::swap(__first_, __t.__first_);
      std::swap(__begin_, __t.__begin_);
      std::swap(__end_, __t.__end_);
      std::swap(__end_cap(), __t.__end_cap());
    }
  }
  __alloc_traits::construct(__alloc(), std::__to_address(__begin_ - 1), std::move(__x));
  --__begin_;
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__split_buffer<_Tp, _Allocator>::push_back(const_reference __x) {
  if (__end_ == __end_cap()) {
    if (__begin_ > __first_) {
      difference_type __d = __begin_ - __first_;
      __d = (__d + 1) / 2;
      __end_ = std::move(__begin_, __end_, __begin_ - __d);
      __begin_ -= __d;
    } else {
      size_type __c = std::max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1);
      __split_buffer<value_type, __alloc_rr&> __t(__c, __c / 4, __alloc());
      __t.__construct_at_end(move_iterator<pointer>(__begin_), move_iterator<pointer>(__end_));
      std::swap(__first_, __t.__first_);
      std::swap(__begin_, __t.__begin_);
      std::swap(__end_, __t.__end_);
      std::swap(__end_cap(), __t.__end_cap());
    }
  }
  __alloc_traits::construct(__alloc(), std::__to_address(__end_), __x);
  ++__end_;
}

template <class _Tp, class _Allocator>
                              void __split_buffer<_Tp, _Allocator>::push_back(value_type&& __x) {
  if (__end_ == __end_cap()) {
    if (__begin_ > __first_) {
      difference_type __d = __begin_ - __first_;
      __d = (__d + 1) / 2;
      __end_ = std::move(__begin_, __end_, __begin_ - __d);
      __begin_ -= __d;
    } else {
      size_type __c = std::max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1);
      __split_buffer<value_type, __alloc_rr&> __t(__c, __c / 4, __alloc());
      __t.__construct_at_end(move_iterator<pointer>(__begin_), move_iterator<pointer>(__end_));
      std::swap(__first_, __t.__first_);
      std::swap(__begin_, __t.__begin_);
      std::swap(__end_, __t.__end_);
      std::swap(__end_cap(), __t.__end_cap());
    }
  }
  __alloc_traits::construct(__alloc(), std::__to_address(__end_), std::move(__x));
  ++__end_;
}

template <class _Tp, class _Allocator>
template <class... _Args>
                              void __split_buffer<_Tp, _Allocator>::emplace_back(_Args&&... __args) {
  if (__end_ == __end_cap()) {
    if (__begin_ > __first_) {
      difference_type __d = __begin_ - __first_;
      __d = (__d + 1) / 2;
      __end_ = std::move(__begin_, __end_, __begin_ - __d);
      __begin_ -= __d;
    } else {
      size_type __c = std::max<size_type>(2 * static_cast<size_t>(__end_cap() - __first_), 1);
      __split_buffer<value_type, __alloc_rr&> __t(__c, __c / 4, __alloc());
      __t.__construct_at_end(move_iterator<pointer>(__begin_), move_iterator<pointer>(__end_));
      std::swap(__first_, __t.__first_);
      std::swap(__begin_, __t.__begin_);
      std::swap(__end_, __t.__end_);
      std::swap(__end_cap(), __t.__end_cap());
    }
  }
  __alloc_traits::construct(__alloc(), std::__to_address(__end_), std::forward<_Args>(__args)...);
  ++__end_;
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
swap(__split_buffer<_Tp, _Allocator>& __x, __split_buffer<_Tp, _Allocator>& __y) noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}

}}
# 581 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__split_buffer" 3
#pragma clang diagnostic pop
# 214 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 2 3
# 242 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 246 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 2 3

#pragma clang diagnostic push
# 247 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 247 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 247 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 247 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 247 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 247 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _ValueType, class _DiffType>
struct __deque_block_size {
  static const _DiffType value = sizeof(_ValueType) < 256 ? 4096 / sizeof(_ValueType) : 16;
};

template <class _ValueType,
          class _Pointer,
          class _Reference,
          class _MapPointer,
          class _DiffType,
          _DiffType _BS =





              __deque_block_size<_ValueType, _DiffType>::value

          >
class __deque_iterator {
  typedef _MapPointer __map_iterator;

public:
  typedef _Pointer pointer;
  typedef _DiffType difference_type;

private:
  __map_iterator __m_iter_;
  pointer __ptr_;

  static const difference_type __block_size;

public:
  typedef _ValueType value_type;
  typedef random_access_iterator_tag iterator_category;
  typedef _Reference reference;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __deque_iterator() noexcept

      : __m_iter_(nullptr),
        __ptr_(nullptr)

  {
  }

  template <class _Pp, class _Rp, class _MP, __enable_if_t<is_convertible<_Pp, pointer>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  __deque_iterator(const __deque_iterator<value_type, _Pp, _Rp, _MP, difference_type, _BS>& __it) noexcept
      : __m_iter_(__it.__m_iter_),
        __ptr_(__it.__ptr_) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference operator*() const { return *__ptr_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer operator->() const { return __ptr_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __deque_iterator& operator++() {
    if (++__ptr_ - *__m_iter_ == __block_size) {
      ++__m_iter_;
      __ptr_ = *__m_iter_;
    }
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __deque_iterator operator++(int) {
    __deque_iterator __tmp = *this;
    ++(*this);
    return __tmp;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __deque_iterator& operator--() {
    if (__ptr_ == *__m_iter_) {
      --__m_iter_;
      __ptr_ = *__m_iter_ + __block_size;
    }
    --__ptr_;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __deque_iterator operator--(int) {
    __deque_iterator __tmp = *this;
    --(*this);
    return __tmp;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __deque_iterator& operator+=(difference_type __n) {
    if (__n != 0) {
      __n += __ptr_ - *__m_iter_;
      if (__n > 0) {
        __m_iter_ += __n / __block_size;
        __ptr_ = *__m_iter_ + __n % __block_size;
      } else
      {
        difference_type __z = __block_size - 1 - __n;
        __m_iter_ -= __z / __block_size;
        __ptr_ = *__m_iter_ + (__block_size - 1 - __z % __block_size);
      }
    }
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __deque_iterator& operator-=(difference_type __n) { return *this += -__n; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __deque_iterator operator+(difference_type __n) const {
    __deque_iterator __t(*this);
    __t += __n;
    return __t;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __deque_iterator operator-(difference_type __n) const {
    __deque_iterator __t(*this);
    __t -= __n;
    return __t;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend __deque_iterator operator+(difference_type __n, const __deque_iterator& __it) {
    return __it + __n;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend difference_type operator-(const __deque_iterator& __x, const __deque_iterator& __y) {
    if (__x != __y)
      return (__x.__m_iter_ - __y.__m_iter_) * __block_size + (__x.__ptr_ - *__x.__m_iter_) -
             (__y.__ptr_ - *__y.__m_iter_);
    return 0;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference operator[](difference_type __n) const { return *(*this + __n); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool operator==(const __deque_iterator& __x, const __deque_iterator& __y) {
    return __x.__ptr_ == __y.__ptr_;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool operator!=(const __deque_iterator& __x, const __deque_iterator& __y) {
    return !(__x == __y);
  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool operator<(const __deque_iterator& __x, const __deque_iterator& __y) {
    return __x.__m_iter_ < __y.__m_iter_ || (__x.__m_iter_ == __y.__m_iter_ && __x.__ptr_ < __y.__ptr_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool operator>(const __deque_iterator& __x, const __deque_iterator& __y) {
    return __y < __x;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool operator<=(const __deque_iterator& __x, const __deque_iterator& __y) {
    return !(__y < __x);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool operator>=(const __deque_iterator& __x, const __deque_iterator& __y) {
    return !(__x < __y);
  }
# 425 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __deque_iterator(__map_iterator __m, pointer __p) noexcept
      : __m_iter_(__m),
        __ptr_(__p) {}

  template <class _Tp, class _Ap>
  friend class deque;
  template <class _Vp, class _Pp, class _Rp, class _MP, class _Dp, _Dp>
  friend class __deque_iterator;

  template <class>
  friend struct __segmented_iterator_traits;
};

template <class _ValueType, class _Pointer, class _Reference, class _MapPointer, class _DiffType, _DiffType _BlockSize>
struct __segmented_iterator_traits<
    __deque_iterator<_ValueType, _Pointer, _Reference, _MapPointer, _DiffType, _BlockSize> > {
private:
  using _Iterator = __deque_iterator<_ValueType, _Pointer, _Reference, _MapPointer, _DiffType, _BlockSize>;

public:
  using __is_segmented_iterator = true_type;
  using __segment_iterator = _MapPointer;
  using __local_iterator = _Pointer;

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __segment_iterator __segment(_Iterator __iter) { return __iter.__m_iter_; }
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __local_iterator __local(_Iterator __iter) { return __iter.__ptr_; }
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __local_iterator __begin(__segment_iterator __iter) { return *__iter; }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __local_iterator __end(__segment_iterator __iter) {
    return *__iter + _Iterator::__block_size;
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Iterator __compose(__segment_iterator __segment, __local_iterator __local) {
    if (__segment && __local == __end(__segment)) {
      ++__segment;
      return _Iterator(__segment, *__segment);
    }
    return _Iterator(__segment, __local);
  }
};

template <class _ValueType, class _Pointer, class _Reference, class _MapPointer, class _DiffType, _DiffType _BlockSize>
const _DiffType __deque_iterator<_ValueType, _Pointer, _Reference, _MapPointer, _DiffType, _BlockSize>::__block_size =
    __deque_block_size<_ValueType, _DiffType>::value;

template <class _Tp, class _Allocator >
class deque {
public:


  using value_type = _Tp;

  using allocator_type = _Allocator;
  using __alloc_traits = allocator_traits<allocator_type>;
  static_assert(__check_valid_allocator<allocator_type>::value, "");
  static_assert(is_same<typename allocator_type::value_type, value_type>::value,
                "Allocator::value_type must be same type as value_type");

  using size_type = typename __alloc_traits::size_type;
  using difference_type = typename __alloc_traits::difference_type;

  using pointer = typename __alloc_traits::pointer;
  using const_pointer = typename __alloc_traits::const_pointer;

  using __pointer_allocator = __rebind_alloc<__alloc_traits, pointer>;
  using __const_pointer_allocator = __rebind_alloc<__alloc_traits, const_pointer>;
  using __map = __split_buffer<pointer, __pointer_allocator>;
  using __map_alloc_traits = allocator_traits<__pointer_allocator>;
  using __map_pointer = typename __map_alloc_traits::pointer;
  using __map_const_pointer = typename allocator_traits<__const_pointer_allocator>::const_pointer;
  using __map_const_iterator = typename __map::const_iterator;

  using reference = value_type&;
  using const_reference = const value_type&;

  using iterator = __deque_iterator<value_type, pointer, reference, __map_pointer, difference_type>;
  using const_iterator =
      __deque_iterator<value_type, const_pointer, const_reference, __map_const_pointer, difference_type>;
  using reverse_iterator = std::reverse_iterator<iterator>;
  using const_reverse_iterator = std::reverse_iterator<const_iterator>;






  using __trivially_relocatable = __conditional_t<
      __libcpp_is_trivially_relocatable<__map>::value && __libcpp_is_trivially_relocatable<allocator_type>::value,
      deque,
      void>;

  static_assert(is_nothrow_default_constructible<allocator_type>::value ==
                    is_nothrow_default_constructible<__pointer_allocator>::value,
                "rebinding an allocator should not change exception guarantees");
  static_assert(is_nothrow_move_constructible<allocator_type>::value ==
                    is_nothrow_move_constructible<typename __map::allocator_type>::value,
                "rebinding an allocator should not change exception guarantees");

private:
  struct __deque_block_range {
    explicit __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __deque_block_range(pointer __b, pointer __e) noexcept
        : __begin_(__b),
          __end_(__e) {}
    const pointer __begin_;
    const pointer __end_;
  };

  struct __deque_range {
    iterator __pos_;
    const iterator __end_;

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __deque_range(iterator __pos, iterator __e) noexcept : __pos_(__pos), __end_(__e) {}

    explicit __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) operator bool() const noexcept { return __pos_ != __end_; }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __deque_range begin() const { return *this; }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __deque_range end() const { return __deque_range(__end_, __end_); }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __deque_block_range operator*() const noexcept {
      if (__pos_.__m_iter_ == __end_.__m_iter_) {
        return __deque_block_range(__pos_.__ptr_, __end_.__ptr_);
      }
      return __deque_block_range(__pos_.__ptr_, *__pos_.__m_iter_ + __block_size);
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __deque_range& operator++() noexcept {
      if (__pos_.__m_iter_ == __end_.__m_iter_) {
        __pos_ = __end_;
      } else {
        ++__pos_.__m_iter_;
        __pos_.__ptr_ = *__pos_.__m_iter_;
      }
      return *this;
    }

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool operator==(__deque_range const& __lhs, __deque_range const& __rhs) {
      return __lhs.__pos_ == __rhs.__pos_;
    }
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend bool operator!=(__deque_range const& __lhs, __deque_range const& __rhs) {
      return !(__lhs == __rhs);
    }
  };

  struct _ConstructTransaction {
    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _ConstructTransaction(deque* __db, __deque_block_range& __r)
        : __pos_(__r.__begin_), __end_(__r.__end_), __begin_(__r.__begin_), __base_(__db) {}

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~_ConstructTransaction() { __base_->__size() += (__pos_ - __begin_); }

    pointer __pos_;
    const pointer __end_;

  private:
    const pointer __begin_;
    deque* const __base_;
  };

  static const difference_type __block_size;

  __map __map_;
  size_type __start_;
  __compressed_pair<size_type, allocator_type> __size_;

public:

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deque() noexcept(is_nothrow_default_constructible<allocator_type>::value)
      : __start_(0), __size_(0, __default_init_tag()) {
    __annotate_new(0);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~deque() {
    clear();
    __annotate_delete();
    typename __map::iterator __i = __map_.begin();
    typename __map::iterator __e = __map_.end();
    for (; __i != __e; ++__i)
      __alloc_traits::deallocate(__alloc(), *__i, __block_size);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit deque(const allocator_type& __a)
      : __map_(__pointer_allocator(__a)), __start_(0), __size_(0, __a) {
    __annotate_new(0);
  }

  explicit __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deque(size_type __n);

  explicit __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deque(size_type __n, const _Allocator& __a);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deque(size_type __n, const value_type& __v);

  template <__enable_if_t<__is_allocator<_Allocator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deque(size_type __n, const value_type& __v, const allocator_type& __a)
      : __map_(__pointer_allocator(__a)), __start_(0), __size_(0, __a) {
    __annotate_new(0);
    if (__n > 0)
      __append(__n, __v);
  }

  template <class _InputIter, __enable_if_t<__has_input_iterator_category<_InputIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deque(_InputIter __f, _InputIter __l);
  template <class _InputIter, __enable_if_t<__has_input_iterator_category<_InputIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deque(_InputIter __f, _InputIter __l, const allocator_type& __a);
# 644 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deque(const deque& __c);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deque(const deque& __c, const __type_identity_t<allocator_type>& __a);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deque& operator=(const deque& __c);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deque(initializer_list<value_type> __il);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deque(initializer_list<value_type> __il, const allocator_type& __a);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deque& operator=(initializer_list<value_type> __il) {
    assign(__il);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deque(deque&& __c) noexcept(is_nothrow_move_constructible<allocator_type>::value);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deque(deque&& __c, const __type_identity_t<allocator_type>& __a);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) deque&
  operator=(deque&& __c) noexcept(__alloc_traits::propagate_on_container_move_assignment::value &&
                                  is_nothrow_move_assignable<allocator_type>::value);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void assign(initializer_list<value_type> __il) { assign(__il.begin(), __il.end()); }


  template <class _InputIter,
            __enable_if_t<__has_input_iterator_category<_InputIter>::value &&
                              !__has_random_access_iterator_category<_InputIter>::value,
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void assign(_InputIter __f, _InputIter __l);
  template <class _RAIter, __enable_if_t<__has_random_access_iterator_category<_RAIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void assign(_RAIter __f, _RAIter __l);
# 692 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void assign(size_type __n, const value_type& __v);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) allocator_type get_allocator() const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) allocator_type& __alloc() noexcept { return __size_.second(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const allocator_type& __alloc() const noexcept { return __size_.second(); }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator begin() noexcept {
    __map_pointer __mp = __map_.begin() + __start_ / __block_size;
    return iterator(__mp, __map_.empty() ? 0 : *__mp + __start_ % __block_size);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator begin() const noexcept {
    __map_const_pointer __mp = static_cast<__map_const_pointer>(__map_.begin() + __start_ / __block_size);
    return const_iterator(__mp, __map_.empty() ? 0 : *__mp + __start_ % __block_size);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator end() noexcept {
    size_type __p = size() + __start_;
    __map_pointer __mp = __map_.begin() + __p / __block_size;
    return iterator(__mp, __map_.empty() ? 0 : *__mp + __p % __block_size);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator end() const noexcept {
    size_type __p = size() + __start_;
    __map_const_pointer __mp = static_cast<__map_const_pointer>(__map_.begin() + __p / __block_size);
    return const_iterator(__mp, __map_.empty() ? 0 : *__mp + __p % __block_size);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reverse_iterator rbegin() noexcept { return reverse_iterator(end()); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator rbegin() const noexcept { return const_reverse_iterator(end()); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reverse_iterator rend() noexcept { return reverse_iterator(begin()); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator rend() const noexcept { return const_reverse_iterator(begin()); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator cbegin() const noexcept { return begin(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator cend() const noexcept { return end(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator crbegin() const noexcept { return const_reverse_iterator(end()); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator crend() const noexcept { return const_reverse_iterator(begin()); }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type size() const noexcept { return __size(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type& __size() noexcept { return __size_.first(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const size_type& __size() const noexcept { return __size_.first(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type max_size() const noexcept {
    return std::min<size_type>(__alloc_traits::max_size(__alloc()), numeric_limits<difference_type>::max());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void resize(size_type __n);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void resize(size_type __n, const value_type& __v);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void shrink_to_fit() noexcept;
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool empty() const noexcept { return size() == 0; }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference operator[](size_type __i) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference operator[](size_type __i) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference at(size_type __i);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference at(size_type __i) const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference front() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference front() const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference back() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference back() const noexcept;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push_front(const value_type& __v);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push_back(const value_type& __v);


  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference emplace_front(_Args&&... __args);
  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference emplace_back(_Args&&... __args);






  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator emplace(const_iterator __p, _Args&&... __args);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push_front(value_type&& __v);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push_back(value_type&& __v);
# 789 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator __p, value_type&& __v);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator __p, initializer_list<value_type> __il) {
    return insert(__p, __il.begin(), __il.end());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator __p, const value_type& __v);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator __p, size_type __n, const value_type& __v);
  template <class _InputIter, __enable_if_t<__has_exactly_input_iterator_category<_InputIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator __p, _InputIter __f, _InputIter __l);
  template <class _ForwardIterator,
            __enable_if_t<__has_exactly_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator __p, _ForwardIterator __f, _ForwardIterator __l);
  template <class _BiIter, __enable_if_t<__has_bidirectional_iterator_category<_BiIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator __p, _BiIter __f, _BiIter __l);
# 822 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void pop_front();
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void pop_back();
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator erase(const_iterator __p);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator erase(const_iterator __f, const_iterator __l);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(deque& __c)

      noexcept;



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void clear() noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __invariants() const {
    if (!__map_.__invariants())
      return false;
    if (__map_.size() >= size_type(-1) / __block_size)
      return false;
    for (__map_const_iterator __i = __map_.begin(), __e = __map_.end(); __i != __e; ++__i)
      if (*__i == nullptr)
        return false;
    if (__map_.size() != 0) {
      if (size() >= __map_.size() * __block_size)
        return false;
      if (__start_ >= __map_.size() * __block_size - size())
        return false;
    } else {
      if (size() != 0)
        return false;
      if (__start_ != 0)
        return false;
    }
    return true;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(deque& __c)
      noexcept(!__alloc_traits::propagate_on_container_move_assignment::value || is_nothrow_move_assignable<allocator_type>::value) {

    __move_assign_alloc(__c, integral_constant<bool, __alloc_traits::propagate_on_container_move_assignment::value>());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(deque& __c, true_type)
      noexcept(is_nothrow_move_assignable<allocator_type>::value) {
    __alloc() = std::move(__c.__alloc());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(deque&, false_type) noexcept {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign(deque& __c)
      noexcept(__alloc_traits::propagate_on_container_move_assignment::value&& is_nothrow_move_assignable<allocator_type>::value) {

    __map_ = std::move(__c.__map_);
    __start_ = __c.__start_;
    __size() = __c.size();
    __move_assign_alloc(__c);
    __c.__start_ = __c.__size() = 0;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static size_type __recommend_blocks(size_type __n) {
    return __n / __block_size + (__n % __block_size != 0);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __capacity() const {
    return __map_.size() == 0 ? 0 : __map_.size() * __block_size - 1;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __block_count() const { return __map_.size(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __front_spare() const { return __start_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __front_spare_blocks() const { return __front_spare() / __block_size; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __back_spare() const { return __capacity() - (__start_ + size()); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __back_spare_blocks() const { return __back_spare() / __block_size; }

private:
  enum __asan_annotation_type { __asan_unposion, __asan_poison };

  enum __asan_annotation_place {
    __asan_front_moved,
    __asan_back_moved,
  };

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_from_to(
      size_type __beg,
      size_type __end,
      __asan_annotation_type __annotation_type,
      __asan_annotation_place __place) const noexcept {
    (void)__beg;
    (void)__end;
    (void)__annotation_type;
    (void)__place;
# 1004 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_new(size_type __current_size) const noexcept {
    (void)__current_size;
# 1016 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_delete() const noexcept {
# 1029 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_increase_front(size_type __n) const noexcept {
    (void)__n;



  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_increase_back(size_type __n) const noexcept {
    (void)__n;



  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_shrink_front(size_type __old_size, size_type __old_start) const noexcept {
    (void)__old_size;
    (void)__old_start;



  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_shrink_back(size_type __old_size, size_type __old_start) const noexcept {
    (void)__old_size;
    (void)__old_start;



  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_poison_block(const void* __beginning, const void* __end) const noexcept {
    std::__annotate_double_ended_contiguous_container<_Allocator>(__beginning, __end, __beginning, __end, __end, __end);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __annotate_whole_block(size_t __block_index, __asan_annotation_type __annotation_type) const noexcept {
    (void)__block_index;
    (void)__annotation_type;
# 1081 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
  }
# 1145 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __maybe_remove_front_spare(bool __keep_one = true) {
    if (__front_spare_blocks() >= 2 || (!__keep_one && __front_spare_blocks())) {
      __annotate_whole_block(0, __asan_unposion);
      __alloc_traits::deallocate(__alloc(), __map_.front(), __block_size);
      __map_.pop_front();
      __start_ -= __block_size;
      return true;
    }
    return false;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __maybe_remove_back_spare(bool __keep_one = true) {
    if (__back_spare_blocks() >= 2 || (!__keep_one && __back_spare_blocks())) {
      __annotate_whole_block(__map_.size() - 1, __asan_unposion);
      __alloc_traits::deallocate(__alloc(), __map_.back(), __block_size);
      __map_.pop_back();
      return true;
    }
    return false;
  }

  template <class _Iterator, class _Sentinel>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __assign_with_sentinel(_Iterator __f, _Sentinel __l);

  template <class _RandomAccessIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __assign_with_size_random_access(_RandomAccessIterator __f, difference_type __n);
  template <class _Iterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __assign_with_size(_Iterator __f, difference_type __n);

  template <class _Iterator, class _Sentinel>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __insert_with_sentinel(const_iterator __p, _Iterator __f, _Sentinel __l);

  template <class _Iterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __insert_with_size(const_iterator __p, _Iterator __f, size_type __n);

  template <class _BiIter, class _Sentinel>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator
  __insert_bidirectional(const_iterator __p, _BiIter __f, _Sentinel __sent, size_type __n);
  template <class _BiIter>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __insert_bidirectional(const_iterator __p, _BiIter __f, _BiIter __l, size_type __n);

  template <class _InpIter, __enable_if_t<__has_exactly_input_iterator_category<_InpIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __append(_InpIter __f, _InpIter __l);
  template <class _ForIter, __enable_if_t<__has_forward_iterator_category<_ForIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __append(_ForIter __f, _ForIter __l);

  template <class _InputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __append_with_size(_InputIterator __from, size_type __n);
  template <class _InputIterator, class _Sentinel>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __append_with_sentinel(_InputIterator __f, _Sentinel __l);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __append(size_type __n);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __append(size_type __n, const value_type& __v);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __erase_to_end(const_iterator __f);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __add_front_capacity();
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __add_front_capacity(size_type __n);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __add_back_capacity();
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __add_back_capacity(size_type __n);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __move_and_check(iterator __f, iterator __l, iterator __r, const_pointer& __vt);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator
  __move_backward_and_check(iterator __f, iterator __l, iterator __r, const_pointer& __vt);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_construct_and_check(iterator __f, iterator __l, iterator __r, const_pointer& __vt);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __move_construct_backward_and_check(iterator __f, iterator __l, iterator __r, const_pointer& __vt);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __copy_assign_alloc(const deque& __c) {
    __copy_assign_alloc(__c, integral_constant<bool, __alloc_traits::propagate_on_container_copy_assignment::value>());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __copy_assign_alloc(const deque& __c, true_type) {
    if (__alloc() != __c.__alloc()) {
      clear();
      shrink_to_fit();
    }
    __alloc() = __c.__alloc();
    __map_.__alloc() = __c.__map_.__alloc();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __copy_assign_alloc(const deque&, false_type) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign(deque& __c, true_type)
      noexcept(is_nothrow_move_assignable<allocator_type>::value);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign(deque& __c, false_type);
};

template <class _Tp, class _Alloc>
constexpr const typename allocator_traits<_Alloc>::difference_type deque<_Tp, _Alloc>::__block_size =
    __deque_block_size<value_type, difference_type>::value;


template <class _InputIterator,
          class _Alloc = allocator<__iter_value_type<_InputIterator>>,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<__is_allocator<_Alloc>::value> >
deque(_InputIterator, _InputIterator) -> deque<__iter_value_type<_InputIterator>, _Alloc>;

template <class _InputIterator,
          class _Alloc,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<__is_allocator<_Alloc>::value> >
deque(_InputIterator, _InputIterator, _Alloc) -> deque<__iter_value_type<_InputIterator>, _Alloc>;
# 1255 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
template <class _Tp, class _Allocator>
deque<_Tp, _Allocator>::deque(size_type __n) : __start_(0), __size_(0, __default_init_tag()) {
  __annotate_new(0);
  if (__n > 0)
    __append(__n);
}


template <class _Tp, class _Allocator>
deque<_Tp, _Allocator>::deque(size_type __n, const _Allocator& __a)
    : __map_(__pointer_allocator(__a)), __start_(0), __size_(0, __a) {
  __annotate_new(0);
  if (__n > 0)
    __append(__n);
}


template <class _Tp, class _Allocator>
deque<_Tp, _Allocator>::deque(size_type __n, const value_type& __v) : __start_(0), __size_(0, __default_init_tag()) {
  __annotate_new(0);
  if (__n > 0)
    __append(__n, __v);
}

template <class _Tp, class _Allocator>
template <class _InputIter, __enable_if_t<__has_input_iterator_category<_InputIter>::value, int> >
deque<_Tp, _Allocator>::deque(_InputIter __f, _InputIter __l) : __start_(0), __size_(0, __default_init_tag()) {
  __annotate_new(0);
  __append(__f, __l);
}

template <class _Tp, class _Allocator>
template <class _InputIter, __enable_if_t<__has_input_iterator_category<_InputIter>::value, int> >
deque<_Tp, _Allocator>::deque(_InputIter __f, _InputIter __l, const allocator_type& __a)
    : __map_(__pointer_allocator(__a)), __start_(0), __size_(0, __a) {
  __annotate_new(0);
  __append(__f, __l);
}

template <class _Tp, class _Allocator>
deque<_Tp, _Allocator>::deque(const deque& __c)
    : __map_(__pointer_allocator(__alloc_traits::select_on_container_copy_construction(__c.__alloc()))),
      __start_(0),
      __size_(0, __map_.__alloc()) {
  __annotate_new(0);
  __append(__c.begin(), __c.end());
}

template <class _Tp, class _Allocator>
deque<_Tp, _Allocator>::deque(const deque& __c, const __type_identity_t<allocator_type>& __a)
    : __map_(__pointer_allocator(__a)), __start_(0), __size_(0, __a) {
  __annotate_new(0);
  __append(__c.begin(), __c.end());
}

template <class _Tp, class _Allocator>
deque<_Tp, _Allocator>& deque<_Tp, _Allocator>::operator=(const deque& __c) {
  if (this != std::addressof(__c)) {
    __copy_assign_alloc(__c);
    assign(__c.begin(), __c.end());
  }
  return *this;
}



template <class _Tp, class _Allocator>
deque<_Tp, _Allocator>::deque(initializer_list<value_type> __il) : __start_(0), __size_(0, __default_init_tag()) {
  __annotate_new(0);
  __append(__il.begin(), __il.end());
}

template <class _Tp, class _Allocator>
deque<_Tp, _Allocator>::deque(initializer_list<value_type> __il, const allocator_type& __a)
    : __map_(__pointer_allocator(__a)), __start_(0), __size_(0, __a) {
  __annotate_new(0);
  __append(__il.begin(), __il.end());
}

template <class _Tp, class _Allocator>
inline deque<_Tp, _Allocator>::deque(deque&& __c) noexcept(is_nothrow_move_constructible<allocator_type>::value)
    : __map_(std::move(__c.__map_)), __start_(std::move(__c.__start_)), __size_(std::move(__c.__size_)) {
  __c.__start_ = 0;
  __c.__size() = 0;
}

template <class _Tp, class _Allocator>
inline deque<_Tp, _Allocator>::deque(deque&& __c, const __type_identity_t<allocator_type>& __a)
    : __map_(std::move(__c.__map_), __pointer_allocator(__a)),
      __start_(std::move(__c.__start_)),
      __size_(std::move(__c.__size()), __a) {
  if (__a == __c.__alloc()) {
    __c.__start_ = 0;
    __c.__size() = 0;
  } else {
    __map_.clear();
    __start_ = 0;
    __size() = 0;
    typedef move_iterator<iterator> _Ip;
    assign(_Ip(__c.begin()), _Ip(__c.end()));
  }
}

template <class _Tp, class _Allocator>
inline deque<_Tp, _Allocator>& deque<_Tp, _Allocator>::operator=(deque&& __c) noexcept(
    __alloc_traits::propagate_on_container_move_assignment::value &&
    is_nothrow_move_assignable<allocator_type>::value) {
  __move_assign(__c, integral_constant<bool, __alloc_traits::propagate_on_container_move_assignment::value>());
  return *this;
}

template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::__move_assign(deque& __c, false_type) {
  if (__alloc() != __c.__alloc()) {
    typedef move_iterator<iterator> _Ip;
    assign(_Ip(__c.begin()), _Ip(__c.end()));
  } else
    __move_assign(__c, true_type());
}

template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::__move_assign(deque& __c,
                                           true_type) noexcept(is_nothrow_move_assignable<allocator_type>::value) {
  clear();
  shrink_to_fit();
  __move_assign(__c);
}



template <class _Tp, class _Allocator>
template <class _InputIter,
          __enable_if_t<__has_input_iterator_category<_InputIter>::value &&
                            !__has_random_access_iterator_category<_InputIter>::value,
                        int> >
void deque<_Tp, _Allocator>::assign(_InputIter __f, _InputIter __l) {
  __assign_with_sentinel(__f, __l);
}

template <class _Tp, class _Allocator>
template <class _Iterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void deque<_Tp, _Allocator>::__assign_with_sentinel(_Iterator __f, _Sentinel __l) {
  iterator __i = begin();
  iterator __e = end();
  for (; __f != __l && __i != __e; ++__f, (void)++__i)
    *__i = *__f;
  if (__f != __l)
    __append_with_sentinel(std::move(__f), std::move(__l));
  else
    __erase_to_end(__i);
}

template <class _Tp, class _Allocator>
template <class _RAIter, __enable_if_t<__has_random_access_iterator_category<_RAIter>::value, int> >
void deque<_Tp, _Allocator>::assign(_RAIter __f, _RAIter __l) {
  __assign_with_size_random_access(__f, __l - __f);
}

template <class _Tp, class _Allocator>
template <class _RandomAccessIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
deque<_Tp, _Allocator>::__assign_with_size_random_access(_RandomAccessIterator __f, difference_type __n) {
  if (static_cast<size_type>(__n) > size()) {
    auto __l = __f + size();
    std::copy(__f, __l, begin());
    __append_with_size(__l, __n - size());
  } else
    __erase_to_end(std::copy_n(__f, __n, begin()));
}

template <class _Tp, class _Allocator>
template <class _Iterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void deque<_Tp, _Allocator>::__assign_with_size(_Iterator __f, difference_type __n) {
  if (static_cast<size_type>(__n) > size()) {
    auto __added_size = __n - size();

    auto __i = begin();
    for (auto __count = size(); __count != 0; --__count) {
      *__i++ = *__f++;
    }

    __append_with_size(__f, __added_size);

  } else {
    __erase_to_end(std::copy_n(__f, __n, begin()));
  }
}

template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::assign(size_type __n, const value_type& __v) {
  if (__n > size()) {
    std::fill_n(begin(), size(), __v);
    __n -= size();
    __append(__n, __v);
  } else
    __erase_to_end(std::fill_n(begin(), __n, __v));
}

template <class _Tp, class _Allocator>
inline _Allocator deque<_Tp, _Allocator>::get_allocator() const noexcept {
  return __alloc();
}

template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::resize(size_type __n) {
  if (__n > size())
    __append(__n - size());
  else if (__n < size())
    __erase_to_end(begin() + __n);
}

template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::resize(size_type __n, const value_type& __v) {
  if (__n > size())
    __append(__n - size(), __v);
  else if (__n < size())
    __erase_to_end(begin() + __n);
}

template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::shrink_to_fit() noexcept {
  allocator_type& __a = __alloc();
  if (empty()) {
    __annotate_delete();
    while (__map_.size() > 0) {
      __alloc_traits::deallocate(__a, __map_.back(), __block_size);
      __map_.pop_back();
    }
    __start_ = 0;
  } else {
    __maybe_remove_front_spare( false);
    __maybe_remove_back_spare( false);
  }
  __map_.shrink_to_fit();
}

template <class _Tp, class _Allocator>
inline typename deque<_Tp, _Allocator>::reference deque<_Tp, _Allocator>::operator[](size_type __i) noexcept {
  ((void)0);
  size_type __p = __start_ + __i;
  return *(*(__map_.begin() + __p / __block_size) + __p % __block_size);
}

template <class _Tp, class _Allocator>
inline typename deque<_Tp, _Allocator>::const_reference
deque<_Tp, _Allocator>::operator[](size_type __i) const noexcept {
  ((void)0);
  size_type __p = __start_ + __i;
  return *(*(__map_.begin() + __p / __block_size) + __p % __block_size);
}

template <class _Tp, class _Allocator>
inline typename deque<_Tp, _Allocator>::reference deque<_Tp, _Allocator>::at(size_type __i) {
  if (__i >= size())
    std::__throw_out_of_range("deque");
  size_type __p = __start_ + __i;
  return *(*(__map_.begin() + __p / __block_size) + __p % __block_size);
}

template <class _Tp, class _Allocator>
inline typename deque<_Tp, _Allocator>::const_reference deque<_Tp, _Allocator>::at(size_type __i) const {
  if (__i >= size())
    std::__throw_out_of_range("deque");
  size_type __p = __start_ + __i;
  return *(*(__map_.begin() + __p / __block_size) + __p % __block_size);
}

template <class _Tp, class _Allocator>
inline typename deque<_Tp, _Allocator>::reference deque<_Tp, _Allocator>::front() noexcept {
  ((void)0);
  return *(*(__map_.begin() + __start_ / __block_size) + __start_ % __block_size);
}

template <class _Tp, class _Allocator>
inline typename deque<_Tp, _Allocator>::const_reference deque<_Tp, _Allocator>::front() const noexcept {
  ((void)0);
  return *(*(__map_.begin() + __start_ / __block_size) + __start_ % __block_size);
}

template <class _Tp, class _Allocator>
inline typename deque<_Tp, _Allocator>::reference deque<_Tp, _Allocator>::back() noexcept {
  ((void)0);
  size_type __p = size() + __start_ - 1;
  return *(*(__map_.begin() + __p / __block_size) + __p % __block_size);
}

template <class _Tp, class _Allocator>
inline typename deque<_Tp, _Allocator>::const_reference deque<_Tp, _Allocator>::back() const noexcept {
  ((void)0);
  size_type __p = size() + __start_ - 1;
  return *(*(__map_.begin() + __p / __block_size) + __p % __block_size);
}

template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::push_back(const value_type& __v) {
  allocator_type& __a = __alloc();
  if (__back_spare() == 0)
    __add_back_capacity();

  __annotate_increase_back(1);
  __alloc_traits::construct(__a, std::addressof(*end()), __v);
  ++__size();
}

template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::push_front(const value_type& __v) {
  allocator_type& __a = __alloc();
  if (__front_spare() == 0)
    __add_front_capacity();

  __annotate_increase_front(1);
  __alloc_traits::construct(__a, std::addressof(*--begin()), __v);
  --__start_;
  ++__size();
}


template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::push_back(value_type&& __v) {
  allocator_type& __a = __alloc();
  if (__back_spare() == 0)
    __add_back_capacity();

  __annotate_increase_back(1);
  __alloc_traits::construct(__a, std::addressof(*end()), std::move(__v));
  ++__size();
}

template <class _Tp, class _Allocator>
template <class... _Args>

typename deque<_Tp, _Allocator>::reference



deque<_Tp, _Allocator>::emplace_back(_Args&&... __args) {
  allocator_type& __a = __alloc();
  if (__back_spare() == 0)
    __add_back_capacity();

  __annotate_increase_back(1);
  __alloc_traits::construct(__a, std::addressof(*end()), std::forward<_Args>(__args)...);
  ++__size();

  return *--end();

}

template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::push_front(value_type&& __v) {
  allocator_type& __a = __alloc();
  if (__front_spare() == 0)
    __add_front_capacity();

  __annotate_increase_front(1);
  __alloc_traits::construct(__a, std::addressof(*--begin()), std::move(__v));
  --__start_;
  ++__size();
}

template <class _Tp, class _Allocator>
template <class... _Args>

typename deque<_Tp, _Allocator>::reference



deque<_Tp, _Allocator>::emplace_front(_Args&&... __args) {
  allocator_type& __a = __alloc();
  if (__front_spare() == 0)
    __add_front_capacity();

  __annotate_increase_front(1);
  __alloc_traits::construct(__a, std::addressof(*--begin()), std::forward<_Args>(__args)...);
  --__start_;
  ++__size();

  return *begin();

}

template <class _Tp, class _Allocator>
typename deque<_Tp, _Allocator>::iterator deque<_Tp, _Allocator>::insert(const_iterator __p, value_type&& __v) {
  size_type __pos = __p - begin();
  size_type __to_end = size() - __pos;
  allocator_type& __a = __alloc();
  if (__pos < __to_end) {
    if (__front_spare() == 0)
      __add_front_capacity();

    __annotate_increase_front(1);
    if (__pos == 0) {
      __alloc_traits::construct(__a, std::addressof(*--begin()), std::move(__v));
      --__start_;
      ++__size();
    } else {
      iterator __b = begin();
      iterator __bm1 = std::prev(__b);
      __alloc_traits::construct(__a, std::addressof(*__bm1), std::move(*__b));
      --__start_;
      ++__size();
      if (__pos > 1)
        __b = std::move(std::next(__b), __b + __pos, __b);
      *__b = std::move(__v);
    }
  } else {
    if (__back_spare() == 0)
      __add_back_capacity();

    __annotate_increase_back(1);
    size_type __de = size() - __pos;
    if (__de == 0) {
      __alloc_traits::construct(__a, std::addressof(*end()), std::move(__v));
      ++__size();
    } else {
      iterator __e = end();
      iterator __em1 = std::prev(__e);
      __alloc_traits::construct(__a, std::addressof(*__e), std::move(*__em1));
      ++__size();
      if (__de > 1)
        __e = std::move_backward(__e - __de, __em1, __e);
      *--__e = std::move(__v);
    }
  }
  return begin() + __pos;
}

template <class _Tp, class _Allocator>
template <class... _Args>
typename deque<_Tp, _Allocator>::iterator deque<_Tp, _Allocator>::emplace(const_iterator __p, _Args&&... __args) {
  size_type __pos = __p - begin();
  size_type __to_end = size() - __pos;
  allocator_type& __a = __alloc();
  if (__pos < __to_end) {
    if (__front_spare() == 0)
      __add_front_capacity();

    __annotate_increase_front(1);
    if (__pos == 0) {
      __alloc_traits::construct(__a, std::addressof(*--begin()), std::forward<_Args>(__args)...);
      --__start_;
      ++__size();
    } else {
      __temp_value<value_type, _Allocator> __tmp(__alloc(), std::forward<_Args>(__args)...);
      iterator __b = begin();
      iterator __bm1 = std::prev(__b);
      __alloc_traits::construct(__a, std::addressof(*__bm1), std::move(*__b));
      --__start_;
      ++__size();
      if (__pos > 1)
        __b = std::move(std::next(__b), __b + __pos, __b);
      *__b = std::move(__tmp.get());
    }
  } else {
    if (__back_spare() == 0)
      __add_back_capacity();

    __annotate_increase_back(1);
    size_type __de = size() - __pos;
    if (__de == 0) {
      __alloc_traits::construct(__a, std::addressof(*end()), std::forward<_Args>(__args)...);
      ++__size();
    } else {
      __temp_value<value_type, _Allocator> __tmp(__alloc(), std::forward<_Args>(__args)...);
      iterator __e = end();
      iterator __em1 = std::prev(__e);
      __alloc_traits::construct(__a, std::addressof(*__e), std::move(*__em1));
      ++__size();
      if (__de > 1)
        __e = std::move_backward(__e - __de, __em1, __e);
      *--__e = std::move(__tmp.get());
    }
  }
  return begin() + __pos;
}



template <class _Tp, class _Allocator>
typename deque<_Tp, _Allocator>::iterator deque<_Tp, _Allocator>::insert(const_iterator __p, const value_type& __v) {
  size_type __pos = __p - begin();
  size_type __to_end = size() - __pos;
  allocator_type& __a = __alloc();
  if (__pos < __to_end) {
    if (__front_spare() == 0)
      __add_front_capacity();

    __annotate_increase_front(1);
    if (__pos == 0) {
      __alloc_traits::construct(__a, std::addressof(*--begin()), __v);
      --__start_;
      ++__size();
    } else {
      const_pointer __vt = pointer_traits<const_pointer>::pointer_to(__v);
      iterator __b = begin();
      iterator __bm1 = std::prev(__b);
      if (__vt == pointer_traits<const_pointer>::pointer_to(*__b))
        __vt = pointer_traits<const_pointer>::pointer_to(*__bm1);
      __alloc_traits::construct(__a, std::addressof(*__bm1), std::move(*__b));
      --__start_;
      ++__size();
      if (__pos > 1)
        __b = __move_and_check(std::next(__b), __b + __pos, __b, __vt);
      *__b = *__vt;
    }
  } else {
    if (__back_spare() == 0)
      __add_back_capacity();

    __annotate_increase_back(1);
    size_type __de = size() - __pos;
    if (__de == 0) {
      __alloc_traits::construct(__a, std::addressof(*end()), __v);
      ++__size();
    } else {
      const_pointer __vt = pointer_traits<const_pointer>::pointer_to(__v);
      iterator __e = end();
      iterator __em1 = std::prev(__e);
      if (__vt == pointer_traits<const_pointer>::pointer_to(*__em1))
        __vt = pointer_traits<const_pointer>::pointer_to(*__e);
      __alloc_traits::construct(__a, std::addressof(*__e), std::move(*__em1));
      ++__size();
      if (__de > 1)
        __e = __move_backward_and_check(__e - __de, __em1, __e, __vt);
      *--__e = *__vt;
    }
  }
  return begin() + __pos;
}

template <class _Tp, class _Allocator>
typename deque<_Tp, _Allocator>::iterator
deque<_Tp, _Allocator>::insert(const_iterator __p, size_type __n, const value_type& __v) {
  size_type __pos = __p - begin();
  size_type __to_end = __size() - __pos;
  allocator_type& __a = __alloc();
  if (__pos < __to_end) {
    if (__n > __front_spare())
      __add_front_capacity(__n - __front_spare());

    __annotate_increase_front(__n);
    iterator __old_begin = begin();
    iterator __i = __old_begin;
    if (__n > __pos) {
      for (size_type __m = __n - __pos; __m; --__m, --__start_, ++__size())
        __alloc_traits::construct(__a, std::addressof(*--__i), __v);
      __n = __pos;
    }
    if (__n > 0) {
      const_pointer __vt = pointer_traits<const_pointer>::pointer_to(__v);
      iterator __obn = __old_begin + __n;
      __move_construct_backward_and_check(__old_begin, __obn, __i, __vt);
      if (__n < __pos)
        __old_begin = __move_and_check(__obn, __old_begin + __pos, __old_begin, __vt);
      std::fill_n(__old_begin, __n, *__vt);
    }
  } else {
    size_type __back_capacity = __back_spare();
    if (__n > __back_capacity)
      __add_back_capacity(__n - __back_capacity);

    __annotate_increase_back(__n);
    iterator __old_end = end();
    iterator __i = __old_end;
    size_type __de = size() - __pos;
    if (__n > __de) {
      for (size_type __m = __n - __de; __m; --__m, (void)++__i, ++__size())
        __alloc_traits::construct(__a, std::addressof(*__i), __v);
      __n = __de;
    }
    if (__n > 0) {
      const_pointer __vt = pointer_traits<const_pointer>::pointer_to(__v);
      iterator __oen = __old_end - __n;
      __move_construct_and_check(__oen, __old_end, __i, __vt);
      if (__n < __de)
        __old_end = __move_backward_and_check(__old_end - __de, __oen, __old_end, __vt);
      std::fill_n(__old_end - __n, __n, *__vt);
    }
  }
  return begin() + __pos;
}

template <class _Tp, class _Allocator>
template <class _InputIter, __enable_if_t<__has_exactly_input_iterator_category<_InputIter>::value, int> >
typename deque<_Tp, _Allocator>::iterator
deque<_Tp, _Allocator>::insert(const_iterator __p, _InputIter __f, _InputIter __l) {
  return __insert_with_sentinel(__p, __f, __l);
}

template <class _Tp, class _Allocator>
template <class _Iterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename deque<_Tp, _Allocator>::iterator
deque<_Tp, _Allocator>::__insert_with_sentinel(const_iterator __p, _Iterator __f, _Sentinel __l) {
  __split_buffer<value_type, allocator_type&> __buf(__alloc());
  __buf.__construct_at_end_with_sentinel(std::move(__f), std::move(__l));
  typedef typename __split_buffer<value_type, allocator_type&>::iterator __bi;
  return insert(__p, move_iterator<__bi>(__buf.begin()), move_iterator<__bi>(__buf.end()));
}

template <class _Tp, class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_exactly_forward_iterator_category<_ForwardIterator>::value, int> >
typename deque<_Tp, _Allocator>::iterator
deque<_Tp, _Allocator>::insert(const_iterator __p, _ForwardIterator __f, _ForwardIterator __l) {
  return __insert_with_size(__p, __f, std::distance(__f, __l));
}

template <class _Tp, class _Allocator>
template <class _Iterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename deque<_Tp, _Allocator>::iterator
deque<_Tp, _Allocator>::__insert_with_size(const_iterator __p, _Iterator __f, size_type __n) {
  __split_buffer<value_type, allocator_type&> __buf(__n, 0, __alloc());
  __buf.__construct_at_end_with_size(__f, __n);
  typedef typename __split_buffer<value_type, allocator_type&>::iterator __fwd;
  return insert(__p, move_iterator<__fwd>(__buf.begin()), move_iterator<__fwd>(__buf.end()));
}

template <class _Tp, class _Allocator>
template <class _BiIter, __enable_if_t<__has_bidirectional_iterator_category<_BiIter>::value, int> >
typename deque<_Tp, _Allocator>::iterator deque<_Tp, _Allocator>::insert(const_iterator __p, _BiIter __f, _BiIter __l) {
  return __insert_bidirectional(__p, __f, __l, std::distance(__f, __l));
}

template <class _Tp, class _Allocator>
template <class _BiIter, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename deque<_Tp, _Allocator>::iterator
deque<_Tp, _Allocator>::__insert_bidirectional(const_iterator __p, _BiIter __f, _Sentinel, size_type __n) {
  return __insert_bidirectional(__p, __f, std::next(__f, __n), __n);
}

template <class _Tp, class _Allocator>
template <class _BiIter>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename deque<_Tp, _Allocator>::iterator
deque<_Tp, _Allocator>::__insert_bidirectional(const_iterator __p, _BiIter __f, _BiIter __l, size_type __n) {
  size_type __pos = __p - begin();
  size_type __to_end = size() - __pos;
  allocator_type& __a = __alloc();
  if (__pos < __to_end) {
    if (__n > __front_spare())
      __add_front_capacity(__n - __front_spare());

    __annotate_increase_front(__n);
    iterator __old_begin = begin();
    iterator __i = __old_begin;
    _BiIter __m = __f;
    if (__n > __pos) {
      __m = __pos < __n / 2 ? std::prev(__l, __pos) : std::next(__f, __n - __pos);
      for (_BiIter __j = __m; __j != __f; --__start_, ++__size())
        __alloc_traits::construct(__a, std::addressof(*--__i), *--__j);
      __n = __pos;
    }
    if (__n > 0) {
      iterator __obn = __old_begin + __n;
      for (iterator __j = __obn; __j != __old_begin;) {
        __alloc_traits::construct(__a, std::addressof(*--__i), std::move(*--__j));
        --__start_;
        ++__size();
      }
      if (__n < __pos)
        __old_begin = std::move(__obn, __old_begin + __pos, __old_begin);
      std::copy(__m, __l, __old_begin);
    }
  } else {
    size_type __back_capacity = __back_spare();
    if (__n > __back_capacity)
      __add_back_capacity(__n - __back_capacity);

    __annotate_increase_back(__n);
    iterator __old_end = end();
    iterator __i = __old_end;
    _BiIter __m = __l;
    size_type __de = size() - __pos;
    if (__n > __de) {
      __m = __de < __n / 2 ? std::next(__f, __de) : std::prev(__l, __n - __de);
      for (_BiIter __j = __m; __j != __l; ++__i, (void)++__j, ++__size())
        __alloc_traits::construct(__a, std::addressof(*__i), *__j);
      __n = __de;
    }
    if (__n > 0) {
      iterator __oen = __old_end - __n;
      for (iterator __j = __oen; __j != __old_end; ++__i, (void)++__j, ++__size())
        __alloc_traits::construct(__a, std::addressof(*__i), std::move(*__j));
      if (__n < __de)
        __old_end = std::move_backward(__old_end - __de, __oen, __old_end);
      std::copy_backward(__f, __m, __old_end);
    }
  }
  return begin() + __pos;
}

template <class _Tp, class _Allocator>
template <class _InpIter, __enable_if_t<__has_exactly_input_iterator_category<_InpIter>::value, int> >
void deque<_Tp, _Allocator>::__append(_InpIter __f, _InpIter __l) {
  __append_with_sentinel(__f, __l);
}

template <class _Tp, class _Allocator>
template <class _InputIterator, class _Sentinel>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void deque<_Tp, _Allocator>::__append_with_sentinel(_InputIterator __f, _Sentinel __l) {
  for (; __f != __l; ++__f)



    emplace_back(*__f);

}

template <class _Tp, class _Allocator>
template <class _ForIter, __enable_if_t<__has_forward_iterator_category<_ForIter>::value, int> >
void deque<_Tp, _Allocator>::__append(_ForIter __f, _ForIter __l) {
  __append_with_size(__f, std::distance(__f, __l));
}

template <class _Tp, class _Allocator>
template <class _InputIterator>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void deque<_Tp, _Allocator>::__append_with_size(_InputIterator __f, size_type __n) {
  allocator_type& __a = __alloc();
  size_type __back_capacity = __back_spare();
  if (__n > __back_capacity)
    __add_back_capacity(__n - __back_capacity);


  __annotate_increase_back(__n);
  for (__deque_block_range __br : __deque_range(end(), end() + __n)) {
    _ConstructTransaction __tx(this, __br);
    for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_, (void)++__f) {
      __alloc_traits::construct(__a, std::__to_address(__tx.__pos_), *__f);
    }
  }
}

template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::__append(size_type __n) {
  allocator_type& __a = __alloc();
  size_type __back_capacity = __back_spare();
  if (__n > __back_capacity)
    __add_back_capacity(__n - __back_capacity);

  __annotate_increase_back(__n);
  for (__deque_block_range __br : __deque_range(end(), end() + __n)) {
    _ConstructTransaction __tx(this, __br);
    for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_) {
      __alloc_traits::construct(__a, std::__to_address(__tx.__pos_));
    }
  }
}

template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::__append(size_type __n, const value_type& __v) {
  allocator_type& __a = __alloc();
  size_type __back_capacity = __back_spare();
  if (__n > __back_capacity)
    __add_back_capacity(__n - __back_capacity);

  __annotate_increase_back(__n);
  for (__deque_block_range __br : __deque_range(end(), end() + __n)) {
    _ConstructTransaction __tx(this, __br);
    for (; __tx.__pos_ != __tx.__end_; ++__tx.__pos_) {
      __alloc_traits::construct(__a, std::__to_address(__tx.__pos_), __v);
    }
  }
}



template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::__add_front_capacity() {
  allocator_type& __a = __alloc();
  if (__back_spare() >= __block_size) {
    __start_ += __block_size;
    pointer __pt = __map_.back();
    __map_.pop_back();
    __map_.push_front(__pt);
  }

  else if (__map_.size() < __map_.capacity()) {


    if (__map_.__front_spare() > 0)
      __map_.push_front(__alloc_traits::allocate(__a, __block_size));
    else {
      __map_.push_back(__alloc_traits::allocate(__a, __block_size));

      pointer __pt = __map_.back();
      __map_.pop_back();
      __map_.push_front(__pt);
    }
    __start_ = __map_.size() == 1 ? __block_size / 2 : __start_ + __block_size;
  }

  else {
    __split_buffer<pointer, __pointer_allocator&> __buf(
        std::max<size_type>(2 * __map_.capacity(), 1), 0, __map_.__alloc());

    typedef __allocator_destructor<_Allocator> _Dp;
    unique_ptr<pointer, _Dp> __hold(__alloc_traits::allocate(__a, __block_size), _Dp(__a, __block_size));
    __buf.push_back(__hold.get());
    __hold.release();

    for (__map_pointer __i = __map_.begin(); __i != __map_.end(); ++__i)
      __buf.push_back(*__i);
    std::swap(__map_.__first_, __buf.__first_);
    std::swap(__map_.__begin_, __buf.__begin_);
    std::swap(__map_.__end_, __buf.__end_);
    std::swap(__map_.__end_cap(), __buf.__end_cap());
    __start_ = __map_.size() == 1 ? __block_size / 2 : __start_ + __block_size;
  }
  __annotate_whole_block(0, __asan_poison);
}



template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::__add_front_capacity(size_type __n) {
  allocator_type& __a = __alloc();
  size_type __nb = __recommend_blocks(__n + __map_.empty());

  size_type __back_capacity = __back_spare() / __block_size;
  __back_capacity = std::min(__back_capacity, __nb);
  __nb -= __back_capacity;

  if (__nb == 0) {
    __start_ += __block_size * __back_capacity;
    for (; __back_capacity > 0; --__back_capacity) {
      pointer __pt = __map_.back();
      __map_.pop_back();
      __map_.push_front(__pt);
    }
  }

  else if (__nb <= __map_.capacity() -
                       __map_.size()) {


    for (; __nb > 0; --__nb, __start_ += __block_size - (__map_.size() == 1)) {
      if (__map_.__front_spare() == 0)
        break;
      __map_.push_front(__alloc_traits::allocate(__a, __block_size));
      __annotate_whole_block(0, __asan_poison);
    }
    for (; __nb > 0; --__nb, ++__back_capacity)
      __map_.push_back(__alloc_traits::allocate(__a, __block_size));

    __start_ += __back_capacity * __block_size;
    for (; __back_capacity > 0; --__back_capacity) {
      pointer __pt = __map_.back();
      __map_.pop_back();
      __map_.push_front(__pt);
      __annotate_whole_block(0, __asan_poison);
    }
  }

  else {
    size_type __ds = (__nb + __back_capacity) * __block_size - __map_.empty();
    __split_buffer<pointer, __pointer_allocator&> __buf(
        std::max<size_type>(2 * __map_.capacity(), __nb + __map_.size()), 0, __map_.__alloc());

    try {

      for (; __nb > 0; --__nb) {
        __buf.push_back(__alloc_traits::allocate(__a, __block_size));

        __annotate_poison_block(std::__to_address(__buf.back()), std::__to_address(__buf.back() + __block_size));
      }

    } catch (...) {
      __annotate_delete();
      for (__map_pointer __i = __buf.begin(); __i != __buf.end(); ++__i)
        __alloc_traits::deallocate(__a, *__i, __block_size);
      throw;
    }

    for (; __back_capacity > 0; --__back_capacity) {
      __buf.push_back(__map_.back());
      __map_.pop_back();
    }
    for (__map_pointer __i = __map_.begin(); __i != __map_.end(); ++__i)
      __buf.push_back(*__i);
    std::swap(__map_.__first_, __buf.__first_);
    std::swap(__map_.__begin_, __buf.__begin_);
    std::swap(__map_.__end_, __buf.__end_);
    std::swap(__map_.__end_cap(), __buf.__end_cap());
    __start_ += __ds;
  }
}



template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::__add_back_capacity() {
  allocator_type& __a = __alloc();
  if (__front_spare() >= __block_size) {
    __start_ -= __block_size;
    pointer __pt = __map_.front();
    __map_.pop_front();
    __map_.push_back(__pt);
  }

  else if (__map_.size() < __map_.capacity()) {


    if (__map_.__back_spare() != 0)
      __map_.push_back(__alloc_traits::allocate(__a, __block_size));
    else {
      __map_.push_front(__alloc_traits::allocate(__a, __block_size));

      pointer __pt = __map_.front();
      __map_.pop_front();
      __map_.push_back(__pt);
    }
    __annotate_whole_block(__map_.size() - 1, __asan_poison);
  }

  else {
    __split_buffer<pointer, __pointer_allocator&> __buf(
        std::max<size_type>(2 * __map_.capacity(), 1), __map_.size(), __map_.__alloc());

    typedef __allocator_destructor<_Allocator> _Dp;
    unique_ptr<pointer, _Dp> __hold(__alloc_traits::allocate(__a, __block_size), _Dp(__a, __block_size));
    __buf.push_back(__hold.get());
    __hold.release();

    for (__map_pointer __i = __map_.end(); __i != __map_.begin();)
      __buf.push_front(*--__i);
    std::swap(__map_.__first_, __buf.__first_);
    std::swap(__map_.__begin_, __buf.__begin_);
    std::swap(__map_.__end_, __buf.__end_);
    std::swap(__map_.__end_cap(), __buf.__end_cap());
    __annotate_whole_block(__map_.size() - 1, __asan_poison);
  }
}



template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::__add_back_capacity(size_type __n) {
  allocator_type& __a = __alloc();
  size_type __nb = __recommend_blocks(__n + __map_.empty());

  size_type __front_capacity = __front_spare() / __block_size;
  __front_capacity = std::min(__front_capacity, __nb);
  __nb -= __front_capacity;

  if (__nb == 0) {
    __start_ -= __block_size * __front_capacity;
    for (; __front_capacity > 0; --__front_capacity) {
      pointer __pt = __map_.front();
      __map_.pop_front();
      __map_.push_back(__pt);
    }
  }

  else if (__nb <= __map_.capacity() -
                       __map_.size()) {


    for (; __nb > 0; --__nb) {
      if (__map_.__back_spare() == 0)
        break;
      __map_.push_back(__alloc_traits::allocate(__a, __block_size));
      __annotate_whole_block(__map_.size() - 1, __asan_poison);
    }
    for (; __nb > 0; --__nb, ++__front_capacity, __start_ += __block_size - (__map_.size() == 1)) {
      __map_.push_front(__alloc_traits::allocate(__a, __block_size));
      __annotate_whole_block(0, __asan_poison);
    }

    __start_ -= __block_size * __front_capacity;
    for (; __front_capacity > 0; --__front_capacity) {
      pointer __pt = __map_.front();
      __map_.pop_front();
      __map_.push_back(__pt);
    }
  }

  else {
    size_type __ds = __front_capacity * __block_size;
    __split_buffer<pointer, __pointer_allocator&> __buf(
        std::max<size_type>(2 * __map_.capacity(), __nb + __map_.size()),
        __map_.size() - __front_capacity,
        __map_.__alloc());

    try {

      for (; __nb > 0; --__nb) {
        __buf.push_back(__alloc_traits::allocate(__a, __block_size));

        __annotate_poison_block(std::__to_address(__buf.back()), std::__to_address(__buf.back() + __block_size));
      }

    } catch (...) {
      __annotate_delete();
      for (__map_pointer __i = __buf.begin(); __i != __buf.end(); ++__i)
        __alloc_traits::deallocate(__a, *__i, __block_size);
      throw;
    }

    for (; __front_capacity > 0; --__front_capacity) {
      __buf.push_back(__map_.front());
      __map_.pop_front();
    }
    for (__map_pointer __i = __map_.end(); __i != __map_.begin();)
      __buf.push_front(*--__i);
    std::swap(__map_.__first_, __buf.__first_);
    std::swap(__map_.__begin_, __buf.__begin_);
    std::swap(__map_.__end_, __buf.__end_);
    std::swap(__map_.__end_cap(), __buf.__end_cap());
    __start_ -= __ds;
  }
}

template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::pop_front() {
  ((void)0);
  size_type __old_sz = size();
  size_type __old_start = __start_;
  allocator_type& __a = __alloc();
  __alloc_traits::destroy(
      __a, std::__to_address(*(__map_.begin() + __start_ / __block_size) + __start_ % __block_size));
  --__size();
  ++__start_;
  __annotate_shrink_front(__old_sz, __old_start);
  __maybe_remove_front_spare();
}

template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::pop_back() {
  ((void)0);
  size_type __old_sz = size();
  size_type __old_start = __start_;
  allocator_type& __a = __alloc();
  size_type __p = size() + __start_ - 1;
  __alloc_traits::destroy(__a, std::__to_address(*(__map_.begin() + __p / __block_size) + __p % __block_size));
  --__size();
  __annotate_shrink_back(__old_sz, __old_start);
  __maybe_remove_back_spare();
}



template <class _Tp, class _Allocator>
typename deque<_Tp, _Allocator>::iterator
deque<_Tp, _Allocator>::__move_and_check(iterator __f, iterator __l, iterator __r, const_pointer& __vt) {



  difference_type __n = __l - __f;
  while (__n > 0) {
    pointer __fb = __f.__ptr_;
    pointer __fe = *__f.__m_iter_ + __block_size;
    difference_type __bs = __fe - __fb;
    if (__bs > __n) {
      __bs = __n;
      __fe = __fb + __bs;
    }
    if (__fb <= __vt && __vt < __fe)
      __vt = (const_iterator(static_cast<__map_const_pointer>(__f.__m_iter_), __vt) -= __f - __r).__ptr_;
    __r = std::move(__fb, __fe, __r);
    __n -= __bs;
    __f += __bs;
  }
  return __r;
}



template <class _Tp, class _Allocator>
typename deque<_Tp, _Allocator>::iterator
deque<_Tp, _Allocator>::__move_backward_and_check(iterator __f, iterator __l, iterator __r, const_pointer& __vt) {



  difference_type __n = __l - __f;
  while (__n > 0) {
    --__l;
    pointer __lb = *__l.__m_iter_;
    pointer __le = __l.__ptr_ + 1;
    difference_type __bs = __le - __lb;
    if (__bs > __n) {
      __bs = __n;
      __lb = __le - __bs;
    }
    if (__lb <= __vt && __vt < __le)
      __vt = (const_iterator(static_cast<__map_const_pointer>(__l.__m_iter_), __vt) += __r - __l - 1).__ptr_;
    __r = std::move_backward(__lb, __le, __r);
    __n -= __bs;
    __l -= __bs - 1;
  }
  return __r;
}



template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::__move_construct_and_check(iterator __f, iterator __l, iterator __r, const_pointer& __vt) {
  allocator_type& __a = __alloc();



  difference_type __n = __l - __f;
  while (__n > 0) {
    pointer __fb = __f.__ptr_;
    pointer __fe = *__f.__m_iter_ + __block_size;
    difference_type __bs = __fe - __fb;
    if (__bs > __n) {
      __bs = __n;
      __fe = __fb + __bs;
    }
    if (__fb <= __vt && __vt < __fe)
      __vt = (const_iterator(static_cast<__map_const_pointer>(__f.__m_iter_), __vt) += __r - __f).__ptr_;
    for (; __fb != __fe; ++__fb, ++__r, ++__size())
      __alloc_traits::construct(__a, std::addressof(*__r), std::move(*__fb));
    __n -= __bs;
    __f += __bs;
  }
}



template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::__move_construct_backward_and_check(
    iterator __f, iterator __l, iterator __r, const_pointer& __vt) {
  allocator_type& __a = __alloc();







  difference_type __n = __l - __f;
  while (__n > 0) {
    --__l;
    pointer __lb = *__l.__m_iter_;
    pointer __le = __l.__ptr_ + 1;
    difference_type __bs = __le - __lb;
    if (__bs > __n) {
      __bs = __n;
      __lb = __le - __bs;
    }
    if (__lb <= __vt && __vt < __le)
      __vt = (const_iterator(static_cast<__map_const_pointer>(__l.__m_iter_), __vt) -= __l - __r + 1).__ptr_;
    while (__le != __lb) {
      __alloc_traits::construct(__a, std::addressof(*--__r), std::move(*--__le));
      --__start_;
      ++__size();
    }
    __n -= __bs;
    __l -= __bs - 1;
  }
}

template <class _Tp, class _Allocator>
typename deque<_Tp, _Allocator>::iterator deque<_Tp, _Allocator>::erase(const_iterator __f) {
  ((void)0);

  size_type __old_sz = size();
  size_type __old_start = __start_;
  iterator __b = begin();
  difference_type __pos = __f - __b;
  iterator __p = __b + __pos;
  allocator_type& __a = __alloc();
  if (static_cast<size_t>(__pos) <= (size() - 1) / 2) {
    std::move_backward(__b, __p, std::next(__p));
    __alloc_traits::destroy(__a, std::addressof(*__b));
    --__size();
    ++__start_;
    __annotate_shrink_front(__old_sz, __old_start);
    __maybe_remove_front_spare();
  } else {
    iterator __i = std::move(std::next(__p), end(), __p);
    __alloc_traits::destroy(__a, std::addressof(*__i));
    --__size();
    __annotate_shrink_back(__old_sz, __old_start);
    __maybe_remove_back_spare();
  }
  return begin() + __pos;
}

template <class _Tp, class _Allocator>
typename deque<_Tp, _Allocator>::iterator deque<_Tp, _Allocator>::erase(const_iterator __f, const_iterator __l) {
  ((void)0);
  size_type __old_sz = size();
  size_type __old_start = __start_;
  difference_type __n = __l - __f;
  iterator __b = begin();
  difference_type __pos = __f - __b;
  iterator __p = __b + __pos;
  if (__n > 0) {
    allocator_type& __a = __alloc();
    if (static_cast<size_t>(__pos) <= (size() - __n) / 2) {
      iterator __i = std::move_backward(__b, __p, __p + __n);
      for (; __b != __i; ++__b)
        __alloc_traits::destroy(__a, std::addressof(*__b));
      __size() -= __n;
      __start_ += __n;
      __annotate_shrink_front(__old_sz, __old_start);
      while (__maybe_remove_front_spare()) {
      }
    } else {
      iterator __i = std::move(__p + __n, end(), __p);
      for (iterator __e = end(); __i != __e; ++__i)
        __alloc_traits::destroy(__a, std::addressof(*__i));
      __size() -= __n;
      __annotate_shrink_back(__old_sz, __old_start);
      while (__maybe_remove_back_spare()) {
      }
    }
  }
  return begin() + __pos;
}

template <class _Tp, class _Allocator>
void deque<_Tp, _Allocator>::__erase_to_end(const_iterator __f) {
  size_type __old_sz = size();
  size_type __old_start = __start_;
  iterator __e = end();
  difference_type __n = __e - __f;
  if (__n > 0) {
    allocator_type& __a = __alloc();
    iterator __b = begin();
    difference_type __pos = __f - __b;
    for (iterator __p = __b + __pos; __p != __e; ++__p)
      __alloc_traits::destroy(__a, std::addressof(*__p));
    __size() -= __n;
    __annotate_shrink_back(__old_sz, __old_start);
    while (__maybe_remove_back_spare()) {
    }
  }
}

template <class _Tp, class _Allocator>
inline void deque<_Tp, _Allocator>::swap(deque& __c)

    noexcept



{
  __map_.swap(__c.__map_);
  std::swap(__start_, __c.__start_);
  std::swap(__size(), __c.__size());
  std::__swap_allocator(__alloc(), __c.__alloc());
}

template <class _Tp, class _Allocator>
inline void deque<_Tp, _Allocator>::clear() noexcept {
  __annotate_delete();
  allocator_type& __a = __alloc();
  for (iterator __i = begin(), __e = end(); __i != __e; ++__i)
    __alloc_traits::destroy(__a, std::addressof(*__i));
  __size() = 0;
  while (__map_.size() > 2) {
    __alloc_traits::deallocate(__a, __map_.front(), __block_size);
    __map_.pop_front();
  }
  switch (__map_.size()) {
  case 1:
    __start_ = __block_size / 2;
    break;
  case 2:
    __start_ = __block_size;
    break;
  }
  __annotate_new(0);
}

template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const deque<_Tp, _Allocator>& __x, const deque<_Tp, _Allocator>& __y) {
  const typename deque<_Tp, _Allocator>::size_type __sz = __x.size();
  return __sz == __y.size() && std::equal(__x.begin(), __x.end(), __y.begin());
}



template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const deque<_Tp, _Allocator>& __x, const deque<_Tp, _Allocator>& __y) {
  return !(__x == __y);
}

template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(const deque<_Tp, _Allocator>& __x, const deque<_Tp, _Allocator>& __y) {
  return std::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());
}

template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>(const deque<_Tp, _Allocator>& __x, const deque<_Tp, _Allocator>& __y) {
  return __y < __x;
}

template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>=(const deque<_Tp, _Allocator>& __x, const deque<_Tp, _Allocator>& __y) {
  return !(__x < __y);
}

template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<=(const deque<_Tp, _Allocator>& __x, const deque<_Tp, _Allocator>& __y) {
  return !(__y < __x);
}
# 2564 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(deque<_Tp, _Allocator>& __x, deque<_Tp, _Allocator>& __y)
    noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}
# 2596 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
}}
# 2596 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
#pragma clang diagnostic pop


#pragma clang diagnostic push
# 2599 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 2599 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 2599 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 2599 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 2599 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 2599 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
namespace pmr {
template <class _ValueT>
using deque = std::deque<_ValueT, polymorphic_allocator<_ValueT>>;
}
}}
# 2604 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
#pragma clang diagnostic pop
# 2614 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/functional" 1 3
# 533 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/functional" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_negate.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_negate.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_negate.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_negate.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_negate.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_negate.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_negate.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_negate.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Predicate>
class __attribute__((__deprecated__)) binary_negate
    : public __binary_function<typename _Predicate::first_argument_type,
                               typename _Predicate::second_argument_type,
                               bool> {
  _Predicate __pred_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr binary_negate(const _Predicate& __pred)
      : __pred_(__pred) {}

  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(
      const typename _Predicate::first_argument_type& __x, const typename _Predicate::second_argument_type& __y) const {
    return !__pred_(__x, __y);
  }
};

template <class _Predicate>
__attribute__((__deprecated__)) inline constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) binary_negate<_Predicate>
not2(const _Predicate& __pred) {
  return binary_negate<_Predicate>(__pred);
}



}}
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binary_negate.h" 3
#pragma clang diagnostic pop
# 534 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/functional" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/bind.h" 1 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/bind.h" 3


#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/bind.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/bind.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/bind.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/bind.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/bind.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/bind.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
struct is_bind_expression
    : _If< _IsSame<_Tp, __remove_cvref_t<_Tp> >::value, false_type, is_bind_expression<__remove_cvref_t<_Tp> > > {};


template <class _Tp>
inline constexpr bool is_bind_expression_v = is_bind_expression<_Tp>::value;


template <class _Tp>
struct is_placeholder
    : _If< _IsSame<_Tp, __remove_cvref_t<_Tp> >::value,
           integral_constant<int, 0>,
           is_placeholder<__remove_cvref_t<_Tp> > > {};


template <class _Tp>
inline constexpr int is_placeholder_v = is_placeholder<_Tp>::value;


namespace placeholders {

template <int _Np>
struct __ph {};
# 62 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/bind.h" 3
__attribute__((__visibility__("default"))) extern const __ph<1> _1;
__attribute__((__visibility__("default"))) extern const __ph<2> _2;
__attribute__((__visibility__("default"))) extern const __ph<3> _3;
__attribute__((__visibility__("default"))) extern const __ph<4> _4;
__attribute__((__visibility__("default"))) extern const __ph<5> _5;
__attribute__((__visibility__("default"))) extern const __ph<6> _6;
__attribute__((__visibility__("default"))) extern const __ph<7> _7;
__attribute__((__visibility__("default"))) extern const __ph<8> _8;
__attribute__((__visibility__("default"))) extern const __ph<9> _9;
__attribute__((__visibility__("default"))) extern const __ph<10> _10;

}

template <int _Np>
struct is_placeholder<placeholders::__ph<_Np> > : public integral_constant<int, _Np> {};



template <class _Tp, class _Uj>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp& __mu(reference_wrapper<_Tp> __t, _Uj&) {
  return __t.get();
}

template <class _Ti, class... _Uj, size_t... _Indx>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __invoke_of<_Ti&, _Uj...>::type
__mu_expand(_Ti& __ti, tuple<_Uj...>& __uj, __tuple_indices<_Indx...>) {
  return __ti(std::forward<_Uj>(std::get<_Indx>(__uj))...);
}

template <class _Ti, class... _Uj, __enable_if_t<is_bind_expression<_Ti>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __invoke_of<_Ti&, _Uj...>::type
__mu(_Ti& __ti, tuple<_Uj...>& __uj) {
  typedef typename __make_tuple_indices<sizeof...(_Uj)>::type __indices;
  return std::__mu_expand(__ti, __uj, __indices());
}

template <bool _IsPh, class _Ti, class _Uj>
struct __mu_return2 {};

template <class _Ti, class _Uj>
struct __mu_return2<true, _Ti, _Uj> {
  typedef typename tuple_element<is_placeholder<_Ti>::value - 1, _Uj>::type type;
};

template <class _Ti, class _Uj, __enable_if_t<0 < is_placeholder<_Ti>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
typename __mu_return2<0 < is_placeholder<_Ti>::value, _Ti, _Uj>::type
__mu(_Ti&, _Uj& __uj) {
  const size_t __indx = is_placeholder<_Ti>::value - 1;
  return std::forward<typename tuple_element<__indx, _Uj>::type>(std::get<__indx>(__uj));
}

template <class _Ti,
          class _Uj,
          __enable_if_t<!is_bind_expression<_Ti>::value && is_placeholder<_Ti>::value == 0 &&
                            !__is_reference_wrapper<_Ti>::value,
                        int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Ti& __mu(_Ti& __ti, _Uj&) {
  return __ti;
}

template <class _Ti, bool _IsReferenceWrapper, bool _IsBindEx, bool _IsPh, class _TupleUj>
struct __mu_return_impl;

template <bool _Invokable, class _Ti, class... _Uj>
struct __mu_return_invokable
{
  typedef __nat type;
};

template <class _Ti, class... _Uj>
struct __mu_return_invokable<true, _Ti, _Uj...> {
  typedef typename __invoke_of<_Ti&, _Uj...>::type type;
};

template <class _Ti, class... _Uj>
struct __mu_return_impl<_Ti, false, true, false, tuple<_Uj...> >
    : public __mu_return_invokable<__invokable<_Ti&, _Uj...>::value, _Ti, _Uj...> {};

template <class _Ti, class _TupleUj>
struct __mu_return_impl<_Ti, false, false, true, _TupleUj> {
  typedef typename tuple_element<is_placeholder<_Ti>::value - 1, _TupleUj>::type&& type;
};

template <class _Ti, class _TupleUj>
struct __mu_return_impl<_Ti, true, false, false, _TupleUj> {
  typedef typename _Ti::type& type;
};

template <class _Ti, class _TupleUj>
struct __mu_return_impl<_Ti, false, false, false, _TupleUj> {
  typedef _Ti& type;
};

template <class _Ti, class _TupleUj>
struct __mu_return
    : public __mu_return_impl<
          _Ti,
          __is_reference_wrapper<_Ti>::value,
          is_bind_expression<_Ti>::value,
          0 < is_placeholder<_Ti>::value && is_placeholder<_Ti>::value <= tuple_size<_TupleUj>::value,
          _TupleUj> {};

template <class _Fp, class _BoundArgs, class _TupleUj>
struct __is_valid_bind_return {
  static const bool value = false;
};

template <class _Fp, class... _BoundArgs, class _TupleUj>
struct __is_valid_bind_return<_Fp, tuple<_BoundArgs...>, _TupleUj> {
  static const bool value = __invokable<_Fp, typename __mu_return<_BoundArgs, _TupleUj>::type...>::value;
};

template <class _Fp, class... _BoundArgs, class _TupleUj>
struct __is_valid_bind_return<_Fp, const tuple<_BoundArgs...>, _TupleUj> {
  static const bool value = __invokable<_Fp, typename __mu_return<const _BoundArgs, _TupleUj>::type...>::value;
};

template <class _Fp, class _BoundArgs, class _TupleUj, bool = __is_valid_bind_return<_Fp, _BoundArgs, _TupleUj>::value>
struct __bind_return;

template <class _Fp, class... _BoundArgs, class _TupleUj>
struct __bind_return<_Fp, tuple<_BoundArgs...>, _TupleUj, true> {
  typedef typename __invoke_of< _Fp&, typename __mu_return< _BoundArgs, _TupleUj >::type... >::type type;
};

template <class _Fp, class... _BoundArgs, class _TupleUj>
struct __bind_return<_Fp, const tuple<_BoundArgs...>, _TupleUj, true> {
  typedef typename __invoke_of< _Fp&, typename __mu_return< const _BoundArgs, _TupleUj >::type... >::type type;
};

template <class _Fp, class _BoundArgs, size_t... _Indx, class _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __bind_return<_Fp, _BoundArgs, _Args>::type
__apply_functor(_Fp& __f, _BoundArgs& __bound_args, __tuple_indices<_Indx...>, _Args&& __args) {
  return std::__invoke(__f, std::__mu(std::get<_Indx>(__bound_args), __args)...);
}

template <class _Fp, class... _BoundArgs>
class __bind : public __weak_result_type<__decay_t<_Fp> > {
protected:
  using _Fd = __decay_t<_Fp>;
  typedef tuple<__decay_t<_BoundArgs>...> _Td;

private:
  _Fd __f_;
  _Td __bound_args_;

  typedef typename __make_tuple_indices<sizeof...(_BoundArgs)>::type __indices;

public:
  template <
      class _Gp,
      class... _BA,
      __enable_if_t<is_constructible<_Fd, _Gp>::value && !is_same<__libcpp_remove_reference_t<_Gp>, __bind>::value,
                    int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __bind(_Gp&& __f, _BA&&... __bound_args)
      : __f_(std::forward<_Gp>(__f)), __bound_args_(std::forward<_BA>(__bound_args)...) {}

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __bind_return<_Fd, _Td, tuple<_Args&&...> >::type
  operator()(_Args&&... __args) {
    return std::__apply_functor(__f_, __bound_args_, __indices(), tuple<_Args&&...>(std::forward<_Args>(__args)...));
  }

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  typename __bind_return<const _Fd, const _Td, tuple<_Args&&...> >::type
  operator()(_Args&&... __args) const {
    return std::__apply_functor(__f_, __bound_args_, __indices(), tuple<_Args&&...>(std::forward<_Args>(__args)...));
  }
};

template <class _Fp, class... _BoundArgs>
struct is_bind_expression<__bind<_Fp, _BoundArgs...> > : public true_type {};

template <class _Rp, class _Fp, class... _BoundArgs>
class __bind_r : public __bind<_Fp, _BoundArgs...> {
  typedef __bind<_Fp, _BoundArgs...> base;
  typedef typename base::_Fd _Fd;
  typedef typename base::_Td _Td;

public:
  typedef _Rp result_type;

  template <
      class _Gp,
      class... _BA,
      __enable_if_t<is_constructible<_Fd, _Gp>::value && !is_same<__libcpp_remove_reference_t<_Gp>, __bind_r>::value,
                    int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __bind_r(_Gp&& __f, _BA&&... __bound_args)
      : base(std::forward<_Gp>(__f), std::forward<_BA>(__bound_args)...) {}

  template <
      class... _Args,
      __enable_if_t<is_convertible<typename __bind_return<_Fd, _Td, tuple<_Args&&...> >::type, result_type>::value ||
                        is_void<_Rp>::value,
                    int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result_type operator()(_Args&&... __args) {
    typedef __invoke_void_return_wrapper<_Rp> _Invoker;
    return _Invoker::__call(static_cast<base&>(*this), std::forward<_Args>(__args)...);
  }

  template <class... _Args,
            __enable_if_t<is_convertible<typename __bind_return<const _Fd, const _Td, tuple<_Args&&...> >::type,
                                         result_type>::value ||
                              is_void<_Rp>::value,
                          int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) result_type operator()(_Args&&... __args) const {
    typedef __invoke_void_return_wrapper<_Rp> _Invoker;
    return _Invoker::__call(static_cast<base const&>(*this), std::forward<_Args>(__args)...);
  }
};

template <class _Rp, class _Fp, class... _BoundArgs>
struct is_bind_expression<__bind_r<_Rp, _Fp, _BoundArgs...> > : public true_type {};

template <class _Fp, class... _BoundArgs>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bind<_Fp, _BoundArgs...>
bind(_Fp&& __f, _BoundArgs&&... __bound_args) {
  typedef __bind<_Fp, _BoundArgs...> type;
  return type(std::forward<_Fp>(__f), std::forward<_BoundArgs>(__bound_args)...);
}

template <class _Rp, class _Fp, class... _BoundArgs>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bind_r<_Rp, _Fp, _BoundArgs...>
bind(_Fp&& __f, _BoundArgs&&... __bound_args) {
  typedef __bind_r<_Rp, _Fp, _BoundArgs...> type;
  return type(std::forward<_Fp>(__f), std::forward<_BoundArgs>(__bound_args)...);
}



}}
# 294 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/bind.h" 3
#pragma clang diagnostic pop
# 535 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/functional" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder1st.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder1st.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder1st.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder1st.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder1st.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder1st.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder1st.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder1st.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder1st.h" 3
}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder1st.h" 3
#pragma clang diagnostic pop
# 536 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/functional" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder2nd.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder2nd.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder2nd.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder2nd.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder2nd.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder2nd.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder2nd.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder2nd.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder2nd.h" 3
}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/binder2nd.h" 3
#pragma clang diagnostic pop
# 537 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/functional" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fn.h" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fn.h" 3


#pragma clang diagnostic push
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fn.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fn.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fn.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fn.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fn.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fn.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
class __mem_fn : public __weak_result_type<_Tp> {
public:

  typedef _Tp type;

private:
  type __f_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __mem_fn(type __f) noexcept : __f_(__f) {}


  template <class... _ArgTypes>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))

  typename __invoke_return<type, _ArgTypes...>::type
  operator()(_ArgTypes&&... __args) const {
    return std::__invoke(__f_, std::forward<_ArgTypes>(__args)...);
  }
};

template <class _Rp, class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __mem_fn<_Rp _Tp::*> mem_fn(_Rp _Tp::*__pm) noexcept {
  return __mem_fn<_Rp _Tp::*>(__pm);
}

}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fn.h" 3
#pragma clang diagnostic pop
# 539 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/functional" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fun_ref.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fun_ref.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fun_ref.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fun_ref.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fun_ref.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fun_ref.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fun_ref.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fun_ref.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 144 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fun_ref.h" 3
}}
# 144 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/mem_fun_ref.h" 3
#pragma clang diagnostic pop
# 540 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/functional" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_binary_function.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_binary_function.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_binary_function.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_binary_function.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_binary_function.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_binary_function.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_binary_function.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_binary_function.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_binary_function.h" 3
}}
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_binary_function.h" 3
#pragma clang diagnostic pop
# 542 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/functional" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_unary_function.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_unary_function.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_unary_function.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_unary_function.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_unary_function.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_unary_function.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_unary_function.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_unary_function.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_unary_function.h" 3
}}
# 42 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/pointer_to_unary_function.h" 3
#pragma clang diagnostic pop
# 543 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/functional" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_negate.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_negate.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_negate.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_negate.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_negate.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_negate.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_negate.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_negate.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Predicate>
class
__attribute__((__deprecated__)) unary_negate : public __unary_function<typename _Predicate::argument_type, bool> {
  _Predicate __pred_;

public:
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit unary_negate(const _Predicate& __pred)
      : __pred_(__pred) {}
  constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  operator()(const typename _Predicate::argument_type& __x) const {
    return !__pred_(__x);
  }
};

template <class _Predicate>
__attribute__((__deprecated__)) inline constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unary_negate<_Predicate>
not1(const _Predicate& __pred) {
  return unary_negate<_Predicate>(__pred);
}



}}
# 46 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/unary_negate.h" 3
#pragma clang diagnostic pop
# 546 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/functional" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 1 3
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/builtin_new_allocator.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/builtin_new_allocator.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/builtin_new_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/builtin_new_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/builtin_new_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/builtin_new_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/builtin_new_allocator.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/builtin_new_allocator.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {





struct __builtin_new_allocator {
  struct __builtin_new_deleter {
    typedef void* pointer_type;

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr explicit __builtin_new_deleter(size_t __size, size_t __align)
        : __size_(__size), __align_(__align) {}

    __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator()(void* __p) const noexcept {
      std::__libcpp_deallocate(__p, __size_, __align_);
    }

  private:
    size_t __size_;
    size_t __align_;
  };

  typedef unique_ptr<void, __builtin_new_deleter> __holder_t;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static __holder_t __allocate_bytes(size_t __s, size_t __align) {
    return __holder_t(std::__libcpp_allocate(__s, __align), __builtin_new_deleter(__s, __align));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static void __deallocate_bytes(void* __p, size_t __s, size_t __align) noexcept {
    std::__libcpp_deallocate(__p, __s, __align);
  }

  template <class _Tp>
  __attribute__((__nodebug__)) __attribute__((__always_inline__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static __holder_t __allocate_type(size_t __n) {
    return __allocate_bytes(__n * sizeof(_Tp), alignof(_Tp));
  }

  template <class _Tp>
  __attribute__((__nodebug__)) __attribute__((__always_inline__)) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static void
  __deallocate_type(void* __p, size_t __n) noexcept {
    __deallocate_bytes(__p, __n * sizeof(_Tp), alignof(_Tp));
  }
};

}}
# 65 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/builtin_new_allocator.h" 3
#pragma clang diagnostic pop
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 2 3
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/strip_signature.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/strip_signature.h" 3




#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/strip_signature.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/strip_signature.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/strip_signature.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/strip_signature.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/strip_signature.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/strip_signature.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Fp>
struct __strip_signature;



template <class _Rp, class... _Args>
struct __strip_signature<_Rp (*)(_Args...)> {
  using type = _Rp(_Args...);
};

template <class _Rp, class... _Args>
struct __strip_signature<_Rp (*)(_Args...) noexcept> {
  using type = _Rp(_Args...);
};




template<class _Rp, class _Gp, class ..._Ap>
struct __strip_signature<_Rp (_Gp::*) (_Ap...)> { using type = _Rp(_Ap...); };
template<class _Rp, class _Gp, class ..._Ap>
struct __strip_signature<_Rp (_Gp::*) (_Ap...) const> { using type = _Rp(_Ap...); };
template<class _Rp, class _Gp, class ..._Ap>
struct __strip_signature<_Rp (_Gp::*) (_Ap...) volatile> { using type = _Rp(_Ap...); };
template<class _Rp, class _Gp, class ..._Ap>
struct __strip_signature<_Rp (_Gp::*) (_Ap...) const volatile> { using type = _Rp(_Ap...); };

template<class _Rp, class _Gp, class ..._Ap>
struct __strip_signature<_Rp (_Gp::*) (_Ap...) &> { using type = _Rp(_Ap...); };
template<class _Rp, class _Gp, class ..._Ap>
struct __strip_signature<_Rp (_Gp::*) (_Ap...) const &> { using type = _Rp(_Ap...); };
template<class _Rp, class _Gp, class ..._Ap>
struct __strip_signature<_Rp (_Gp::*) (_Ap...) volatile &> { using type = _Rp(_Ap...); };
template<class _Rp, class _Gp, class ..._Ap>
struct __strip_signature<_Rp (_Gp::*) (_Ap...) const volatile &> { using type = _Rp(_Ap...); };

template<class _Rp, class _Gp, class ..._Ap>
struct __strip_signature<_Rp (_Gp::*) (_Ap...) noexcept> { using type = _Rp(_Ap...); };
template<class _Rp, class _Gp, class ..._Ap>
struct __strip_signature<_Rp (_Gp::*) (_Ap...) const noexcept> { using type = _Rp(_Ap...); };
template<class _Rp, class _Gp, class ..._Ap>
struct __strip_signature<_Rp (_Gp::*) (_Ap...) volatile noexcept> { using type = _Rp(_Ap...); };
template<class _Rp, class _Gp, class ..._Ap>
struct __strip_signature<_Rp (_Gp::*) (_Ap...) const volatile noexcept> { using type = _Rp(_Ap...); };

template<class _Rp, class _Gp, class ..._Ap>
struct __strip_signature<_Rp (_Gp::*) (_Ap...) & noexcept> { using type = _Rp(_Ap...); };
template<class _Rp, class _Gp, class ..._Ap>
struct __strip_signature<_Rp (_Gp::*) (_Ap...) const & noexcept> { using type = _Rp(_Ap...); };
template<class _Rp, class _Gp, class ..._Ap>
struct __strip_signature<_Rp (_Gp::*) (_Ap...) volatile & noexcept> { using type = _Rp(_Ap...); };
template<class _Rp, class _Gp, class ..._Ap>
struct __strip_signature<_Rp (_Gp::*) (_Ap...) const volatile & noexcept> { using type = _Rp(_Ap...); };


}}
# 77 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/strip_signature.h" 3
#pragma clang diagnostic pop
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 2 3
# 46 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 2 3



#pragma clang diagnostic push
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 53 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



#pragma clang diagnostic push



class __attribute__((__visibility__("default"))) bad_function_call : public exception {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_function_call() noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_function_call(const bad_function_call&) noexcept = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bad_function_call& operator=(const bad_function_call&) noexcept = default;




  ~bad_function_call() noexcept override;







};
#pragma clang diagnostic pop

[[noreturn]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_bad_function_call() {

  throw bad_function_call();



}

template <class _Fp>
class function;

namespace __function {

template <class _Rp>
struct __maybe_derive_from_unary_function {};

template <class _Rp, class _A1>
struct __maybe_derive_from_unary_function<_Rp(_A1)> : public __unary_function<_A1, _Rp> {};

template <class _Rp>
struct __maybe_derive_from_binary_function {};

template <class _Rp, class _A1, class _A2>
struct __maybe_derive_from_binary_function<_Rp(_A1, _A2)> : public __binary_function<_A1, _A2, _Rp> {};

template <class _Fp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __not_null(_Fp const&) {
  return true;
}

template <class _Fp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __not_null(_Fp* __ptr) {
  return __ptr;
}

template <class _Ret, class _Class>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __not_null(_Ret _Class::*__ptr) {
  return __ptr;
}

template <class _Fp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __not_null(function<_Fp> const& __f) {
  return !!__f;
}


template <class _Rp, class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __not_null(_Rp (^__p)(_Args...)) {
  return __p;
}


}

namespace __function {



template <class _Fp, class _Ap, class _FB>
class __alloc_func;
template <class _Fp, class _FB>
class __default_alloc_func;

template <class _Fp, class _Ap, class _Rp, class... _ArgTypes>
class __alloc_func<_Fp, _Ap, _Rp(_ArgTypes...)> {
  __compressed_pair<_Fp, _Ap> __f_;

public:
  typedef __attribute__((__nodebug__)) _Fp _Target;
  typedef __attribute__((__nodebug__)) _Ap _Alloc;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Target& __target() const { return __f_.first(); }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Alloc& __get_allocator() const { return __f_.second(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __alloc_func(_Target&& __f)
      : __f_(piecewise_construct, std::forward_as_tuple(std::move(__f)), std::forward_as_tuple()) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __alloc_func(const _Target& __f, const _Alloc& __a)
      : __f_(piecewise_construct, std::forward_as_tuple(__f), std::forward_as_tuple(__a)) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __alloc_func(const _Target& __f, _Alloc&& __a)
      : __f_(piecewise_construct, std::forward_as_tuple(__f), std::forward_as_tuple(std::move(__a))) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __alloc_func(_Target&& __f, _Alloc&& __a)
      : __f_(piecewise_construct, std::forward_as_tuple(std::move(__f)), std::forward_as_tuple(std::move(__a))) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Rp operator()(_ArgTypes&&... __arg) {
    typedef __invoke_void_return_wrapper<_Rp> _Invoker;
    return _Invoker::__call(__f_.first(), std::forward<_ArgTypes>(__arg)...);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __alloc_func* __clone() const {
    typedef allocator_traits<_Alloc> __alloc_traits;
    typedef __rebind_alloc<__alloc_traits, __alloc_func> _AA;
    _AA __a(__f_.second());
    typedef __allocator_destructor<_AA> _Dp;
    unique_ptr<__alloc_func, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));
    ::new ((void*)__hold.get()) __alloc_func(__f_.first(), _Alloc(__a));
    return __hold.release();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void destroy() noexcept { __f_.~__compressed_pair<_Target, _Alloc>(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static void __destroy_and_delete(__alloc_func* __f) {
    typedef allocator_traits<_Alloc> __alloc_traits;
    typedef __rebind_alloc<__alloc_traits, __alloc_func> _FunAlloc;
    _FunAlloc __a(__f->__get_allocator());
    __f->destroy();
    __a.deallocate(__f, 1);
  }
};

template <class _Fp, class _Rp, class... _ArgTypes>
class __default_alloc_func<_Fp, _Rp(_ArgTypes...)> {
  _Fp __f_;

public:
  typedef __attribute__((__nodebug__)) _Fp _Target;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Target& __target() const { return __f_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __default_alloc_func(_Target&& __f) : __f_(std::move(__f)) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __default_alloc_func(const _Target& __f) : __f_(__f) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Rp operator()(_ArgTypes&&... __arg) {
    typedef __invoke_void_return_wrapper<_Rp> _Invoker;
    return _Invoker::__call(__f_, std::forward<_ArgTypes>(__arg)...);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __default_alloc_func* __clone() const {
    __builtin_new_allocator::__holder_t __hold = __builtin_new_allocator::__allocate_type<__default_alloc_func>(1);
    __default_alloc_func* __res = ::new ((void*)__hold.get()) __default_alloc_func(__f_);
    (void)__hold.release();
    return __res;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void destroy() noexcept { __f_.~_Target(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static void __destroy_and_delete(__default_alloc_func* __f) {
    __f->destroy();
    __builtin_new_allocator::__deallocate_type<__default_alloc_func>(__f, 1);
  }
};



template <class _Fp>
class __base;

template <class _Rp, class... _ArgTypes>
class __base<_Rp(_ArgTypes...)> {
public:
  __base(const __base&) = delete;
  __base& operator=(const __base&) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __base() {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual ~__base() {}
  virtual __base* __clone() const = 0;
  virtual void __clone(__base*) const = 0;
  virtual void destroy() noexcept = 0;
  virtual void destroy_deallocate() noexcept = 0;
  virtual _Rp operator()(_ArgTypes&&...) = 0;

  virtual const void* target(const type_info&) const noexcept = 0;
  virtual const std::type_info& target_type() const noexcept = 0;

};



template <class _FD, class _Alloc, class _FB>
class __func;

template <class _Fp, class _Alloc, class _Rp, class... _ArgTypes>
class __func<_Fp, _Alloc, _Rp(_ArgTypes...)> : public __base<_Rp(_ArgTypes...)> {
  __alloc_func<_Fp, _Alloc, _Rp(_ArgTypes...)> __f_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __func(_Fp&& __f) : __f_(std::move(__f)) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __func(const _Fp& __f, const _Alloc& __a) : __f_(__f, __a) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __func(const _Fp& __f, _Alloc&& __a) : __f_(__f, std::move(__a)) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __func(_Fp&& __f, _Alloc&& __a) : __f_(std::move(__f), std::move(__a)) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual __base<_Rp(_ArgTypes...)>* __clone() const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual void __clone(__base<_Rp(_ArgTypes...)>*) const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual void destroy() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual void destroy_deallocate() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual _Rp operator()(_ArgTypes&&... __arg);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual const void* target(const type_info&) const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual const std::type_info& target_type() const noexcept;

};

template <class _Fp, class _Alloc, class _Rp, class... _ArgTypes>
__base<_Rp(_ArgTypes...)>* __func<_Fp, _Alloc, _Rp(_ArgTypes...)>::__clone() const {
  typedef allocator_traits<_Alloc> __alloc_traits;
  typedef __rebind_alloc<__alloc_traits, __func> _Ap;
  _Ap __a(__f_.__get_allocator());
  typedef __allocator_destructor<_Ap> _Dp;
  unique_ptr<__func, _Dp> __hold(__a.allocate(1), _Dp(__a, 1));
  ::new ((void*)__hold.get()) __func(__f_.__target(), _Alloc(__a));
  return __hold.release();
}

template <class _Fp, class _Alloc, class _Rp, class... _ArgTypes>
void __func<_Fp, _Alloc, _Rp(_ArgTypes...)>::__clone(__base<_Rp(_ArgTypes...)>* __p) const {
  ::new ((void*)__p) __func(__f_.__target(), __f_.__get_allocator());
}

template <class _Fp, class _Alloc, class _Rp, class... _ArgTypes>
void __func<_Fp, _Alloc, _Rp(_ArgTypes...)>::destroy() noexcept {
  __f_.destroy();
}

template <class _Fp, class _Alloc, class _Rp, class... _ArgTypes>
void __func<_Fp, _Alloc, _Rp(_ArgTypes...)>::destroy_deallocate() noexcept {
  typedef allocator_traits<_Alloc> __alloc_traits;
  typedef __rebind_alloc<__alloc_traits, __func> _Ap;
  _Ap __a(__f_.__get_allocator());
  __f_.destroy();
  __a.deallocate(this, 1);
}

template <class _Fp, class _Alloc, class _Rp, class... _ArgTypes>
_Rp __func<_Fp, _Alloc, _Rp(_ArgTypes...)>::operator()(_ArgTypes&&... __arg) {
  return __f_(std::forward<_ArgTypes>(__arg)...);
}



template <class _Fp, class _Alloc, class _Rp, class... _ArgTypes>
const void* __func<_Fp, _Alloc, _Rp(_ArgTypes...)>::target(const type_info& __ti) const noexcept {
  if (__ti == typeid(_Fp))
    return std::addressof(__f_.__target());
  return nullptr;
}

template <class _Fp, class _Alloc, class _Rp, class... _ArgTypes>
const std::type_info& __func<_Fp, _Alloc, _Rp(_ArgTypes...)>::target_type() const noexcept {
  return typeid(_Fp);
}





template <class _Fp>
class __value_func;

template <class _Rp, class... _ArgTypes>
class __value_func<_Rp(_ArgTypes...)> {
#pragma GCC diagnostic push
# 339 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 339 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  typename aligned_storage<3 * sizeof(void*)>::type __buf_;
#pragma GCC diagnostic pop

  typedef __base<_Rp(_ArgTypes...)> __func;
  __func* __f_;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__no_sanitize__("cfi"))) static __func* __as_base(void* __p) { return reinterpret_cast<__func*>(__p); }

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __value_func() noexcept : __f_(nullptr) {}

  template <class _Fp, class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __value_func(_Fp&& __f, const _Alloc& __a) : __f_(nullptr) {
    typedef allocator_traits<_Alloc> __alloc_traits;
    typedef __function::__func<_Fp, _Alloc, _Rp(_ArgTypes...)> _Fun;
    typedef __rebind_alloc<__alloc_traits, _Fun> _FunAlloc;

    if (__function::__not_null(__f)) {
      _FunAlloc __af(__a);
      if (sizeof(_Fun) <= sizeof(__buf_) && is_nothrow_copy_constructible<_Fp>::value &&
          is_nothrow_copy_constructible<_FunAlloc>::value) {
        __f_ = ::new ((void*)&__buf_) _Fun(std::move(__f), _Alloc(__af));
      } else {
        typedef __allocator_destructor<_FunAlloc> _Dp;
        unique_ptr<__func, _Dp> __hold(__af.allocate(1), _Dp(__af, 1));
        ::new ((void*)__hold.get()) _Fun(std::move(__f), _Alloc(__a));
        __f_ = __hold.release();
      }
    }
  }

  template <class _Fp, __enable_if_t<!is_same<__decay_t<_Fp>, __value_func>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __value_func(_Fp&& __f) : __value_func(std::forward<_Fp>(__f), allocator<_Fp>()) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __value_func(const __value_func& __f) {
    if (__f.__f_ == nullptr)
      __f_ = nullptr;
    else if ((void*)__f.__f_ == &__f.__buf_) {
      __f_ = __as_base(&__buf_);
      __f.__f_->__clone(__f_);
    } else
      __f_ = __f.__f_->__clone();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __value_func(__value_func&& __f) noexcept {
    if (__f.__f_ == nullptr)
      __f_ = nullptr;
    else if ((void*)__f.__f_ == &__f.__buf_) {
      __f_ = __as_base(&__buf_);
      __f.__f_->__clone(__f_);
    } else {
      __f_ = __f.__f_;
      __f.__f_ = nullptr;
    }
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__value_func() {
    if ((void*)__f_ == &__buf_)
      __f_->destroy();
    else if (__f_)
      __f_->destroy_deallocate();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __value_func& operator=(__value_func&& __f) {
    *this = nullptr;
    if (__f.__f_ == nullptr)
      __f_ = nullptr;
    else if ((void*)__f.__f_ == &__f.__buf_) {
      __f_ = __as_base(&__buf_);
      __f.__f_->__clone(__f_);
    } else {
      __f_ = __f.__f_;
      __f.__f_ = nullptr;
    }
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __value_func& operator=(nullptr_t) {
    __func* __f = __f_;
    __f_ = nullptr;
    if ((void*)__f == &__buf_)
      __f->destroy();
    else if (__f)
      __f->destroy_deallocate();
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Rp operator()(_ArgTypes&&... __args) const {
    if (__f_ == nullptr)
      __throw_bad_function_call();
    return (*__f_)(std::forward<_ArgTypes>(__args)...);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(__value_func& __f) noexcept {
    if (&__f == this)
      return;
    if ((void*)__f_ == &__buf_ && (void*)__f.__f_ == &__f.__buf_) {
#pragma GCC diagnostic push
# 437 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 437 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
      typename aligned_storage<sizeof(__buf_)>::type __tempbuf;
#pragma GCC diagnostic pop
      __func* __t = __as_base(&__tempbuf);
      __f_->__clone(__t);
      __f_->destroy();
      __f_ = nullptr;
      __f.__f_->__clone(__as_base(&__buf_));
      __f.__f_->destroy();
      __f.__f_ = nullptr;
      __f_ = __as_base(&__buf_);
      __t->__clone(__as_base(&__f.__buf_));
      __t->destroy();
      __f.__f_ = __as_base(&__f.__buf_);
    } else if ((void*)__f_ == &__buf_) {
      __f_->__clone(__as_base(&__f.__buf_));
      __f_->destroy();
      __f_ = __f.__f_;
      __f.__f_ = __as_base(&__f.__buf_);
    } else if ((void*)__f.__f_ == &__f.__buf_) {
      __f.__f_->__clone(__as_base(&__buf_));
      __f.__f_->destroy();
      __f.__f_ = __f_;
      __f_ = __as_base(&__buf_);
    } else
      std::swap(__f_, __f.__f_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit operator bool() const noexcept { return __f_ != nullptr; }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const std::type_info& target_type() const noexcept {
    if (__f_ == nullptr)
      return typeid(void);
    return __f_->target_type();
  }

  template <typename _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Tp* target() const noexcept {
    if (__f_ == nullptr)
      return nullptr;
    return (const _Tp*)__f_->target(typeid(_Tp));
  }

};



union __policy_storage {
  mutable char __small[sizeof(void*) * 2];
  void* __large;
};


template <typename _Fun>
struct __use_small_storage
    : public integral_constant<
          bool,
          sizeof(_Fun) <= sizeof(__policy_storage)&& alignof(_Fun) <= alignof(__policy_storage) &&
              is_trivially_copy_constructible<_Fun>::value && is_trivially_destructible<_Fun>::value> {};



struct __policy {

  void* (*const __clone)(const void*);
  void (*const __destroy)(void*);


  const bool __is_null;


  const std::type_info* const __type_info;



  template <typename _Fun>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static const __policy* __create() {
    return __choose_policy<_Fun>(__use_small_storage<_Fun>());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static const __policy* __create_empty() {
    static constexpr __policy __policy = {
        nullptr,
        nullptr,
        true,

        &typeid(void)



    };
    return &__policy;
  }

private:
  template <typename _Fun>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static void* __large_clone(const void* __s) {
    const _Fun* __f = static_cast<const _Fun*>(__s);
    return __f->__clone();
  }

  template <typename _Fun>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static void __large_destroy(void* __s) {
    _Fun::__destroy_and_delete(static_cast<_Fun*>(__s));
  }

  template <typename _Fun>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static const __policy* __choose_policy( false_type) {
    static constexpr __policy __policy = {
        &__large_clone<_Fun>,
        &__large_destroy<_Fun>,
        false,

        &typeid(typename _Fun::_Target)



    };
    return &__policy;
  }

  template <typename _Fun>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static const __policy* __choose_policy( true_type) {
    static constexpr __policy __policy = {
        nullptr,
        nullptr,
        false,

        &typeid(typename _Fun::_Target)



    };
    return &__policy;
  }
};



template <typename _Tp>
using __fast_forward = __conditional_t<is_scalar<_Tp>::value, _Tp, _Tp&&>;



template <class _Fp>
struct __policy_invoker;

template <class _Rp, class... _ArgTypes>
struct __policy_invoker<_Rp(_ArgTypes...)> {
  typedef _Rp (*__Call)(const __policy_storage*, __fast_forward<_ArgTypes>...);

  __Call __call_;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __policy_invoker() : __call_(&__call_empty) {}


  template <typename _Fun>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static __policy_invoker __create() {
    return __policy_invoker(&__call_impl<_Fun>);
  }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __policy_invoker(__Call __c) : __call_(__c) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static _Rp __call_empty(const __policy_storage*, __fast_forward<_ArgTypes>...) {
    __throw_bad_function_call();
  }

  template <typename _Fun>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static _Rp __call_impl(const __policy_storage* __buf, __fast_forward<_ArgTypes>... __args) {
    _Fun* __f = reinterpret_cast<_Fun*>(__use_small_storage<_Fun>::value ? &__buf->__small : __buf->__large);
    return (*__f)(std::forward<_ArgTypes>(__args)...);
  }
};




template <class _Fp>
class __policy_func;

template <class _Rp, class... _ArgTypes>
class __policy_func<_Rp(_ArgTypes...)> {

  __policy_storage __buf_;




  typedef __function::__policy_invoker<_Rp(_ArgTypes...)> __invoker;
  __invoker __invoker_;



  const __policy* __policy_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __policy_func() : __policy_(__policy::__create_empty()) {}

  template <class _Fp, class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __policy_func(_Fp&& __f, const _Alloc& __a) : __policy_(__policy::__create_empty()) {
    typedef __alloc_func<_Fp, _Alloc, _Rp(_ArgTypes...)> _Fun;
    typedef allocator_traits<_Alloc> __alloc_traits;
    typedef __rebind_alloc<__alloc_traits, _Fun> _FunAlloc;

    if (__function::__not_null(__f)) {
      __invoker_ = __invoker::template __create<_Fun>();
      __policy_ = __policy::__create<_Fun>();

      _FunAlloc __af(__a);
      if (__use_small_storage<_Fun>()) {
        ::new ((void*)&__buf_.__small) _Fun(std::move(__f), _Alloc(__af));
      } else {
        typedef __allocator_destructor<_FunAlloc> _Dp;
        unique_ptr<_Fun, _Dp> __hold(__af.allocate(1), _Dp(__af, 1));
        ::new ((void*)__hold.get()) _Fun(std::move(__f), _Alloc(__af));
        __buf_.__large = __hold.release();
      }
    }
  }

  template <class _Fp, __enable_if_t<!is_same<__decay_t<_Fp>, __policy_func>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __policy_func(_Fp&& __f) : __policy_(__policy::__create_empty()) {
    typedef __default_alloc_func<_Fp, _Rp(_ArgTypes...)> _Fun;

    if (__function::__not_null(__f)) {
      __invoker_ = __invoker::template __create<_Fun>();
      __policy_ = __policy::__create<_Fun>();
      if (__use_small_storage<_Fun>()) {
        ::new ((void*)&__buf_.__small) _Fun(std::move(__f));
      } else {
        __builtin_new_allocator::__holder_t __hold = __builtin_new_allocator::__allocate_type<_Fun>(1);
        __buf_.__large = ::new ((void*)__hold.get()) _Fun(std::move(__f));
        (void)__hold.release();
      }
    }
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __policy_func(const __policy_func& __f)
      : __buf_(__f.__buf_), __invoker_(__f.__invoker_), __policy_(__f.__policy_) {
    if (__policy_->__clone)
      __buf_.__large = __policy_->__clone(__f.__buf_.__large);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __policy_func(__policy_func&& __f)
      : __buf_(__f.__buf_), __invoker_(__f.__invoker_), __policy_(__f.__policy_) {
    if (__policy_->__destroy) {
      __f.__policy_ = __policy::__create_empty();
      __f.__invoker_ = __invoker();
    }
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__policy_func() {
    if (__policy_->__destroy)
      __policy_->__destroy(__buf_.__large);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __policy_func& operator=(__policy_func&& __f) {
    *this = nullptr;
    __buf_ = __f.__buf_;
    __invoker_ = __f.__invoker_;
    __policy_ = __f.__policy_;
    __f.__policy_ = __policy::__create_empty();
    __f.__invoker_ = __invoker();
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __policy_func& operator=(nullptr_t) {
    const __policy* __p = __policy_;
    __policy_ = __policy::__create_empty();
    __invoker_ = __invoker();
    if (__p->__destroy)
      __p->__destroy(__buf_.__large);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Rp operator()(_ArgTypes&&... __args) const {
    return __invoker_.__call_(std::addressof(__buf_), std::forward<_ArgTypes>(__args)...);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(__policy_func& __f) {
    std::swap(__invoker_, __f.__invoker_);
    std::swap(__policy_, __f.__policy_);
    std::swap(__buf_, __f.__buf_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit operator bool() const noexcept { return !__policy_->__is_null; }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const std::type_info& target_type() const noexcept { return *__policy_->__type_info; }

  template <typename _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Tp* target() const noexcept {
    if (__policy_->__is_null || typeid(_Tp) != *__policy_->__type_info)
      return nullptr;
    if (__policy_->__clone)
      return reinterpret_cast<const _Tp*>(__buf_.__large);
    else
      return reinterpret_cast<const _Tp*>(&__buf_.__small);
  }

};



extern "C" void* _Block_copy(const void*);
extern "C" void _Block_release(const void*);

template <class _Rp1, class... _ArgTypes1, class _Alloc, class _Rp, class... _ArgTypes>
class __func<_Rp1 (^)(_ArgTypes1...), _Alloc, _Rp(_ArgTypes...)> : public __base<_Rp(_ArgTypes...)> {
  typedef _Rp1 (^__block_type)(_ArgTypes1...);
  __block_type __f_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __func(__block_type const& __f)



      : __f_(reinterpret_cast<__block_type>(__f ? _Block_copy(__f) : nullptr))

  {
  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __func(__block_type __f, const _Alloc& )



      : __f_(reinterpret_cast<__block_type>(__f ? _Block_copy(__f) : nullptr))

  {
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual __base<_Rp(_ArgTypes...)>* __clone() const {
    ((void)0);




    return nullptr;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual void __clone(__base<_Rp(_ArgTypes...)>* __p) const {
    ::new ((void*)__p) __func(__f_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual void destroy() noexcept {

    if (__f_)
      _Block_release(__f_);

    __f_ = 0;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual void destroy_deallocate() noexcept {
    ((void)0);




  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual _Rp operator()(_ArgTypes&&... __arg) {
    return std::__invoke(__f_, std::forward<_ArgTypes>(__arg)...);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual const void* target(type_info const& __ti) const noexcept {
    if (__ti == typeid(__func::__block_type))
      return &__f_;
    return (const void*)nullptr;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) virtual const std::type_info& target_type() const noexcept {
    return typeid(__func::__block_type);
  }

};



}

template <class _Rp, class... _ArgTypes>
class function<_Rp(_ArgTypes...)>
    : public __function::__maybe_derive_from_unary_function<_Rp(_ArgTypes...)>,
      public __function::__maybe_derive_from_binary_function<_Rp(_ArgTypes...)> {

  typedef __function::__value_func<_Rp(_ArgTypes...)> __func;




  __func __f_;

  template <class _Fp,
            bool = _And< _IsNotSame<__remove_cvref_t<_Fp>, function>, __invokable<_Fp, _ArgTypes...> >::value>
  struct __callable;
  template <class _Fp>
  struct __callable<_Fp, true> {
    static const bool value =
        is_void<_Rp>::value || __is_core_convertible<typename __invoke_of<_Fp, _ArgTypes...>::type, _Rp>::value;
  };
  template <class _Fp>
  struct __callable<_Fp, false> {
    static const bool value = false;
  };

  template <class _Fp>
  using _EnableIfLValueCallable = __enable_if_t<__callable<_Fp&>::value>;

public:
  typedef _Rp result_type;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) function() noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) function(nullptr_t) noexcept {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) function(const function&);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) function(function&&) noexcept;
  template <class _Fp, class = _EnableIfLValueCallable<_Fp>>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) function(_Fp);
# 875 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) function& operator=(const function&);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) function& operator=(function&&) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) function& operator=(nullptr_t) noexcept;
  template <class _Fp, class = _EnableIfLValueCallable<__decay_t<_Fp>>>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) function& operator=(_Fp&&);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~function();


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(function&) noexcept;
# 894 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit operator bool() const noexcept { return static_cast<bool>(__f_); }


  template <class _R2, class... _ArgTypes2>
  bool operator==(const function<_R2(_ArgTypes2...)>&) const = delete;

  template <class _R2, class... _ArgTypes2>
  bool operator!=(const function<_R2(_ArgTypes2...)>&) const = delete;


public:

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Rp operator()(_ArgTypes...) const;



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const std::type_info& target_type() const noexcept;
  template <typename _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp* target() noexcept;
  template <typename _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Tp* target() const noexcept;

};


template <class _Rp, class... _Ap>
function(_Rp (*)(_Ap...)) -> function<_Rp(_Ap...)>;

template <class _Fp, class _Stripped = typename __strip_signature<decltype(&_Fp::operator())>::type>
function(_Fp) -> function<_Stripped>;


template <class _Rp, class... _ArgTypes>
function<_Rp(_ArgTypes...)>::function(const function& __f) : __f_(__f.__f_) {}







template <class _Rp, class... _ArgTypes>
function<_Rp(_ArgTypes...)>::function(function&& __f) noexcept : __f_(std::move(__f.__f_)) {}







template <class _Rp, class... _ArgTypes>
template <class _Fp, class>
function<_Rp(_ArgTypes...)>::function(_Fp __f) : __f_(std::move(__f)) {}







template <class _Rp, class... _ArgTypes>
function<_Rp(_ArgTypes...)>& function<_Rp(_ArgTypes...)>::operator=(const function& __f) {
  function(__f).swap(*this);
  return *this;
}

template <class _Rp, class... _ArgTypes>
function<_Rp(_ArgTypes...)>& function<_Rp(_ArgTypes...)>::operator=(function&& __f) noexcept {
  __f_ = std::move(__f.__f_);
  return *this;
}

template <class _Rp, class... _ArgTypes>
function<_Rp(_ArgTypes...)>& function<_Rp(_ArgTypes...)>::operator=(nullptr_t) noexcept {
  __f_ = nullptr;
  return *this;
}

template <class _Rp, class... _ArgTypes>
template <class _Fp, class>
function<_Rp(_ArgTypes...)>& function<_Rp(_ArgTypes...)>::operator=(_Fp&& __f) {
  function(std::forward<_Fp>(__f)).swap(*this);
  return *this;
}

template <class _Rp, class... _ArgTypes>
function<_Rp(_ArgTypes...)>::~function() {}

template <class _Rp, class... _ArgTypes>
void function<_Rp(_ArgTypes...)>::swap(function& __f) noexcept {
  __f_.swap(__f.__f_);
}

template <class _Rp, class... _ArgTypes>
_Rp function<_Rp(_ArgTypes...)>::operator()(_ArgTypes... __arg) const {
  return __f_(std::forward<_ArgTypes>(__arg)...);
}



template <class _Rp, class... _ArgTypes>
const std::type_info& function<_Rp(_ArgTypes...)>::target_type() const noexcept {
  return __f_.target_type();
}

template <class _Rp, class... _ArgTypes>
template <typename _Tp>
_Tp* function<_Rp(_ArgTypes...)>::target() noexcept {
  return (_Tp*)(__f_.template target<_Tp>());
}

template <class _Rp, class... _ArgTypes>
template <typename _Tp>
const _Tp* function<_Rp(_ArgTypes...)>::target() const noexcept {
  return __f_.template target<_Tp>();
}



template <class _Rp, class... _ArgTypes>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const function<_Rp(_ArgTypes...)>& __f, nullptr_t) noexcept {
  return !__f;
}



template <class _Rp, class... _ArgTypes>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(nullptr_t, const function<_Rp(_ArgTypes...)>& __f) noexcept {
  return !__f;
}

template <class _Rp, class... _ArgTypes>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const function<_Rp(_ArgTypes...)>& __f, nullptr_t) noexcept {
  return (bool)__f;
}

template <class _Rp, class... _ArgTypes>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(nullptr_t, const function<_Rp(_ArgTypes...)>& __f) noexcept {
  return (bool)__f;
}



template <class _Rp, class... _ArgTypes>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(function<_Rp(_ArgTypes...)>& __x, function<_Rp(_ArgTypes...)>& __y) noexcept {
  return __x.swap(__y);
}

}}
# 1042 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/function.h" 3
#pragma clang diagnostic pop
# 549 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/functional" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/boyer_moore_searcher.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/boyer_moore_searcher.h" 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/boyer_moore_searcher.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 1 3
# 589 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/is_transparent.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/is_transparent.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/is_transparent.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/is_transparent.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/is_transparent.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/is_transparent.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/is_transparent.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/is_transparent.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Tp, class, class = void>
inline const bool __is_transparent_v = false;

template <class _Tp, class _Up>
inline const bool __is_transparent_v<_Tp, _Up, __void_t<typename _Tp::is_transparent> > = true;



}}
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/is_transparent.h" 3
#pragma clang diagnostic pop
# 590 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__hash_table" 1 3
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__hash_table" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/can_extract_key.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/can_extract_key.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const_ref.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const_ref.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const_ref.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const_ref.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const_ref.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const_ref.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const_ref.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const_ref.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp>
using __remove_const_ref_t = __remove_const_t<__libcpp_remove_reference_t<_Tp> >;

}}
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/remove_const_ref.h" 3
#pragma clang diagnostic pop
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/can_extract_key.h" 2 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/can_extract_key.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/can_extract_key.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/can_extract_key.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/can_extract_key.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/can_extract_key.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/can_extract_key.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/can_extract_key.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {


struct __extract_key_fail_tag {};
struct __extract_key_self_tag {};
struct __extract_key_first_tag {};

template <class _ValTy, class _Key, class _RawValTy = __remove_const_ref_t<_ValTy> >
struct __can_extract_key
    : __conditional_t<_IsSame<_RawValTy, _Key>::value, __extract_key_self_tag, __extract_key_fail_tag> {};

template <class _Pair, class _Key, class _First, class _Second>
struct __can_extract_key<_Pair, _Key, pair<_First, _Second> >
    : __conditional_t<_IsSame<__remove_const_t<_First>, _Key>::value, __extract_key_first_tag, __extract_key_fail_tag> {
};




template <class _ValTy, class _Key, class _ContainerValueTy, class _RawValTy = __remove_const_ref_t<_ValTy> >
struct __can_extract_map_key : integral_constant<bool, _IsSame<_RawValTy, _Key>::value> {};



template <class _ValTy, class _Key, class _RawValTy>
struct __can_extract_map_key<_ValTy, _Key, _Key, _RawValTy> : false_type {};

}}
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/can_extract_key.h" 3
#pragma clang diagnostic pop
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__hash_table" 2 3
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__hash_table" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 54 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__hash_table" 2 3

#pragma clang diagnostic push
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__hash_table" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__hash_table" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__hash_table" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__hash_table" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__hash_table" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__hash_table" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Key, class _Tp>
struct __hash_value_type;

template <class _Tp>
struct __is_hash_value_type_imp : false_type {};

template <class _Key, class _Value>
struct __is_hash_value_type_imp<__hash_value_type<_Key, _Value> > : true_type {};

template <class... _Args>
struct __is_hash_value_type : false_type {};

template <class _One>
struct __is_hash_value_type<_One> : __is_hash_value_type_imp<__remove_cvref_t<_One> > {};

__attribute__((__visibility__("default"))) size_t __next_prime(size_t __n);

template <class _NodePtr>
struct __hash_node_base {
  typedef typename pointer_traits<_NodePtr>::element_type __node_type;
  typedef __hash_node_base __first_node;
  typedef __rebind_pointer_t<_NodePtr, __first_node> __node_base_pointer;
  typedef _NodePtr __node_pointer;




  typedef __conditional_t<is_pointer<__node_pointer>::value, __node_base_pointer, __node_pointer> __next_pointer;


  __next_pointer __next_;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __next_pointer __ptr() noexcept {
    return static_cast<__next_pointer>(pointer_traits<__node_base_pointer>::pointer_to(*this));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __node_pointer __upcast() noexcept {
    return static_cast<__node_pointer>(pointer_traits<__node_base_pointer>::pointer_to(*this));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t __hash() const noexcept { return static_cast<__node_type const&>(*this).__hash_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_node_base() noexcept : __next_(nullptr) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __hash_node_base(__next_pointer __next) noexcept : __next_(__next) {}
};

template <class _Tp, class _VoidPtr>
struct __hash_node : public __hash_node_base< __rebind_pointer_t<_VoidPtr, __hash_node<_Tp, _VoidPtr> > > {
  typedef _Tp __node_value_type;
  using _Base = __hash_node_base<__rebind_pointer_t<_VoidPtr, __hash_node<_Tp, _VoidPtr> > >;
  using __next_pointer = typename _Base::__next_pointer;

  size_t __hash_;





private:
  union {
    _Tp __value_;
  };

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp& __get_value() { return __value_; }
# 131 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__hash_table" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __hash_node(__next_pointer __next, size_t __hash) : _Base(__next), __hash_(__hash) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__hash_node() {}
};

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __is_hash_power2(size_t __bc) { return __bc > 2 && !(__bc & (__bc - 1)); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t __constrain_hash(size_t __h, size_t __bc) {
  return !(__bc & (__bc - 1)) ? __h & (__bc - 1) : (__h < __bc ? __h : __h % __bc);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t __next_hash_pow2(size_t __n) {
  return __n < 2 ? __n : (size_t(1) << (numeric_limits<size_t>::digits - __libcpp_clz(__n - 1)));
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
class __hash_table;

template <class _NodePtr>
class __hash_iterator;
template <class _ConstNodePtr>
class __hash_const_iterator;
template <class _NodePtr>
class __hash_local_iterator;
template <class _ConstNodePtr>
class __hash_const_local_iterator;
template <class _HashIterator>
class __hash_map_iterator;
template <class _HashIterator>
class __hash_map_const_iterator;

template <class _Tp>
struct __hash_key_value_types {
  static_assert(!is_reference<_Tp>::value && !is_const<_Tp>::value, "");
  typedef _Tp key_type;
  typedef _Tp __node_value_type;
  typedef _Tp __container_value_type;
  static const bool __is_map = false;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static key_type const& __get_key(_Tp const& __v) { return __v; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static __container_value_type const& __get_value(__node_value_type const& __v) { return __v; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static __container_value_type* __get_ptr(__node_value_type& __n) { return std::addressof(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static __container_value_type&& __move(__node_value_type& __v) { return std::move(__v); }
};

template <class _Key, class _Tp>
struct __hash_key_value_types<__hash_value_type<_Key, _Tp> > {
  typedef _Key key_type;
  typedef _Tp mapped_type;
  typedef __hash_value_type<_Key, _Tp> __node_value_type;
  typedef pair<const _Key, _Tp> __container_value_type;
  typedef __container_value_type __map_value_type;
  static const bool __is_map = true;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static key_type const& __get_key(__container_value_type const& __v) { return __v.first; }

  template <class _Up, __enable_if_t<__is_same_uncvref<_Up, __node_value_type>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static __container_value_type const& __get_value(_Up& __t) {
    return __t.__get_value();
  }

  template <class _Up, __enable_if_t<__is_same_uncvref<_Up, __container_value_type>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static __container_value_type const& __get_value(_Up& __t) {
    return __t;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static __container_value_type* __get_ptr(__node_value_type& __n) {
    return std::addressof(__n.__get_value());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static pair<key_type&&, mapped_type&&> __move(__node_value_type& __v) { return __v.__move(); }
};

template <class _Tp, class _AllocPtr, class _KVTypes = __hash_key_value_types<_Tp>, bool = _KVTypes::__is_map>
struct __hash_map_pointer_types {};

template <class _Tp, class _AllocPtr, class _KVTypes>
struct __hash_map_pointer_types<_Tp, _AllocPtr, _KVTypes, true> {
  typedef typename _KVTypes::__map_value_type _Mv;
  typedef __rebind_pointer_t<_AllocPtr, _Mv> __map_value_type_pointer;
  typedef __rebind_pointer_t<_AllocPtr, const _Mv> __const_map_value_type_pointer;
};

template <class _NodePtr, class _NodeT = typename pointer_traits<_NodePtr>::element_type>
struct __hash_node_types;

template <class _NodePtr, class _Tp, class _VoidPtr>
struct __hash_node_types<_NodePtr, __hash_node<_Tp, _VoidPtr> >
    : public __hash_key_value_types<_Tp>,
      __hash_map_pointer_types<_Tp, _VoidPtr>

{
  typedef __hash_key_value_types<_Tp> __base;

public:
  typedef ptrdiff_t difference_type;
  typedef size_t size_type;

  typedef __rebind_pointer_t<_NodePtr, void> __void_pointer;

  typedef typename pointer_traits<_NodePtr>::element_type __node_type;
  typedef _NodePtr __node_pointer;

  typedef __hash_node_base<__node_pointer> __node_base_type;
  typedef __rebind_pointer_t<_NodePtr, __node_base_type> __node_base_pointer;

  typedef typename __node_base_type::__next_pointer __next_pointer;

  typedef _Tp __node_value_type;
  typedef __rebind_pointer_t<_VoidPtr, __node_value_type> __node_value_type_pointer;
  typedef __rebind_pointer_t<_VoidPtr, const __node_value_type> __const_node_value_type_pointer;

private:
  static_assert(!is_const<__node_type>::value, "_NodePtr should never be a pointer to const");
  static_assert(is_same<typename pointer_traits<_VoidPtr>::element_type, void>::value,
                "_VoidPtr does not point to unqualified void type");
  static_assert(is_same<__rebind_pointer_t<_VoidPtr, __node_type>, _NodePtr>::value,
                "_VoidPtr does not rebind to _NodePtr.");
};

template <class _HashIterator>
struct __hash_node_types_from_iterator;
template <class _NodePtr>
struct __hash_node_types_from_iterator<__hash_iterator<_NodePtr> > : __hash_node_types<_NodePtr> {};
template <class _NodePtr>
struct __hash_node_types_from_iterator<__hash_const_iterator<_NodePtr> > : __hash_node_types<_NodePtr> {};
template <class _NodePtr>
struct __hash_node_types_from_iterator<__hash_local_iterator<_NodePtr> > : __hash_node_types<_NodePtr> {};
template <class _NodePtr>
struct __hash_node_types_from_iterator<__hash_const_local_iterator<_NodePtr> > : __hash_node_types<_NodePtr> {};

template <class _NodeValueTp, class _VoidPtr>
struct __make_hash_node_types {
  typedef __hash_node<_NodeValueTp, _VoidPtr> _NodeTp;
  typedef __rebind_pointer_t<_VoidPtr, _NodeTp> _NodePtr;
  typedef __hash_node_types<_NodePtr> type;
};

template <class _NodePtr>
class __hash_iterator {
  typedef __hash_node_types<_NodePtr> _NodeTypes;
  typedef _NodePtr __node_pointer;
  typedef typename _NodeTypes::__next_pointer __next_pointer;

  __next_pointer __node_;

public:
  typedef forward_iterator_tag iterator_category;
  typedef typename _NodeTypes::__node_value_type value_type;
  typedef typename _NodeTypes::difference_type difference_type;
  typedef value_type& reference;
  typedef typename _NodeTypes::__node_value_type_pointer pointer;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_iterator() noexcept : __node_(nullptr) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference operator*() const {
    ((void)0);

    return __node_->__upcast()->__get_value();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer operator->() const {
    ((void)0);

    return pointer_traits<pointer>::pointer_to(__node_->__upcast()->__get_value());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_iterator& operator++() {
    ((void)0);

    __node_ = __node_->__next_;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_iterator operator++(int) {
    __hash_iterator __t(*this);
    ++(*this);
    return __t;
  }

  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const __hash_iterator& __x, const __hash_iterator& __y) {
    return __x.__node_ == __y.__node_;
  }
  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const __hash_iterator& __x, const __hash_iterator& __y) {
    return !(__x == __y);
  }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __hash_iterator(__next_pointer __node) noexcept : __node_(__node) {}

  template <class, class, class, class>
  friend class __hash_table;
  template <class>
  friend class __hash_const_iterator;
  template <class>
  friend class __hash_map_iterator;
  template <class, class, class, class, class>
  friend class unordered_map;
  template <class, class, class, class, class>
  friend class unordered_multimap;
};

template <class _NodePtr>
class __hash_const_iterator {
  static_assert(!is_const<typename pointer_traits<_NodePtr>::element_type>::value, "");
  typedef __hash_node_types<_NodePtr> _NodeTypes;
  typedef _NodePtr __node_pointer;
  typedef typename _NodeTypes::__next_pointer __next_pointer;

  __next_pointer __node_;

public:
  typedef __hash_iterator<_NodePtr> __non_const_iterator;

  typedef forward_iterator_tag iterator_category;
  typedef typename _NodeTypes::__node_value_type value_type;
  typedef typename _NodeTypes::difference_type difference_type;
  typedef const value_type& reference;
  typedef typename _NodeTypes::__const_node_value_type_pointer pointer;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_const_iterator() noexcept : __node_(nullptr) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_const_iterator(const __non_const_iterator& __x) noexcept : __node_(__x.__node_) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference operator*() const {
    ((void)0);

    return __node_->__upcast()->__get_value();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer operator->() const {
    ((void)0);

    return pointer_traits<pointer>::pointer_to(__node_->__upcast()->__get_value());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_const_iterator& operator++() {
    ((void)0);

    __node_ = __node_->__next_;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_const_iterator operator++(int) {
    __hash_const_iterator __t(*this);
    ++(*this);
    return __t;
  }

  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const __hash_const_iterator& __x, const __hash_const_iterator& __y) {
    return __x.__node_ == __y.__node_;
  }
  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const __hash_const_iterator& __x, const __hash_const_iterator& __y) {
    return !(__x == __y);
  }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __hash_const_iterator(__next_pointer __node) noexcept : __node_(__node) {}

  template <class, class, class, class>
  friend class __hash_table;
  template <class>
  friend class __hash_map_const_iterator;
  template <class, class, class, class, class>
  friend class unordered_map;
  template <class, class, class, class, class>
  friend class unordered_multimap;
};

template <class _NodePtr>
class __hash_local_iterator {
  typedef __hash_node_types<_NodePtr> _NodeTypes;
  typedef _NodePtr __node_pointer;
  typedef typename _NodeTypes::__next_pointer __next_pointer;

  __next_pointer __node_;
  size_t __bucket_;
  size_t __bucket_count_;

public:
  typedef forward_iterator_tag iterator_category;
  typedef typename _NodeTypes::__node_value_type value_type;
  typedef typename _NodeTypes::difference_type difference_type;
  typedef value_type& reference;
  typedef typename _NodeTypes::__node_value_type_pointer pointer;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_local_iterator() noexcept : __node_(nullptr) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference operator*() const {
    ((void)0);

    return __node_->__upcast()->__get_value();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer operator->() const {
    ((void)0);

    return pointer_traits<pointer>::pointer_to(__node_->__upcast()->__get_value());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_local_iterator& operator++() {
    ((void)0);

    __node_ = __node_->__next_;
    if (__node_ != nullptr && std::__constrain_hash(__node_->__hash(), __bucket_count_) != __bucket_)
      __node_ = nullptr;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_local_iterator operator++(int) {
    __hash_local_iterator __t(*this);
    ++(*this);
    return __t;
  }

  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const __hash_local_iterator& __x, const __hash_local_iterator& __y) {
    return __x.__node_ == __y.__node_;
  }
  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const __hash_local_iterator& __x, const __hash_local_iterator& __y) {
    return !(__x == __y);
  }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __hash_local_iterator(
      __next_pointer __node, size_t __bucket, size_t __bucket_count) noexcept
      : __node_(__node),
        __bucket_(__bucket),
        __bucket_count_(__bucket_count) {
    if (__node_ != nullptr)
      __node_ = __node_->__next_;
  }

  template <class, class, class, class>
  friend class __hash_table;
  template <class>
  friend class __hash_const_local_iterator;
  template <class>
  friend class __hash_map_iterator;
};

template <class _ConstNodePtr>
class __hash_const_local_iterator {
  typedef __hash_node_types<_ConstNodePtr> _NodeTypes;
  typedef _ConstNodePtr __node_pointer;
  typedef typename _NodeTypes::__next_pointer __next_pointer;

  __next_pointer __node_;
  size_t __bucket_;
  size_t __bucket_count_;

  typedef pointer_traits<__node_pointer> __pointer_traits;
  typedef typename __pointer_traits::element_type __node;
  typedef __remove_const_t<__node> __non_const_node;
  typedef __rebind_pointer_t<__node_pointer, __non_const_node> __non_const_node_pointer;

public:
  typedef __hash_local_iterator<__non_const_node_pointer> __non_const_iterator;

  typedef forward_iterator_tag iterator_category;
  typedef typename _NodeTypes::__node_value_type value_type;
  typedef typename _NodeTypes::difference_type difference_type;
  typedef const value_type& reference;
  typedef typename _NodeTypes::__const_node_value_type_pointer pointer;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_const_local_iterator() noexcept : __node_(nullptr) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_const_local_iterator(const __non_const_iterator& __x) noexcept
      : __node_(__x.__node_),
        __bucket_(__x.__bucket_),
        __bucket_count_(__x.__bucket_count_) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference operator*() const {
    ((void)0);

    return __node_->__upcast()->__get_value();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer operator->() const {
    ((void)0);

    return pointer_traits<pointer>::pointer_to(__node_->__upcast()->__get_value());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_const_local_iterator& operator++() {
    ((void)0);

    __node_ = __node_->__next_;
    if (__node_ != nullptr && std::__constrain_hash(__node_->__hash(), __bucket_count_) != __bucket_)
      __node_ = nullptr;
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_const_local_iterator operator++(int) {
    __hash_const_local_iterator __t(*this);
    ++(*this);
    return __t;
  }

  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  operator==(const __hash_const_local_iterator& __x, const __hash_const_local_iterator& __y) {
    return __x.__node_ == __y.__node_;
  }
  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  operator!=(const __hash_const_local_iterator& __x, const __hash_const_local_iterator& __y) {
    return !(__x == __y);
  }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __hash_const_local_iterator(
      __next_pointer __node_ptr, size_t __bucket, size_t __bucket_count) noexcept
      : __node_(__node_ptr),
        __bucket_(__bucket),
        __bucket_count_(__bucket_count) {
    if (__node_ != nullptr)
      __node_ = __node_->__next_;
  }

  template <class, class, class, class>
  friend class __hash_table;
  template <class>
  friend class __hash_map_const_iterator;
};

template <class _Alloc>
class __bucket_list_deallocator {
  typedef _Alloc allocator_type;
  typedef allocator_traits<allocator_type> __alloc_traits;
  typedef typename __alloc_traits::size_type size_type;

  __compressed_pair<size_type, allocator_type> __data_;

public:
  typedef typename __alloc_traits::pointer pointer;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bucket_list_deallocator() noexcept(is_nothrow_default_constructible<allocator_type>::value)
      : __data_(0, __default_init_tag()) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bucket_list_deallocator(const allocator_type& __a, size_type __size)
      noexcept(is_nothrow_copy_constructible<allocator_type>::value)
      : __data_(__size, __a) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __bucket_list_deallocator(__bucket_list_deallocator&& __x)
      noexcept(is_nothrow_move_constructible<allocator_type>::value)
      : __data_(std::move(__x.__data_)) {
    __x.size() = 0;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type& size() noexcept { return __data_.first(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type size() const noexcept { return __data_.first(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) allocator_type& __alloc() noexcept { return __data_.second(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const allocator_type& __alloc() const noexcept { return __data_.second(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator()(pointer __p) noexcept { __alloc_traits::deallocate(__alloc(), __p, size()); }
};

template <class _Alloc>
class __hash_map_node_destructor;

template <class _Alloc>
class __hash_node_destructor {
  typedef _Alloc allocator_type;
  typedef allocator_traits<allocator_type> __alloc_traits;

public:
  typedef typename __alloc_traits::pointer pointer;

private:
  typedef __hash_node_types<pointer> _NodeTypes;

  allocator_type& __na_;

public:
  bool __value_constructed;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_node_destructor(__hash_node_destructor const&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_node_destructor& operator=(const __hash_node_destructor&) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __hash_node_destructor(allocator_type& __na, bool __constructed = false) noexcept
      : __na_(__na),
        __value_constructed(__constructed) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator()(pointer __p) noexcept {
    if (__value_constructed) {
      __alloc_traits::destroy(__na_, _NodeTypes::__get_ptr(__p->__get_value()));
      std::__destroy_at(std::addressof(*__p));
    }
    if (__p)
      __alloc_traits::deallocate(__na_, __p, 1);
  }

  template <class>
  friend class __hash_map_node_destructor;
};


template <class _NodeType, class _Alloc>
struct __generic_container_node_destructor;

template <class _Tp, class _VoidPtr, class _Alloc>
struct __generic_container_node_destructor<__hash_node<_Tp, _VoidPtr>, _Alloc> : __hash_node_destructor<_Alloc> {
  using __hash_node_destructor<_Alloc>::__hash_node_destructor;
};


template <class _Key, class _Hash, class _Equal>
struct __enforce_unordered_container_requirements {

  static_assert(__check_hash_requirements<_Key, _Hash>::value,
                "the specified hash does not meet the Hash requirements");
  static_assert(is_copy_constructible<_Equal>::value, "the specified comparator is required to be copy constructible");

  typedef int type;
};

template <class _Key, class _Hash, class _Equal>

__attribute__((__diagnose_if__(!__invokable<_Equal const&, _Key const&, _Key const&>::value, "the specified comparator type does not provide a viable const call operator", "warning")))

__attribute__((__diagnose_if__(!__invokable<_Hash const&, _Key const&>::value, "the specified hash functor does not provide a viable const call operator", "warning")))


    typename __enforce_unordered_container_requirements<_Key, _Hash, _Equal>::type
    __diagnose_unordered_container_requirements(int);




template <class _Key, class _Hash, class _Equal>
int __diagnose_unordered_container_requirements(void*);

template <class _Tp, class _Hash, class _Equal, class _Alloc>
class __hash_table {
public:
  typedef _Tp value_type;
  typedef _Hash hasher;
  typedef _Equal key_equal;
  typedef _Alloc allocator_type;

private:
  typedef allocator_traits<allocator_type> __alloc_traits;
  typedef typename __make_hash_node_types<value_type, typename __alloc_traits::void_pointer>::type _NodeTypes;

public:
  typedef typename _NodeTypes::__node_value_type __node_value_type;
  typedef typename _NodeTypes::__container_value_type __container_value_type;
  typedef typename _NodeTypes::key_type key_type;
  typedef value_type& reference;
  typedef const value_type& const_reference;
  typedef typename __alloc_traits::pointer pointer;
  typedef typename __alloc_traits::const_pointer const_pointer;

  typedef typename __alloc_traits::size_type size_type;



  typedef typename _NodeTypes::difference_type difference_type;

public:


  typedef typename _NodeTypes::__node_type __node;
  typedef __rebind_alloc<__alloc_traits, __node> __node_allocator;
  typedef allocator_traits<__node_allocator> __node_traits;
  typedef typename _NodeTypes::__void_pointer __void_pointer;
  typedef typename _NodeTypes::__node_pointer __node_pointer;
  typedef typename _NodeTypes::__node_pointer __node_const_pointer;
  typedef typename _NodeTypes::__node_base_type __first_node;
  typedef typename _NodeTypes::__node_base_pointer __node_base_pointer;
  typedef typename _NodeTypes::__next_pointer __next_pointer;

private:



  static_assert(is_same<__node_pointer, typename __node_traits::pointer>::value,
                "Allocator does not rebind pointers in a sane manner.");
  typedef __rebind_alloc<__node_traits, __first_node> __node_base_allocator;
  typedef allocator_traits<__node_base_allocator> __node_base_traits;
  static_assert(is_same<__node_base_pointer, typename __node_base_traits::pointer>::value,
                "Allocator does not rebind pointers in a sane manner.");

private:
  typedef __rebind_alloc<__node_traits, __next_pointer> __pointer_allocator;
  typedef __bucket_list_deallocator<__pointer_allocator> __bucket_list_deleter;
  typedef unique_ptr<__next_pointer[], __bucket_list_deleter> __bucket_list;
  typedef allocator_traits<__pointer_allocator> __pointer_alloc_traits;
  typedef typename __bucket_list_deleter::pointer __node_pointer_pointer;


  __bucket_list __bucket_list_;
  __compressed_pair<__first_node, __node_allocator> __p1_;
  __compressed_pair<size_type, hasher> __p2_;
  __compressed_pair<float, key_equal> __p3_;


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type& size() noexcept { return __p2_.first(); }

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type size() const noexcept { return __p2_.first(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) hasher& hash_function() noexcept { return __p2_.second(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const hasher& hash_function() const noexcept { return __p2_.second(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float& max_load_factor() noexcept { return __p3_.first(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float max_load_factor() const noexcept { return __p3_.first(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) key_equal& key_eq() noexcept { return __p3_.second(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const key_equal& key_eq() const noexcept { return __p3_.second(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __node_allocator& __node_alloc() noexcept { return __p1_.second(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const __node_allocator& __node_alloc() const noexcept { return __p1_.second(); }

public:
  typedef __hash_iterator<__node_pointer> iterator;
  typedef __hash_const_iterator<__node_pointer> const_iterator;
  typedef __hash_local_iterator<__node_pointer> local_iterator;
  typedef __hash_const_local_iterator<__node_pointer> const_local_iterator;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_table() noexcept(is_nothrow_default_constructible<__bucket_list>::value&& is_nothrow_default_constructible<__first_node>::value&& is_nothrow_default_constructible<__node_allocator>::value&& is_nothrow_default_constructible<hasher>::value&& is_nothrow_default_constructible<key_equal>::value);



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_table(const hasher& __hf, const key_equal& __eql);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_table(const hasher& __hf, const key_equal& __eql, const allocator_type& __a);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __hash_table(const allocator_type& __a);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_table(const __hash_table& __u);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_table(const __hash_table& __u, const allocator_type& __a);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_table(__hash_table&& __u) noexcept(is_nothrow_move_constructible<__bucket_list>::value&& is_nothrow_move_constructible<__first_node>::value&& is_nothrow_move_constructible<__node_allocator>::value&& is_nothrow_move_constructible<hasher>::value&& is_nothrow_move_constructible<key_equal>::value);



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_table(__hash_table&& __u, const allocator_type& __a);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__hash_table();

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_table& operator=(const __hash_table& __u);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_table& operator=(__hash_table&& __u)
      noexcept(__node_traits::propagate_on_container_move_assignment::value&& is_nothrow_move_assignable<__node_allocator>::value&& is_nothrow_move_assignable<hasher>::value&& is_nothrow_move_assignable<key_equal>::value);


  template <class _InputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __assign_unique(_InputIterator __first, _InputIterator __last);
  template <class _InputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __assign_multi(_InputIterator __first, _InputIterator __last);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type max_size() const noexcept {
    return std::min<size_type>(__node_traits::max_size(__node_alloc()), numeric_limits<difference_type >::max());
  }

private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __next_pointer __node_insert_multi_prepare(size_t __cp_hash, value_type& __cp_val);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __node_insert_multi_perform(__node_pointer __cp, __next_pointer __pn) noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __next_pointer __node_insert_unique_prepare(size_t __nd_hash, value_type& __nd_val);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __node_insert_unique_perform(__node_pointer __ptr) noexcept;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> __node_insert_unique(__node_pointer __nd);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __node_insert_multi(__node_pointer __nd);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __node_insert_multi(const_iterator __p, __node_pointer __nd);

  template <class _Key, class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> __emplace_unique_key_args(_Key const& __k, _Args&&... __args);

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> __emplace_unique_impl(_Args&&... __args);

  template <class _Pp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> __emplace_unique(_Pp&& __x) {
    return __emplace_unique_extract_key(std::forward<_Pp>(__x), __can_extract_key<_Pp, key_type>());
  }

  template <class _First,
            class _Second,
            __enable_if_t<__can_extract_map_key<_First, key_type, __container_value_type>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> __emplace_unique(_First&& __f, _Second&& __s) {
    return __emplace_unique_key_args(__f, std::forward<_First>(__f), std::forward<_Second>(__s));
  }

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> __emplace_unique(_Args&&... __args) {
    return __emplace_unique_impl(std::forward<_Args>(__args)...);
  }

  template <class _Pp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> __emplace_unique_extract_key(_Pp&& __x, __extract_key_fail_tag) {
    return __emplace_unique_impl(std::forward<_Pp>(__x));
  }
  template <class _Pp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> __emplace_unique_extract_key(_Pp&& __x, __extract_key_self_tag) {
    return __emplace_unique_key_args(__x, std::forward<_Pp>(__x));
  }
  template <class _Pp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> __emplace_unique_extract_key(_Pp&& __x, __extract_key_first_tag) {
    return __emplace_unique_key_args(__x.first, std::forward<_Pp>(__x));
  }

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __emplace_multi(_Args&&... __args);
  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __emplace_hint_multi(const_iterator __p, _Args&&... __args);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> __insert_unique(__container_value_type&& __x) {
    return __emplace_unique_key_args(_NodeTypes::__get_key(__x), std::move(__x));
  }

  template <class _Pp, __enable_if_t<!__is_same_uncvref<_Pp, __container_value_type>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> __insert_unique(_Pp&& __x) {
    return __emplace_unique(std::forward<_Pp>(__x));
  }

  template <class _Pp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __insert_multi(_Pp&& __x) {
    return __emplace_multi(std::forward<_Pp>(__x));
  }

  template <class _Pp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __insert_multi(const_iterator __p, _Pp&& __x) {
    return __emplace_hint_multi(__p, std::forward<_Pp>(__x));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> __insert_unique(const __container_value_type& __x) {
    return __emplace_unique_key_args(_NodeTypes::__get_key(__x), __x);
  }


  template <class _NodeHandle, class _InsertReturnType>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _InsertReturnType __node_handle_insert_unique(_NodeHandle&& __nh);
  template <class _NodeHandle>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __node_handle_insert_unique(const_iterator __hint, _NodeHandle&& __nh);
  template <class _Table>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __node_handle_merge_unique(_Table& __source);

  template <class _NodeHandle>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __node_handle_insert_multi(_NodeHandle&& __nh);
  template <class _NodeHandle>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __node_handle_insert_multi(const_iterator __hint, _NodeHandle&& __nh);
  template <class _Table>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __node_handle_merge_multi(_Table& __source);

  template <class _NodeHandle>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _NodeHandle __node_handle_extract(key_type const& __key);
  template <class _NodeHandle>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _NodeHandle __node_handle_extract(const_iterator __it);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void clear() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __rehash_unique(size_type __n) { __rehash<true>(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __rehash_multi(size_type __n) { __rehash<false>(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __reserve_unique(size_type __n) {
    __rehash_unique(static_cast<size_type>(std::ceil(__n / max_load_factor())));
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __reserve_multi(size_type __n) {
    __rehash_multi(static_cast<size_type>(std::ceil(__n / max_load_factor())));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type bucket_count() const noexcept { return __bucket_list_.get_deleter().size(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator begin() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator end() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator begin() const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator end() const noexcept;

  template <class _Key>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type bucket(const _Key& __k) const {
    ((void)0);

    return std::__constrain_hash(hash_function()(__k), bucket_count());
  }

  template <class _Key>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator find(const _Key& __x);
  template <class _Key>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator find(const _Key& __x) const;

  typedef __hash_node_destructor<__node_allocator> _Dp;
  typedef unique_ptr<__node, _Dp> __node_holder;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator erase(const_iterator __p);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator erase(const_iterator __first, const_iterator __last);
  template <class _Key>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __erase_unique(const _Key& __k);
  template <class _Key>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __erase_multi(const _Key& __k);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __node_holder remove(const_iterator __p) noexcept;

  template <class _Key>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __count_unique(const _Key& __k) const;
  template <class _Key>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __count_multi(const _Key& __k) const;

  template <class _Key>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, iterator> __equal_range_unique(const _Key& __k);
  template <class _Key>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<const_iterator, const_iterator> __equal_range_unique(const _Key& __k) const;

  template <class _Key>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, iterator> __equal_range_multi(const _Key& __k);
  template <class _Key>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<const_iterator, const_iterator> __equal_range_multi(const _Key& __k) const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(__hash_table& __u)






      noexcept(__is_nothrow_swappable_v<hasher>&& __is_nothrow_swappable_v<key_equal>);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type max_bucket_count() const noexcept { return max_size(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type bucket_size(size_type __n) const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float load_factor() const noexcept {
    size_type __bc = bucket_count();
    return __bc != 0 ? (float)size() / __bc : 0.f;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void max_load_factor(float __mlf) noexcept {



    ((void)0);
    max_load_factor() = std::max(__mlf, load_factor());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) local_iterator begin(size_type __n) {
    ((void)0);

    return local_iterator(__bucket_list_[__n], __n, bucket_count());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) local_iterator end(size_type __n) {
    ((void)0);

    return local_iterator(nullptr, __n, bucket_count());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_local_iterator cbegin(size_type __n) const {
    ((void)0);

    return const_local_iterator(__bucket_list_[__n], __n, bucket_count());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_local_iterator cend(size_type __n) const {
    ((void)0);

    return const_local_iterator(nullptr, __n, bucket_count());
  }

private:
  template <bool _UniqueKeys>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __rehash(size_type __n);
  template <bool _UniqueKeys>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __do_rehash(size_type __n);

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __node_holder __construct_node(_Args&&... __args);

  template <class _First, class... _Rest>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __node_holder __construct_node_hash(size_t __hash, _First&& __f, _Rest&&... __rest);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __copy_assign_alloc(const __hash_table& __u) {
    __copy_assign_alloc(__u, integral_constant<bool, __node_traits::propagate_on_container_copy_assignment::value>());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __copy_assign_alloc(const __hash_table& __u, true_type);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __copy_assign_alloc(const __hash_table&, false_type) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign(__hash_table& __u, false_type);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign(__hash_table& __u, true_type)
      noexcept(is_nothrow_move_assignable<__node_allocator>::value&& is_nothrow_move_assignable<hasher>::value&& is_nothrow_move_assignable<key_equal>::value);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(__hash_table& __u) noexcept(!__node_traits::propagate_on_container_move_assignment::value || (is_nothrow_move_assignable<__pointer_allocator>::value && is_nothrow_move_assignable<__node_allocator>::value)) {


    __move_assign_alloc(__u, integral_constant<bool, __node_traits::propagate_on_container_move_assignment::value>());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(__hash_table& __u, true_type) noexcept(is_nothrow_move_assignable<__pointer_allocator>::value&& is_nothrow_move_assignable<__node_allocator>::value) {

    __bucket_list_.get_deleter().__alloc() = std::move(__u.__bucket_list_.get_deleter().__alloc());
    __node_alloc() = std::move(__u.__node_alloc());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(__hash_table&, false_type) noexcept {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __deallocate_node(__next_pointer __np) noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __next_pointer __detach() noexcept;

  template <class, class, class, class, class>
  friend class unordered_map;
  template <class, class, class, class, class>
  friend class unordered_multimap;
};

template <class _Tp, class _Hash, class _Equal, class _Alloc>
inline __hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table() noexcept(is_nothrow_default_constructible<__bucket_list>::value&& is_nothrow_default_constructible<__first_node>::value&& is_nothrow_default_constructible<__node_allocator>::value&& is_nothrow_default_constructible<hasher>::value&& is_nothrow_default_constructible<key_equal>::value)



    : __p2_(0, __default_init_tag()), __p3_(1.0f, __default_init_tag()) {}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
inline __hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(const hasher& __hf, const key_equal& __eql)
    : __bucket_list_(nullptr, __bucket_list_deleter()), __p1_(), __p2_(0, __hf), __p3_(1.0f, __eql) {}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(
    const hasher& __hf, const key_equal& __eql, const allocator_type& __a)
    : __bucket_list_(nullptr, __bucket_list_deleter(__pointer_allocator(__a), 0)),
      __p1_(__default_init_tag(), __node_allocator(__a)),
      __p2_(0, __hf),
      __p3_(1.0f, __eql) {}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(const allocator_type& __a)
    : __bucket_list_(nullptr, __bucket_list_deleter(__pointer_allocator(__a), 0)),
      __p1_(__default_init_tag(), __node_allocator(__a)),
      __p2_(0, __default_init_tag()),
      __p3_(1.0f, __default_init_tag()) {}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(const __hash_table& __u)
    : __bucket_list_(nullptr,
                     __bucket_list_deleter(allocator_traits<__pointer_allocator>::select_on_container_copy_construction(
                                               __u.__bucket_list_.get_deleter().__alloc()),
                                           0)),
      __p1_(__default_init_tag(),
            allocator_traits<__node_allocator>::select_on_container_copy_construction(__u.__node_alloc())),
      __p2_(0, __u.hash_function()),
      __p3_(__u.__p3_) {}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(const __hash_table& __u, const allocator_type& __a)
    : __bucket_list_(nullptr, __bucket_list_deleter(__pointer_allocator(__a), 0)),
      __p1_(__default_init_tag(), __node_allocator(__a)),
      __p2_(0, __u.hash_function()),
      __p3_(__u.__p3_) {}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(__hash_table&& __u) noexcept(is_nothrow_move_constructible<__bucket_list>::value&& is_nothrow_move_constructible<__first_node>::value&& is_nothrow_move_constructible<__node_allocator>::value&& is_nothrow_move_constructible<hasher>::value&& is_nothrow_move_constructible<key_equal>::value)



    : __bucket_list_(std::move(__u.__bucket_list_)),
      __p1_(std::move(__u.__p1_)),
      __p2_(std::move(__u.__p2_)),
      __p3_(std::move(__u.__p3_)) {
  if (size() > 0) {
    __bucket_list_[std::__constrain_hash(__p1_.first().__next_->__hash(), bucket_count())] = __p1_.first().__ptr();
    __u.__p1_.first().__next_ = nullptr;
    __u.size() = 0;
  }
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__hash_table(__hash_table&& __u, const allocator_type& __a)
    : __bucket_list_(nullptr, __bucket_list_deleter(__pointer_allocator(__a), 0)),
      __p1_(__default_init_tag(), __node_allocator(__a)),
      __p2_(0, std::move(__u.hash_function())),
      __p3_(std::move(__u.__p3_)) {
  if (__a == allocator_type(__u.__node_alloc())) {
    __bucket_list_.reset(__u.__bucket_list_.release());
    __bucket_list_.get_deleter().size() = __u.__bucket_list_.get_deleter().size();
    __u.__bucket_list_.get_deleter().size() = 0;
    if (__u.size() > 0) {
      __p1_.first().__next_ = __u.__p1_.first().__next_;
      __u.__p1_.first().__next_ = nullptr;
      __bucket_list_[std::__constrain_hash(__p1_.first().__next_->__hash(), bucket_count())] = __p1_.first().__ptr();
      size() = __u.size();
      __u.size() = 0;
    }
  }
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
__hash_table<_Tp, _Hash, _Equal, _Alloc>::~__hash_table() {





  __deallocate_node(__p1_.first().__next_);
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
void __hash_table<_Tp, _Hash, _Equal, _Alloc>::__copy_assign_alloc(const __hash_table& __u, true_type) {
  if (__node_alloc() != __u.__node_alloc()) {
    clear();
    __bucket_list_.reset();
    __bucket_list_.get_deleter().size() = 0;
  }
  __bucket_list_.get_deleter().__alloc() = __u.__bucket_list_.get_deleter().__alloc();
  __node_alloc() = __u.__node_alloc();
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
__hash_table<_Tp, _Hash, _Equal, _Alloc>& __hash_table<_Tp, _Hash, _Equal, _Alloc>::operator=(const __hash_table& __u) {
  if (this != std::addressof(__u)) {
    __copy_assign_alloc(__u);
    hash_function() = __u.hash_function();
    key_eq() = __u.key_eq();
    max_load_factor() = __u.max_load_factor();
    __assign_multi(__u.begin(), __u.end());
  }
  return *this;
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
void __hash_table<_Tp, _Hash, _Equal, _Alloc>::__deallocate_node(__next_pointer __np) noexcept {
  __node_allocator& __na = __node_alloc();
  while (__np != nullptr) {
    __next_pointer __next = __np->__next_;
    __node_pointer __real_np = __np->__upcast();
    __node_traits::destroy(__na, _NodeTypes::__get_ptr(__real_np->__get_value()));
    std::__destroy_at(std::addressof(*__real_np));
    __node_traits::deallocate(__na, __real_np, 1);
    __np = __next;
  }
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__next_pointer
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__detach() noexcept {
  size_type __bc = bucket_count();
  for (size_type __i = 0; __i < __bc; ++__i)
    __bucket_list_[__i] = nullptr;
  size() = 0;
  __next_pointer __cache = __p1_.first().__next_;
  __p1_.first().__next_ = nullptr;
  return __cache;
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
void __hash_table<_Tp, _Hash, _Equal, _Alloc>::__move_assign(__hash_table& __u, true_type)
    noexcept(is_nothrow_move_assignable<__node_allocator>::value&& is_nothrow_move_assignable<hasher>::value&& is_nothrow_move_assignable<key_equal>::value) {

  clear();
  __bucket_list_.reset(__u.__bucket_list_.release());
  __bucket_list_.get_deleter().size() = __u.__bucket_list_.get_deleter().size();
  __u.__bucket_list_.get_deleter().size() = 0;
  __move_assign_alloc(__u);
  size() = __u.size();
  hash_function() = std::move(__u.hash_function());
  max_load_factor() = __u.max_load_factor();
  key_eq() = std::move(__u.key_eq());
  __p1_.first().__next_ = __u.__p1_.first().__next_;
  if (size() > 0) {
    __bucket_list_[std::__constrain_hash(__p1_.first().__next_->__hash(), bucket_count())] = __p1_.first().__ptr();
    __u.__p1_.first().__next_ = nullptr;
    __u.size() = 0;
  }
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
void __hash_table<_Tp, _Hash, _Equal, _Alloc>::__move_assign(__hash_table& __u, false_type) {
  if (__node_alloc() == __u.__node_alloc())
    __move_assign(__u, true_type());
  else {
    hash_function() = std::move(__u.hash_function());
    key_eq() = std::move(__u.key_eq());
    max_load_factor() = __u.max_load_factor();
    if (bucket_count() != 0) {
      __next_pointer __cache = __detach();

      try {

        const_iterator __i = __u.begin();
        while (__cache != nullptr && __u.size() != 0) {
          __cache->__upcast()->__get_value() = std::move(__u.remove(__i++)->__get_value());
          __next_pointer __next = __cache->__next_;
          __node_insert_multi(__cache->__upcast());
          __cache = __next;
        }

      } catch (...) {
        __deallocate_node(__cache);
        throw;
      }

      __deallocate_node(__cache);
    }
    const_iterator __i = __u.begin();
    while (__u.size() != 0) {
      __node_holder __h = __construct_node(_NodeTypes::__move(__u.remove(__i++)->__get_value()));
      __node_insert_multi(__h.get());
      __h.release();
    }
  }
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
inline __hash_table<_Tp, _Hash, _Equal, _Alloc>&
__hash_table<_Tp, _Hash, _Equal, _Alloc>::operator=(__hash_table&& __u) noexcept(__node_traits::propagate_on_container_move_assignment::value&& is_nothrow_move_assignable<__node_allocator>::value&& is_nothrow_move_assignable<hasher>::value&& is_nothrow_move_assignable<key_equal>::value) {


  __move_assign(__u, integral_constant<bool, __node_traits::propagate_on_container_move_assignment::value>());
  return *this;
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _InputIterator>
void __hash_table<_Tp, _Hash, _Equal, _Alloc>::__assign_unique(_InputIterator __first, _InputIterator __last) {
  typedef iterator_traits<_InputIterator> _ITraits;
  typedef typename _ITraits::value_type _ItValueType;
  static_assert(is_same<_ItValueType, __container_value_type>::value,
                "__assign_unique may only be called with the containers value type");

  if (bucket_count() != 0) {
    __next_pointer __cache = __detach();

    try {

      for (; __cache != nullptr && __first != __last; ++__first) {
        __cache->__upcast()->__get_value() = *__first;
        __next_pointer __next = __cache->__next_;
        __node_insert_unique(__cache->__upcast());
        __cache = __next;
      }

    } catch (...) {
      __deallocate_node(__cache);
      throw;
    }

    __deallocate_node(__cache);
  }
  for (; __first != __last; ++__first)
    __insert_unique(*__first);
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _InputIterator>
void __hash_table<_Tp, _Hash, _Equal, _Alloc>::__assign_multi(_InputIterator __first, _InputIterator __last) {
  typedef iterator_traits<_InputIterator> _ITraits;
  typedef typename _ITraits::value_type _ItValueType;
  static_assert(
      (is_same<_ItValueType, __container_value_type>::value || is_same<_ItValueType, __node_value_type>::value),
      "__assign_multi may only be called with the containers value type"
      " or the nodes value type");
  if (bucket_count() != 0) {
    __next_pointer __cache = __detach();

    try {

      for (; __cache != nullptr && __first != __last; ++__first) {
        __cache->__upcast()->__get_value() = *__first;
        __next_pointer __next = __cache->__next_;
        __node_insert_multi(__cache->__upcast());
        __cache = __next;
      }

    } catch (...) {
      __deallocate_node(__cache);
      throw;
    }

    __deallocate_node(__cache);
  }
  for (; __first != __last; ++__first)
    __insert_multi(_NodeTypes::__get_value(*__first));
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
inline typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator
__hash_table<_Tp, _Hash, _Equal, _Alloc>::begin() noexcept {
  return iterator(__p1_.first().__next_);
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
inline typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator
__hash_table<_Tp, _Hash, _Equal, _Alloc>::end() noexcept {
  return iterator(nullptr);
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
inline typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator
__hash_table<_Tp, _Hash, _Equal, _Alloc>::begin() const noexcept {
  return const_iterator(__p1_.first().__next_);
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
inline typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator
__hash_table<_Tp, _Hash, _Equal, _Alloc>::end() const noexcept {
  return const_iterator(nullptr);
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
void __hash_table<_Tp, _Hash, _Equal, _Alloc>::clear() noexcept {
  if (size() > 0) {
    __deallocate_node(__p1_.first().__next_);
    __p1_.first().__next_ = nullptr;
    size_type __bc = bucket_count();
    for (size_type __i = 0; __i < __bc; ++__i)
      __bucket_list_[__i] = nullptr;
    size() = 0;
  }
}
# 1331 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__hash_table" 3
template <class _Tp, class _Hash, class _Equal, class _Alloc>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__next_pointer
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_unique_prepare(size_t __hash, value_type& __value) {
  size_type __bc = bucket_count();

  if (__bc != 0) {
    size_t __chash = std::__constrain_hash(__hash, __bc);
    __next_pointer __ndptr = __bucket_list_[__chash];
    if (__ndptr != nullptr) {
      for (__ndptr = __ndptr->__next_;
           __ndptr != nullptr &&
           (__ndptr->__hash() == __hash || std::__constrain_hash(__ndptr->__hash(), __bc) == __chash);
           __ndptr = __ndptr->__next_) {
        if ((__ndptr->__hash() == __hash) && key_eq()(__ndptr->__upcast()->__get_value(), __value))
          return __ndptr;
      }
    }
  }
  if (size() + 1 > __bc * max_load_factor() || __bc == 0) {
    __rehash_unique(std::max<size_type>(
        2 * __bc + !std::__is_hash_power2(__bc), size_type(std::ceil(float(size() + 1) / max_load_factor()))));
  }
  return nullptr;
}





template <class _Tp, class _Hash, class _Equal, class _Alloc>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_unique_perform(__node_pointer __nd) noexcept {
  size_type __bc = bucket_count();
  size_t __chash = std::__constrain_hash(__nd->__hash(), __bc);

  __next_pointer __pn = __bucket_list_[__chash];
  if (__pn == nullptr) {
    __pn = __p1_.first().__ptr();
    __nd->__next_ = __pn->__next_;
    __pn->__next_ = __nd->__ptr();

    __bucket_list_[__chash] = __pn;
    if (__nd->__next_ != nullptr)
      __bucket_list_[std::__constrain_hash(__nd->__next_->__hash(), __bc)] = __nd->__ptr();
  } else {
    __nd->__next_ = __pn->__next_;
    __pn->__next_ = __nd->__ptr();
  }
  ++size();
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
pair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator, bool>
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_unique(__node_pointer __nd) {
  __nd->__hash_ = hash_function()(__nd->__get_value());
  __next_pointer __existing_node = __node_insert_unique_prepare(__nd->__hash(), __nd->__get_value());


  bool __inserted = false;
  if (__existing_node == nullptr) {
    __node_insert_unique_perform(__nd);
    __existing_node = __nd->__ptr();
    __inserted = true;
  }
  return pair<iterator, bool>(iterator(__existing_node), __inserted);
}
# 1405 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__hash_table" 3
template <class _Tp, class _Hash, class _Equal, class _Alloc>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__next_pointer
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_multi_prepare(size_t __cp_hash, value_type& __cp_val) {
  size_type __bc = bucket_count();
  if (size() + 1 > __bc * max_load_factor() || __bc == 0) {
    __rehash_multi(std::max<size_type>(
        2 * __bc + !std::__is_hash_power2(__bc), size_type(std::ceil(float(size() + 1) / max_load_factor()))));
    __bc = bucket_count();
  }
  size_t __chash = std::__constrain_hash(__cp_hash, __bc);
  __next_pointer __pn = __bucket_list_[__chash];
  if (__pn != nullptr) {
    for (bool __found = false;
         __pn->__next_ != nullptr && std::__constrain_hash(__pn->__next_->__hash(), __bc) == __chash;
         __pn = __pn->__next_) {





      if (__found !=
          (__pn->__next_->__hash() == __cp_hash && key_eq()(__pn->__next_->__upcast()->__get_value(), __cp_val))) {
        if (!__found)
          __found = true;
        else
          break;
      }
    }
  }
  return __pn;
}






template <class _Tp, class _Hash, class _Equal, class _Alloc>
void __hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_multi_perform(
    __node_pointer __cp, __next_pointer __pn) noexcept {
  size_type __bc = bucket_count();
  size_t __chash = std::__constrain_hash(__cp->__hash_, __bc);
  if (__pn == nullptr) {
    __pn = __p1_.first().__ptr();
    __cp->__next_ = __pn->__next_;
    __pn->__next_ = __cp->__ptr();

    __bucket_list_[__chash] = __pn;
    if (__cp->__next_ != nullptr)
      __bucket_list_[std::__constrain_hash(__cp->__next_->__hash(), __bc)] = __cp->__ptr();
  } else {
    __cp->__next_ = __pn->__next_;
    __pn->__next_ = __cp->__ptr();
    if (__cp->__next_ != nullptr) {
      size_t __nhash = std::__constrain_hash(__cp->__next_->__hash(), __bc);
      if (__nhash != __chash)
        __bucket_list_[__nhash] = __cp->__ptr();
    }
  }
  ++size();
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_multi(__node_pointer __cp) {
  __cp->__hash_ = hash_function()(__cp->__get_value());
  __next_pointer __pn = __node_insert_multi_prepare(__cp->__hash(), __cp->__get_value());
  __node_insert_multi_perform(__cp, __pn);

  return iterator(__cp->__ptr());
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_insert_multi(const_iterator __p, __node_pointer __cp) {
  if (__p != end() && key_eq()(*__p, __cp->__get_value())) {
    __next_pointer __np = __p.__node_;
    __cp->__hash_ = __np->__hash();
    size_type __bc = bucket_count();
    if (size() + 1 > __bc * max_load_factor() || __bc == 0) {
      __rehash_multi(std::max<size_type>(
          2 * __bc + !std::__is_hash_power2(__bc), size_type(std::ceil(float(size() + 1) / max_load_factor()))));
      __bc = bucket_count();
    }
    size_t __chash = std::__constrain_hash(__cp->__hash_, __bc);
    __next_pointer __pp = __bucket_list_[__chash];
    while (__pp->__next_ != __np)
      __pp = __pp->__next_;
    __cp->__next_ = __np;
    __pp->__next_ = static_cast<__next_pointer>(__cp);
    ++size();
    return iterator(static_cast<__next_pointer>(__cp));
  }
  return __node_insert_multi(__cp);
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _Key, class... _Args>
pair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator, bool>
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__emplace_unique_key_args(_Key const& __k, _Args&&... __args) {
  size_t __hash = hash_function()(__k);
  size_type __bc = bucket_count();
  bool __inserted = false;
  __next_pointer __nd;
  size_t __chash;
  if (__bc != 0) {
    __chash = std::__constrain_hash(__hash, __bc);
    __nd = __bucket_list_[__chash];
    if (__nd != nullptr) {
      for (__nd = __nd->__next_;
           __nd != nullptr && (__nd->__hash() == __hash || std::__constrain_hash(__nd->__hash(), __bc) == __chash);
           __nd = __nd->__next_) {
        if ((__nd->__hash() == __hash) && key_eq()(__nd->__upcast()->__get_value(), __k))
          goto __done;
      }
    }
  }
  {
    __node_holder __h = __construct_node_hash(__hash, std::forward<_Args>(__args)...);
    if (size() + 1 > __bc * max_load_factor() || __bc == 0) {
      __rehash_unique(std::max<size_type>(
          2 * __bc + !std::__is_hash_power2(__bc), size_type(std::ceil(float(size() + 1) / max_load_factor()))));
      __bc = bucket_count();
      __chash = std::__constrain_hash(__hash, __bc);
    }

    __next_pointer __pn = __bucket_list_[__chash];
    if (__pn == nullptr) {
      __pn = __p1_.first().__ptr();
      __h->__next_ = __pn->__next_;
      __pn->__next_ = __h.get()->__ptr();

      __bucket_list_[__chash] = __pn;
      if (__h->__next_ != nullptr)
        __bucket_list_[std::__constrain_hash(__h->__next_->__hash(), __bc)] = __h.get()->__ptr();
    } else {
      __h->__next_ = __pn->__next_;
      __pn->__next_ = static_cast<__next_pointer>(__h.get());
    }
    __nd = static_cast<__next_pointer>(__h.release());

    ++size();
    __inserted = true;
  }
__done:
  return pair<iterator, bool>(iterator(__nd), __inserted);
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class... _Args>
pair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator, bool>
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__emplace_unique_impl(_Args&&... __args) {
  __node_holder __h = __construct_node(std::forward<_Args>(__args)...);
  pair<iterator, bool> __r = __node_insert_unique(__h.get());
  if (__r.second)
    __h.release();
  return __r;
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class... _Args>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__emplace_multi(_Args&&... __args) {
  __node_holder __h = __construct_node(std::forward<_Args>(__args)...);
  iterator __r = __node_insert_multi(__h.get());
  __h.release();
  return __r;
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class... _Args>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__emplace_hint_multi(const_iterator __p, _Args&&... __args) {
  __node_holder __h = __construct_node(std::forward<_Args>(__args)...);
  iterator __r = __node_insert_multi(__p, __h.get());
  __h.release();
  return __r;
}


template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _NodeHandle, class _InsertReturnType>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _InsertReturnType
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_handle_insert_unique(_NodeHandle&& __nh) {
  if (__nh.empty())
    return _InsertReturnType{end(), false, _NodeHandle()};
  pair<iterator, bool> __result = __node_insert_unique(__nh.__ptr_);
  if (__result.second)
    __nh.__release_ptr();
  return _InsertReturnType{__result.first, __result.second, std::move(__nh)};
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _NodeHandle>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_handle_insert_unique(const_iterator, _NodeHandle&& __nh) {
  if (__nh.empty())
    return end();
  pair<iterator, bool> __result = __node_insert_unique(__nh.__ptr_);
  if (__result.second)
    __nh.__release_ptr();
  return __result.first;
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _NodeHandle>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _NodeHandle
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_handle_extract(key_type const& __key) {
  iterator __i = find(__key);
  if (__i == end())
    return _NodeHandle();
  return __node_handle_extract<_NodeHandle>(__i);
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _NodeHandle>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _NodeHandle __hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_handle_extract(const_iterator __p) {
  allocator_type __alloc(__node_alloc());
  return _NodeHandle(remove(__p).release(), __alloc);
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _Table>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_handle_merge_unique(_Table& __source) {
  static_assert(is_same<__node, typename _Table::__node>::value, "");

  for (typename _Table::iterator __it = __source.begin(); __it != __source.end();) {
    __node_pointer __src_ptr = __it.__node_->__upcast();
    size_t __hash = hash_function()(__src_ptr->__get_value());
    __next_pointer __existing_node = __node_insert_unique_prepare(__hash, __src_ptr->__get_value());
    auto __prev_iter = __it++;
    if (__existing_node == nullptr) {
      (void)__source.remove(__prev_iter).release();
      __src_ptr->__hash_ = __hash;
      __node_insert_unique_perform(__src_ptr);
    }
  }
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _NodeHandle>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_handle_insert_multi(_NodeHandle&& __nh) {
  if (__nh.empty())
    return end();
  iterator __result = __node_insert_multi(__nh.__ptr_);
  __nh.__release_ptr();
  return __result;
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _NodeHandle>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_handle_insert_multi(const_iterator __hint, _NodeHandle&& __nh) {
  if (__nh.empty())
    return end();
  iterator __result = __node_insert_multi(__hint, __nh.__ptr_);
  __nh.__release_ptr();
  return __result;
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _Table>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_handle_merge_multi(_Table& __source) {
  static_assert(is_same<typename _Table::__node, __node>::value, "");

  for (typename _Table::iterator __it = __source.begin(); __it != __source.end();) {
    __node_pointer __src_ptr = __it.__node_->__upcast();
    size_t __src_hash = hash_function()(__src_ptr->__get_value());
    __next_pointer __pn = __node_insert_multi_prepare(__src_hash, __src_ptr->__get_value());
    (void)__source.remove(__it++).release();
    __src_ptr->__hash_ = __src_hash;
    __node_insert_multi_perform(__src_ptr, __pn);
  }
}


template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <bool _UniqueKeys>
void __hash_table<_Tp, _Hash, _Equal, _Alloc>::__rehash(size_type __n) __attribute__((__no_sanitize__("unsigned-integer-overflow"))) {
  if (__n == 1)
    __n = 2;
  else if (__n & (__n - 1))
    __n = std::__next_prime(__n);
  size_type __bc = bucket_count();
  if (__n > __bc)
    __do_rehash<_UniqueKeys>(__n);
  else if (__n < __bc) {
    __n = std::max<size_type>(
        __n,
        std::__is_hash_power2(__bc) ? std::__next_hash_pow2(size_t(std::ceil(float(size()) / max_load_factor())))
                                    : std::__next_prime(size_t(std::ceil(float(size()) / max_load_factor()))));
    if (__n < __bc)
      __do_rehash<_UniqueKeys>(__n);
  }
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <bool _UniqueKeys>
void __hash_table<_Tp, _Hash, _Equal, _Alloc>::__do_rehash(size_type __nbc) {
  __pointer_allocator& __npa = __bucket_list_.get_deleter().__alloc();
  __bucket_list_.reset(__nbc > 0 ? __pointer_alloc_traits::allocate(__npa, __nbc) : nullptr);
  __bucket_list_.get_deleter().size() = __nbc;
  if (__nbc > 0) {
    for (size_type __i = 0; __i < __nbc; ++__i)
      __bucket_list_[__i] = nullptr;
    __next_pointer __pp = __p1_.first().__ptr();
    __next_pointer __cp = __pp->__next_;
    if (__cp != nullptr) {
      size_type __chash = std::__constrain_hash(__cp->__hash(), __nbc);
      __bucket_list_[__chash] = __pp;
      size_type __phash = __chash;
      for (__pp = __cp, void(), __cp = __cp->__next_; __cp != nullptr; __cp = __pp->__next_) {
        __chash = std::__constrain_hash(__cp->__hash(), __nbc);
        if (__chash == __phash)
          __pp = __cp;
        else {
          if (__bucket_list_[__chash] == nullptr) {
            __bucket_list_[__chash] = __pp;
            __pp = __cp;
            __phash = __chash;
          } else {
            __next_pointer __np = __cp;
            if constexpr (!_UniqueKeys) {
              for (; __np->__next_ != nullptr &&
                     key_eq()(__cp->__upcast()->__get_value(), __np->__next_->__upcast()->__get_value());
                   __np = __np->__next_)
                ;
            }
            __pp->__next_ = __np->__next_;
            __np->__next_ = __bucket_list_[__chash]->__next_;
            __bucket_list_[__chash]->__next_ = __cp;
          }
        }
      }
    }
  }
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _Key>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator
__hash_table<_Tp, _Hash, _Equal, _Alloc>::find(const _Key& __k) {
  size_t __hash = hash_function()(__k);
  size_type __bc = bucket_count();
  if (__bc != 0) {
    size_t __chash = std::__constrain_hash(__hash, __bc);
    __next_pointer __nd = __bucket_list_[__chash];
    if (__nd != nullptr) {
      for (__nd = __nd->__next_;
           __nd != nullptr && (__nd->__hash() == __hash || std::__constrain_hash(__nd->__hash(), __bc) == __chash);
           __nd = __nd->__next_) {
        if ((__nd->__hash() == __hash) && key_eq()(__nd->__upcast()->__get_value(), __k))
          return iterator(__nd);
      }
    }
  }
  return end();
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _Key>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator
__hash_table<_Tp, _Hash, _Equal, _Alloc>::find(const _Key& __k) const {
  size_t __hash = hash_function()(__k);
  size_type __bc = bucket_count();
  if (__bc != 0) {
    size_t __chash = std::__constrain_hash(__hash, __bc);
    __next_pointer __nd = __bucket_list_[__chash];
    if (__nd != nullptr) {
      for (__nd = __nd->__next_;
           __nd != nullptr && (__hash == __nd->__hash() || std::__constrain_hash(__nd->__hash(), __bc) == __chash);
           __nd = __nd->__next_) {
        if ((__nd->__hash() == __hash) && key_eq()(__nd->__upcast()->__get_value(), __k))
          return const_iterator(__nd);
      }
    }
  }
  return end();
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class... _Args>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_holder
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__construct_node(_Args&&... __args) {
  static_assert(!__is_hash_value_type<_Args...>::value, "Construct cannot be called with a hash value type");
  __node_allocator& __na = __node_alloc();
  __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));







  std::__construct_at(std::addressof(*__h), nullptr, 0);


  __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__get_value()), std::forward<_Args>(__args)...);
  __h.get_deleter().__value_constructed = true;

  __h->__hash_ = hash_function()(__h->__get_value());
  return __h;
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _First, class... _Rest>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_holder
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__construct_node_hash(size_t __hash, _First&& __f, _Rest&&... __rest) {
  static_assert(!__is_hash_value_type<_First, _Rest...>::value, "Construct cannot be called with a hash value type");
  __node_allocator& __na = __node_alloc();
  __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));
  std::__construct_at(std::addressof(*__h), nullptr, __hash);
  __node_traits::construct(
      __na, _NodeTypes::__get_ptr(__h->__get_value()), std::forward<_First>(__f), std::forward<_Rest>(__rest)...);
  __h.get_deleter().__value_constructed = true;
  return __h;
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator
__hash_table<_Tp, _Hash, _Equal, _Alloc>::erase(const_iterator __p) {
  __next_pointer __np = __p.__node_;
  ((void)0);

  iterator __r(__np);
  ++__r;
  remove(__p);
  return __r;
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator
__hash_table<_Tp, _Hash, _Equal, _Alloc>::erase(const_iterator __first, const_iterator __last) {
  for (const_iterator __p = __first; __first != __last; __p = __first) {
    ++__first;
    erase(__p);
  }
  __next_pointer __np = __last.__node_;
  return iterator(__np);
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _Key>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::size_type
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__erase_unique(const _Key& __k) {
  iterator __i = find(__k);
  if (__i == end())
    return 0;
  erase(__i);
  return 1;
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _Key>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::size_type
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__erase_multi(const _Key& __k) {
  size_type __r = 0;
  iterator __i = find(__k);
  if (__i != end()) {
    iterator __e = end();
    do {
      erase(__i++);
      ++__r;
    } while (__i != __e && key_eq()(*__i, __k));
  }
  return __r;
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::__node_holder
__hash_table<_Tp, _Hash, _Equal, _Alloc>::remove(const_iterator __p) noexcept {

  __next_pointer __cn = __p.__node_;
  size_type __bc = bucket_count();
  size_t __chash = std::__constrain_hash(__cn->__hash(), __bc);

  __next_pointer __pn = __bucket_list_[__chash];
  for (; __pn->__next_ != __cn; __pn = __pn->__next_)
    ;



  if (__pn == __p1_.first().__ptr() || std::__constrain_hash(__pn->__hash(), __bc) != __chash) {
    if (__cn->__next_ == nullptr || std::__constrain_hash(__cn->__next_->__hash(), __bc) != __chash)
      __bucket_list_[__chash] = nullptr;
  }

  if (__cn->__next_ != nullptr) {
    size_t __nhash = std::__constrain_hash(__cn->__next_->__hash(), __bc);
    if (__nhash != __chash)
      __bucket_list_[__nhash] = __pn;
  }

  __pn->__next_ = __cn->__next_;
  __cn->__next_ = nullptr;
  --size();
  return __node_holder(__cn->__upcast(), _Dp(__node_alloc(), true));
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _Key>
inline typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::size_type
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__count_unique(const _Key& __k) const {
  return static_cast<size_type>(find(__k) != end());
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _Key>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::size_type
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__count_multi(const _Key& __k) const {
  size_type __r = 0;
  const_iterator __i = find(__k);
  if (__i != end()) {
    const_iterator __e = end();
    do {
      ++__i;
      ++__r;
    } while (__i != __e && key_eq()(*__i, __k));
  }
  return __r;
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _Key>
pair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator,
     typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator>
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__equal_range_unique(const _Key& __k) {
  iterator __i = find(__k);
  iterator __j = __i;
  if (__i != end())
    ++__j;
  return pair<iterator, iterator>(__i, __j);
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _Key>
pair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator,
     typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator>
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__equal_range_unique(const _Key& __k) const {
  const_iterator __i = find(__k);
  const_iterator __j = __i;
  if (__i != end())
    ++__j;
  return pair<const_iterator, const_iterator>(__i, __j);
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _Key>
pair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator,
     typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::iterator>
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__equal_range_multi(const _Key& __k) {
  iterator __i = find(__k);
  iterator __j = __i;
  if (__i != end()) {
    iterator __e = end();
    do {
      ++__j;
    } while (__j != __e && key_eq()(*__j, __k));
  }
  return pair<iterator, iterator>(__i, __j);
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
template <class _Key>
pair<typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator,
     typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::const_iterator>
__hash_table<_Tp, _Hash, _Equal, _Alloc>::__equal_range_multi(const _Key& __k) const {
  const_iterator __i = find(__k);
  const_iterator __j = __i;
  if (__i != end()) {
    const_iterator __e = end();
    do {
      ++__j;
    } while (__j != __e && key_eq()(*__j, __k));
  }
  return pair<const_iterator, const_iterator>(__i, __j);
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
void __hash_table<_Tp, _Hash, _Equal, _Alloc>::swap(__hash_table& __u)






    noexcept(__is_nothrow_swappable_v<hasher>&& __is_nothrow_swappable_v<key_equal>)

{
  ((void)0);



  {
    __node_pointer_pointer __npp = __bucket_list_.release();
    __bucket_list_.reset(__u.__bucket_list_.release());
    __u.__bucket_list_.reset(__npp);
  }
  std::swap(__bucket_list_.get_deleter().size(), __u.__bucket_list_.get_deleter().size());
  std::__swap_allocator(__bucket_list_.get_deleter().__alloc(), __u.__bucket_list_.get_deleter().__alloc());
  std::__swap_allocator(__node_alloc(), __u.__node_alloc());
  std::swap(__p1_.first().__next_, __u.__p1_.first().__next_);
  __p2_.swap(__u.__p2_);
  __p3_.swap(__u.__p3_);
  if (size() > 0)
    __bucket_list_[std::__constrain_hash(__p1_.first().__next_->__hash(), bucket_count())] = __p1_.first().__ptr();
  if (__u.size() > 0)
    __u.__bucket_list_[std::__constrain_hash(__u.__p1_.first().__next_->__hash(), __u.bucket_count())] =
        __u.__p1_.first().__ptr();
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
typename __hash_table<_Tp, _Hash, _Equal, _Alloc>::size_type
__hash_table<_Tp, _Hash, _Equal, _Alloc>::bucket_size(size_type __n) const {
  ((void)0);

  __next_pointer __np = __bucket_list_[__n];
  size_type __bc = bucket_count();
  size_type __r = 0;
  if (__np != nullptr) {
    for (__np = __np->__next_; __np != nullptr && std::__constrain_hash(__np->__hash(), __bc) == __n;
         __np = __np->__next_, (void)++__r)
      ;
  }
  return __r;
}

template <class _Tp, class _Hash, class _Equal, class _Alloc>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
swap(__hash_table<_Tp, _Hash, _Equal, _Alloc>& __x, __hash_table<_Tp, _Hash, _Equal, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}

}}
# 2040 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__hash_table" 3
#pragma clang diagnostic pop
# 592 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/erase_if_container.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/erase_if_container.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/erase_if_container.h" 2 3

#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/erase_if_container.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/erase_if_container.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/erase_if_container.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/erase_if_container.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/erase_if_container.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/erase_if_container.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Container, class _Predicate>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename _Container::size_type __libcpp_erase_if_container(_Container& __c, _Predicate& __pred) {
  typename _Container::size_type __old_size = __c.size();

  const typename _Container::iterator __last = __c.end();
  for (typename _Container::iterator __iter = __c.begin(); __iter != __last;) {
    if (__pred(*__iter))
      __iter = __c.erase(__iter);
    else
      ++__iter;
  }

  return __old_size - __c.size();
}

}}
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/erase_if_container.h" 3
#pragma clang diagnostic pop
# 594 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ranges_iterator_traits.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ranges_iterator_traits.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ranges_iterator_traits.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ranges_iterator_traits.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ranges_iterator_traits.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ranges_iterator_traits.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ranges_iterator_traits.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ranges_iterator_traits.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ranges_iterator_traits.h" 3
}}
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/ranges_iterator_traits.h" 3
#pragma clang diagnostic pop
# 596 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__node_handle" 1 3
# 69 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__node_handle" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 73 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__node_handle" 2 3

#pragma clang diagnostic push
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__node_handle" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__node_handle" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__node_handle" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__node_handle" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__node_handle" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__node_handle" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {




template <class _NodeType, class _Alloc>
struct __generic_container_node_destructor;

template <class _NodeType, class _Alloc, template <class, class> class _MapOrSetSpecifics>
class __basic_node_handle
    : public _MapOrSetSpecifics< _NodeType, __basic_node_handle<_NodeType, _Alloc, _MapOrSetSpecifics>> {
  template <class _Tp, class _Compare, class _Allocator>
  friend class __tree;
  template <class _Tp, class _Hash, class _Equal, class _Allocator>
  friend class __hash_table;
  friend struct _MapOrSetSpecifics< _NodeType, __basic_node_handle<_NodeType, _Alloc, _MapOrSetSpecifics>>;

  typedef allocator_traits<_Alloc> __alloc_traits;
  typedef __rebind_pointer_t<typename __alloc_traits::void_pointer, _NodeType> __node_pointer_type;

public:
  typedef _Alloc allocator_type;

private:
  __node_pointer_type __ptr_ = nullptr;
  optional<allocator_type> __alloc_;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __release_ptr() {
    __ptr_ = nullptr;
    __alloc_ = std::nullopt;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __destroy_node_pointer() {
    if (__ptr_ != nullptr) {
      typedef typename __allocator_traits_rebind< allocator_type, _NodeType>::type __node_alloc_type;
      __node_alloc_type __alloc(*__alloc_);
      __generic_container_node_destructor<_NodeType, __node_alloc_type>(__alloc, true)(__ptr_);
      __ptr_ = nullptr;
    }
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __basic_node_handle(__node_pointer_type __ptr, allocator_type const& __alloc)
      : __ptr_(__ptr), __alloc_(__alloc) {}

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __basic_node_handle() = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __basic_node_handle(__basic_node_handle&& __other) noexcept
      : __ptr_(__other.__ptr_), __alloc_(std::move(__other.__alloc_)) {
    __other.__ptr_ = nullptr;
    __other.__alloc_ = std::nullopt;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __basic_node_handle& operator=(__basic_node_handle&& __other) {
    ((void)0);





    __destroy_node_pointer();
    __ptr_ = __other.__ptr_;

    if (__alloc_traits::propagate_on_container_move_assignment::value || __alloc_ == std::nullopt)
      __alloc_ = std::move(__other.__alloc_);

    __other.__ptr_ = nullptr;
    __other.__alloc_ = std::nullopt;

    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) allocator_type get_allocator() const { return *__alloc_; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit operator bool() const { return __ptr_ != nullptr; }

  [[nodiscard]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool empty() const { return __ptr_ == nullptr; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(__basic_node_handle& __other) noexcept(
      __alloc_traits::propagate_on_container_swap::value || __alloc_traits::is_always_equal::value) {
    using std::swap;
    swap(__ptr_, __other.__ptr_);
    if (__alloc_traits::propagate_on_container_swap::value || __alloc_ == std::nullopt ||
        __other.__alloc_ == std::nullopt)
      swap(__alloc_, __other.__alloc_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) friend void
  swap(__basic_node_handle& __a, __basic_node_handle& __b) noexcept(noexcept(__a.swap(__b))) {
    __a.swap(__b);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~__basic_node_handle() { __destroy_node_pointer(); }
};

template <class _NodeType, class _Derived>
struct __set_node_handle_specifics {
  typedef typename _NodeType::__node_value_type value_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) value_type& value() const { return static_cast<_Derived const*>(this)->__ptr_->__get_value(); }
};

template <class _NodeType, class _Derived>
struct __map_node_handle_specifics {
  typedef typename _NodeType::__node_value_type::key_type key_type;
  typedef typename _NodeType::__node_value_type::mapped_type mapped_type;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) key_type& key() const {
    return static_cast<_Derived const*>(this)->__ptr_->__get_value().__ref().first;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) mapped_type& mapped() const {
    return static_cast<_Derived const*>(this)->__ptr_->__get_value().__ref().second;
  }
};

template <class _NodeType, class _Alloc>
using __set_node_handle = __basic_node_handle< _NodeType, _Alloc, __set_node_handle_specifics>;

template <class _NodeType, class _Alloc>
using __map_node_handle = __basic_node_handle< _NodeType, _Alloc, __map_node_handle_specifics>;

template <class _Iterator, class _NodeType>
struct __insert_return_type {
  _Iterator position;
  bool inserted;
  _NodeType node;
};



}}
# 205 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__node_handle" 3
#pragma clang diagnostic pop
# 600 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 2 3
# 625 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 629 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 2 3

#pragma clang diagnostic push
# 630 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 630 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 630 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 630 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 630 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 630 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Key,
          class _Cp,
          class _Hash,
          class _Pred,
          bool = is_empty<_Hash>::value && !__libcpp_is_final<_Hash>::value>
class __unordered_map_hasher : private _Hash {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __unordered_map_hasher() noexcept(is_nothrow_default_constructible<_Hash>::value) : _Hash() {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __unordered_map_hasher(const _Hash& __h) noexcept(is_nothrow_copy_constructible<_Hash>::value)
      : _Hash(__h) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Hash& hash_function() const noexcept { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(const _Cp& __x) const {
    return static_cast<const _Hash&>(*this)(__x.__get_value().first);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(const _Key& __x) const { return static_cast<const _Hash&>(*this)(__x); }






  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(__unordered_map_hasher& __y) noexcept(__is_nothrow_swappable_v<_Hash>) {
    using std::swap;
    swap(static_cast<_Hash&>(*this), static_cast<_Hash&>(__y));
  }
};

template <class _Key, class _Cp, class _Hash, class _Pred>
class __unordered_map_hasher<_Key, _Cp, _Hash, _Pred, false> {
  _Hash __hash_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __unordered_map_hasher() noexcept(is_nothrow_default_constructible<_Hash>::value)
      : __hash_() {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __unordered_map_hasher(const _Hash& __h) noexcept(is_nothrow_copy_constructible<_Hash>::value)
      : __hash_(__h) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Hash& hash_function() const noexcept { return __hash_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(const _Cp& __x) const { return __hash_(__x.__get_value().first); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t operator()(const _Key& __x) const { return __hash_(__x); }






  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(__unordered_map_hasher& __y) noexcept(__is_nothrow_swappable_v<_Hash>) {
    using std::swap;
    swap(__hash_, __y.__hash_);
  }
};

template <class _Key, class _Cp, class _Hash, class _Pred, bool __b>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
swap(__unordered_map_hasher<_Key, _Cp, _Hash, _Pred, __b>& __x,
     __unordered_map_hasher<_Key, _Cp, _Hash, _Pred, __b>& __y) noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}

template <class _Key,
          class _Cp,
          class _Pred,
          class _Hash,
          bool = is_empty<_Pred>::value && !__libcpp_is_final<_Pred>::value>
class __unordered_map_equal : private _Pred {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __unordered_map_equal() noexcept(is_nothrow_default_constructible<_Pred>::value) : _Pred() {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __unordered_map_equal(const _Pred& __p) noexcept(is_nothrow_copy_constructible<_Pred>::value)
      : _Pred(__p) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Pred& key_eq() const noexcept { return *this; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Cp& __x, const _Cp& __y) const {
    return static_cast<const _Pred&>(*this)(__x.__get_value().first, __y.__get_value().first);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Cp& __x, const _Key& __y) const {
    return static_cast<const _Pred&>(*this)(__x.__get_value().first, __y);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Key& __x, const _Cp& __y) const {
    return static_cast<const _Pred&>(*this)(__x, __y.__get_value().first);
  }
# 728 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(__unordered_map_equal& __y) noexcept(__is_nothrow_swappable_v<_Pred>) {
    using std::swap;
    swap(static_cast<_Pred&>(*this), static_cast<_Pred&>(__y));
  }
};

template <class _Key, class _Cp, class _Pred, class _Hash>
class __unordered_map_equal<_Key, _Cp, _Pred, _Hash, false> {
  _Pred __pred_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __unordered_map_equal() noexcept(is_nothrow_default_constructible<_Pred>::value)
      : __pred_() {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __unordered_map_equal(const _Pred& __p) noexcept(is_nothrow_copy_constructible<_Pred>::value)
      : __pred_(__p) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Pred& key_eq() const noexcept { return __pred_; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Cp& __x, const _Cp& __y) const {
    return __pred_(__x.__get_value().first, __y.__get_value().first);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Cp& __x, const _Key& __y) const {
    return __pred_(__x.__get_value().first, __y);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator()(const _Key& __x, const _Cp& __y) const {
    return __pred_(__x, __y.__get_value().first);
  }
# 771 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(__unordered_map_equal& __y) noexcept(__is_nothrow_swappable_v<_Pred>) {
    using std::swap;
    swap(__pred_, __y.__pred_);
  }
};

template <class _Key, class _Cp, class _Pred, class _Hash, bool __b>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
swap(__unordered_map_equal<_Key, _Cp, _Pred, _Hash, __b>& __x, __unordered_map_equal<_Key, _Cp, _Pred, _Hash, __b>& __y)
    noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}

template <class _Alloc>
class __hash_map_node_destructor {
  typedef _Alloc allocator_type;
  typedef allocator_traits<allocator_type> __alloc_traits;

public:
  typedef typename __alloc_traits::pointer pointer;

private:
  allocator_type& __na_;

public:
  bool __first_constructed;
  bool __second_constructed;

  __hash_map_node_destructor& operator=(const __hash_map_node_destructor&) = delete;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit __hash_map_node_destructor(allocator_type& __na) noexcept
      : __na_(__na),
        __first_constructed(false),
        __second_constructed(false) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_map_node_destructor(__hash_node_destructor<allocator_type>&& __x) noexcept
      : __na_(__x.__na_),
        __first_constructed(__x.__value_constructed),
        __second_constructed(__x.__value_constructed) {
    __x.__value_constructed = false;
  }







  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator()(pointer __p) noexcept {
    if (__second_constructed)
      __alloc_traits::destroy(__na_, std::addressof(__p->__get_value().__get_value().second));
    if (__first_constructed)
      __alloc_traits::destroy(__na_, std::addressof(__p->__get_value().__get_value().first));
    if (__p)
      __alloc_traits::deallocate(__na_, __p, 1);
  }
};


template <class _Key, class _Tp>
struct __attribute__((__standalone_debug__)) __hash_value_type {
  typedef _Key key_type;
  typedef _Tp mapped_type;
  typedef pair<const key_type, mapped_type> value_type;
  typedef pair<key_type&, mapped_type&> __nc_ref_pair_type;
  typedef pair<key_type&&, mapped_type&&> __nc_rref_pair_type;

private:
  value_type __cc_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) value_type& __get_value() {

    return *std::launder(std::addressof(__cc_));



  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const value_type& __get_value() const {

    return *std::launder(std::addressof(__cc_));



  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __nc_ref_pair_type __ref() {
    value_type& __v = __get_value();
    return __nc_ref_pair_type(const_cast<key_type&>(__v.first), __v.second);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __nc_rref_pair_type __move() {
    value_type& __v = __get_value();
    return __nc_rref_pair_type(std::move(const_cast<key_type&>(__v.first)), std::move(__v.second));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_value_type& operator=(const __hash_value_type& __v) {
    __ref() = __v.__get_value();
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_value_type& operator=(__hash_value_type&& __v) {
    __ref() = __v.__move();
    return *this;
  }

  template <class _ValueTp, __enable_if_t<__is_same_uncvref<_ValueTp, value_type>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_value_type& operator=(_ValueTp&& __v) {
    __ref() = std::forward<_ValueTp>(__v);
    return *this;
  }

  __hash_value_type(const __hash_value_type& __v) = delete;
  __hash_value_type(__hash_value_type&& __v) = delete;
  template <class... _Args>
  explicit __hash_value_type(_Args&&... __args) = delete;

  ~__hash_value_type() = delete;
};
# 913 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
template <class _HashIterator>
class __hash_map_iterator {
  _HashIterator __i_;

  typedef __hash_node_types_from_iterator<_HashIterator> _NodeTypes;

public:
  typedef forward_iterator_tag iterator_category;
  typedef typename _NodeTypes::__map_value_type value_type;
  typedef typename _NodeTypes::difference_type difference_type;
  typedef value_type& reference;
  typedef typename _NodeTypes::__map_value_type_pointer pointer;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_map_iterator() noexcept {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_map_iterator(_HashIterator __i) noexcept : __i_(__i) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference operator*() const { return __i_->__get_value(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer operator->() const { return pointer_traits<pointer>::pointer_to(__i_->__get_value()); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_map_iterator& operator++() {
    ++__i_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_map_iterator operator++(int) {
    __hash_map_iterator __t(*this);
    ++(*this);
    return __t;
  }

  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const __hash_map_iterator& __x, const __hash_map_iterator& __y) {
    return __x.__i_ == __y.__i_;
  }

  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const __hash_map_iterator& __x, const __hash_map_iterator& __y) {
    return __x.__i_ != __y.__i_;
  }


  template <class, class, class, class, class>
  friend class unordered_map;
  template <class, class, class, class, class>
  friend class unordered_multimap;
  template <class>
  friend class __hash_const_iterator;
  template <class>
  friend class __hash_const_local_iterator;
  template <class>
  friend class __hash_map_const_iterator;
};

template <class _HashIterator>
class __hash_map_const_iterator {
  _HashIterator __i_;

  typedef __hash_node_types_from_iterator<_HashIterator> _NodeTypes;

public:
  typedef forward_iterator_tag iterator_category;
  typedef typename _NodeTypes::__map_value_type value_type;
  typedef typename _NodeTypes::difference_type difference_type;
  typedef const value_type& reference;
  typedef typename _NodeTypes::__const_map_value_type_pointer pointer;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_map_const_iterator() noexcept {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_map_const_iterator(_HashIterator __i) noexcept : __i_(__i) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  __hash_map_const_iterator(__hash_map_iterator<typename _HashIterator::__non_const_iterator> __i) noexcept
      : __i_(__i.__i_) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference operator*() const { return __i_->__get_value(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer operator->() const { return pointer_traits<pointer>::pointer_to(__i_->__get_value()); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_map_const_iterator& operator++() {
    ++__i_;
    return *this;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __hash_map_const_iterator operator++(int) {
    __hash_map_const_iterator __t(*this);
    ++(*this);
    return __t;
  }

  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  operator==(const __hash_map_const_iterator& __x, const __hash_map_const_iterator& __y) {
    return __x.__i_ == __y.__i_;
  }

  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  operator!=(const __hash_map_const_iterator& __x, const __hash_map_const_iterator& __y) {
    return __x.__i_ != __y.__i_;
  }


  template <class, class, class, class, class>
  friend class unordered_map;
  template <class, class, class, class, class>
  friend class unordered_multimap;
  template <class>
  friend class __hash_const_iterator;
  template <class>
  friend class __hash_const_local_iterator;
};

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
class unordered_multimap;

template <class _Key,
          class _Tp,
          class _Hash = hash<_Key>,
          class _Pred = equal_to<_Key>,
          class _Alloc = allocator<pair<const _Key, _Tp> > >
class unordered_map {
public:

  typedef _Key key_type;
  typedef _Tp mapped_type;
  typedef __type_identity_t<_Hash> hasher;
  typedef __type_identity_t<_Pred> key_equal;
  typedef __type_identity_t<_Alloc> allocator_type;
  typedef pair<const key_type, mapped_type> value_type;
  typedef value_type& reference;
  typedef const value_type& const_reference;
  static_assert(is_same<value_type, typename allocator_type::value_type>::value,
                "Allocator::value_type must be same type as value_type");

private:
  typedef __hash_value_type<key_type, mapped_type> __value_type;
  typedef __unordered_map_hasher<key_type, __value_type, hasher, key_equal> __hasher;
  typedef __unordered_map_equal<key_type, __value_type, key_equal, hasher> __key_equal;
  typedef __rebind_alloc<allocator_traits<allocator_type>, __value_type> __allocator_type;

  typedef __hash_table<__value_type, __hasher, __key_equal, __allocator_type> __table;

  __table __table_;

  typedef typename __table::_NodeTypes _NodeTypes;
  typedef typename __table::__node_pointer __node_pointer;
  typedef typename __table::__node_const_pointer __node_const_pointer;
  typedef typename __table::__node_traits __node_traits;
  typedef typename __table::__node_allocator __node_allocator;
  typedef typename __table::__node __node;
  typedef __hash_map_node_destructor<__node_allocator> _Dp;
  typedef unique_ptr<__node, _Dp> __node_holder;
  typedef allocator_traits<allocator_type> __alloc_traits;

  static_assert(__check_valid_allocator<allocator_type>::value, "");

  static_assert(is_same<typename __table::__container_value_type, value_type>::value, "");
  static_assert(is_same<typename __table::__node_value_type, __value_type>::value, "");

public:
  typedef typename __alloc_traits::pointer pointer;
  typedef typename __alloc_traits::const_pointer const_pointer;
  typedef typename __table::size_type size_type;
  typedef typename __table::difference_type difference_type;

  typedef __hash_map_iterator<typename __table::iterator> iterator;
  typedef __hash_map_const_iterator<typename __table::const_iterator> const_iterator;
  typedef __hash_map_iterator<typename __table::local_iterator> local_iterator;
  typedef __hash_map_const_iterator<typename __table::const_local_iterator> const_local_iterator;


  typedef __map_node_handle<__node, allocator_type> node_type;
  typedef __insert_return_type<iterator, node_type> insert_return_type;


  template <class _Key2, class _Tp2, class _Hash2, class _Pred2, class _Alloc2>
  friend class unordered_map;
  template <class _Key2, class _Tp2, class _Hash2, class _Pred2, class _Alloc2>
  friend class unordered_multimap;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_map() noexcept(is_nothrow_default_constructible<__table>::value) {}
  explicit __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  unordered_map(size_type __n, const hasher& __hf = hasher(), const key_equal& __eql = key_equal());
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  unordered_map(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a);
  template <class _InputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_map(_InputIterator __first, _InputIterator __last);
  template <class _InputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  unordered_map(_InputIterator __first,
                _InputIterator __last,
                size_type __n,
                const hasher& __hf = hasher(),
                const key_equal& __eql = key_equal());
  template <class _InputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_map(
      _InputIterator __first,
      _InputIterator __last,
      size_type __n,
      const hasher& __hf,
      const key_equal& __eql,
      const allocator_type& __a);
# 1126 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit unordered_map(const allocator_type& __a);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_map(const unordered_map& __u);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_map(const unordered_map& __u, const allocator_type& __a);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_map(unordered_map&& __u) noexcept(is_nothrow_move_constructible<__table>::value);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_map(unordered_map&& __u, const allocator_type& __a);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_map(initializer_list<value_type> __il);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  unordered_map(initializer_list<value_type> __il,
                size_type __n,
                const hasher& __hf = hasher(),
                const key_equal& __eql = key_equal());
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_map(
      initializer_list<value_type> __il,
      size_type __n,
      const hasher& __hf,
      const key_equal& __eql,
      const allocator_type& __a);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_map(size_type __n, const allocator_type& __a)
      : unordered_map(__n, hasher(), key_equal(), __a) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_map(size_type __n, const hasher& __hf, const allocator_type& __a)
      : unordered_map(__n, __hf, key_equal(), __a) {}
  template <class _InputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  unordered_map(_InputIterator __first, _InputIterator __last, size_type __n, const allocator_type& __a)
      : unordered_map(__first, __last, __n, hasher(), key_equal(), __a) {}
  template <class _InputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_map(
      _InputIterator __first, _InputIterator __last, size_type __n, const hasher& __hf, const allocator_type& __a)
      : unordered_map(__first, __last, __n, __hf, key_equal(), __a) {}
# 1170 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_map(initializer_list<value_type> __il, size_type __n, const allocator_type& __a)
      : unordered_map(__il, __n, hasher(), key_equal(), __a) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  unordered_map(initializer_list<value_type> __il, size_type __n, const hasher& __hf, const allocator_type& __a)
      : unordered_map(__il, __n, __hf, key_equal(), __a) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~unordered_map() {
    static_assert(sizeof(std::__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), "");
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_map& operator=(const unordered_map& __u) {

    __table_ = __u.__table_;
# 1193 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_map& operator=(unordered_map&& __u)
      noexcept(is_nothrow_move_assignable<__table>::value);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_map& operator=(initializer_list<value_type> __il);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) allocator_type get_allocator() const noexcept {
    return allocator_type(__table_.__node_alloc());
  }

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool empty() const noexcept { return __table_.size() == 0; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type size() const noexcept { return __table_.size(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type max_size() const noexcept { return __table_.max_size(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator begin() noexcept { return __table_.begin(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator end() noexcept { return __table_.end(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator begin() const noexcept { return __table_.begin(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator end() const noexcept { return __table_.end(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator cbegin() const noexcept { return __table_.begin(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator cend() const noexcept { return __table_.end(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> insert(const value_type& __x) { return __table_.__insert_unique(__x); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator, const value_type& __x) { return insert(__x).first; }

  template <class _InputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void insert(_InputIterator __first, _InputIterator __last);
# 1233 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void insert(initializer_list<value_type> __il) { insert(__il.begin(), __il.end()); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> insert(value_type&& __x) {
    return __table_.__insert_unique(std::move(__x));
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator, value_type&& __x) {
    return __table_.__insert_unique(std::move(__x)).first;
  }

  template <class _Pp, __enable_if_t<is_constructible<value_type, _Pp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> insert(_Pp&& __x) {
    return __table_.__insert_unique(std::forward<_Pp>(__x));
  }

  template <class _Pp, __enable_if_t<is_constructible<value_type, _Pp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator, _Pp&& __x) {
    return insert(std::forward<_Pp>(__x)).first;
  }

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> emplace(_Args&&... __args) {
    return __table_.__emplace_unique(std::forward<_Args>(__args)...);
  }

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator emplace_hint(const_iterator, _Args&&... __args) {
    return __table_.__emplace_unique(std::forward<_Args>(__args)...).first;
  }




  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> try_emplace(const key_type& __k, _Args&&... __args) {
    return __table_.__emplace_unique_key_args(
        __k, piecewise_construct, std::forward_as_tuple(__k), std::forward_as_tuple(std::forward<_Args>(__args)...));
  }

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> try_emplace(key_type&& __k, _Args&&... __args) {
    return __table_.__emplace_unique_key_args(
        __k,
        piecewise_construct,
        std::forward_as_tuple(std::move(__k)),
        std::forward_as_tuple(std::forward<_Args>(__args)...));
  }

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator try_emplace(const_iterator, const key_type& __k, _Args&&... __args) {
    return try_emplace(__k, std::forward<_Args>(__args)...).first;
  }

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator try_emplace(const_iterator, key_type&& __k, _Args&&... __args) {
    return try_emplace(std::move(__k), std::forward<_Args>(__args)...).first;
  }

  template <class _Vp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> insert_or_assign(const key_type& __k, _Vp&& __v) {
    pair<iterator, bool> __res = __table_.__emplace_unique_key_args(__k, __k, std::forward<_Vp>(__v));
    if (!__res.second) {
      __res.first->second = std::forward<_Vp>(__v);
    }
    return __res;
  }

  template <class _Vp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, bool> insert_or_assign(key_type&& __k, _Vp&& __v) {
    pair<iterator, bool> __res = __table_.__emplace_unique_key_args(__k, std::move(__k), std::forward<_Vp>(__v));
    if (!__res.second) {
      __res.first->second = std::forward<_Vp>(__v);
    }
    return __res;
  }

  template <class _Vp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert_or_assign(const_iterator, const key_type& __k, _Vp&& __v) {
    return insert_or_assign(__k, std::forward<_Vp>(__v)).first;
  }

  template <class _Vp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert_or_assign(const_iterator, key_type&& __k, _Vp&& __v) {
    return insert_or_assign(std::move(__k), std::forward<_Vp>(__v)).first;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator erase(const_iterator __p) { return __table_.erase(__p.__i_); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator erase(iterator __p) { return __table_.erase(__p.__i_); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type erase(const key_type& __k) { return __table_.__erase_unique(__k); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator erase(const_iterator __first, const_iterator __last) {
    return __table_.erase(__first.__i_, __last.__i_);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void clear() noexcept { __table_.clear(); }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) insert_return_type insert(node_type&& __nh) {
    ((void)0);

    return __table_.template __node_handle_insert_unique< node_type, insert_return_type>(std::move(__nh));
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator __hint, node_type&& __nh) {
    ((void)0);

    return __table_.template __node_handle_insert_unique<node_type>(__hint.__i_, std::move(__nh));
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) node_type extract(key_type const& __key) {
    return __table_.template __node_handle_extract<node_type>(__key);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) node_type extract(const_iterator __it) {
    return __table_.template __node_handle_extract<node_type>(__it.__i_);
  }

  template <class _H2, class _P2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void merge(unordered_map<key_type, mapped_type, _H2, _P2, allocator_type>& __source) {
    ((void)0);

    return __table_.__node_handle_merge_unique(__source.__table_);
  }
  template <class _H2, class _P2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void merge(unordered_map<key_type, mapped_type, _H2, _P2, allocator_type>&& __source) {
    ((void)0);

    return __table_.__node_handle_merge_unique(__source.__table_);
  }
  template <class _H2, class _P2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void merge(unordered_multimap<key_type, mapped_type, _H2, _P2, allocator_type>& __source) {
    ((void)0);

    return __table_.__node_handle_merge_unique(__source.__table_);
  }
  template <class _H2, class _P2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void merge(unordered_multimap<key_type, mapped_type, _H2, _P2, allocator_type>&& __source) {
    ((void)0);

    return __table_.__node_handle_merge_unique(__source.__table_);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(unordered_map& __u) noexcept(__is_nothrow_swappable_v<__table>) {
    __table_.swap(__u.__table_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) hasher hash_function() const { return __table_.hash_function().hash_function(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) key_equal key_eq() const { return __table_.key_eq().key_eq(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator find(const key_type& __k) { return __table_.find(__k); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator find(const key_type& __k) const { return __table_.find(__k); }
# 1392 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type count(const key_type& __k) const { return __table_.__count_unique(__k); }
# 1409 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, iterator> equal_range(const key_type& __k) {
    return __table_.__equal_range_unique(__k);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<const_iterator, const_iterator> equal_range(const key_type& __k) const {
    return __table_.__equal_range_unique(__k);
  }
# 1426 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) mapped_type& operator[](const key_type& __k);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) mapped_type& operator[](key_type&& __k);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) mapped_type& at(const key_type& __k);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const mapped_type& at(const key_type& __k) const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type bucket_count() const noexcept { return __table_.bucket_count(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type max_bucket_count() const noexcept { return __table_.max_bucket_count(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type bucket_size(size_type __n) const { return __table_.bucket_size(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type bucket(const key_type& __k) const { return __table_.bucket(__k); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) local_iterator begin(size_type __n) { return __table_.begin(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) local_iterator end(size_type __n) { return __table_.end(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_local_iterator begin(size_type __n) const { return __table_.cbegin(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_local_iterator end(size_type __n) const { return __table_.cend(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_local_iterator cbegin(size_type __n) const { return __table_.cbegin(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_local_iterator cend(size_type __n) const { return __table_.cend(__n); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float load_factor() const noexcept { return __table_.load_factor(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float max_load_factor() const noexcept { return __table_.max_load_factor(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void max_load_factor(float __mlf) { __table_.max_load_factor(__mlf); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void rehash(size_type __n) { __table_.__rehash_unique(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reserve(size_type __n) { __table_.__reserve_unique(__n); }

private:



};


template <class _InputIterator,
          class _Hash = hash<__iter_key_type<_InputIterator>>,
          class _Pred = equal_to<__iter_key_type<_InputIterator>>,
          class _Allocator = allocator<__iter_to_alloc_type<_InputIterator>>,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<!__is_allocator<_Hash>::value>,
          class = enable_if_t<!is_integral<_Hash>::value>,
          class = enable_if_t<!__is_allocator<_Pred>::value>,
          class = enable_if_t<__is_allocator<_Allocator>::value>>
unordered_map(_InputIterator,
              _InputIterator,
              typename allocator_traits<_Allocator>::size_type = 0,
              _Hash = _Hash(),
              _Pred = _Pred(),
              _Allocator = _Allocator())
    -> unordered_map<__iter_key_type<_InputIterator>, __iter_mapped_type<_InputIterator>, _Hash, _Pred, _Allocator>;
# 1495 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
template <class _Key,
          class _Tp,
          class _Hash = hash<remove_const_t<_Key>>,
          class _Pred = equal_to<remove_const_t<_Key>>,
          class _Allocator = allocator<pair<const _Key, _Tp>>,
          class = enable_if_t<!__is_allocator<_Hash>::value>,
          class = enable_if_t<!is_integral<_Hash>::value>,
          class = enable_if_t<!__is_allocator<_Pred>::value>,
          class = enable_if_t<__is_allocator<_Allocator>::value>>
unordered_map(initializer_list<pair<_Key, _Tp>>,
              typename allocator_traits<_Allocator>::size_type = 0,
              _Hash = _Hash(),
              _Pred = _Pred(),
              _Allocator = _Allocator()) -> unordered_map<remove_const_t<_Key>, _Tp, _Hash, _Pred, _Allocator>;

template <class _InputIterator,
          class _Allocator,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<__is_allocator<_Allocator>::value>>
unordered_map(_InputIterator, _InputIterator, typename allocator_traits<_Allocator>::size_type, _Allocator)
    -> unordered_map<__iter_key_type<_InputIterator>,
                     __iter_mapped_type<_InputIterator>,
                     hash<__iter_key_type<_InputIterator>>,
                     equal_to<__iter_key_type<_InputIterator>>,
                     _Allocator>;

template <class _InputIterator,
          class _Allocator,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<__is_allocator<_Allocator>::value>>
unordered_map(_InputIterator, _InputIterator, _Allocator)
    -> unordered_map<__iter_key_type<_InputIterator>,
                     __iter_mapped_type<_InputIterator>,
                     hash<__iter_key_type<_InputIterator>>,
                     equal_to<__iter_key_type<_InputIterator>>,
                     _Allocator>;

template <class _InputIterator,
          class _Hash,
          class _Allocator,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<!__is_allocator<_Hash>::value>,
          class = enable_if_t<!is_integral<_Hash>::value>,
          class = enable_if_t<__is_allocator<_Allocator>::value>>
unordered_map(_InputIterator, _InputIterator, typename allocator_traits<_Allocator>::size_type, _Hash, _Allocator)
    -> unordered_map<__iter_key_type<_InputIterator>,
                     __iter_mapped_type<_InputIterator>,
                     _Hash,
                     equal_to<__iter_key_type<_InputIterator>>,
                     _Allocator>;
# 1579 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
template <class _Key, class _Tp, class _Allocator, class = enable_if_t<__is_allocator<_Allocator>::value>>
unordered_map(initializer_list<pair<_Key, _Tp>>, typename allocator_traits<_Allocator>::size_type, _Allocator)
    -> unordered_map<remove_const_t<_Key>, _Tp, hash<remove_const_t<_Key>>, equal_to<remove_const_t<_Key>>, _Allocator>;

template <class _Key, class _Tp, class _Allocator, class = enable_if_t<__is_allocator<_Allocator>::value>>
unordered_map(initializer_list<pair<_Key, _Tp>>, _Allocator)
    -> unordered_map<remove_const_t<_Key>, _Tp, hash<remove_const_t<_Key>>, equal_to<remove_const_t<_Key>>, _Allocator>;

template <class _Key,
          class _Tp,
          class _Hash,
          class _Allocator,
          class = enable_if_t<!__is_allocator<_Hash>::value>,
          class = enable_if_t<!is_integral<_Hash>::value>,
          class = enable_if_t<__is_allocator<_Allocator>::value>>
unordered_map(initializer_list<pair<_Key, _Tp>>, typename allocator_traits<_Allocator>::size_type, _Hash, _Allocator)
    -> unordered_map<remove_const_t<_Key>, _Tp, _Hash, equal_to<remove_const_t<_Key>>, _Allocator>;


template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(size_type __n, const hasher& __hf, const key_equal& __eql)
    : __table_(__hf, __eql) {
  __table_.__rehash_unique(__n);
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(
    size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a)
    : __table_(__hf, __eql, typename __table::allocator_type(__a)) {
  __table_.__rehash_unique(__n);
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
inline unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(const allocator_type& __a)
    : __table_(typename __table::allocator_type(__a)) {}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
template <class _InputIterator>
unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(_InputIterator __first, _InputIterator __last) {
  insert(__first, __last);
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
template <class _InputIterator>
unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(
    _InputIterator __first, _InputIterator __last, size_type __n, const hasher& __hf, const key_equal& __eql)
    : __table_(__hf, __eql) {
  __table_.__rehash_unique(__n);
  insert(__first, __last);
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
template <class _InputIterator>
unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(
    _InputIterator __first,
    _InputIterator __last,
    size_type __n,
    const hasher& __hf,
    const key_equal& __eql,
    const allocator_type& __a)
    : __table_(__hf, __eql, typename __table::allocator_type(__a)) {
  __table_.__rehash_unique(__n);
  insert(__first, __last);
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(const unordered_map& __u) : __table_(__u.__table_) {
  __table_.__rehash_unique(__u.bucket_count());
  insert(__u.begin(), __u.end());
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(const unordered_map& __u, const allocator_type& __a)
    : __table_(__u.__table_, typename __table::allocator_type(__a)) {
  __table_.__rehash_unique(__u.bucket_count());
  insert(__u.begin(), __u.end());
}



template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
inline unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(unordered_map&& __u)
    noexcept(is_nothrow_move_constructible<__table>::value)
    : __table_(std::move(__u.__table_)) {}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(unordered_map&& __u, const allocator_type& __a)
    : __table_(std::move(__u.__table_), typename __table::allocator_type(__a)) {
  if (__a != __u.get_allocator()) {
    iterator __i = __u.begin();
    while (__u.size() != 0) {
      __table_.__emplace_unique(__u.__table_.remove((__i++).__i_)->__get_value().__move());
    }
  }
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(initializer_list<value_type> __il) {
  insert(__il.begin(), __il.end());
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(
    initializer_list<value_type> __il, size_type __n, const hasher& __hf, const key_equal& __eql)
    : __table_(__hf, __eql) {
  __table_.__rehash_unique(__n);
  insert(__il.begin(), __il.end());
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map(
    initializer_list<value_type> __il,
    size_type __n,
    const hasher& __hf,
    const key_equal& __eql,
    const allocator_type& __a)
    : __table_(__hf, __eql, typename __table::allocator_type(__a)) {
  __table_.__rehash_unique(__n);
  insert(__il.begin(), __il.end());
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
inline unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&
unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator=(unordered_map&& __u)
    noexcept(is_nothrow_move_assignable<__table>::value) {
  __table_ = std::move(__u.__table_);
  return *this;
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
inline unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&
unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator=(initializer_list<value_type> __il) {
  __table_.__assign_unique(__il.begin(), __il.end());
  return *this;
}



template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
template <class _InputIterator>
inline void unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::insert(_InputIterator __first, _InputIterator __last) {
  for (; __first != __last; ++__first)
    __table_.__insert_unique(*__first);
}



template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
_Tp& unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](const key_type& __k) {
  return __table_
      .__emplace_unique_key_args(__k, piecewise_construct, std::forward_as_tuple(__k), std::forward_as_tuple())
      .first->__get_value()
      .second;
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
_Tp& unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](key_type&& __k) {
  return __table_
      .__emplace_unique_key_args(
          __k, piecewise_construct, std::forward_as_tuple(std::move(__k)), std::forward_as_tuple())
      .first->__get_value()
      .second;
}
# 1769 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
_Tp& unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::at(const key_type& __k) {
  iterator __i = find(__k);
  if (__i == end())
    __throw_out_of_range("unordered_map::at: key not found");
  return __i->second;
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
const _Tp& unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::at(const key_type& __k) const {
  const_iterator __i = find(__k);
  if (__i == end())
    __throw_out_of_range("unordered_map::at: key not found");
  return __i->second;
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
swap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x, unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}
# 1800 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
                                      const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y) {
  if (__x.size() != __y.size())
    return false;
  typedef typename unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::const_iterator const_iterator;
  for (const_iterator __i = __x.begin(), __ex = __x.end(), __ey = __y.end(); __i != __ex; ++__i) {
    const_iterator __j = __y.find(__i->first);
    if (__j == __ey || !(*__i == *__j))
      return false;
  }
  return true;
}



template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
                                             const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y) {
  return !(__x == __y);
}



template <class _Key,
          class _Tp,
          class _Hash = hash<_Key>,
          class _Pred = equal_to<_Key>,
          class _Alloc = allocator<pair<const _Key, _Tp> > >
class unordered_multimap {
public:

  typedef _Key key_type;
  typedef _Tp mapped_type;
  typedef __type_identity_t<_Hash> hasher;
  typedef __type_identity_t<_Pred> key_equal;
  typedef __type_identity_t<_Alloc> allocator_type;
  typedef pair<const key_type, mapped_type> value_type;
  typedef value_type& reference;
  typedef const value_type& const_reference;
  static_assert(__check_valid_allocator<allocator_type>::value, "");
  static_assert(is_same<value_type, typename allocator_type::value_type>::value,
                "Allocator::value_type must be same type as value_type");

private:
  typedef __hash_value_type<key_type, mapped_type> __value_type;
  typedef __unordered_map_hasher<key_type, __value_type, hasher, key_equal> __hasher;
  typedef __unordered_map_equal<key_type, __value_type, key_equal, hasher> __key_equal;
  typedef __rebind_alloc<allocator_traits<allocator_type>, __value_type> __allocator_type;

  typedef __hash_table<__value_type, __hasher, __key_equal, __allocator_type> __table;

  __table __table_;

  typedef typename __table::_NodeTypes _NodeTypes;
  typedef typename __table::__node_traits __node_traits;
  typedef typename __table::__node_allocator __node_allocator;
  typedef typename __table::__node __node;
  typedef __hash_map_node_destructor<__node_allocator> _Dp;
  typedef unique_ptr<__node, _Dp> __node_holder;
  typedef allocator_traits<allocator_type> __alloc_traits;
  static_assert(is_same<typename __node_traits::size_type, typename __alloc_traits::size_type>::value,
                "Allocator uses different size_type for different types");

public:
  typedef typename __alloc_traits::pointer pointer;
  typedef typename __alloc_traits::const_pointer const_pointer;
  typedef typename __table::size_type size_type;
  typedef typename __table::difference_type difference_type;

  typedef __hash_map_iterator<typename __table::iterator> iterator;
  typedef __hash_map_const_iterator<typename __table::const_iterator> const_iterator;
  typedef __hash_map_iterator<typename __table::local_iterator> local_iterator;
  typedef __hash_map_const_iterator<typename __table::const_local_iterator> const_local_iterator;


  typedef __map_node_handle<__node, allocator_type> node_type;


  template <class _Key2, class _Tp2, class _Hash2, class _Pred2, class _Alloc2>
  friend class unordered_map;
  template <class _Key2, class _Tp2, class _Hash2, class _Pred2, class _Alloc2>
  friend class unordered_multimap;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap() noexcept(is_nothrow_default_constructible<__table>::value) {}
  explicit __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  unordered_multimap(size_type __n, const hasher& __hf = hasher(), const key_equal& __eql = key_equal());
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  unordered_multimap(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a);
  template <class _InputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap(_InputIterator __first, _InputIterator __last);
  template <class _InputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap(
      _InputIterator __first,
      _InputIterator __last,
      size_type __n,
      const hasher& __hf = hasher(),
      const key_equal& __eql = key_equal());
  template <class _InputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap(
      _InputIterator __first,
      _InputIterator __last,
      size_type __n,
      const hasher& __hf,
      const key_equal& __eql,
      const allocator_type& __a);
# 1924 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit unordered_multimap(const allocator_type& __a);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap(const unordered_multimap& __u);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap(const unordered_multimap& __u, const allocator_type& __a);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap(unordered_multimap&& __u)
      noexcept(is_nothrow_move_constructible<__table>::value);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap(unordered_multimap&& __u, const allocator_type& __a);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap(initializer_list<value_type> __il);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap(
      initializer_list<value_type> __il,
      size_type __n,
      const hasher& __hf = hasher(),
      const key_equal& __eql = key_equal());
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap(
      initializer_list<value_type> __il,
      size_type __n,
      const hasher& __hf,
      const key_equal& __eql,
      const allocator_type& __a);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap(size_type __n, const allocator_type& __a)
      : unordered_multimap(__n, hasher(), key_equal(), __a) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap(size_type __n, const hasher& __hf, const allocator_type& __a)
      : unordered_multimap(__n, __hf, key_equal(), __a) {}
  template <class _InputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  unordered_multimap(_InputIterator __first, _InputIterator __last, size_type __n, const allocator_type& __a)
      : unordered_multimap(__first, __last, __n, hasher(), key_equal(), __a) {}
  template <class _InputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap(
      _InputIterator __first, _InputIterator __last, size_type __n, const hasher& __hf, const allocator_type& __a)
      : unordered_multimap(__first, __last, __n, __hf, key_equal(), __a) {}
# 1969 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap(initializer_list<value_type> __il, size_type __n, const allocator_type& __a)
      : unordered_multimap(__il, __n, hasher(), key_equal(), __a) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  unordered_multimap(initializer_list<value_type> __il, size_type __n, const hasher& __hf, const allocator_type& __a)
      : unordered_multimap(__il, __n, __hf, key_equal(), __a) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~unordered_multimap() {
    static_assert(sizeof(std::__diagnose_unordered_container_requirements<_Key, _Hash, _Pred>(0)), "");
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap& operator=(const unordered_multimap& __u) {

    __table_ = __u.__table_;
# 1992 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap& operator=(unordered_multimap&& __u)
      noexcept(is_nothrow_move_assignable<__table>::value);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) unordered_multimap& operator=(initializer_list<value_type> __il);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) allocator_type get_allocator() const noexcept {
    return allocator_type(__table_.__node_alloc());
  }

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool empty() const noexcept { return __table_.size() == 0; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type size() const noexcept { return __table_.size(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type max_size() const noexcept { return __table_.max_size(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator begin() noexcept { return __table_.begin(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator end() noexcept { return __table_.end(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator begin() const noexcept { return __table_.begin(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator end() const noexcept { return __table_.end(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator cbegin() const noexcept { return __table_.begin(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator cend() const noexcept { return __table_.end(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const value_type& __x) { return __table_.__insert_multi(__x); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator __p, const value_type& __x) {
    return __table_.__insert_multi(__p.__i_, __x);
  }

  template <class _InputIterator>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void insert(_InputIterator __first, _InputIterator __last);
# 2034 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void insert(initializer_list<value_type> __il) { insert(__il.begin(), __il.end()); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(value_type&& __x) { return __table_.__insert_multi(std::move(__x)); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator __p, value_type&& __x) {
    return __table_.__insert_multi(__p.__i_, std::move(__x));
  }

  template <class _Pp, __enable_if_t<is_constructible<value_type, _Pp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(_Pp&& __x) {
    return __table_.__insert_multi(std::forward<_Pp>(__x));
  }

  template <class _Pp, __enable_if_t<is_constructible<value_type, _Pp>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator __p, _Pp&& __x) {
    return __table_.__insert_multi(__p.__i_, std::forward<_Pp>(__x));
  }

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator emplace(_Args&&... __args) {
    return __table_.__emplace_multi(std::forward<_Args>(__args)...);
  }

  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator emplace_hint(const_iterator __p, _Args&&... __args) {
    return __table_.__emplace_hint_multi(__p.__i_, std::forward<_Args>(__args)...);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator erase(const_iterator __p) { return __table_.erase(__p.__i_); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator erase(iterator __p) { return __table_.erase(__p.__i_); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type erase(const key_type& __k) { return __table_.__erase_multi(__k); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator erase(const_iterator __first, const_iterator __last) {
    return __table_.erase(__first.__i_, __last.__i_);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void clear() noexcept { __table_.clear(); }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(node_type&& __nh) {
    ((void)0);

    return __table_.template __node_handle_insert_multi<node_type>(std::move(__nh));
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator __hint, node_type&& __nh) {
    ((void)0);

    return __table_.template __node_handle_insert_multi<node_type>(__hint.__i_, std::move(__nh));
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) node_type extract(key_type const& __key) {
    return __table_.template __node_handle_extract<node_type>(__key);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) node_type extract(const_iterator __it) {
    return __table_.template __node_handle_extract<node_type>(__it.__i_);
  }

  template <class _H2, class _P2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void merge(unordered_multimap<key_type, mapped_type, _H2, _P2, allocator_type>& __source) {
    ((void)0);

    return __table_.__node_handle_merge_multi(__source.__table_);
  }
  template <class _H2, class _P2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void merge(unordered_multimap<key_type, mapped_type, _H2, _P2, allocator_type>&& __source) {
    ((void)0);

    return __table_.__node_handle_merge_multi(__source.__table_);
  }
  template <class _H2, class _P2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void merge(unordered_map<key_type, mapped_type, _H2, _P2, allocator_type>& __source) {
    ((void)0);

    return __table_.__node_handle_merge_multi(__source.__table_);
  }
  template <class _H2, class _P2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void merge(unordered_map<key_type, mapped_type, _H2, _P2, allocator_type>&& __source) {
    ((void)0);

    return __table_.__node_handle_merge_multi(__source.__table_);
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(unordered_multimap& __u) noexcept(__is_nothrow_swappable_v<__table>) {
    __table_.swap(__u.__table_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) hasher hash_function() const { return __table_.hash_function().hash_function(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) key_equal key_eq() const { return __table_.key_eq().key_eq(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator find(const key_type& __k) { return __table_.find(__k); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator find(const key_type& __k) const { return __table_.find(__k); }
# 2134 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type count(const key_type& __k) const { return __table_.__count_multi(__k); }
# 2151 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<iterator, iterator> equal_range(const key_type& __k) {
    return __table_.__equal_range_multi(__k);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<const_iterator, const_iterator> equal_range(const key_type& __k) const {
    return __table_.__equal_range_multi(__k);
  }
# 2168 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type bucket_count() const noexcept { return __table_.bucket_count(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type max_bucket_count() const noexcept { return __table_.max_bucket_count(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type bucket_size(size_type __n) const { return __table_.bucket_size(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type bucket(const key_type& __k) const { return __table_.bucket(__k); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) local_iterator begin(size_type __n) { return __table_.begin(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) local_iterator end(size_type __n) { return __table_.end(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_local_iterator begin(size_type __n) const { return __table_.cbegin(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_local_iterator end(size_type __n) const { return __table_.cend(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_local_iterator cbegin(size_type __n) const { return __table_.cbegin(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_local_iterator cend(size_type __n) const { return __table_.cend(__n); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float load_factor() const noexcept { return __table_.load_factor(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) float max_load_factor() const noexcept { return __table_.max_load_factor(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void max_load_factor(float __mlf) { __table_.max_load_factor(__mlf); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void rehash(size_type __n) { __table_.__rehash_multi(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reserve(size_type __n) { __table_.__reserve_multi(__n); }
};


template <class _InputIterator,
          class _Hash = hash<__iter_key_type<_InputIterator>>,
          class _Pred = equal_to<__iter_key_type<_InputIterator>>,
          class _Allocator = allocator<__iter_to_alloc_type<_InputIterator>>,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<!__is_allocator<_Hash>::value>,
          class = enable_if_t<!is_integral<_Hash>::value>,
          class = enable_if_t<!__is_allocator<_Pred>::value>,
          class = enable_if_t<__is_allocator<_Allocator>::value>>
unordered_multimap(_InputIterator,
                   _InputIterator,
                   typename allocator_traits<_Allocator>::size_type = 0,
                   _Hash = _Hash(),
                   _Pred = _Pred(),
                   _Allocator = _Allocator())
    -> unordered_multimap<__iter_key_type<_InputIterator>,
                          __iter_mapped_type<_InputIterator>,
                          _Hash,
                          _Pred,
                          _Allocator>;
# 2228 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
template <class _Key,
          class _Tp,
          class _Hash = hash<remove_const_t<_Key>>,
          class _Pred = equal_to<remove_const_t<_Key>>,
          class _Allocator = allocator<pair<const _Key, _Tp>>,
          class = enable_if_t<!__is_allocator<_Hash>::value>,
          class = enable_if_t<!is_integral<_Hash>::value>,
          class = enable_if_t<!__is_allocator<_Pred>::value>,
          class = enable_if_t<__is_allocator<_Allocator>::value>>
unordered_multimap(
    initializer_list<pair<_Key, _Tp>>,
    typename allocator_traits<_Allocator>::size_type = 0,
    _Hash = _Hash(),
    _Pred = _Pred(),
    _Allocator = _Allocator()) -> unordered_multimap<remove_const_t<_Key>, _Tp, _Hash, _Pred, _Allocator>;

template <class _InputIterator,
          class _Allocator,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<__is_allocator<_Allocator>::value>>
unordered_multimap(_InputIterator, _InputIterator, typename allocator_traits<_Allocator>::size_type, _Allocator)
    -> unordered_multimap<__iter_key_type<_InputIterator>,
                          __iter_mapped_type<_InputIterator>,
                          hash<__iter_key_type<_InputIterator>>,
                          equal_to<__iter_key_type<_InputIterator>>,
                          _Allocator>;

template <class _InputIterator,
          class _Allocator,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<__is_allocator<_Allocator>::value>>
unordered_multimap(_InputIterator, _InputIterator, _Allocator)
    -> unordered_multimap<__iter_key_type<_InputIterator>,
                          __iter_mapped_type<_InputIterator>,
                          hash<__iter_key_type<_InputIterator>>,
                          equal_to<__iter_key_type<_InputIterator>>,
                          _Allocator>;

template <class _InputIterator,
          class _Hash,
          class _Allocator,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<!__is_allocator<_Hash>::value>,
          class = enable_if_t<!is_integral<_Hash>::value>,
          class = enable_if_t<__is_allocator<_Allocator>::value>>
unordered_multimap(_InputIterator, _InputIterator, typename allocator_traits<_Allocator>::size_type, _Hash, _Allocator)
    -> unordered_multimap<__iter_key_type<_InputIterator>,
                          __iter_mapped_type<_InputIterator>,
                          _Hash,
                          equal_to<__iter_key_type<_InputIterator>>,
                          _Allocator>;
# 2313 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
template <class _Key, class _Tp, class _Allocator, class = enable_if_t<__is_allocator<_Allocator>::value>>
unordered_multimap(initializer_list<pair<_Key, _Tp>>, typename allocator_traits<_Allocator>::size_type, _Allocator)
    -> unordered_multimap<remove_const_t<_Key>,
                          _Tp,
                          hash<remove_const_t<_Key>>,
                          equal_to<remove_const_t<_Key>>,
                          _Allocator>;

template <class _Key, class _Tp, class _Allocator, class = enable_if_t<__is_allocator<_Allocator>::value>>
unordered_multimap(initializer_list<pair<_Key, _Tp>>, _Allocator)
    -> unordered_multimap<remove_const_t<_Key>,
                          _Tp,
                          hash<remove_const_t<_Key>>,
                          equal_to<remove_const_t<_Key>>,
                          _Allocator>;

template <class _Key,
          class _Tp,
          class _Hash,
          class _Allocator,
          class = enable_if_t<!__is_allocator<_Hash>::value>,
          class = enable_if_t<!is_integral<_Hash>::value>,
          class = enable_if_t<__is_allocator<_Allocator>::value>>
unordered_multimap(
    initializer_list<pair<_Key, _Tp>>, typename allocator_traits<_Allocator>::size_type, _Hash, _Allocator)
    -> unordered_multimap<remove_const_t<_Key>, _Tp, _Hash, equal_to<remove_const_t<_Key>>, _Allocator>;


template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(
    size_type __n, const hasher& __hf, const key_equal& __eql)
    : __table_(__hf, __eql) {
  __table_.__rehash_multi(__n);
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(
    size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a)
    : __table_(__hf, __eql, typename __table::allocator_type(__a)) {
  __table_.__rehash_multi(__n);
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
template <class _InputIterator>
unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(_InputIterator __first, _InputIterator __last) {
  insert(__first, __last);
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
template <class _InputIterator>
unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(
    _InputIterator __first, _InputIterator __last, size_type __n, const hasher& __hf, const key_equal& __eql)
    : __table_(__hf, __eql) {
  __table_.__rehash_multi(__n);
  insert(__first, __last);
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
template <class _InputIterator>
unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(
    _InputIterator __first,
    _InputIterator __last,
    size_type __n,
    const hasher& __hf,
    const key_equal& __eql,
    const allocator_type& __a)
    : __table_(__hf, __eql, typename __table::allocator_type(__a)) {
  __table_.__rehash_multi(__n);
  insert(__first, __last);
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
inline unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(const allocator_type& __a)
    : __table_(typename __table::allocator_type(__a)) {}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(const unordered_multimap& __u)
    : __table_(__u.__table_) {
  __table_.__rehash_multi(__u.bucket_count());
  insert(__u.begin(), __u.end());
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(
    const unordered_multimap& __u, const allocator_type& __a)
    : __table_(__u.__table_, typename __table::allocator_type(__a)) {
  __table_.__rehash_multi(__u.bucket_count());
  insert(__u.begin(), __u.end());
}



template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
inline unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(unordered_multimap&& __u)
    noexcept(is_nothrow_move_constructible<__table>::value)
    : __table_(std::move(__u.__table_)) {}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(
    unordered_multimap&& __u, const allocator_type& __a)
    : __table_(std::move(__u.__table_), typename __table::allocator_type(__a)) {
  if (__a != __u.get_allocator()) {
    iterator __i = __u.begin();
    while (__u.size() != 0) {
      __table_.__insert_multi(__u.__table_.remove((__i++).__i_)->__get_value().__move());
    }
  }
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(initializer_list<value_type> __il) {
  insert(__il.begin(), __il.end());
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(
    initializer_list<value_type> __il, size_type __n, const hasher& __hf, const key_equal& __eql)
    : __table_(__hf, __eql) {
  __table_.__rehash_multi(__n);
  insert(__il.begin(), __il.end());
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_multimap(
    initializer_list<value_type> __il,
    size_type __n,
    const hasher& __hf,
    const key_equal& __eql,
    const allocator_type& __a)
    : __table_(__hf, __eql, typename __table::allocator_type(__a)) {
  __table_.__rehash_multi(__n);
  insert(__il.begin(), __il.end());
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
inline unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>&
unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::operator=(unordered_multimap&& __u)
    noexcept(is_nothrow_move_assignable<__table>::value) {
  __table_ = std::move(__u.__table_);
  return *this;
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
inline unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>&
unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::operator=(initializer_list<value_type> __il) {
  __table_.__assign_multi(__il.begin(), __il.end());
  return *this;
}



template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
template <class _InputIterator>
inline void unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::insert(_InputIterator __first, _InputIterator __last) {
  for (; __first != __last; ++__first)
    __table_.__insert_multi(*__first);
}

template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x, unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}
# 2486 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
                                      const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y) {
  if (__x.size() != __y.size())
    return false;
  typedef typename unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::const_iterator const_iterator;
  typedef pair<const_iterator, const_iterator> _EqRng;
  for (const_iterator __i = __x.begin(), __ex = __x.end(); __i != __ex;) {
    _EqRng __xeq = __x.equal_range(__i->first);
    _EqRng __yeq = __y.equal_range(__i->first);
    if (std::distance(__xeq.first, __xeq.second) != std::distance(__yeq.first, __yeq.second) ||
        !std::is_permutation(__xeq.first, __xeq.second, __yeq.first))
      return false;
    __i = __xeq.second;
  }
  return true;
}



template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
                                             const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y) {
  return !(__x == __y);
}



}}
# 2514 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
#pragma clang diagnostic pop


#pragma clang diagnostic push
# 2517 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 2517 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 2517 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 2517 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 2517 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 2517 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
namespace pmr {
template <class _KeyT, class _ValueT, class _HashT = std::hash<_KeyT>, class _PredT = std::equal_to<_KeyT>>
using unordered_map =
    std::unordered_map<_KeyT, _ValueT, _HashT, _PredT, polymorphic_allocator<std::pair<const _KeyT, _ValueT>>>;

template <class _KeyT, class _ValueT, class _HashT = std::hash<_KeyT>, class _PredT = std::equal_to<_KeyT>>
using unordered_multimap =
    std::unordered_multimap<_KeyT, _ValueT, _HashT, _PredT, polymorphic_allocator<std::pair<const _KeyT, _ValueT>>>;
}
}}
# 2527 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/unordered_map" 3
#pragma clang diagnostic pop
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/boyer_moore_searcher.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 1 3
# 324 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/format.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/format.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/format.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/format.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/format.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/format.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/format.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/format.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/format.h" 3
}}
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/format.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter.h" 2 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter.h" 3
}}
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter.h" 3
#pragma clang diagnostic pop
# 325 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_bool.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_bool.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/concepts.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/concepts.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_parse_context.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_parse_context.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_error.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_error.h" 3


#pragma clang diagnostic push
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_error.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_error.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_error.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_error.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_error.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_error.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 48 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_error.h" 3
}}
# 48 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_error.h" 3
#pragma clang diagnostic pop
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_parse_context.h" 2 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_parse_context.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_parse_context.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_parse_context.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_parse_context.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_parse_context.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_parse_context.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_parse_context.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 103 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_parse_context.h" 3
}}
# 103 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_parse_context.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/concepts.h" 2 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/concepts.h" 3


#pragma clang diagnostic push
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/concepts.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 81 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/concepts.h" 3
}}
# 81 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/concepts.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_bool.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_integral.h" 1 3
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_integral.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_integral.h" 1 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_integral.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/tables.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/tables.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/tables.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/tables.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/tables.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/tables.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/tables.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/tables.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



namespace __itoa {

inline constexpr char __base_2_lut[64] = {
    '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '0', '0', '0', '1', '1', '0', '1', '0', '0', '0', '1',
    '0', '1', '0', '1', '1', '0', '0', '1', '1', '1', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '1', '0',
    '1', '0', '1', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1'};

inline constexpr char __base_8_lut[128] = {
    '0', '0', '0', '1', '0', '2', '0', '3', '0', '4', '0', '5', '0', '6', '0', '7', '1', '0', '1', '1', '1', '2',
    '1', '3', '1', '4', '1', '5', '1', '6', '1', '7', '2', '0', '2', '1', '2', '2', '2', '3', '2', '4', '2', '5',
    '2', '6', '2', '7', '3', '0', '3', '1', '3', '2', '3', '3', '3', '4', '3', '5', '3', '6', '3', '7', '4', '0',
    '4', '1', '4', '2', '4', '3', '4', '4', '4', '5', '4', '6', '4', '7', '5', '0', '5', '1', '5', '2', '5', '3',
    '5', '4', '5', '5', '5', '6', '5', '7', '6', '0', '6', '1', '6', '2', '6', '3', '6', '4', '6', '5', '6', '6',
    '6', '7', '7', '0', '7', '1', '7', '2', '7', '3', '7', '4', '7', '5', '7', '6', '7', '7'};

inline constexpr char __base_16_lut[512] = {
    '0', '0', '0', '1', '0', '2', '0', '3', '0', '4', '0', '5', '0', '6', '0', '7', '0', '8', '0', '9', '0', 'a', '0',
    'b', '0', 'c', '0', 'd', '0', 'e', '0', 'f', '1', '0', '1', '1', '1', '2', '1', '3', '1', '4', '1', '5', '1', '6',
    '1', '7', '1', '8', '1', '9', '1', 'a', '1', 'b', '1', 'c', '1', 'd', '1', 'e', '1', 'f', '2', '0', '2', '1', '2',
    '2', '2', '3', '2', '4', '2', '5', '2', '6', '2', '7', '2', '8', '2', '9', '2', 'a', '2', 'b', '2', 'c', '2', 'd',
    '2', 'e', '2', 'f', '3', '0', '3', '1', '3', '2', '3', '3', '3', '4', '3', '5', '3', '6', '3', '7', '3', '8', '3',
    '9', '3', 'a', '3', 'b', '3', 'c', '3', 'd', '3', 'e', '3', 'f', '4', '0', '4', '1', '4', '2', '4', '3', '4', '4',
    '4', '5', '4', '6', '4', '7', '4', '8', '4', '9', '4', 'a', '4', 'b', '4', 'c', '4', 'd', '4', 'e', '4', 'f', '5',
    '0', '5', '1', '5', '2', '5', '3', '5', '4', '5', '5', '5', '6', '5', '7', '5', '8', '5', '9', '5', 'a', '5', 'b',
    '5', 'c', '5', 'd', '5', 'e', '5', 'f', '6', '0', '6', '1', '6', '2', '6', '3', '6', '4', '6', '5', '6', '6', '6',
    '7', '6', '8', '6', '9', '6', 'a', '6', 'b', '6', 'c', '6', 'd', '6', 'e', '6', 'f', '7', '0', '7', '1', '7', '2',
    '7', '3', '7', '4', '7', '5', '7', '6', '7', '7', '7', '8', '7', '9', '7', 'a', '7', 'b', '7', 'c', '7', 'd', '7',
    'e', '7', 'f', '8', '0', '8', '1', '8', '2', '8', '3', '8', '4', '8', '5', '8', '6', '8', '7', '8', '8', '8', '9',
    '8', 'a', '8', 'b', '8', 'c', '8', 'd', '8', 'e', '8', 'f', '9', '0', '9', '1', '9', '2', '9', '3', '9', '4', '9',
    '5', '9', '6', '9', '7', '9', '8', '9', '9', '9', 'a', '9', 'b', '9', 'c', '9', 'd', '9', 'e', '9', 'f', 'a', '0',
    'a', '1', 'a', '2', 'a', '3', 'a', '4', 'a', '5', 'a', '6', 'a', '7', 'a', '8', 'a', '9', 'a', 'a', 'a', 'b', 'a',
    'c', 'a', 'd', 'a', 'e', 'a', 'f', 'b', '0', 'b', '1', 'b', '2', 'b', '3', 'b', '4', 'b', '5', 'b', '6', 'b', '7',
    'b', '8', 'b', '9', 'b', 'a', 'b', 'b', 'b', 'c', 'b', 'd', 'b', 'e', 'b', 'f', 'c', '0', 'c', '1', 'c', '2', 'c',
    '3', 'c', '4', 'c', '5', 'c', '6', 'c', '7', 'c', '8', 'c', '9', 'c', 'a', 'c', 'b', 'c', 'c', 'c', 'd', 'c', 'e',
    'c', 'f', 'd', '0', 'd', '1', 'd', '2', 'd', '3', 'd', '4', 'd', '5', 'd', '6', 'd', '7', 'd', '8', 'd', '9', 'd',
    'a', 'd', 'b', 'd', 'c', 'd', 'd', 'd', 'e', 'd', 'f', 'e', '0', 'e', '1', 'e', '2', 'e', '3', 'e', '4', 'e', '5',
    'e', '6', 'e', '7', 'e', '8', 'e', '9', 'e', 'a', 'e', 'b', 'e', 'c', 'e', 'd', 'e', 'e', 'e', 'f', 'f', '0', 'f',
    '1', 'f', '2', 'f', '3', 'f', '4', 'f', '5', 'f', '6', 'f', '7', 'f', '8', 'f', '9', 'f', 'a', 'f', 'b', 'f', 'c',
    'f', 'd', 'f', 'e', 'f', 'f'};

inline constexpr uint32_t __pow10_32[10] = {
    (0U),
    (10U),
    (100U),
    (1000U),
    (10000U),
    (100000U),
    (1000000U),
    (10000000U),
    (100000000U),
    (1000000000U)};

inline constexpr uint64_t __pow10_64[20] = {
    (0ULL),
    (10ULL),
    (100ULL),
    (1000ULL),
    (10000ULL),
    (100000ULL),
    (1000000ULL),
    (10000000ULL),
    (100000000ULL),
    (1000000000ULL),
    (10000000000ULL),
    (100000000000ULL),
    (1000000000000ULL),
    (10000000000000ULL),
    (100000000000000ULL),
    (1000000000000000ULL),
    (10000000000000000ULL),
    (100000000000000000ULL),
    (1000000000000000000ULL),
    (10000000000000000000ULL)};


inline constexpr int __pow10_128_offset = 0;
inline constexpr __uint128_t __pow10_128[40] = {
    (0ULL),
    (10ULL),
    (100ULL),
    (1000ULL),
    (10000ULL),
    (100000ULL),
    (1000000ULL),
    (10000000ULL),
    (100000000ULL),
    (1000000000ULL),
    (10000000000ULL),
    (100000000000ULL),
    (1000000000000ULL),
    (10000000000000ULL),
    (100000000000000ULL),
    (1000000000000000ULL),
    (10000000000000000ULL),
    (100000000000000000ULL),
    (1000000000000000000ULL),
    (10000000000000000000ULL),
    __uint128_t((10000000000000000000ULL)) * (10ULL),
    __uint128_t((10000000000000000000ULL)) * (100ULL),
    __uint128_t((10000000000000000000ULL)) * (1000ULL),
    __uint128_t((10000000000000000000ULL)) * (10000ULL),
    __uint128_t((10000000000000000000ULL)) * (100000ULL),
    __uint128_t((10000000000000000000ULL)) * (1000000ULL),
    __uint128_t((10000000000000000000ULL)) * (10000000ULL),
    __uint128_t((10000000000000000000ULL)) * (100000000ULL),
    __uint128_t((10000000000000000000ULL)) * (1000000000ULL),
    __uint128_t((10000000000000000000ULL)) * (10000000000ULL),
    __uint128_t((10000000000000000000ULL)) * (100000000000ULL),
    __uint128_t((10000000000000000000ULL)) * (1000000000000ULL),
    __uint128_t((10000000000000000000ULL)) * (10000000000000ULL),
    __uint128_t((10000000000000000000ULL)) * (100000000000000ULL),
    __uint128_t((10000000000000000000ULL)) * (1000000000000000ULL),
    __uint128_t((10000000000000000000ULL)) * (10000000000000000ULL),
    __uint128_t((10000000000000000000ULL)) * (100000000000000000ULL),
    __uint128_t((10000000000000000000ULL)) * (1000000000000000000ULL),
    __uint128_t((10000000000000000000ULL)) * (10000000000000000000ULL),
    (__uint128_t((10000000000000000000ULL)) * (10000000000000000000ULL)) * 10};


inline constexpr char __digits_base_10[200] = {

    '0', '0', '0', '1', '0', '2', '0', '3', '0', '4', '0', '5', '0', '6', '0', '7', '0', '8', '0', '9',
    '1', '0', '1', '1', '1', '2', '1', '3', '1', '4', '1', '5', '1', '6', '1', '7', '1', '8', '1', '9',
    '2', '0', '2', '1', '2', '2', '2', '3', '2', '4', '2', '5', '2', '6', '2', '7', '2', '8', '2', '9',
    '3', '0', '3', '1', '3', '2', '3', '3', '3', '4', '3', '5', '3', '6', '3', '7', '3', '8', '3', '9',
    '4', '0', '4', '1', '4', '2', '4', '3', '4', '4', '4', '5', '4', '6', '4', '7', '4', '8', '4', '9',
    '5', '0', '5', '1', '5', '2', '5', '3', '5', '4', '5', '5', '5', '6', '5', '7', '5', '8', '5', '9',
    '6', '0', '6', '1', '6', '2', '6', '3', '6', '4', '6', '5', '6', '6', '6', '7', '6', '8', '6', '9',
    '7', '0', '7', '1', '7', '2', '7', '3', '7', '4', '7', '5', '7', '6', '7', '7', '7', '8', '7', '9',
    '8', '0', '8', '1', '8', '2', '8', '3', '8', '4', '8', '5', '8', '6', '8', '7', '8', '8', '8', '9',
    '9', '0', '9', '1', '9', '2', '9', '3', '9', '4', '9', '5', '9', '6', '9', '7', '9', '8', '9', '9'};


}



}}
# 161 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/tables.h" 3
#pragma clang diagnostic pop
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_integral.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_base_10.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_base_10.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_base_10.h" 2 3

#pragma clang diagnostic push
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_base_10.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_base_10.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_base_10.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_base_10.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_base_10.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_base_10.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



namespace __itoa {

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline char* __append1(char* __first, uint32_t __value) noexcept {
  *__first = '0' + static_cast<char>(__value);
  return __first + 1;
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline char* __append2(char* __first, uint32_t __value) noexcept {
  return std::copy_n(&__digits_base_10[__value * 2], 2, __first);
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline char* __append3(char* __first, uint32_t __value) noexcept {
  return __itoa::__append2(__itoa::__append1(__first, __value / 100), __value % 100);
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline char* __append4(char* __first, uint32_t __value) noexcept {
  return __itoa::__append2(__itoa::__append2(__first, __value / 100), __value % 100);
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline char* __append5(char* __first, uint32_t __value) noexcept {
  return __itoa::__append4(__itoa::__append1(__first, __value / 10000), __value % 10000);
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline char* __append6(char* __first, uint32_t __value) noexcept {
  return __itoa::__append4(__itoa::__append2(__first, __value / 10000), __value % 10000);
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline char* __append7(char* __first, uint32_t __value) noexcept {
  return __itoa::__append6(__itoa::__append1(__first, __value / 1000000), __value % 1000000);
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline char* __append8(char* __first, uint32_t __value) noexcept {
  return __itoa::__append6(__itoa::__append2(__first, __value / 1000000), __value % 1000000);
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline char* __append9(char* __first, uint32_t __value) noexcept {
  return __itoa::__append8(__itoa::__append1(__first, __value / 100000000), __value % 100000000);
}

template <class _Tp>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char* __append10(char* __first, _Tp __value) noexcept {
  return __itoa::__append8(__itoa::__append2(__first, static_cast<uint32_t>(__value / 100000000)),
                           static_cast<uint32_t>(__value % 100000000));
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline char*
__base_10_u32(char* __first, uint32_t __value) noexcept {
  if (__value < 1000000) {
    if (__value < 10000) {
      if (__value < 100) {

        if (__value < 10)
          return __itoa::__append1(__first, __value);
        return __itoa::__append2(__first, __value);
      }

      if (__value < 1000)
        return __itoa::__append3(__first, __value);
      return __itoa::__append4(__first, __value);
    }


    if (__value < 100000)
      return __itoa::__append5(__first, __value);
    return __itoa::__append6(__first, __value);
  }


  if (__value < 100000000) {

    if (__value < 10000000)
      return __itoa::__append7(__first, __value);
    return __itoa::__append8(__first, __value);
  }


  if (__value < 1000000000)
    return __itoa::__append9(__first, __value);
  return __itoa::__append10(__first, __value);
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline char*
__base_10_u64(char* __buffer, uint64_t __value) noexcept {
  if (__value <= 4294967295U)
    return __itoa::__base_10_u32(__buffer, static_cast<uint32_t>(__value));



  if (__value >= 10000000000) {

    __buffer = __itoa::__base_10_u32(__buffer, static_cast<uint32_t>(__value / 10000000000));
    __value %= 10000000000;
  }
  return __itoa::__append10(__buffer, __value);
}
# 135 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_base_10.h" 3
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline __uint128_t __pow_10(int __exp) noexcept {
  ((void)0);
  return __pow10_128[__exp - __pow10_128_offset];
}

                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline char*
__base_10_u128(char* __buffer, __uint128_t __value) noexcept {
  ((void)0);
# 155 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_base_10.h" 3
  if (__value >= __itoa::__pow_10(38)) {

    __buffer = __itoa::__append1(__buffer, static_cast<uint32_t>(__value / __itoa::__pow_10(38)));
    __value %= __itoa::__pow_10(38);



    __buffer = __itoa::__append9(__buffer, static_cast<uint32_t>(__value / __itoa::__pow_10(29)));
    __value %= __itoa::__pow_10(29);
    __buffer = __itoa::__append10(__buffer, static_cast<uint64_t>(__value / __itoa::__pow_10(19)));
    __value %= __itoa::__pow_10(19);
  } else {


    __buffer = __base_10_u64(__buffer, static_cast<uint64_t>(__value / __itoa::__pow_10(19)));
    __value %= __itoa::__pow_10(19);
  }


  __buffer = __itoa::__append9(__buffer, static_cast<uint32_t>(__value / 10000000000));
  __buffer = __itoa::__append10(__buffer, static_cast<uint64_t>(__value % 10000000000));

  return __buffer;
}

}



}}
# 184 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_base_10.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_integral.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_result.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_result.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_result.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_result.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_result.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_result.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_result.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_result.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



struct __attribute__((__visibility__("default"))) to_chars_result {
  char* ptr;
  errc ec;






};



}}
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_result.h" 3
#pragma clang diagnostic pop
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_integral.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/traits.h" 1 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/traits.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/traits.h" 2 3

#pragma clang diagnostic push
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/traits.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/traits.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/traits.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/traits.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/traits.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/traits.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



namespace __itoa {

template <typename _Tp, typename = void>
struct __attribute__((__visibility__("hidden"))) __traits_base;

template <typename _Tp>
struct __attribute__((__visibility__("hidden"))) __traits_base<_Tp, __enable_if_t<sizeof(_Tp) <= sizeof(uint32_t)>> {
  using type = uint32_t;
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/traits.h" 3
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __width(_Tp __v) {
    auto __t = (32 - std::__libcpp_clz(static_cast<type>(__v | 1))) * 1233 >> 12;
    return __t - (__v < __itoa::__pow10_32[__t]) + 1;
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char* __convert(char* __p, _Tp __v) {
    return __itoa::__base_10_u32(__p, __v);
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) decltype(__pow10_32)& __pow() {
    return __itoa::__pow10_32;
  }
};

template <typename _Tp>
struct __attribute__((__visibility__("hidden"))) __traits_base<_Tp, __enable_if_t<sizeof(_Tp) == sizeof(uint64_t)>> {
  using type = uint64_t;
# 77 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/traits.h" 3
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __width(_Tp __v) {
    auto __t = (64 - std::__libcpp_clz(static_cast<type>(__v | 1))) * 1233 >> 12;
    return __t - (__v < __itoa::__pow10_64[__t]) + 1;
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char* __convert(char* __p, _Tp __v) {
    return __itoa::__base_10_u64(__p, __v);
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) decltype(__pow10_64)& __pow() {
    return __itoa::__pow10_64;
  }
};


template <typename _Tp>
struct __attribute__((__visibility__("hidden"))) __traits_base<_Tp, __enable_if_t<sizeof(_Tp) == sizeof(__uint128_t)> > {
  using type = __uint128_t;
# 104 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/traits.h" 3
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __width(_Tp __v) {
    ((void)0);


    auto __t = (128 - std::__libcpp_clz(static_cast<uint64_t>(__v >> 64))) * 1233 >> 12;
    ((void)0);

    return __t - (__v < __itoa::__pow10_128[__t - __itoa::__pow10_128_offset]) + 1;
  }

  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char* __convert(char* __p, _Tp __v) {
    return __itoa::__base_10_u128(__p, __v);
  }



  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) decltype(__pow10_128)& __pow() {
    return __itoa::__pow10_128;
  }
};


template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
__mul_overflowed(unsigned char __a, _Tp __b, unsigned char& __r) {
  auto __c = __a * __b;
  __r = __c;
  return __c > numeric_limits<unsigned char>::max();
}

template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
__mul_overflowed(unsigned short __a, _Tp __b, unsigned short& __r) {
  auto __c = __a * __b;
  __r = __c;
  return __c > numeric_limits<unsigned short>::max();
}

template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __mul_overflowed(_Tp __a, _Tp __b, _Tp& __r) {
  static_assert(is_unsigned<_Tp>::value, "");
  return __builtin_mul_overflow(__a, __b, &__r);
}

template <typename _Tp, typename _Up>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __mul_overflowed(_Tp __a, _Up __b, _Tp& __r) {
  return __itoa::__mul_overflowed(__a, static_cast<_Tp>(__b), __r);
}

template <typename _Tp>
struct __attribute__((__visibility__("hidden"))) __traits : __traits_base<_Tp> {
  static constexpr int digits = numeric_limits<_Tp>::digits10 + 1;
  using __traits_base<_Tp>::__pow;
  using typename __traits_base<_Tp>::type;


  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) char const*
  __read(char const* __p, char const* __ep, type& __a, type& __b) {
    type __cprod[digits];
    int __j = digits - 1;
    int __i = digits;
    do {
      if (*__p < '0' || *__p > '9')
        break;
      __cprod[--__i] = *__p++ - '0';
    } while (__p != __ep && __i != 0);

    __a = __inner_product(__cprod + __i + 1, __cprod + __j, __pow() + 1, __cprod[__i]);
    if (__itoa::__mul_overflowed(__cprod[__j], __pow()[__j - __i], __b))
      --__p;
    return __p;
  }

  template <typename _It1, typename _It2, class _Up>
  static __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Up
  __inner_product(_It1 __first1, _It1 __last1, _It2 __first2, _Up __init) {
    for (; __first1 < __last1; ++__first1, ++__first2)
      __init = __init + *__first1 * *__first2;
    return __init;
  }
};

}

template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) _Tp __complement(_Tp __x) {
  static_assert(is_unsigned<_Tp>::value, "cast to unsigned first");
  return _Tp(~__x + 1);
}



}}
# 196 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/traits.h" 3
#pragma clang diagnostic pop
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_integral.h" 2 3





# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_32_64_or_128_bit.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_32_64_or_128_bit.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_32_64_or_128_bit.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_32_64_or_128_bit.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_32_64_or_128_bit.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_32_64_or_128_bit.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_32_64_or_128_bit.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_32_64_or_128_bit.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {




template <class _Tp>




using __make_32_64_or_128_bit_t =
    __copy_unsigned_t<_Tp,
        __conditional_t<sizeof(_Tp) <= sizeof(int32_t), int32_t,
        __conditional_t<sizeof(_Tp) <= sizeof(int64_t), int64_t,

        __conditional_t<sizeof(_Tp) <= sizeof(__int128_t), __int128_t,
                                                           void>



    > > >;


}}
# 47 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__type_traits/make_32_64_or_128_bit.h" 3
#pragma clang diagnostic pop
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_integral.h" 2 3
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_integral.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 38 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_integral.h" 2 3

#pragma clang diagnostic push
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_integral.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_integral.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_integral.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_integral.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_integral.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 39 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_integral.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



to_chars_result to_chars(char*, char*, bool, int = 10) = delete;

template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) to_chars_result
__to_chars_itoa(char* __first, char* __last, _Tp __value, false_type);

template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) to_chars_result
__to_chars_itoa(char* __first, char* __last, _Tp __value, true_type) {
  auto __x = std::__to_unsigned_like(__value);
  if (__value < 0 && __first != __last) {
    *__first++ = '-';
    __x = std::__complement(__x);
  }

  return std::__to_chars_itoa(__first, __last, __x, false_type());
}

template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) to_chars_result
__to_chars_itoa(char* __first, char* __last, _Tp __value, false_type) {
  using __tx = __itoa::__traits<_Tp>;
  auto __diff = __last - __first;

  if (__tx::digits <= __diff || __tx::__width(__value) <= __diff)
    return {__tx::__convert(__first, __value), errc(0)};
  else
    return {__last, errc::value_too_large};
}


template <>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) to_chars_result
__to_chars_itoa(char* __first, char* __last, __uint128_t __value, false_type) {




  if (__value <= numeric_limits<uint64_t>::max())
    return __to_chars_itoa(__first, __last, static_cast<uint64_t>(__value), false_type());

  using __tx = __itoa::__traits<__uint128_t>;
  auto __diff = __last - __first;

  if (__tx::digits <= __diff || __tx::__width(__value) <= __diff)
    return {__tx::__convert(__first, __value), errc(0)};
  else
    return {__last, errc::value_too_large};
}


template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) to_chars_result
__to_chars_integral(char* __first, char* __last, _Tp __value, int __base, false_type);

template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) to_chars_result
__to_chars_integral(char* __first, char* __last, _Tp __value, int __base, true_type) {
  auto __x = std::__to_unsigned_like(__value);
  if (__value < 0 && __first != __last) {
    *__first++ = '-';
    __x = std::__complement(__x);
  }

  return std::__to_chars_integral(__first, __last, __x, __base, false_type());
}

namespace __itoa {

template <unsigned _Base>
struct __attribute__((__visibility__("hidden"))) __integral;

template <>
struct __attribute__((__visibility__("hidden"))) __integral<2> {
  template <typename _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr int __width(_Tp __value) noexcept {



    return numeric_limits<_Tp>::digits - std::__libcpp_clz(__value | 1);
  }

  template <typename _Tp>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static to_chars_result
  __to_chars(char* __first, char* __last, _Tp __value) {
    ptrdiff_t __cap = __last - __first;
    int __n = __width(__value);
    if (__n > __cap)
      return {__last, errc::value_too_large};

    __last = __first + __n;
    char* __p = __last;
    const unsigned __divisor = 16;
    while (__value > __divisor) {
      unsigned __c = __value % __divisor;
      __value /= __divisor;
      __p -= 4;
      std::copy_n(&__base_2_lut[4 * __c], 4, __p);
    }
    do {
      unsigned __c = __value % 2;
      __value /= 2;
      *--__p = "01"[__c];
    } while (__value != 0);
    return {__last, errc(0)};
  }
};

template <>
struct __attribute__((__visibility__("hidden"))) __integral<8> {
  template <typename _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr int __width(_Tp __value) noexcept {



    return ((numeric_limits<_Tp>::digits - std::__libcpp_clz(__value | 1)) + 2) / 3;
  }

  template <typename _Tp>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static to_chars_result
  __to_chars(char* __first, char* __last, _Tp __value) {
    ptrdiff_t __cap = __last - __first;
    int __n = __width(__value);
    if (__n > __cap)
      return {__last, errc::value_too_large};

    __last = __first + __n;
    char* __p = __last;
    unsigned __divisor = 64;
    while (__value > __divisor) {
      unsigned __c = __value % __divisor;
      __value /= __divisor;
      __p -= 2;
      std::copy_n(&__base_8_lut[2 * __c], 2, __p);
    }
    do {
      unsigned __c = __value % 8;
      __value /= 8;
      *--__p = "01234567"[__c];
    } while (__value != 0);
    return {__last, errc(0)};
  }
};

template <>
struct __attribute__((__visibility__("hidden"))) __integral<16> {
  template <typename _Tp>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static constexpr int __width(_Tp __value) noexcept {



    return (numeric_limits<_Tp>::digits - std::__libcpp_clz(__value | 1) + 3) / 4;
  }

  template <typename _Tp>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static to_chars_result
  __to_chars(char* __first, char* __last, _Tp __value) {
    ptrdiff_t __cap = __last - __first;
    int __n = __width(__value);
    if (__n > __cap)
      return {__last, errc::value_too_large};

    __last = __first + __n;
    char* __p = __last;
    unsigned __divisor = 256;
    while (__value > __divisor) {
      unsigned __c = __value % __divisor;
      __value /= __divisor;
      __p -= 2;
      std::copy_n(&__base_16_lut[2 * __c], 2, __p);
    }
    if (__first != __last)
      do {
        unsigned __c = __value % 16;
        __value /= 16;
        *--__p = "0123456789abcdef"[__c];
      } while (__value != 0);
    return {__last, errc(0)};
  }
};

}

template <unsigned _Base, typename _Tp, __enable_if_t<(sizeof(_Tp) >= sizeof(unsigned)), int> = 0>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __to_chars_integral_width(_Tp __value) {
  return __itoa::__integral<_Base>::__width(__value);
}

template <unsigned _Base, typename _Tp, __enable_if_t<(sizeof(_Tp) < sizeof(unsigned)), int> = 0>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __to_chars_integral_width(_Tp __value) {
  return std::__to_chars_integral_width<_Base>(static_cast<unsigned>(__value));
}

template <unsigned _Base, typename _Tp, __enable_if_t<(sizeof(_Tp) >= sizeof(unsigned)), int> = 0>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) to_chars_result
__to_chars_integral(char* __first, char* __last, _Tp __value) {
  return __itoa::__integral<_Base>::__to_chars(__first, __last, __value);
}

template <unsigned _Base, typename _Tp, __enable_if_t<(sizeof(_Tp) < sizeof(unsigned)), int> = 0>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) to_chars_result
__to_chars_integral(char* __first, char* __last, _Tp __value) {
  return std::__to_chars_integral<_Base>(__first, __last, static_cast<unsigned>(__value));
}

template <typename _Tp>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) int __to_chars_integral_width(_Tp __value, unsigned __base) {
  ((void)0);

  unsigned __base_2 = __base * __base;
  unsigned __base_3 = __base_2 * __base;
  unsigned __base_4 = __base_2 * __base_2;

  int __r = 0;
  while (true) {
    if (__value < __base)
      return __r + 1;
    if (__value < __base_2)
      return __r + 2;
    if (__value < __base_3)
      return __r + 3;
    if (__value < __base_4)
      return __r + 4;

    __value /= __base_4;
    __r += 4;
  }

  __libcpp_unreachable();
}

template <typename _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) to_chars_result
__to_chars_integral(char* __first, char* __last, _Tp __value, int __base, false_type) {
  if (__base == 10) [[likely]]
    return std::__to_chars_itoa(__first, __last, __value, false_type());

  switch (__base) {
  case 2:
    return std::__to_chars_integral<2>(__first, __last, __value);
  case 8:
    return std::__to_chars_integral<8>(__first, __last, __value);
  case 16:
    return std::__to_chars_integral<16>(__first, __last, __value);
  }

  ptrdiff_t __cap = __last - __first;
  int __n = std::__to_chars_integral_width(__value, __base);
  if (__n > __cap)
    return {__last, errc::value_too_large};

  __last = __first + __n;
  char* __p = __last;
  do {
    unsigned __c = __value % __base;
    __value /= __base;
    *--__p = "0123456789abcdefghijklmnopqrstuvwxyz"[__c];
  } while (__value != 0);
  return {__last, errc(0)};
}

template <typename _Tp, __enable_if_t<is_integral<_Tp>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) to_chars_result
to_chars(char* __first, char* __last, _Tp __value) {
  using _Type = __make_32_64_or_128_bit_t<_Tp>;
  static_assert(!is_same<_Type, void>::value, "unsupported integral type used in to_chars");
  return std::__to_chars_itoa(__first, __last, static_cast<_Type>(__value), is_signed<_Tp>());
}

template <typename _Tp, __enable_if_t<is_integral<_Tp>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) to_chars_result
to_chars(char* __first, char* __last, _Tp __value, int __base) {
  ((void)0);

  using _Type = __make_32_64_or_128_bit_t<_Tp>;
  return std::__to_chars_integral(__first, __last, static_cast<_Type>(__value), __base, is_signed<_Tp>());
}



}}
# 323 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__charconv/to_chars_integral.h" 3
#pragma clang diagnostic pop
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_integral.h" 2 3







# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_output.h" 1 3
# 14 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_output.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_fill_n.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_fill_n.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_fill_n.h" 2 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_output.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_transform.h" 1 3
# 12 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_transform.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_in_out_result.h" 1 3
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_in_out_result.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_in_out_result.h" 2 3

#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_in_out_result.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_in_out_result.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_in_out_result.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_in_out_result.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_in_out_result.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_in_out_result.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_in_out_result.h" 3
}}
# 55 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/in_in_out_result.h" 3
#pragma clang diagnostic pop
# 13 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_transform.h" 2 3






# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/projected.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/projected.h" 3


#pragma clang diagnostic push
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/projected.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/projected.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/projected.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/projected.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/projected.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/projected.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/projected.h" 3
}}
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/projected.h" 3
#pragma clang diagnostic pop
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_transform.h" 2 3
# 27 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_transform.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_transform.h" 2 3
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_output.h" 2 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/buffer.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/buffer.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy_n.h" 1 3
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy_n.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/unreachable_sentinel.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/unreachable_sentinel.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/unreachable_sentinel.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/unreachable_sentinel.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/unreachable_sentinel.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/unreachable_sentinel.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/unreachable_sentinel.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/unreachable_sentinel.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/unreachable_sentinel.h" 3
}}
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__iterator/unreachable_sentinel.h" 3
#pragma clang diagnostic pop
# 21 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy_n.h" 2 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy_n.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy_n.h" 2 3

#pragma clang diagnostic push
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy_n.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy_n.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy_n.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy_n.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy_n.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy_n.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 77 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy_n.h" 3
}}
# 77 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_copy_n.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/buffer.h" 2 3






# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_to_n_result.h" 1 3
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_to_n_result.h" 3


#pragma clang diagnostic push
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_to_n_result.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_to_n_result.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_to_n_result.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_to_n_result.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_to_n_result.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_to_n_result.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_to_n_result.h" 3
}}
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_to_n_result.h" 3
#pragma clang diagnostic pop
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/buffer.h" 2 3
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/buffer.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/ranges_construct_at.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/ranges_construct_at.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/concepts.h" 1 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/concepts.h" 3


#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/concepts.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/concepts.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 61 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/concepts.h" 3
}}
# 61 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/concepts.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/ranges_construct_at.h" 2 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/ranges_construct_at.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/ranges_construct_at.h" 2 3

#pragma clang diagnostic push
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/ranges_construct_at.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/ranges_construct_at.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/ranges_construct_at.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/ranges_construct_at.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/ranges_construct_at.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/ranges_construct_at.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 120 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/ranges_construct_at.h" 3
}}
# 120 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__memory/ranges_construct_at.h" 3
#pragma clang diagnostic pop
# 35 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/buffer.h" 2 3
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/buffer.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/buffer.h" 2 3

#pragma clang diagnostic push
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/buffer.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/buffer.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/buffer.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/buffer.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/buffer.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/buffer.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 651 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/buffer.h" 3
}}
# 651 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/buffer.h" 3
#pragma clang diagnostic pop
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_output.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/parser_std_format_spec.h" 1 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/parser_std_format_spec.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_arg.h" 1 3
# 32 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_arg.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_arg.h" 2 3

#pragma clang diagnostic push
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_arg.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_arg.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_arg.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_arg.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_arg.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 37 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_arg.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 397 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_arg.h" 3
}}
# 397 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_arg.h" 3
#pragma clang diagnostic pop
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/parser_std_format_spec.h" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_string.h" 1 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_string.h" 3


#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_string.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_string.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_string.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_string.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_string.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_string.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 158 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_string.h" 3
}}
# 158 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/format_string.h" 3
#pragma clang diagnostic pop
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/parser_std_format_spec.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/unicode.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/unicode.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/extended_grapheme_cluster_table.h" 1 3
# 64 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/extended_grapheme_cluster_table.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_upper_bound.h" 1 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__algorithm/ranges_upper_bound.h" 3
# 65 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/extended_grapheme_cluster_table.h" 2 3
# 72 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/extended_grapheme_cluster_table.h" 3


#pragma clang diagnostic push
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/extended_grapheme_cluster_table.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/extended_grapheme_cluster_table.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/extended_grapheme_cluster_table.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/extended_grapheme_cluster_table.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/extended_grapheme_cluster_table.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/extended_grapheme_cluster_table.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 1661 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/extended_grapheme_cluster_table.h" 3
}}
# 1661 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/extended_grapheme_cluster_table.h" 3
#pragma clang diagnostic pop
# 18 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/unicode.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/indic_conjunct_break_table.h" 1 3
# 72 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/indic_conjunct_break_table.h" 3


#pragma clang diagnostic push
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/indic_conjunct_break_table.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/indic_conjunct_break_table.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/indic_conjunct_break_table.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/indic_conjunct_break_table.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/indic_conjunct_break_table.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/indic_conjunct_break_table.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 348 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/indic_conjunct_break_table.h" 3
}}
# 348 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/indic_conjunct_break_table.h" 3
#pragma clang diagnostic pop
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/unicode.h" 2 3
# 26 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/unicode.h" 3


#pragma clang diagnostic push
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/unicode.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/unicode.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/unicode.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/unicode.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/unicode.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/unicode.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 600 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/unicode.h" 3
}}
# 600 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/unicode.h" 3
#pragma clang diagnostic pop
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/parser_std_format_spec.h" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/width_estimation_table.h" 1 3
# 71 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/width_estimation_table.h" 3


#pragma clang diagnostic push
# 73 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/width_estimation_table.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 73 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/width_estimation_table.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 73 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/width_estimation_table.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 73 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/width_estimation_table.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 73 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/width_estimation_table.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 73 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/width_estimation_table.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 268 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/width_estimation_table.h" 3
}}
# 268 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/width_estimation_table.h" 3
#pragma clang diagnostic pop
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/parser_std_format_spec.h" 2 3
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/parser_std_format_spec.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 48 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/parser_std_format_spec.h" 2 3

#pragma clang diagnostic push
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/parser_std_format_spec.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/parser_std_format_spec.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/parser_std_format_spec.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/parser_std_format_spec.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/parser_std_format_spec.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/parser_std_format_spec.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 1168 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/parser_std_format_spec.h" 3
}}
# 1168 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/parser_std_format_spec.h" 3
#pragma clang diagnostic pop
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_output.h" 2 3
# 36 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_output.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_output.h" 2 3

#pragma clang diagnostic push
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_output.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_output.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_output.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_output.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_output.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 41 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_output.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 331 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_output.h" 3
}}
# 331 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_output.h" 3
#pragma clang diagnostic pop
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_integral.h" 2 3
# 40 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_integral.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_integral.h" 2 3

#pragma clang diagnostic push
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_integral.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_integral.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_integral.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_integral.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_integral.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 45 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_integral.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 441 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_integral.h" 3
}}
# 441 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_integral.h" 3
#pragma clang diagnostic pop
# 20 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_bool.h" 2 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_bool.h" 3


#pragma clang diagnostic push
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_bool.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_bool.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_bool.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_bool.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_bool.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 31 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_bool.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_bool.h" 3
}}
# 74 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__format/formatter_bool.h" 3
#pragma clang diagnostic pop
# 326 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 2 3
# 381 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 385 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 2 3

#pragma clang diagnostic push
# 386 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 386 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 386 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 386 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 386 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 386 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Allocator >
class vector {
private:
  typedef allocator<_Tp> __default_allocator_type;

public:
  typedef vector __self;
  typedef _Tp value_type;
  typedef _Allocator allocator_type;
  typedef allocator_traits<allocator_type> __alloc_traits;
  typedef value_type& reference;
  typedef const value_type& const_reference;
  typedef typename __alloc_traits::size_type size_type;
  typedef typename __alloc_traits::difference_type difference_type;
  typedef typename __alloc_traits::pointer pointer;
  typedef typename __alloc_traits::const_pointer const_pointer;







  typedef __wrap_iter<pointer> iterator;
  typedef __wrap_iter<const_pointer> const_iterator;

  typedef std::reverse_iterator<iterator> reverse_iterator;
  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;





  using __trivially_relocatable = __conditional_t<
      __libcpp_is_trivially_relocatable<pointer>::value && __libcpp_is_trivially_relocatable<allocator_type>::value,
      vector,
      void>;

  static_assert(__check_valid_allocator<allocator_type>::value, "");
  static_assert(is_same<typename allocator_type::value_type, value_type>::value,
                "Allocator::value_type must be same type as value_type");

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector()
      noexcept(is_nothrow_default_constructible<allocator_type>::value) {}
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit vector(const allocator_type& __a)



      noexcept

      : __end_cap_(nullptr, __a) {
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit vector(size_type __n) {
    auto __guard = std::__make_exception_guard(__destroy_vector(*this));
    if (__n > 0) {
      __vallocate(__n);
      __construct_at_end(__n);
    }
    __guard.__complete();
  }


                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit vector(size_type __n, const allocator_type& __a)
      : __end_cap_(nullptr, __a) {
    auto __guard = std::__make_exception_guard(__destroy_vector(*this));
    if (__n > 0) {
      __vallocate(__n);
      __construct_at_end(__n);
    }
    __guard.__complete();
  }


                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector(size_type __n, const value_type& __x) {
    auto __guard = std::__make_exception_guard(__destroy_vector(*this));
    if (__n > 0) {
      __vallocate(__n);
      __construct_at_end(__n, __x);
    }
    __guard.__complete();
  }

  template <__enable_if_t<__is_allocator<_Allocator>::value, int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  vector(size_type __n, const value_type& __x, const allocator_type& __a)
      : __end_cap_(nullptr, __a) {
    if (__n > 0) {
      __vallocate(__n);
      __construct_at_end(__n, __x);
    }
  }

  template <class _InputIterator,
            __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value &&
                              is_constructible<value_type, typename iterator_traits<_InputIterator>::reference>::value,
                          int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector(_InputIterator __first, _InputIterator __last);
  template <class _InputIterator,
            __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value &&
                              is_constructible<value_type, typename iterator_traits<_InputIterator>::reference>::value,
                          int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a);

  template <
      class _ForwardIterator,
      __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value &&
                        is_constructible<value_type, typename iterator_traits<_ForwardIterator>::reference>::value,
                    int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector(_ForwardIterator __first, _ForwardIterator __last);

  template <
      class _ForwardIterator,
      __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value &&
                        is_constructible<value_type, typename iterator_traits<_ForwardIterator>::reference>::value,
                    int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a);
# 523 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
private:
  class __destroy_vector {
  public:
    constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __destroy_vector(vector& __vec) : __vec_(__vec) {}

                                  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator()() {
      if (__vec_.__begin_ != nullptr) {
        __vec_.__clear();
        __vec_.__annotate_delete();
        __alloc_traits::deallocate(__vec_.__alloc(), __vec_.__begin_, __vec_.capacity());
      }
    }

  private:
    vector& __vec_;
  };

public:
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~vector() { __destroy_vector (*this)(); }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector(const vector& __x);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  vector(const vector& __x, const __type_identity_t<allocator_type>& __a);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector& operator=(const vector& __x);


                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector(initializer_list<value_type> __il);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  vector(initializer_list<value_type> __il, const allocator_type& __a);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector& operator=(initializer_list<value_type> __il) {
    assign(__il.begin(), __il.end());
    return *this;
  }


                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector(vector&& __x)

      noexcept;




                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  vector(vector&& __x, const __type_identity_t<allocator_type>& __a);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector& operator=(vector&& __x)
      noexcept(__noexcept_move_assign_container<_Allocator, __alloc_traits>::value);

  template <class _InputIterator,
            __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value &&
                              is_constructible<value_type, typename iterator_traits<_InputIterator>::reference>::value,
                          int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void assign(_InputIterator __first, _InputIterator __last);
  template <
      class _ForwardIterator,
      __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value &&
                        is_constructible<value_type, typename iterator_traits<_ForwardIterator>::reference>::value,
                    int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void assign(_ForwardIterator __first, _ForwardIterator __last);
# 597 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void assign(size_type __n, const_reference __u);


                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void assign(initializer_list<value_type> __il) {
    assign(__il.begin(), __il.end());
  }


                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) allocator_type get_allocator() const noexcept {
    return this->__alloc();
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator begin() noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator begin() const noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator end() noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator end() const noexcept;

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reverse_iterator rbegin() noexcept {
    return reverse_iterator(end());
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator rbegin() const noexcept {
    return const_reverse_iterator(end());
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reverse_iterator rend() noexcept {
    return reverse_iterator(begin());
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator rend() const noexcept {
    return const_reverse_iterator(begin());
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator cbegin() const noexcept { return begin(); }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator cend() const noexcept { return end(); }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator crbegin() const noexcept {
    return rbegin();
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator crend() const noexcept { return rend(); }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type size() const noexcept {
    return static_cast<size_type>(this->__end_ - this->__begin_);
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type capacity() const noexcept {
    return static_cast<size_type>(__end_cap() - this->__begin_);
  }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool empty() const noexcept {
    return this->__begin_ == this->__end_;
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type max_size() const noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reserve(size_type __n);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void shrink_to_fit() noexcept;

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference operator[](size_type __n) noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference operator[](size_type __n) const noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference at(size_type __n);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference at(size_type __n) const;

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference front() noexcept {
    ((void)0);
    return *this->__begin_;
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference front() const noexcept {
    ((void)0);
    return *this->__begin_;
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference back() noexcept {
    ((void)0);
    return *(this->__end_ - 1);
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference back() const noexcept {
    ((void)0);
    return *(this->__end_ - 1);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) value_type* data() noexcept {
    return std::__to_address(this->__begin_);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const value_type* data() const noexcept {
    return std::__to_address(this->__begin_);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push_back(const_reference __x);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push_back(value_type&& __x);

  template <class... _Args>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))

  reference
  emplace_back(_Args&&... __args);
# 698 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void pop_back();

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator __position, const_reference __x);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator __position, value_type&& __x);
  template <class... _Args>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator emplace(const_iterator __position, _Args&&... __args);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator
  insert(const_iterator __position, size_type __n, const_reference __x);

  template <class _InputIterator,
            __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value &&
                              is_constructible< value_type, typename iterator_traits<_InputIterator>::reference>::value,
                          int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator
  insert(const_iterator __position, _InputIterator __first, _InputIterator __last);
# 729 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
  template <
      class _ForwardIterator,
      __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value &&
                        is_constructible< value_type, typename iterator_traits<_ForwardIterator>::reference>::value,
                    int> = 0>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator
  insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last);


                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator
  insert(const_iterator __position, initializer_list<value_type> __il) {
    return insert(__position, __il.begin(), __il.end());
  }


                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator erase(const_iterator __position);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator erase(const_iterator __first, const_iterator __last);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void clear() noexcept {
    size_type __old_size = size();
    __clear();
    __annotate_shrink(__old_size);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void resize(size_type __sz);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void resize(size_type __sz, const_reference __x);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(vector&)

      noexcept;




                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __invariants() const;

private:
  pointer __begin_ = nullptr;
  pointer __end_ = nullptr;
  __compressed_pair<pointer, allocator_type> __end_cap_ =
      __compressed_pair<pointer, allocator_type>(nullptr, __default_init_tag());
# 778 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __vallocate(size_type __n) {
    if (__n > max_size())
      __throw_length_error();
    auto __allocation = std::__allocate_at_least(__alloc(), __n);
    __begin_ = __allocation.ptr;
    __end_ = __allocation.ptr;
    __end_cap() = __begin_ + __allocation.count;
    __annotate_new(0);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __vdeallocate() noexcept;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __recommend(size_type __new_size) const;
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __construct_at_end(size_type __n);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __construct_at_end(size_type __n, const_reference __x);

  template <class _InputIterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __init_with_size(_InputIterator __first, _Sentinel __last, size_type __n) {
    auto __guard = std::__make_exception_guard(__destroy_vector(*this));

    if (__n > 0) {
      __vallocate(__n);
      __construct_at_end(__first, __last, __n);
    }

    __guard.__complete();
  }

  template <class _InputIterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __init_with_sentinel(_InputIterator __first, _Sentinel __last) {
    auto __guard = std::__make_exception_guard(__destroy_vector(*this));

    for (; __first != __last; ++__first)
      emplace_back(*__first);

    __guard.__complete();
  }

  template <class _Iterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __assign_with_sentinel(_Iterator __first, _Sentinel __last);

  template <class _ForwardIterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __assign_with_size(_ForwardIterator __first, _Sentinel __last, difference_type __n);

  template <class _InputIterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator
  __insert_with_sentinel(const_iterator __position, _InputIterator __first, _Sentinel __last);

  template <class _Iterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator
  __insert_with_size(const_iterator __position, _Iterator __first, _Sentinel __last, difference_type __n);

  template <class _InputIterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __construct_at_end(_InputIterator __first, _Sentinel __last, size_type __n);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __append(size_type __n);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __append(size_type __n, const_reference __x);

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __make_iter(pointer __p) noexcept {
# 855 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
    return iterator(__p);

  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator __make_iter(const_pointer __p) const noexcept {







    return const_iterator(__p);

  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer
  __swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v, pointer __p);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __move_range(pointer __from_s, pointer __from_e, pointer __to);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign(vector& __c, true_type)
      noexcept(is_nothrow_move_assignable<allocator_type>::value);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign(vector& __c, false_type)
      noexcept(__alloc_traits::is_always_equal::value);
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __destruct_at_end(pointer __new_last) noexcept {
    size_type __old_size = size();
    __base_destruct_at_end(__new_last);
    __annotate_shrink(__old_size);
  }

  template <class _Up>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline pointer __push_back_slow_path(_Up&& __x);

  template <class... _Args>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) inline pointer __emplace_back_slow_path(_Args&&... __args);
# 901 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __annotate_contiguous_container(const void* __old_mid, const void* __new_mid) const {
    std::__annotate_contiguous_container<_Allocator>(data(), data() + capacity(), __old_mid, __new_mid);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_new(size_type __current_size) const noexcept {
    (void)__current_size;



  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_delete() const noexcept {



  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_increase(size_type __n) const noexcept {
    (void)__n;



  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __annotate_shrink(size_type __old_size) const noexcept {
    (void)__old_size;



  }

  struct _ConstructTransaction {
                                  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit _ConstructTransaction(vector& __v, size_type __n)
        : __v_(__v), __pos_(__v.__end_), __new_end_(__v.__end_ + __n) {



    }

                                  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~_ConstructTransaction() {
      __v_.__end_ = __pos_;





    }

    vector& __v_;
    pointer __pos_;
    const_pointer const __new_end_;

    _ConstructTransaction(_ConstructTransaction const&) = delete;
    _ConstructTransaction& operator=(_ConstructTransaction const&) = delete;
  };

  template <class... _Args>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __construct_one_at_end(_Args&&... __args) {
    _ConstructTransaction __tx(*this, 1);
    __alloc_traits::construct(this->__alloc(), std::__to_address(__tx.__pos_), std::forward<_Args>(__args)...);
    ++__tx.__pos_;
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) allocator_type& __alloc() noexcept {
    return this->__end_cap_.second();
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const allocator_type& __alloc() const noexcept {
    return this->__end_cap_.second();
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pointer& __end_cap() noexcept {
    return this->__end_cap_.first();
  }
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const pointer& __end_cap() const noexcept {
    return this->__end_cap_.first();
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __clear() noexcept {
    __base_destruct_at_end(this->__begin_);
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __base_destruct_at_end(pointer __new_last) noexcept {
    pointer __soon_to_be_end = this->__end_;
    while (__new_last != __soon_to_be_end)
      __alloc_traits::destroy(__alloc(), std::__to_address(--__soon_to_be_end));
    this->__end_ = __new_last;
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __copy_assign_alloc(const vector& __c) {
    __copy_assign_alloc(__c, integral_constant<bool, __alloc_traits::propagate_on_container_copy_assignment::value>());
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(vector& __c)
      noexcept(!__alloc_traits::propagate_on_container_move_assignment::value || is_nothrow_move_assignable<allocator_type>::value) {

    __move_assign_alloc(__c, integral_constant<bool, __alloc_traits::propagate_on_container_move_assignment::value>());
  }

  [[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_length_error() const { std::__throw_length_error("vector"); }

  [[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_out_of_range() const { std::__throw_out_of_range("vector"); }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __copy_assign_alloc(const vector& __c, true_type) {
    if (__alloc() != __c.__alloc()) {
      __clear();
      __annotate_delete();
      __alloc_traits::deallocate(__alloc(), this->__begin_, capacity());
      this->__begin_ = this->__end_ = __end_cap() = nullptr;
    }
    __alloc() = __c.__alloc();
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __copy_assign_alloc(const vector&, false_type) {}

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(vector& __c, true_type)
      noexcept(is_nothrow_move_assignable<allocator_type>::value) {
    __alloc() = std::move(__c.__alloc());
  }

                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(vector&, false_type) noexcept {}
};


template <class _InputIterator,
          class _Alloc = allocator<__iter_value_type<_InputIterator>>,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<__is_allocator<_Alloc>::value> >
vector(_InputIterator, _InputIterator) -> vector<__iter_value_type<_InputIterator>, _Alloc>;

template <class _InputIterator,
          class _Alloc,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<__is_allocator<_Alloc>::value> >
vector(_InputIterator, _InputIterator, _Alloc) -> vector<__iter_value_type<_InputIterator>, _Alloc>;
# 1047 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
template <class _Tp, class _Allocator>
                              void
vector<_Tp, _Allocator>::__swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v) {
  __annotate_delete();
  auto __new_begin = __v.__begin_ - (__end_ - __begin_);
  std::__uninitialized_allocator_relocate(
      __alloc(), std::__to_address(__begin_), std::__to_address(__end_), std::__to_address(__new_begin));
  __v.__begin_ = __new_begin;
  __end_ = __begin_;
  std::swap(this->__begin_, __v.__begin_);
  std::swap(this->__end_, __v.__end_);
  std::swap(this->__end_cap(), __v.__end_cap());
  __v.__first_ = __v.__begin_;
  __annotate_new(size());
}





template <class _Tp, class _Allocator>
                              typename vector<_Tp, _Allocator>::pointer
vector<_Tp, _Allocator>::__swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v, pointer __p) {
  __annotate_delete();
  pointer __ret = __v.__begin_;



  std::__uninitialized_allocator_relocate(
      __alloc(), std::__to_address(__p), std::__to_address(__end_), std::__to_address(__v.__end_));
  __v.__end_ += (__end_ - __p);
  __end_ = __p;
  auto __new_begin = __v.__begin_ - (__p - __begin_);

  std::__uninitialized_allocator_relocate(
      __alloc(), std::__to_address(__begin_), std::__to_address(__p), std::__to_address(__new_begin));
  __v.__begin_ = __new_begin;
  __end_ = __begin_;

  std::swap(this->__begin_, __v.__begin_);
  std::swap(this->__end_, __v.__end_);
  std::swap(this->__end_cap(), __v.__end_cap());
  __v.__first_ = __v.__begin_;
  __annotate_new(size());
  return __ret;
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::__vdeallocate() noexcept {
  if (this->__begin_ != nullptr) {
    clear();
    __annotate_delete();
    __alloc_traits::deallocate(this->__alloc(), this->__begin_, capacity());
    this->__begin_ = this->__end_ = this->__end_cap() = nullptr;
  }
}

template <class _Tp, class _Allocator>
                              typename vector<_Tp, _Allocator>::size_type
vector<_Tp, _Allocator>::max_size() const noexcept {
  return std::min<size_type>(__alloc_traits::max_size(this->__alloc()), numeric_limits<difference_type>::max());
}


template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename vector<_Tp, _Allocator>::size_type
vector<_Tp, _Allocator>::__recommend(size_type __new_size) const {
  const size_type __ms = max_size();
  if (__new_size > __ms)
    this->__throw_length_error();
  const size_type __cap = capacity();
  if (__cap >= __ms / 2)
    return __ms;
  return std::max<size_type>(2 * __cap, __new_size);
}






template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::__construct_at_end(size_type __n) {
  _ConstructTransaction __tx(*this, __n);
  const_pointer __new_end = __tx.__new_end_;
  for (pointer __pos = __tx.__pos_; __pos != __new_end; __tx.__pos_ = ++__pos) {
    __alloc_traits::construct(this->__alloc(), std::__to_address(__pos));
  }
}







template <class _Tp, class _Allocator>
                              inline void
vector<_Tp, _Allocator>::__construct_at_end(size_type __n, const_reference __x) {
  _ConstructTransaction __tx(*this, __n);
  const_pointer __new_end = __tx.__new_end_;
  for (pointer __pos = __tx.__pos_; __pos != __new_end; __tx.__pos_ = ++__pos) {
    __alloc_traits::construct(this->__alloc(), std::__to_address(__pos), __x);
  }
}

template <class _Tp, class _Allocator>
template <class _InputIterator, class _Sentinel>
                              void
vector<_Tp, _Allocator>::__construct_at_end(_InputIterator __first, _Sentinel __last, size_type __n) {
  _ConstructTransaction __tx(*this, __n);
  __tx.__pos_ = std::__uninitialized_allocator_copy(__alloc(), __first, __last, __tx.__pos_);
}





template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::__append(size_type __n) {
  if (static_cast<size_type>(this->__end_cap() - this->__end_) >= __n)
    this->__construct_at_end(__n);
  else {
    allocator_type& __a = this->__alloc();
    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), size(), __a);
    __v.__construct_at_end(__n);
    __swap_out_circular_buffer(__v);
  }
}





template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::__append(size_type __n, const_reference __x) {
  if (static_cast<size_type>(this->__end_cap() - this->__end_) >= __n)
    this->__construct_at_end(__n, __x);
  else {
    allocator_type& __a = this->__alloc();
    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), size(), __a);
    __v.__construct_at_end(__n, __x);
    __swap_out_circular_buffer(__v);
  }
}

template <class _Tp, class _Allocator>
template <class _InputIterator,
          __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value &&
                            is_constructible<_Tp, typename iterator_traits<_InputIterator>::reference>::value,
                        int> >
                              vector<_Tp, _Allocator>::vector(_InputIterator __first, _InputIterator __last) {
  __init_with_sentinel(__first, __last);
}

template <class _Tp, class _Allocator>
template <class _InputIterator,
          __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value &&
                            is_constructible<_Tp, typename iterator_traits<_InputIterator>::reference>::value,
                        int> >

vector<_Tp, _Allocator>::vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a)
    : __end_cap_(nullptr, __a) {
  __init_with_sentinel(__first, __last);
}

template <class _Tp, class _Allocator>
template <class _ForwardIterator,
          __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value &&
                            is_constructible<_Tp, typename iterator_traits<_ForwardIterator>::reference>::value,
                        int> >
                              vector<_Tp, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last) {
  size_type __n = static_cast<size_type>(std::distance(__first, __last));
  __init_with_size(__first, __last, __n);
}

template <class _Tp, class _Allocator>
template <class _ForwardIterator,
          __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value &&
                            is_constructible<_Tp, typename iterator_traits<_ForwardIterator>::reference>::value,
                        int> >

vector<_Tp, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a)
    : __end_cap_(nullptr, __a) {
  size_type __n = static_cast<size_type>(std::distance(__first, __last));
  __init_with_size(__first, __last, __n);
}

template <class _Tp, class _Allocator>
                              vector<_Tp, _Allocator>::vector(const vector& __x)
    : __end_cap_(nullptr, __alloc_traits::select_on_container_copy_construction(__x.__alloc())) {
  __init_with_size(__x.__begin_, __x.__end_, __x.size());
}

template <class _Tp, class _Allocator>

vector<_Tp, _Allocator>::vector(const vector& __x, const __type_identity_t<allocator_type>& __a)
    : __end_cap_(nullptr, __a) {
  __init_with_size(__x.__begin_, __x.__end_, __x.size());
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector<_Tp, _Allocator>::vector(vector&& __x)

    noexcept



    : __end_cap_(nullptr, std::move(__x.__alloc())) {
  this->__begin_ = __x.__begin_;
  this->__end_ = __x.__end_;
  this->__end_cap() = __x.__end_cap();
  __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr;
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
vector<_Tp, _Allocator>::vector(vector&& __x, const __type_identity_t<allocator_type>& __a)
    : __end_cap_(nullptr, __a) {
  if (__a == __x.__alloc()) {
    this->__begin_ = __x.__begin_;
    this->__end_ = __x.__end_;
    this->__end_cap() = __x.__end_cap();
    __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr;
  } else {
    typedef move_iterator<iterator> _Ip;
    auto __guard = std::__make_exception_guard(__destroy_vector(*this));
    assign(_Ip(__x.begin()), _Ip(__x.end()));
    __guard.__complete();
  }
}



template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
vector<_Tp, _Allocator>::vector(initializer_list<value_type> __il) {
  auto __guard = std::__make_exception_guard(__destroy_vector(*this));
  if (__il.size() > 0) {
    __vallocate(__il.size());
    __construct_at_end(__il.begin(), __il.end(), __il.size());
  }
  __guard.__complete();
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
vector<_Tp, _Allocator>::vector(initializer_list<value_type> __il, const allocator_type& __a)
    : __end_cap_(nullptr, __a) {
  auto __guard = std::__make_exception_guard(__destroy_vector(*this));
  if (__il.size() > 0) {
    __vallocate(__il.size());
    __construct_at_end(__il.begin(), __il.end(), __il.size());
  }
  __guard.__complete();
}



template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector<_Tp, _Allocator>&
vector<_Tp, _Allocator>::operator=(vector&& __x)
    noexcept(__noexcept_move_assign_container<_Allocator, __alloc_traits>::value) {
  __move_assign(__x, integral_constant<bool, __alloc_traits::propagate_on_container_move_assignment::value>());
  return *this;
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::__move_assign(vector& __c, false_type)
    noexcept(__alloc_traits::is_always_equal::value) {
  if (__alloc() != __c.__alloc()) {
    typedef move_iterator<iterator> _Ip;
    assign(_Ip(__c.begin()), _Ip(__c.end()));
  } else
    __move_assign(__c, true_type());
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::__move_assign(vector& __c, true_type)
    noexcept(is_nothrow_move_assignable<allocator_type>::value) {
  __vdeallocate();
  __move_assign_alloc(__c);
  this->__begin_ = __c.__begin_;
  this->__end_ = __c.__end_;
  this->__end_cap() = __c.__end_cap();
  __c.__begin_ = __c.__end_ = __c.__end_cap() = nullptr;
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector<_Tp, _Allocator>&
vector<_Tp, _Allocator>::operator=(const vector& __x) {
  if (this != std::addressof(__x)) {
    __copy_assign_alloc(__x);
    assign(__x.__begin_, __x.__end_);
  }
  return *this;
}

template <class _Tp, class _Allocator>
template <class _InputIterator,
          __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value &&
                            is_constructible<_Tp, typename iterator_traits<_InputIterator>::reference>::value,
                        int> >
                              void vector<_Tp, _Allocator>::assign(_InputIterator __first, _InputIterator __last) {
  __assign_with_sentinel(__first, __last);
}

template <class _Tp, class _Allocator>
template <class _Iterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
vector<_Tp, _Allocator>::__assign_with_sentinel(_Iterator __first, _Sentinel __last) {
  clear();
  for (; __first != __last; ++__first)
    emplace_back(*__first);
}

template <class _Tp, class _Allocator>
template <class _ForwardIterator,
          __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value &&
                            is_constructible<_Tp, typename iterator_traits<_ForwardIterator>::reference>::value,
                        int> >
                              void vector<_Tp, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last) {
  __assign_with_size(__first, __last, std::distance(__first, __last));
}

template <class _Tp, class _Allocator>
template <class _ForwardIterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
vector<_Tp, _Allocator>::__assign_with_size(_ForwardIterator __first, _Sentinel __last, difference_type __n) {
  size_type __new_size = static_cast<size_type>(__n);
  if (__new_size <= capacity()) {
    if (__new_size > size()) {
      _ForwardIterator __mid = std::next(__first, size());
      std::copy(__first, __mid, this->__begin_);
      __construct_at_end(__mid, __last, __new_size - size());
    } else {
      pointer __m = std::__copy<_ClassicAlgPolicy>(__first, __last, this->__begin_).second;
      this->__destruct_at_end(__m);
    }
  } else {
    __vdeallocate();
    __vallocate(__recommend(__new_size));
    __construct_at_end(__first, __last, __new_size);
  }
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::assign(size_type __n, const_reference __u) {
  if (__n <= capacity()) {
    size_type __s = size();
    std::fill_n(this->__begin_, std::min(__n, __s), __u);
    if (__n > __s)
      __construct_at_end(__n - __s, __u);
    else
      this->__destruct_at_end(this->__begin_ + __n);
  } else {
    __vdeallocate();
    __vallocate(__recommend(static_cast<size_type>(__n)));
    __construct_at_end(__n, __u);
  }
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::begin() noexcept {
  return __make_iter(this->__begin_);
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename vector<_Tp, _Allocator>::const_iterator
vector<_Tp, _Allocator>::begin() const noexcept {
  return __make_iter(this->__begin_);
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::end() noexcept {
  return __make_iter(this->__end_);
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename vector<_Tp, _Allocator>::const_iterator
vector<_Tp, _Allocator>::end() const noexcept {
  return __make_iter(this->__end_);
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename vector<_Tp, _Allocator>::reference
vector<_Tp, _Allocator>::operator[](size_type __n) noexcept {
  ((void)0);
  return this->__begin_[__n];
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename vector<_Tp, _Allocator>::const_reference
vector<_Tp, _Allocator>::operator[](size_type __n) const noexcept {
  ((void)0);
  return this->__begin_[__n];
}

template <class _Tp, class _Allocator>
                              typename vector<_Tp, _Allocator>::reference vector<_Tp, _Allocator>::at(size_type __n) {
  if (__n >= size())
    this->__throw_out_of_range();
  return this->__begin_[__n];
}

template <class _Tp, class _Allocator>
                              typename vector<_Tp, _Allocator>::const_reference
vector<_Tp, _Allocator>::at(size_type __n) const {
  if (__n >= size())
    this->__throw_out_of_range();
  return this->__begin_[__n];
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::reserve(size_type __n) {
  if (__n > capacity()) {
    if (__n > max_size())
      this->__throw_length_error();
    allocator_type& __a = this->__alloc();
    __split_buffer<value_type, allocator_type&> __v(__n, size(), __a);
    __swap_out_circular_buffer(__v);
  }
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::shrink_to_fit() noexcept {
  if (capacity() > size()) {

    try {

      allocator_type& __a = this->__alloc();
      __split_buffer<value_type, allocator_type&> __v(size(), size(), __a);



      if (__v.capacity() < capacity())
        __swap_out_circular_buffer(__v);

    } catch (...) {
    }

  }
}

template <class _Tp, class _Allocator>
template <class _Up>
                              typename vector<_Tp, _Allocator>::pointer
vector<_Tp, _Allocator>::__push_back_slow_path(_Up&& __x) {
  allocator_type& __a = this->__alloc();
  __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), size(), __a);

  __alloc_traits::construct(__a, std::__to_address(__v.__end_), std::forward<_Up>(__x));
  __v.__end_++;
  __swap_out_circular_buffer(__v);
  return this->__end_;
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
vector<_Tp, _Allocator>::push_back(const_reference __x) {
  pointer __end = this->__end_;
  if (__end < this->__end_cap()) {
    __construct_one_at_end(__x);
    ++__end;
  } else {
    __end = __push_back_slow_path(__x);
  }
  this->__end_ = __end;
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void vector<_Tp, _Allocator>::push_back(value_type&& __x) {
  pointer __end = this->__end_;
  if (__end < this->__end_cap()) {
    __construct_one_at_end(std::move(__x));
    ++__end;
  } else {
    __end = __push_back_slow_path(std::move(__x));
  }
  this->__end_ = __end;
}

template <class _Tp, class _Allocator>
template <class... _Args>
                              typename vector<_Tp, _Allocator>::pointer
vector<_Tp, _Allocator>::__emplace_back_slow_path(_Args&&... __args) {
  allocator_type& __a = this->__alloc();
  __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), size(), __a);

  __alloc_traits::construct(__a, std::__to_address(__v.__end_), std::forward<_Args>(__args)...);
  __v.__end_++;
  __swap_out_circular_buffer(__v);
  return this->__end_;
}

template <class _Tp, class _Allocator>
template <class... _Args>
                              inline

    typename vector<_Tp, _Allocator>::reference



    vector<_Tp, _Allocator>::emplace_back(_Args&&... __args) {
  pointer __end = this->__end_;
  if (__end < this->__end_cap()) {
    __construct_one_at_end(std::forward<_Args>(__args)...);
    ++__end;
  } else {
    __end = __emplace_back_slow_path(std::forward<_Args>(__args)...);
  }
  this->__end_ = __end;

  return *(__end - 1);

}

template <class _Tp, class _Allocator>
                              inline void vector<_Tp, _Allocator>::pop_back() {
  ((void)0);
  this->__destruct_at_end(this->__end_ - 1);
}

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::erase(const_iterator __position) {
  ((void)0);

  difference_type __ps = __position - cbegin();
  pointer __p = this->__begin_ + __ps;
  this->__destruct_at_end(std::move(__p + 1, this->__end_, __p));
  return __make_iter(__p);
}

template <class _Tp, class _Allocator>
                              typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::erase(const_iterator __first, const_iterator __last) {
  ((void)0);
  pointer __p = this->__begin_ + (__first - begin());
  if (__first != __last) {
    this->__destruct_at_end(std::move(__p + (__last - __first), this->__end_, __p));
  }
  return __make_iter(__p);
}

template <class _Tp, class _Allocator>
                              void
vector<_Tp, _Allocator>::__move_range(pointer __from_s, pointer __from_e, pointer __to) {
  pointer __old_last = this->__end_;
  difference_type __n = __old_last - __to;
  {
    pointer __i = __from_s + __n;
    _ConstructTransaction __tx(*this, __from_e - __i);
    for (pointer __pos = __tx.__pos_; __i < __from_e; ++__i, (void)++__pos, __tx.__pos_ = __pos) {
      __alloc_traits::construct(this->__alloc(), std::__to_address(__pos), std::move(*__i));
    }
  }
  std::move_backward(__from_s, __from_s + __n, __old_last);
}

template <class _Tp, class _Allocator>
                              typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::insert(const_iterator __position, const_reference __x) {
  pointer __p = this->__begin_ + (__position - begin());
  if (this->__end_ < this->__end_cap()) {
    if (__p == this->__end_) {
      __construct_one_at_end(__x);
    } else {
      __move_range(__p, this->__end_, __p + 1);
      const_pointer __xr = pointer_traits<const_pointer>::pointer_to(__x);
      if (std::__is_pointer_in_range(std::__to_address(__p), std::__to_address(__end_), std::addressof(__x)))
        ++__xr;
      *__p = *__xr;
    }
  } else {
    allocator_type& __a = this->__alloc();
    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);
    __v.push_back(__x);
    __p = __swap_out_circular_buffer(__v, __p);
  }
  return __make_iter(__p);
}

template <class _Tp, class _Allocator>
                              typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::insert(const_iterator __position, value_type&& __x) {
  pointer __p = this->__begin_ + (__position - begin());
  if (this->__end_ < this->__end_cap()) {
    if (__p == this->__end_) {
      __construct_one_at_end(std::move(__x));
    } else {
      __move_range(__p, this->__end_, __p + 1);
      *__p = std::move(__x);
    }
  } else {
    allocator_type& __a = this->__alloc();
    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);
    __v.push_back(std::move(__x));
    __p = __swap_out_circular_buffer(__v, __p);
  }
  return __make_iter(__p);
}

template <class _Tp, class _Allocator>
template <class... _Args>
                              typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::emplace(const_iterator __position, _Args&&... __args) {
  pointer __p = this->__begin_ + (__position - begin());
  if (this->__end_ < this->__end_cap()) {
    if (__p == this->__end_) {
      __construct_one_at_end(std::forward<_Args>(__args)...);
    } else {
      __temp_value<value_type, _Allocator> __tmp(this->__alloc(), std::forward<_Args>(__args)...);
      __move_range(__p, this->__end_, __p + 1);
      *__p = std::move(__tmp.get());
    }
  } else {
    allocator_type& __a = this->__alloc();
    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);
    __v.emplace_back(std::forward<_Args>(__args)...);
    __p = __swap_out_circular_buffer(__v, __p);
  }
  return __make_iter(__p);
}

template <class _Tp, class _Allocator>
                              typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::insert(const_iterator __position, size_type __n, const_reference __x) {
  pointer __p = this->__begin_ + (__position - begin());
  if (__n > 0) {

    if (!__libcpp_is_constant_evaluated() && __n <= static_cast<size_type>(this->__end_cap() - this->__end_)) {
      size_type __old_n = __n;
      pointer __old_last = this->__end_;
      if (__n > static_cast<size_type>(this->__end_ - __p)) {
        size_type __cx = __n - (this->__end_ - __p);
        __construct_at_end(__cx, __x);
        __n -= __cx;
      }
      if (__n > 0) {
        __move_range(__p, __old_last, __p + __old_n);
        const_pointer __xr = pointer_traits<const_pointer>::pointer_to(__x);
        if (__p <= __xr && __xr < this->__end_)
          __xr += __old_n;
        std::fill_n(__p, __n, *__xr);
      }
    } else {
      allocator_type& __a = this->__alloc();
      __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), __p - this->__begin_, __a);
      __v.__construct_at_end(__n, __x);
      __p = __swap_out_circular_buffer(__v, __p);
    }
  }
  return __make_iter(__p);
}
template <class _Tp, class _Allocator>
template <class _InputIterator,
          __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value &&
                            is_constructible<_Tp, typename iterator_traits<_InputIterator>::reference>::value,
                        int> >
                              typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::insert(const_iterator __position, _InputIterator __first, _InputIterator __last) {
  return __insert_with_sentinel(__position, __first, __last);
}

template <class _Tp, class _Allocator>
template <class _InputIterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::__insert_with_sentinel(const_iterator __position, _InputIterator __first, _Sentinel __last) {
  difference_type __off = __position - begin();
  pointer __p = this->__begin_ + __off;
  allocator_type& __a = this->__alloc();
  pointer __old_last = this->__end_;
  for (; this->__end_ != this->__end_cap() && __first != __last; ++__first) {
    __construct_one_at_end(*__first);
  }
  __split_buffer<value_type, allocator_type&> __v(__a);
  if (__first != __last) {

    try {

      __v.__construct_at_end_with_sentinel(std::move(__first), std::move(__last));
      difference_type __old_size = __old_last - this->__begin_;
      difference_type __old_p = __p - this->__begin_;
      reserve(__recommend(size() + __v.size()));
      __p = this->__begin_ + __old_p;
      __old_last = this->__begin_ + __old_size;

    } catch (...) {
      erase(__make_iter(__old_last), end());
      throw;
    }

  }
  __p = std::rotate(__p, __old_last, this->__end_);
  insert(__make_iter(__p), std::make_move_iterator(__v.begin()), std::make_move_iterator(__v.end()));
  return begin() + __off;
}

template <class _Tp, class _Allocator>
template <class _ForwardIterator,
          __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value &&
                            is_constructible<_Tp, typename iterator_traits<_ForwardIterator>::reference>::value,
                        int> >
                              typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last) {
  return __insert_with_size(__position, __first, __last, std::distance(__first, __last));
}

template <class _Tp, class _Allocator>
template <class _Iterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename vector<_Tp, _Allocator>::iterator
vector<_Tp, _Allocator>::__insert_with_size(
    const_iterator __position, _Iterator __first, _Sentinel __last, difference_type __n) {
  auto __insertion_size = __n;
  pointer __p = this->__begin_ + (__position - begin());
  if (__n > 0) {
    if (__n <= this->__end_cap() - this->__end_) {
      size_type __old_n = __n;
      pointer __old_last = this->__end_;
      _Iterator __m = std::next(__first, __n);
      difference_type __dx = this->__end_ - __p;
      if (__n > __dx) {
        __m = __first;
        difference_type __diff = this->__end_ - __p;
        std::advance(__m, __diff);
        __construct_at_end(__m, __last, __n - __diff);
        __n = __dx;
      }
      if (__n > 0) {
        __move_range(__p, __old_last, __p + __old_n);
        std::copy(__first, __m, __p);
      }
    } else {
      allocator_type& __a = this->__alloc();
      __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), __p - this->__begin_, __a);
      __v.__construct_at_end_with_size(__first, __insertion_size);
      __p = __swap_out_circular_buffer(__v, __p);
    }
  }
  return __make_iter(__p);
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::resize(size_type __sz) {
  size_type __cs = size();
  if (__cs < __sz)
    this->__append(__sz - __cs);
  else if (__cs > __sz)
    this->__destruct_at_end(this->__begin_ + __sz);
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::resize(size_type __sz, const_reference __x) {
  size_type __cs = size();
  if (__cs < __sz)
    this->__append(__sz - __cs, __x);
  else if (__cs > __sz)
    this->__destruct_at_end(this->__begin_ + __sz);
}

template <class _Tp, class _Allocator>
                              void vector<_Tp, _Allocator>::swap(vector& __x)

    noexcept



{
  ((void)0);



  std::swap(this->__begin_, __x.__begin_);
  std::swap(this->__end_, __x.__end_);
  std::swap(this->__end_cap(), __x.__end_cap());
  std::__swap_allocator(
      this->__alloc(), __x.__alloc(), integral_constant<bool, __alloc_traits::propagate_on_container_swap::value>());
}

template <class _Tp, class _Allocator>
                              bool vector<_Tp, _Allocator>::__invariants() const {
  if (this->__begin_ == nullptr) {
    if (this->__end_ != nullptr || this->__end_cap() != nullptr)
      return false;
  } else {
    if (this->__begin_ > this->__end_)
      return false;
    if (this->__begin_ == this->__end_cap())
      return false;
    if (this->__end_ > this->__end_cap())
      return false;
  }
  return true;
}



template <class _Allocator>
class vector<bool, _Allocator>;

template <class _Allocator>
struct hash<vector<bool, _Allocator> >;

template <class _Allocator>
struct __has_storage_type<vector<bool, _Allocator> > {
  static const bool value = true;
};

template <class _Allocator>
class vector<bool, _Allocator> {
public:
  typedef vector __self;
  typedef bool value_type;
  typedef _Allocator allocator_type;
  typedef allocator_traits<allocator_type> __alloc_traits;
  typedef typename __alloc_traits::size_type size_type;
  typedef typename __alloc_traits::difference_type difference_type;
  typedef size_type __storage_type;
  typedef __bit_iterator<vector, false> pointer;
  typedef __bit_iterator<vector, true> const_pointer;
  typedef pointer iterator;
  typedef const_pointer const_iterator;
  typedef std::reverse_iterator<iterator> reverse_iterator;
  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

private:
  typedef __rebind_alloc<__alloc_traits, __storage_type> __storage_allocator;
  typedef allocator_traits<__storage_allocator> __storage_traits;
  typedef typename __storage_traits::pointer __storage_pointer;
  typedef typename __storage_traits::const_pointer __const_storage_pointer;

  __storage_pointer __begin_;
  size_type __size_;
  __compressed_pair<size_type, __storage_allocator> __cap_alloc_;

public:
  typedef __bit_reference<vector> reference;



  typedef __bit_const_reference<vector> const_reference;


private:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type& __cap() noexcept { return __cap_alloc_.first(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const size_type& __cap() const noexcept {
    return __cap_alloc_.first();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __storage_allocator& __alloc() noexcept {
    return __cap_alloc_.second();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const __storage_allocator& __alloc() const noexcept {
    return __cap_alloc_.second();
  }

  static const unsigned __bits_per_word = static_cast<unsigned>(sizeof(__storage_type) * 8);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static size_type
  __internal_cap_to_external(size_type __n) noexcept {
    return __n * __bits_per_word;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static size_type
  __external_cap_to_internal(size_type __n) noexcept {
    return (__n - 1) / __bits_per_word + 1;
  }

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector()
      noexcept(is_nothrow_default_constructible<allocator_type>::value);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit vector(const allocator_type& __a)



      noexcept;


private:
  class __destroy_vector {
  public:
    constexpr __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __destroy_vector(vector& __vec) : __vec_(__vec) {}

                                  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void operator()() {
      if (__vec_.__begin_ != nullptr)
        __storage_traits::deallocate(__vec_.__alloc(), __vec_.__begin_, __vec_.__cap());
    }

  private:
    vector& __vec_;
  };

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) ~vector() { __destroy_vector (*this)(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit vector(size_type __n);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit vector(size_type __n, const allocator_type& __a);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector(size_type __n, const value_type& __v);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  vector(size_type __n, const value_type& __v, const allocator_type& __a);
  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector(_InputIterator __first, _InputIterator __last);
  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a);
  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector(_ForwardIterator __first, _ForwardIterator __last);
  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a);
# 1976 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector(const vector& __v);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector(const vector& __v, const allocator_type& __a);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector& operator=(const vector& __v);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector(initializer_list<value_type> __il);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  vector(initializer_list<value_type> __il, const allocator_type& __a);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector& operator=(initializer_list<value_type> __il) {
    assign(__il.begin(), __il.end());
    return *this;
  }



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector(vector&& __v)

      noexcept;



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  vector(vector&& __v, const __type_identity_t<allocator_type>& __a);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector& operator=(vector&& __v)
      noexcept(__noexcept_move_assign_container<_Allocator, __alloc_traits>::value);

  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
  void __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) assign(_InputIterator __first, _InputIterator __last);
  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  void __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) assign(_ForwardIterator __first, _ForwardIterator __last);
# 2021 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void assign(size_type __n, const value_type& __x);


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void assign(initializer_list<value_type> __il) {
    assign(__il.begin(), __il.end());
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) allocator_type get_allocator() const noexcept {
    return allocator_type(this->__alloc());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type max_size() const noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type capacity() const noexcept {
    return __internal_cap_to_external(__cap());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type size() const noexcept { return __size_; }
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool empty() const noexcept {
    return __size_ == 0;
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void reserve(size_type __n);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void shrink_to_fit() noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator begin() noexcept { return __make_iter(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator begin() const noexcept { return __make_iter(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator end() noexcept { return __make_iter(__size_); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator end() const noexcept {
    return __make_iter(__size_);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reverse_iterator rbegin() noexcept {
    return reverse_iterator(end());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator rbegin() const noexcept {
    return const_reverse_iterator(end());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reverse_iterator rend() noexcept {
    return reverse_iterator(begin());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator rend() const noexcept {
    return const_reverse_iterator(begin());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator cbegin() const noexcept { return __make_iter(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator cend() const noexcept {
    return __make_iter(__size_);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator crbegin() const noexcept {
    return rbegin();
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reverse_iterator crend() const noexcept { return rend(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference operator[](size_type __n) { return __make_ref(__n); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference operator[](size_type __n) const {
    return __make_ref(__n);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference at(size_type __n);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference at(size_type __n) const;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference front() { return __make_ref(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference front() const { return __make_ref(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference back() { return __make_ref(__size_ - 1); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference back() const { return __make_ref(__size_ - 1); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push_back(const value_type& __x);

  template <class... _Args>

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference emplace_back(_Args&&... __args)



  {
    push_back(value_type(std::forward<_Args>(__args)...));

    return this->back();

  }
# 2108 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void pop_back() { --__size_; }


  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator emplace(const_iterator __position, _Args&&... __args) {
    return insert(__position, value_type(std::forward<_Args>(__args)...));
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator insert(const_iterator __position, const value_type& __x);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator
  insert(const_iterator __position, size_type __n, const value_type& __x);
  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
  iterator __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  insert(const_iterator __position, _InputIterator __first, _InputIterator __last);
  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
  iterator __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last);
# 2141 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator
  insert(const_iterator __position, initializer_list<value_type> __il) {
    return insert(__position, __il.begin(), __il.end());
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator erase(const_iterator __position);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator erase(const_iterator __first, const_iterator __last);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void clear() noexcept { __size_ = 0; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(vector&)

      noexcept;



  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static void swap(reference __x, reference __y) noexcept {
    std::swap(__x, __y);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void resize(size_type __sz, value_type __x = false);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void flip() noexcept;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool __invariants() const;

private:
  [[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_length_error() const { std::__throw_length_error("vector"); }

  [[noreturn]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __throw_out_of_range() const { std::__throw_out_of_range("vector"); }

  template <class _InputIterator, class _Sentinel>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __init_with_size(_InputIterator __first, _Sentinel __last, size_type __n) {
    auto __guard = std::__make_exception_guard(__destroy_vector(*this));

    if (__n > 0) {
      __vallocate(__n);
      __construct_at_end(std::move(__first), std::move(__last), __n);
    }

    __guard.__complete();
  }

  template <class _InputIterator, class _Sentinel>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __init_with_sentinel(_InputIterator __first, _Sentinel __last) {

    try {

      for (; __first != __last; ++__first)
        push_back(*__first);

    } catch (...) {
      if (__begin_ != nullptr)
        __storage_traits::deallocate(__alloc(), __begin_, __cap());
      throw;
    }

  }

  template <class _Iterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __assign_with_sentinel(_Iterator __first, _Sentinel __last);

  template <class _ForwardIterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __assign_with_size(_ForwardIterator __first, _Sentinel __last, difference_type __ns);

  template <class _InputIterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator
  __insert_with_sentinel(const_iterator __position, _InputIterator __first, _Sentinel __last);

  template <class _Iterator, class _Sentinel>
                                __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator
  __insert_with_size(const_iterator __position, _Iterator __first, _Sentinel __last, difference_type __n);
# 2224 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __vallocate(size_type __n) {
    if (__n > max_size())
      __throw_length_error();
    auto __allocation = std::__allocate_at_least(__alloc(), __external_cap_to_internal(__n));
    __begin_ = __allocation.ptr;
    __size_ = 0;
    __cap() = __allocation.count;
    if (__libcpp_is_constant_evaluated()) {
      for (size_type __i = 0; __i != __cap(); ++__i)
        std::__construct_at(std::__to_address(__begin_) + __i);
    }
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __vdeallocate() noexcept;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) static size_type __align_it(size_type __new_size) noexcept {
    return (__new_size + (__bits_per_word - 1)) & ~((size_type)__bits_per_word - 1);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type __recommend(size_type __new_size) const;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __construct_at_end(size_type __n, bool __x);
  template <class _InputIterator, class _Sentinel>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __construct_at_end(_InputIterator __first, _Sentinel __last, size_type __n);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __append(size_type __n, const_reference __x);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference __make_ref(size_type __pos) noexcept {
    return reference(__begin_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference __make_ref(size_type __pos) const noexcept {
    return __bit_const_reference<vector>(
        __begin_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __make_iter(size_type __pos) noexcept {
    return iterator(__begin_ + __pos / __bits_per_word, static_cast<unsigned>(__pos % __bits_per_word));
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_iterator __make_iter(size_type __pos) const noexcept {
    return const_iterator(__begin_ + __pos / __bits_per_word, static_cast<unsigned>(__pos % __bits_per_word));
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) iterator __const_iterator_cast(const_iterator __p) noexcept {
    return begin() + (__p - cbegin());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __copy_assign_alloc(const vector& __v) {
    __copy_assign_alloc(
        __v, integral_constant<bool, __storage_traits::propagate_on_container_copy_assignment::value>());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __copy_assign_alloc(const vector& __c, true_type) {
    if (__alloc() != __c.__alloc())
      __vdeallocate();
    __alloc() = __c.__alloc();
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __copy_assign_alloc(const vector&, false_type) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign(vector& __c, false_type);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign(vector& __c, true_type)
      noexcept(is_nothrow_move_assignable<allocator_type>::value);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(vector& __c)
      noexcept(!__storage_traits::propagate_on_container_move_assignment::value || is_nothrow_move_assignable<allocator_type>::value) {

    __move_assign_alloc(
        __c, integral_constant<bool, __storage_traits::propagate_on_container_move_assignment::value>());
  }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(vector& __c, true_type)
      noexcept(is_nothrow_move_assignable<allocator_type>::value) {
    __alloc() = std::move(__c.__alloc());
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void __move_assign_alloc(vector&, false_type) noexcept {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t __hash_code() const noexcept;

  friend class __bit_reference<vector>;
  friend class __bit_const_reference<vector>;
  friend class __bit_iterator<vector, false>;
  friend class __bit_iterator<vector, true>;
  friend struct __bit_array<vector>;
  friend struct hash<vector>;
};

template <class _Allocator>
                              void vector<bool, _Allocator>::__vdeallocate() noexcept {
  if (this->__begin_ != nullptr) {
    __storage_traits::deallocate(this->__alloc(), this->__begin_, __cap());
    this->__begin_ = nullptr;
    this->__size_ = this->__cap() = 0;
  }
}

template <class _Allocator>
                              typename vector<bool, _Allocator>::size_type
vector<bool, _Allocator>::max_size() const noexcept {
  size_type __amax = __storage_traits::max_size(__alloc());
  size_type __nmax = numeric_limits<size_type>::max() / 2;
  if (__nmax / __bits_per_word <= __amax)
    return __nmax;
  return __internal_cap_to_external(__amax);
}


template <class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename vector<bool, _Allocator>::size_type
vector<bool, _Allocator>::__recommend(size_type __new_size) const {
  const size_type __ms = max_size();
  if (__new_size > __ms)
    this->__throw_length_error();
  const size_type __cap = capacity();
  if (__cap >= __ms / 2)
    return __ms;
  return std::max(2 * __cap, __align_it(__new_size));
}





template <class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
vector<bool, _Allocator>::__construct_at_end(size_type __n, bool __x) {
  size_type __old_size = this->__size_;
  this->__size_ += __n;
  if (__old_size == 0 || ((__old_size - 1) / __bits_per_word) != ((this->__size_ - 1) / __bits_per_word)) {
    if (this->__size_ <= __bits_per_word)
      this->__begin_[0] = __storage_type(0);
    else
      this->__begin_[(this->__size_ - 1) / __bits_per_word] = __storage_type(0);
  }
  std::fill_n(__make_iter(__old_size), __n, __x);
}

template <class _Allocator>
template <class _InputIterator, class _Sentinel>
                              void
vector<bool, _Allocator>::__construct_at_end(_InputIterator __first, _Sentinel __last, size_type __n) {
  size_type __old_size = this->__size_;
  this->__size_ += __n;
  if (__old_size == 0 || ((__old_size - 1) / __bits_per_word) != ((this->__size_ - 1) / __bits_per_word)) {
    if (this->__size_ <= __bits_per_word)
      this->__begin_[0] = __storage_type(0);
    else
      this->__begin_[(this->__size_ - 1) / __bits_per_word] = __storage_type(0);
  }
  std::__copy<_ClassicAlgPolicy>(__first, __last, __make_iter(__old_size));
}

template <class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector<bool, _Allocator>::vector()
    noexcept(is_nothrow_default_constructible<allocator_type>::value)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, __default_init_tag()) {}

template <class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector<bool, _Allocator>::vector(const allocator_type& __a)



        noexcept

    : __begin_(nullptr), __size_(0), __cap_alloc_(0, static_cast<__storage_allocator>(__a)) {
}

template <class _Allocator>
                              vector<bool, _Allocator>::vector(size_type __n)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, __default_init_tag()) {
  if (__n > 0) {
    __vallocate(__n);
    __construct_at_end(__n, false);
  }
}


template <class _Allocator>
                              vector<bool, _Allocator>::vector(size_type __n, const allocator_type& __a)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, static_cast<__storage_allocator>(__a)) {
  if (__n > 0) {
    __vallocate(__n);
    __construct_at_end(__n, false);
  }
}


template <class _Allocator>
                              vector<bool, _Allocator>::vector(size_type __n, const value_type& __x)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, __default_init_tag()) {
  if (__n > 0) {
    __vallocate(__n);
    __construct_at_end(__n, __x);
  }
}

template <class _Allocator>

vector<bool, _Allocator>::vector(size_type __n, const value_type& __x, const allocator_type& __a)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, static_cast<__storage_allocator>(__a)) {
  if (__n > 0) {
    __vallocate(__n);
    __construct_at_end(__n, __x);
  }
}

template <class _Allocator>
template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >
                              vector<bool, _Allocator>::vector(_InputIterator __first, _InputIterator __last)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, __default_init_tag()) {
  __init_with_sentinel(__first, __last);
}

template <class _Allocator>
template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >

vector<bool, _Allocator>::vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, static_cast<__storage_allocator>(__a)) {
  __init_with_sentinel(__first, __last);
}

template <class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
                              vector<bool, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, __default_init_tag()) {
  auto __n = static_cast<size_type>(std::distance(__first, __last));
  __init_with_size(__first, __last, __n);
}

template <class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >

vector<bool, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, static_cast<__storage_allocator>(__a)) {
  auto __n = static_cast<size_type>(std::distance(__first, __last));
  __init_with_size(__first, __last, __n);
}



template <class _Allocator>
                              vector<bool, _Allocator>::vector(initializer_list<value_type> __il)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, __default_init_tag()) {
  size_type __n = static_cast<size_type>(__il.size());
  if (__n > 0) {
    __vallocate(__n);
    __construct_at_end(__il.begin(), __il.end(), __n);
  }
}

template <class _Allocator>

vector<bool, _Allocator>::vector(initializer_list<value_type> __il, const allocator_type& __a)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, static_cast<__storage_allocator>(__a)) {
  size_type __n = static_cast<size_type>(__il.size());
  if (__n > 0) {
    __vallocate(__n);
    __construct_at_end(__il.begin(), __il.end(), __n);
  }
}



template <class _Allocator>
                              vector<bool, _Allocator>::vector(const vector& __v)
    : __begin_(nullptr),
      __size_(0),
      __cap_alloc_(0, __storage_traits::select_on_container_copy_construction(__v.__alloc())) {
  if (__v.size() > 0) {
    __vallocate(__v.size());
    __construct_at_end(__v.begin(), __v.end(), __v.size());
  }
}

template <class _Allocator>
                              vector<bool, _Allocator>::vector(const vector& __v, const allocator_type& __a)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, __a) {
  if (__v.size() > 0) {
    __vallocate(__v.size());
    __construct_at_end(__v.begin(), __v.end(), __v.size());
  }
}

template <class _Allocator>
                              vector<bool, _Allocator>& vector<bool, _Allocator>::operator=(const vector& __v) {
  if (this != std::addressof(__v)) {
    __copy_assign_alloc(__v);
    if (__v.__size_) {
      if (__v.__size_ > capacity()) {
        __vdeallocate();
        __vallocate(__v.__size_);
      }
      std::copy(__v.__begin_, __v.__begin_ + __external_cap_to_internal(__v.__size_), __begin_);
    }
    __size_ = __v.__size_;
  }
  return *this;
}

template <class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector<bool, _Allocator>::vector(vector&& __v)

    noexcept



    : __begin_(__v.__begin_),
      __size_(__v.__size_),
      __cap_alloc_(std::move(__v.__cap_alloc_)) {
  __v.__begin_ = nullptr;
  __v.__size_ = 0;
  __v.__cap() = 0;
}

template <class _Allocator>

vector<bool, _Allocator>::vector(vector&& __v, const __type_identity_t<allocator_type>& __a)
    : __begin_(nullptr), __size_(0), __cap_alloc_(0, __a) {
  if (__a == allocator_type(__v.__alloc())) {
    this->__begin_ = __v.__begin_;
    this->__size_ = __v.__size_;
    this->__cap() = __v.__cap();
    __v.__begin_ = nullptr;
    __v.__cap() = __v.__size_ = 0;
  } else if (__v.size() > 0) {
    __vallocate(__v.size());
    __construct_at_end(__v.begin(), __v.end(), __v.size());
  }
}

template <class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) vector<bool, _Allocator>&
vector<bool, _Allocator>::operator=(vector&& __v)
    noexcept(__noexcept_move_assign_container<_Allocator, __alloc_traits>::value) {
  __move_assign(__v, integral_constant<bool, __storage_traits::propagate_on_container_move_assignment::value>());
  return *this;
}

template <class _Allocator>
                              void vector<bool, _Allocator>::__move_assign(vector& __c, false_type) {
  if (__alloc() != __c.__alloc())
    assign(__c.begin(), __c.end());
  else
    __move_assign(__c, true_type());
}

template <class _Allocator>
                              void vector<bool, _Allocator>::__move_assign(vector& __c, true_type)
    noexcept(is_nothrow_move_assignable<allocator_type>::value) {
  __vdeallocate();
  __move_assign_alloc(__c);
  this->__begin_ = __c.__begin_;
  this->__size_ = __c.__size_;
  this->__cap() = __c.__cap();
  __c.__begin_ = nullptr;
  __c.__cap() = __c.__size_ = 0;
}

template <class _Allocator>
                              void vector<bool, _Allocator>::assign(size_type __n, const value_type& __x) {
  __size_ = 0;
  if (__n > 0) {
    size_type __c = capacity();
    if (__n <= __c)
      __size_ = __n;
    else {
      vector __v(get_allocator());
      __v.reserve(__recommend(__n));
      __v.__size_ = __n;
      swap(__v);
    }
    std::fill_n(begin(), __n, __x);
  }
}

template <class _Allocator>
template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >
                              void vector<bool, _Allocator>::assign(_InputIterator __first, _InputIterator __last) {
  __assign_with_sentinel(__first, __last);
}

template <class _Allocator>
template <class _Iterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
vector<bool, _Allocator>::__assign_with_sentinel(_Iterator __first, _Sentinel __last) {
  clear();
  for (; __first != __last; ++__first)
    push_back(*__first);
}

template <class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
                              void vector<bool, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last) {
  __assign_with_size(__first, __last, std::distance(__first, __last));
}

template <class _Allocator>
template <class _ForwardIterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
vector<bool, _Allocator>::__assign_with_size(_ForwardIterator __first, _Sentinel __last, difference_type __ns) {
  ((void)0);

  clear();

  const size_t __n = static_cast<size_type>(__ns);
  if (__n) {
    if (__n > capacity()) {
      __vdeallocate();
      __vallocate(__n);
    }
    __construct_at_end(__first, __last, __n);
  }
}

template <class _Allocator>
                              void vector<bool, _Allocator>::reserve(size_type __n) {
  if (__n > capacity()) {
    if (__n > max_size())
      this->__throw_length_error();
    vector __v(this->get_allocator());
    __v.__vallocate(__n);
    __v.__construct_at_end(this->begin(), this->end(), this->size());
    swap(__v);
  }
}

template <class _Allocator>
                              void vector<bool, _Allocator>::shrink_to_fit() noexcept {
  if (__external_cap_to_internal(size()) > __cap()) {

    try {

      vector(*this, allocator_type(__alloc())).swap(*this);

    } catch (...) {
    }

  }
}

template <class _Allocator>
typename vector<bool, _Allocator>::reference vector<bool, _Allocator>::at(size_type __n) {
  if (__n >= size())
    this->__throw_out_of_range();
  return (*this)[__n];
}

template <class _Allocator>
typename vector<bool, _Allocator>::const_reference vector<bool, _Allocator>::at(size_type __n) const {
  if (__n >= size())
    this->__throw_out_of_range();
  return (*this)[__n];
}

template <class _Allocator>
                              void vector<bool, _Allocator>::push_back(const value_type& __x) {
  if (this->__size_ == this->capacity())
    reserve(__recommend(this->__size_ + 1));
  ++this->__size_;
  back() = __x;
}

template <class _Allocator>
                              typename vector<bool, _Allocator>::iterator
vector<bool, _Allocator>::insert(const_iterator __position, const value_type& __x) {
  iterator __r;
  if (size() < capacity()) {
    const_iterator __old_end = end();
    ++__size_;
    std::copy_backward(__position, __old_end, end());
    __r = __const_iterator_cast(__position);
  } else {
    vector __v(get_allocator());
    __v.reserve(__recommend(__size_ + 1));
    __v.__size_ = __size_ + 1;
    __r = std::copy(cbegin(), __position, __v.begin());
    std::copy_backward(__position, cend(), __v.end());
    swap(__v);
  }
  *__r = __x;
  return __r;
}

template <class _Allocator>
                              typename vector<bool, _Allocator>::iterator
vector<bool, _Allocator>::insert(const_iterator __position, size_type __n, const value_type& __x) {
  iterator __r;
  size_type __c = capacity();
  if (__n <= __c && size() <= __c - __n) {
    const_iterator __old_end = end();
    __size_ += __n;
    std::copy_backward(__position, __old_end, end());
    __r = __const_iterator_cast(__position);
  } else {
    vector __v(get_allocator());
    __v.reserve(__recommend(__size_ + __n));
    __v.__size_ = __size_ + __n;
    __r = std::copy(cbegin(), __position, __v.begin());
    std::copy_backward(__position, cend(), __v.end());
    swap(__v);
  }
  std::fill_n(__r, __n, __x);
  return __r;
}

template <class _Allocator>
template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >
                              typename vector<bool, _Allocator>::iterator
vector<bool, _Allocator>::insert(const_iterator __position, _InputIterator __first, _InputIterator __last) {
  return __insert_with_sentinel(__position, __first, __last);
}

template <class _Allocator>
template <class _InputIterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename vector<bool, _Allocator>::iterator
vector<bool, _Allocator>::__insert_with_sentinel(const_iterator __position, _InputIterator __first, _Sentinel __last) {
  difference_type __off = __position - begin();
  iterator __p = __const_iterator_cast(__position);
  iterator __old_end = end();
  for (; size() != capacity() && __first != __last; ++__first) {
    ++this->__size_;
    back() = *__first;
  }
  vector __v(get_allocator());
  if (__first != __last) {

    try {

      __v.__assign_with_sentinel(std::move(__first), std::move(__last));
      difference_type __old_size = static_cast<difference_type>(__old_end - begin());
      difference_type __old_p = __p - begin();
      reserve(__recommend(size() + __v.size()));
      __p = begin() + __old_p;
      __old_end = begin() + __old_size;

    } catch (...) {
      erase(__old_end, end());
      throw;
    }

  }
  __p = std::rotate(__p, __old_end, end());
  insert(__p, __v.begin(), __v.end());
  return begin() + __off;
}

template <class _Allocator>
template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
                              typename vector<bool, _Allocator>::iterator
vector<bool, _Allocator>::insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last) {
  return __insert_with_size(__position, __first, __last, std::distance(__first, __last));
}

template <class _Allocator>
template <class _ForwardIterator, class _Sentinel>
                              __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename vector<bool, _Allocator>::iterator
vector<bool, _Allocator>::__insert_with_size(
    const_iterator __position, _ForwardIterator __first, _Sentinel __last, difference_type __n_signed) {
  ((void)0);
  const size_type __n = static_cast<size_type>(__n_signed);
  iterator __r;
  size_type __c = capacity();
  if (__n <= __c && size() <= __c - __n) {
    const_iterator __old_end = end();
    __size_ += __n;
    std::copy_backward(__position, __old_end, end());
    __r = __const_iterator_cast(__position);
  } else {
    vector __v(get_allocator());
    __v.reserve(__recommend(__size_ + __n));
    __v.__size_ = __size_ + __n;
    __r = std::copy(cbegin(), __position, __v.begin());
    std::copy_backward(__position, cend(), __v.end());
    swap(__v);
  }
  std::__copy<_ClassicAlgPolicy>(__first, __last, __r);
  return __r;
}

template <class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) typename vector<bool, _Allocator>::iterator
vector<bool, _Allocator>::erase(const_iterator __position) {
  iterator __r = __const_iterator_cast(__position);
  std::copy(__position + 1, this->cend(), __r);
  --__size_;
  return __r;
}

template <class _Allocator>
                              typename vector<bool, _Allocator>::iterator
vector<bool, _Allocator>::erase(const_iterator __first, const_iterator __last) {
  iterator __r = __const_iterator_cast(__first);
  difference_type __d = __last - __first;
  std::copy(__last, this->cend(), __r);
  __size_ -= __d;
  return __r;
}

template <class _Allocator>
                              void vector<bool, _Allocator>::swap(vector& __x)

    noexcept



{
  std::swap(this->__begin_, __x.__begin_);
  std::swap(this->__size_, __x.__size_);
  std::swap(this->__cap(), __x.__cap());
  std::__swap_allocator(
      this->__alloc(), __x.__alloc(), integral_constant<bool, __alloc_traits::propagate_on_container_swap::value>());
}

template <class _Allocator>
                              void vector<bool, _Allocator>::resize(size_type __sz, value_type __x) {
  size_type __cs = size();
  if (__cs < __sz) {
    iterator __r;
    size_type __c = capacity();
    size_type __n = __sz - __cs;
    if (__n <= __c && __cs <= __c - __n) {
      __r = end();
      __size_ += __n;
    } else {
      vector __v(get_allocator());
      __v.reserve(__recommend(__size_ + __n));
      __v.__size_ = __size_ + __n;
      __r = std::copy(cbegin(), cend(), __v.begin());
      swap(__v);
    }
    std::fill_n(__r, __n, __x);
  } else
    __size_ = __sz;
}

template <class _Allocator>
                              void vector<bool, _Allocator>::flip() noexcept {

  size_type __n = __size_;
  __storage_pointer __p = __begin_;
  for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)
    *__p = ~*__p;

  if (__n > 0) {
    __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
    __storage_type __b = *__p & __m;
    *__p &= ~__m;
    *__p |= ~__b & __m;
  }
}

template <class _Allocator>
                              bool vector<bool, _Allocator>::__invariants() const {
  if (this->__begin_ == nullptr) {
    if (this->__size_ != 0 || this->__cap() != 0)
      return false;
  } else {
    if (this->__cap() == 0)
      return false;
    if (this->__size_ > this->capacity())
      return false;
  }
  return true;
}

template <class _Allocator>
                              size_t vector<bool, _Allocator>::__hash_code() const noexcept {
  size_t __h = 0;

  size_type __n = __size_;
  __storage_pointer __p = __begin_;
  for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)
    __h ^= *__p;

  if (__n > 0) {
    const __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
    __h ^= *__p & __m;
  }
  return __h;
}

template <class _Allocator>
struct hash<vector<bool, _Allocator> >
    : public __unary_function<vector<bool, _Allocator>, size_t> {
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_t
  operator()(const vector<bool, _Allocator>& __vec) const noexcept {
    return __vec.__hash_code();
  }
};

template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
operator==(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y) {
  const typename vector<_Tp, _Allocator>::size_type __sz = __x.size();
  return __sz == __y.size() && std::equal(__x.begin(), __x.end(), __y.begin());
}



template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y) {
  return !(__x == __y);
}

template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y) {
  return std::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());
}

template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y) {
  return __y < __x;
}

template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y) {
  return !(__x < __y);
}

template <class _Tp, class _Allocator>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y) {
  return !(__y < __x);
}
# 2950 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
template <class _Tp, class _Allocator>
                              inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
swap(vector<_Tp, _Allocator>& __x, vector<_Tp, _Allocator>& __y) noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}
# 3003 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
}}
# 3003 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
#pragma clang diagnostic pop


#pragma clang diagnostic push
# 3006 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 3006 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 3006 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 3006 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 3006 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 3006 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
namespace pmr {
template <class _ValueT>
using vector = std::vector<_ValueT, polymorphic_allocator<_ValueT>>;
}
}}
# 3011 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/vector" 3
#pragma clang diagnostic pop
# 28 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/boyer_moore_searcher.h" 2 3




# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 33 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/boyer_moore_searcher.h" 2 3

#pragma clang diagnostic push
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/boyer_moore_searcher.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/boyer_moore_searcher.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/boyer_moore_searcher.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/boyer_moore_searcher.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/boyer_moore_searcher.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 34 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/boyer_moore_searcher.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Key, class _Value, class _Hash, class _BinaryPredicate, bool >
class _BMSkipTable;


template <class _Key, class _Value, class _Hash, class _BinaryPredicate>
class _BMSkipTable<_Key, _Value, _Hash, _BinaryPredicate, false> {
private:
  using value_type = _Value;
  using key_type = _Key;

  const value_type __default_value_;
  unordered_map<_Key, _Value, _Hash, _BinaryPredicate> __table_;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit _BMSkipTable(
      size_t __sz, value_type __default_value, _Hash __hash, _BinaryPredicate __pred)
      : __default_value_(__default_value), __table_(__sz, __hash, __pred) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void insert(const key_type& __key, value_type __val) { __table_[__key] = __val; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) value_type operator[](const key_type& __key) const {
    auto __it = __table_.find(__key);
    return __it == __table_.end() ? __default_value_ : __it->second;
  }
};


template <class _Key, class _Value, class _Hash, class _BinaryPredicate>
class _BMSkipTable<_Key, _Value, _Hash, _BinaryPredicate, true> {
private:
  using value_type = _Value;
  using key_type = _Key;

  using unsigned_key_type = make_unsigned_t<key_type>;
  std::array<value_type, 256> __table_;
  static_assert(numeric_limits<unsigned_key_type>::max() < 256);

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit _BMSkipTable(size_t, value_type __default_value, _Hash, _BinaryPredicate) {
    std::fill_n(__table_.data(), __table_.size(), __default_value);
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void insert(key_type __key, value_type __val) {
    __table_[static_cast<unsigned_key_type>(__key)] = __val;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) value_type operator[](key_type __key) const {
    return __table_[static_cast<unsigned_key_type>(__key)];
  }
};

template <class _RandomAccessIterator1,
          class _Hash = hash<typename iterator_traits<_RandomAccessIterator1>::value_type>,
          class _BinaryPredicate = equal_to<>>
class boyer_moore_searcher {
private:
  using difference_type = typename std::iterator_traits<_RandomAccessIterator1>::difference_type;
  using value_type = typename std::iterator_traits<_RandomAccessIterator1>::value_type;
  using __skip_table_type =
      _BMSkipTable<value_type,
                   difference_type,
                   _Hash,
                   _BinaryPredicate,
                   is_integral_v<value_type> && sizeof(value_type) == 1 && is_same_v<_Hash, hash<value_type>> &&
                       is_same_v<_BinaryPredicate, equal_to<>>>;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) boyer_moore_searcher(
      _RandomAccessIterator1 __first,
      _RandomAccessIterator1 __last,
      _Hash __hash = _Hash(),
      _BinaryPredicate __pred = _BinaryPredicate())
      : __first_(__first),
        __last_(__last),
        __pred_(__pred),
        __pattern_length_(__last - __first),
        __skip_table_(std::make_shared<__skip_table_type>(__pattern_length_, -1, __hash, __pred_)),
        __suffix_(std::__allocate_shared_unbounded_array<difference_type[]>(
            allocator<difference_type>(), __pattern_length_ + 1)) {
    difference_type __i = 0;
    while (__first != __last) {
      __skip_table_->insert(*__first, __i);
      ++__first;
      ++__i;
    }
    __build_suffix_table(__first_, __last_, __pred_);
  }

  template <class _RandomAccessIterator2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_RandomAccessIterator2, _RandomAccessIterator2>
  operator()(_RandomAccessIterator2 __first, _RandomAccessIterator2 __last) const {
    static_assert(__is_same_uncvref<typename iterator_traits<_RandomAccessIterator1>::value_type,
                                    typename iterator_traits<_RandomAccessIterator2>::value_type>::value,
                  "Corpus and Pattern iterators must point to the same type");
    if (__first == __last)
      return std::make_pair(__last, __last);
    if (__first_ == __last_)
      return std::make_pair(__first, __first);

    if (__pattern_length_ > (__last - __first))
      return std::make_pair(__last, __last);
    return __search(__first, __last);
  }

private:
  _RandomAccessIterator1 __first_;
  _RandomAccessIterator1 __last_;
  _BinaryPredicate __pred_;
  difference_type __pattern_length_;
  shared_ptr<__skip_table_type> __skip_table_;
  shared_ptr<difference_type[]> __suffix_;

  template <class _RandomAccessIterator2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_RandomAccessIterator2, _RandomAccessIterator2>
  __search(_RandomAccessIterator2 __f, _RandomAccessIterator2 __l) const {
    _RandomAccessIterator2 __current = __f;
    const _RandomAccessIterator2 __last = __l - __pattern_length_;
    const __skip_table_type& __skip_table = *__skip_table_;

    while (__current <= __last) {
      difference_type __j = __pattern_length_;
      while (__pred_(__first_[__j - 1], __current[__j - 1])) {
        --__j;
        if (__j == 0)
          return std::make_pair(__current, __current + __pattern_length_);
      }

      difference_type __k = __skip_table[__current[__j - 1]];
      difference_type __m = __j - __k - 1;
      if (__k < __j && __m > __suffix_[__j])
        __current += __m;
      else
        __current += __suffix_[__j];
    }
    return std::make_pair(__l, __l);
  }

  template <class _Iterator, class _Container>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __compute_bm_prefix(_Iterator __first, _Iterator __last, _BinaryPredicate __pred, _Container& __prefix) {
    const size_t __count = __last - __first;

    __prefix[0] = 0;
    size_t __k = 0;

    for (size_t __i = 1; __i != __count; ++__i) {
      while (__k > 0 && !__pred(__first[__k], __first[__i]))
        __k = __prefix[__k - 1];

      if (__pred(__first[__k], __first[__i]))
        ++__k;
      __prefix[__i] = __k;
    }
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
  __build_suffix_table(_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _BinaryPredicate __pred) {
    const size_t __count = __last - __first;

    if (__count == 0)
      return;

    vector<difference_type> __scratch(__count);

    __compute_bm_prefix(__first, __last, __pred, __scratch);
    for (size_t __i = 0; __i <= __count; ++__i)
      __suffix_[__i] = __count - __scratch[__count - 1];

    using _ReverseIter = reverse_iterator<_RandomAccessIterator1>;
    __compute_bm_prefix(_ReverseIter(__last), _ReverseIter(__first), __pred, __scratch);

    for (size_t __i = 0; __i != __count; ++__i) {
      const size_t __j = __count - __scratch[__i];
      const difference_type __k = __i - __scratch[__i] + 1;

      if (__suffix_[__j] > __k)
        __suffix_[__j] = __k;
    }
  }
};
template <class... _Tag> [[maybe_unused]] boyer_moore_searcher(typename _Tag::__allow_ctad...)->boyer_moore_searcher<_Tag...>;

template <class _RandomAccessIterator1,
          class _Hash = hash<typename iterator_traits<_RandomAccessIterator1>::value_type>,
          class _BinaryPredicate = equal_to<>>
class boyer_moore_horspool_searcher {
private:
  using difference_type = typename iterator_traits<_RandomAccessIterator1>::difference_type;
  using value_type = typename iterator_traits<_RandomAccessIterator1>::value_type;
  using __skip_table_type =
      _BMSkipTable<value_type,
                   difference_type,
                   _Hash,
                   _BinaryPredicate,
                   is_integral_v<value_type> && sizeof(value_type) == 1 && is_same_v<_Hash, hash<value_type>> &&
                       is_same_v<_BinaryPredicate, equal_to<>>>;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) boyer_moore_horspool_searcher(
      _RandomAccessIterator1 __first,
      _RandomAccessIterator1 __last,
      _Hash __hash = _Hash(),
      _BinaryPredicate __pred = _BinaryPredicate())
      : __first_(__first),
        __last_(__last),
        __pred_(__pred),
        __pattern_length_(__last - __first),
        __skip_table_(std::make_shared<__skip_table_type>(__pattern_length_, __pattern_length_, __hash, __pred_)) {
    if (__first == __last)
      return;
    --__last;
    difference_type __i = 0;
    while (__first != __last) {
      __skip_table_->insert(*__first, __pattern_length_ - 1 - __i);
      ++__first;
      ++__i;
    }
  }

  template <class _RandomAccessIterator2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_RandomAccessIterator2, _RandomAccessIterator2>
  operator()(_RandomAccessIterator2 __first, _RandomAccessIterator2 __last) const {
    static_assert(__is_same_uncvref<typename std::iterator_traits<_RandomAccessIterator1>::value_type,
                                    typename std::iterator_traits<_RandomAccessIterator2>::value_type>::value,
                  "Corpus and Pattern iterators must point to the same type");
    if (__first == __last)
      return std::make_pair(__last, __last);
    if (__first_ == __last_)
      return std::make_pair(__first, __first);

    if (__pattern_length_ > __last - __first)
      return std::make_pair(__last, __last);

    return __search(__first, __last);
  }

private:
  _RandomAccessIterator1 __first_;
  _RandomAccessIterator1 __last_;
  _BinaryPredicate __pred_;
  difference_type __pattern_length_;
  shared_ptr<__skip_table_type> __skip_table_;

  template <class _RandomAccessIterator2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_RandomAccessIterator2, _RandomAccessIterator2>
  __search(_RandomAccessIterator2 __f, _RandomAccessIterator2 __l) const {
    _RandomAccessIterator2 __current = __f;
    const _RandomAccessIterator2 __last = __l - __pattern_length_;
    const __skip_table_type& __skip_table = *__skip_table_;

    while (__current <= __last) {
      difference_type __j = __pattern_length_;
      while (__pred_(__first_[__j - 1], __current[__j - 1])) {
        --__j;
        if (__j == 0)
          return std::make_pair(__current, __current + __pattern_length_);
      }
      __current += __skip_table[__current[__pattern_length_ - 1]];
    }
    return std::make_pair(__l, __l);
  }
};
template <class... _Tag> [[maybe_unused]] boyer_moore_horspool_searcher(typename _Tag::__allow_ctad...)->boyer_moore_horspool_searcher<_Tag...>;

}}
# 300 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/boyer_moore_searcher.h" 3
#pragma clang diagnostic pop
# 553 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/functional" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/default_searcher.h" 1 3
# 22 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/default_searcher.h" 3


#pragma clang diagnostic push
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/default_searcher.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/default_searcher.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/default_searcher.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/default_searcher.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/default_searcher.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/default_searcher.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {




template <class _ForwardIterator, class _BinaryPredicate = equal_to<>>
class default_searcher {
public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  default_searcher(_ForwardIterator __f, _ForwardIterator __l, _BinaryPredicate __p = _BinaryPredicate())
      : __first_(__f), __last_(__l), __pred_(__p) {}

  template <typename _ForwardIterator2>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) pair<_ForwardIterator2, _ForwardIterator2>
  operator()(_ForwardIterator2 __f, _ForwardIterator2 __l) const {
    auto __proj = __identity();
    return std::__search_impl(__f, __l, __first_, __last_, __pred_, __proj, __proj);
  }

private:
  _ForwardIterator __first_;
  _ForwardIterator __last_;
  _BinaryPredicate __pred_;
};
template <class... _Tag> [[maybe_unused]] default_searcher(typename _Tag::__allow_ctad...)->default_searcher<_Tag...>;



}}
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/default_searcher.h" 3
#pragma clang diagnostic pop
# 554 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/functional" 2 3

# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/not_fn.h" 1 3
# 15 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/not_fn.h" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/perfect_forward.h" 1 3
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/perfect_forward.h" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 29 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/perfect_forward.h" 2 3

#pragma clang diagnostic push
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/perfect_forward.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/perfect_forward.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/perfect_forward.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/perfect_forward.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/perfect_forward.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 30 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/perfect_forward.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



template <class _Op, class _Indices, class... _BoundArgs>
struct __perfect_forward_impl;

template <class _Op, size_t... _Idx, class... _BoundArgs>
struct __perfect_forward_impl<_Op, index_sequence<_Idx...>, _BoundArgs...> {
private:
  tuple<_BoundArgs...> __bound_args_;

public:
  template <class... _Args, class = enable_if_t< is_constructible_v<tuple<_BoundArgs...>, _Args&&...> >>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit constexpr __perfect_forward_impl(_Args&&... __bound_args)
      : __bound_args_(std::forward<_Args>(__bound_args)...) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __perfect_forward_impl(__perfect_forward_impl const&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __perfect_forward_impl(__perfect_forward_impl&&) = default;

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __perfect_forward_impl& operator=(__perfect_forward_impl const&) = default;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) __perfect_forward_impl& operator=(__perfect_forward_impl&&) = default;

  template <class... _Args, class = enable_if_t<is_invocable_v<_Op, _BoundArgs&..., _Args...>>>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto operator()(_Args&&... __args) & noexcept(
      noexcept(_Op()(std::get<_Idx>(__bound_args_)..., std::forward<_Args>(__args)...)))
      -> decltype(_Op()(std::get<_Idx>(__bound_args_)..., std::forward<_Args>(__args)...)) {
    return _Op()(std::get<_Idx>(__bound_args_)..., std::forward<_Args>(__args)...);
  }

  template <class... _Args, class = enable_if_t<!is_invocable_v<_Op, _BoundArgs&..., _Args...>>>
  auto operator()(_Args&&...) & = delete;

  template <class... _Args, class = enable_if_t<is_invocable_v<_Op, _BoundArgs const&..., _Args...>>>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto operator()(_Args&&... __args) const& noexcept(
      noexcept(_Op()(std::get<_Idx>(__bound_args_)..., std::forward<_Args>(__args)...)))
      -> decltype(_Op()(std::get<_Idx>(__bound_args_)..., std::forward<_Args>(__args)...)) {
    return _Op()(std::get<_Idx>(__bound_args_)..., std::forward<_Args>(__args)...);
  }

  template <class... _Args, class = enable_if_t<!is_invocable_v<_Op, _BoundArgs const&..., _Args...>>>
  auto operator()(_Args&&...) const& = delete;

  template <class... _Args, class = enable_if_t<is_invocable_v<_Op, _BoundArgs..., _Args...>>>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto operator()(_Args&&... __args) && noexcept(
      noexcept(_Op()(std::get<_Idx>(std::move(__bound_args_))..., std::forward<_Args>(__args)...)))
      -> decltype(_Op()(std::get<_Idx>(std::move(__bound_args_))..., std::forward<_Args>(__args)...)) {
    return _Op()(std::get<_Idx>(std::move(__bound_args_))..., std::forward<_Args>(__args)...);
  }

  template <class... _Args, class = enable_if_t<!is_invocable_v<_Op, _BoundArgs..., _Args...>>>
  auto operator()(_Args&&...) && = delete;

  template <class... _Args, class = enable_if_t<is_invocable_v<_Op, _BoundArgs const..., _Args...>>>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) constexpr auto operator()(_Args&&... __args) const&& noexcept(
      noexcept(_Op()(std::get<_Idx>(std::move(__bound_args_))..., std::forward<_Args>(__args)...)))
      -> decltype(_Op()(std::get<_Idx>(std::move(__bound_args_))..., std::forward<_Args>(__args)...)) {
    return _Op()(std::get<_Idx>(std::move(__bound_args_))..., std::forward<_Args>(__args)...);
  }

  template <class... _Args, class = enable_if_t<!is_invocable_v<_Op, _BoundArgs const..., _Args...>>>
  auto operator()(_Args&&...) const&& = delete;
};


template <class _Op, class... _Args>
using __perfect_forward = __perfect_forward_impl<_Op, index_sequence_for<_Args...>, _Args...>;



}}
# 100 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/perfect_forward.h" 3
#pragma clang diagnostic pop
# 16 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/not_fn.h" 2 3
# 23 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/not_fn.h" 3


#pragma clang diagnostic push
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/not_fn.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/not_fn.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/not_fn.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/not_fn.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/not_fn.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 25 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/not_fn.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {



struct __not_fn_op {
  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto operator()(_Args&&... __args) const
      noexcept(noexcept(!std::invoke(std::forward<_Args>(__args)...)))
          -> decltype(!std::invoke(std::forward<_Args>(__args)...)) {
    return !std::invoke(std::forward<_Args>(__args)...);
  }
};

template <class _Fn>
struct __not_fn_t : __perfect_forward<__not_fn_op, _Fn> {
  using __perfect_forward<__not_fn_op, _Fn>::__perfect_forward;
};

template <class _Fn,
          class = enable_if_t< is_constructible_v<decay_t<_Fn>, _Fn> && is_move_constructible_v<decay_t<_Fn>> >>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) auto not_fn(_Fn&& __f) {
  return __not_fn_t<decay_t<_Fn>>(std::forward<_Fn>(__f));
}



}}
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__functional/not_fn.h" 3
#pragma clang diagnostic pop
# 556 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/functional" 2 3
# 570 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/functional" 3
# 2615 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/deque" 2 3
# 274 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 2 3
# 285 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 289 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 2 3

#pragma clang diagnostic push
# 290 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 290 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 290 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 290 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 290 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 290 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Container>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const queue<_Tp, _Container>& __x, const queue<_Tp, _Container>& __y);

template <class _Tp, class _Container>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(const queue<_Tp, _Container>& __x, const queue<_Tp, _Container>& __y);

template <class _Tp, class _Container >
class queue {
public:
  typedef _Container container_type;
  typedef typename container_type::value_type value_type;
  typedef typename container_type::reference reference;
  typedef typename container_type::const_reference const_reference;
  typedef typename container_type::size_type size_type;
  static_assert(is_same<_Tp, value_type>::value, "");

protected:
  container_type c;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) queue() noexcept(is_nothrow_default_constructible<container_type>::value) : c() {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) queue(const queue& __q) : c(__q.c) {}
# 338 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) queue& operator=(const queue& __q) {
    c = __q.c;
    return *this;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) queue(queue&& __q) noexcept(is_nothrow_move_constructible<container_type>::value)
      : c(std::move(__q.c)) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) queue& operator=(queue&& __q) noexcept(is_nothrow_move_assignable<container_type>::value) {
    c = std::move(__q.c);
    return *this;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit queue(const container_type& __c) : c(__c) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit queue(container_type&& __c) : c(std::move(__c)) {}


  template <class _Alloc, __enable_if_t<uses_allocator<container_type, _Alloc>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit queue(const _Alloc& __a) : c(__a) {}

  template <class _Alloc, __enable_if_t<uses_allocator<container_type, _Alloc>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) queue(const queue& __q, const _Alloc& __a) : c(__q.c, __a) {}

  template <class _Alloc, __enable_if_t<uses_allocator<container_type, _Alloc>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) queue(const container_type& __c, const _Alloc& __a) : c(__c, __a) {}


  template <class _Alloc, __enable_if_t<uses_allocator<container_type, _Alloc>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) queue(container_type&& __c, const _Alloc& __a) : c(std::move(__c), __a) {}

  template <class _Alloc, __enable_if_t<uses_allocator<container_type, _Alloc>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) queue(queue&& __q, const _Alloc& __a) : c(std::move(__q.c), __a) {}


  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool empty() const { return c.empty(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type size() const { return c.size(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference front() { return c.front(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference front() const { return c.front(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference back() { return c.back(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference back() const { return c.back(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push(const value_type& __v) { c.push_back(__v); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push(value_type&& __v) { c.push_back(std::move(__v)); }
# 398 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3
  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))

  decltype(auto)
  emplace(_Args&&... __args) {
    return c.emplace_back(std::forward<_Args>(__args)...);
  }







  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void pop() { c.pop_front(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(queue& __q) noexcept(__is_nothrow_swappable_v<container_type>) {
    using std::swap;
    swap(c, __q.c);
  }

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Container& __get_container() const { return c; }

  template <class _T1, class _OtherContainer>
  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  operator==(const queue<_T1, _OtherContainer>& __x, const queue<_T1, _OtherContainer>& __y);

  template <class _T1, class _OtherContainer>
  friend __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool
  operator<(const queue<_T1, _OtherContainer>& __x, const queue<_T1, _OtherContainer>& __y);
};


template <class _Container, class = enable_if_t<!__is_allocator<_Container>::value> >
queue(_Container) -> queue<typename _Container::value_type, _Container>;

template <class _Container,
          class _Alloc,
          class = enable_if_t<!__is_allocator<_Container>::value>,
          class = enable_if_t<uses_allocator<_Container, _Alloc>::value> >
queue(_Container, _Alloc) -> queue<typename _Container::value_type, _Container>;
# 462 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3
template <class _Tp, class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const queue<_Tp, _Container>& __x, const queue<_Tp, _Container>& __y) {
  return __x.c == __y.c;
}

template <class _Tp, class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(const queue<_Tp, _Container>& __x, const queue<_Tp, _Container>& __y) {
  return __x.c < __y.c;
}

template <class _Tp, class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const queue<_Tp, _Container>& __x, const queue<_Tp, _Container>& __y) {
  return !(__x == __y);
}

template <class _Tp, class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>(const queue<_Tp, _Container>& __x, const queue<_Tp, _Container>& __y) {
  return __y < __x;
}

template <class _Tp, class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>=(const queue<_Tp, _Container>& __x, const queue<_Tp, _Container>& __y) {
  return !(__x < __y);
}

template <class _Tp, class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<=(const queue<_Tp, _Container>& __x, const queue<_Tp, _Container>& __y) {
  return !(__y < __x);
}
# 503 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3
template <class _Tp, class _Container, __enable_if_t<__is_swappable_v<_Container>, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(queue<_Tp, _Container>& __x, queue<_Tp, _Container>& __y)
    noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}

template <class _Tp, class _Container, class _Alloc>
struct uses_allocator<queue<_Tp, _Container>, _Alloc> : public uses_allocator<_Container, _Alloc> {
};

template <class _Tp, class _Container, class _Compare>
class priority_queue {
public:
  typedef _Container container_type;
  typedef _Compare value_compare;
  typedef typename container_type::value_type value_type;
  typedef typename container_type::reference reference;
  typedef typename container_type::const_reference const_reference;
  typedef typename container_type::size_type size_type;
  static_assert(is_same<_Tp, value_type>::value, "");

protected:
  container_type c;
  value_compare comp;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) priority_queue() noexcept(is_nothrow_default_constructible<container_type>::value&& is_nothrow_default_constructible<value_compare>::value)

      : c(), comp() {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) priority_queue(const priority_queue& __q) : c(__q.c), comp(__q.comp) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) priority_queue& operator=(const priority_queue& __q) {
    c = __q.c;
    comp = __q.comp;
    return *this;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) priority_queue(priority_queue&& __q) noexcept(
      is_nothrow_move_constructible<container_type>::value && is_nothrow_move_constructible<value_compare>::value)
      : c(std::move(__q.c)), comp(std::move(__q.comp)) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) priority_queue& operator=(priority_queue&& __q) noexcept(
      is_nothrow_move_assignable<container_type>::value && is_nothrow_move_assignable<value_compare>::value) {
    c = std::move(__q.c);
    comp = std::move(__q.comp);
    return *this;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit priority_queue(const value_compare& __comp) : c(), comp(__comp) {}
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) priority_queue(const value_compare& __comp, const container_type& __c);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) priority_queue(const value_compare& __comp, container_type&& __c);

  template <class _InputIter, __enable_if_t<__has_input_iterator_category<_InputIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) priority_queue(_InputIter __f, _InputIter __l, const value_compare& __comp = value_compare());

  template <class _InputIter, __enable_if_t<__has_input_iterator_category<_InputIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  priority_queue(_InputIter __f, _InputIter __l, const value_compare& __comp, const container_type& __c);


  template <class _InputIter, __enable_if_t<__has_input_iterator_category<_InputIter>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  priority_queue(_InputIter __f, _InputIter __l, const value_compare& __comp, container_type&& __c);
# 580 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3
  template <class _Alloc, __enable_if_t<uses_allocator<container_type, _Alloc>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit priority_queue(const _Alloc& __a);

  template <class _Alloc, __enable_if_t<uses_allocator<container_type, _Alloc>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) priority_queue(const value_compare& __comp, const _Alloc& __a);

  template <class _Alloc, __enable_if_t<uses_allocator<container_type, _Alloc>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) priority_queue(const value_compare& __comp, const container_type& __c, const _Alloc& __a);

  template <class _Alloc, __enable_if_t<uses_allocator<container_type, _Alloc>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) priority_queue(const priority_queue& __q, const _Alloc& __a);


  template <class _Alloc, __enable_if_t<uses_allocator<container_type, _Alloc>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) priority_queue(const value_compare& __comp, container_type&& __c, const _Alloc& __a);

  template <class _Alloc, __enable_if_t<uses_allocator<container_type, _Alloc>::value, int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) priority_queue(priority_queue&& __q, const _Alloc& __a);


  template <
      class _InputIter,
      class _Alloc,
      __enable_if_t<__has_input_iterator_category<_InputIter>::value && uses_allocator<container_type, _Alloc>::value,
                    int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) priority_queue(_InputIter __f, _InputIter __l, const _Alloc& __a);

  template <
      class _InputIter,
      class _Alloc,
      __enable_if_t<__has_input_iterator_category<_InputIter>::value && uses_allocator<container_type, _Alloc>::value,
                    int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) priority_queue(_InputIter __f, _InputIter __l, const value_compare& __comp, const _Alloc& __a);

  template <
      class _InputIter,
      class _Alloc,
      __enable_if_t<__has_input_iterator_category<_InputIter>::value && uses_allocator<container_type, _Alloc>::value,
                    int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) priority_queue(
      _InputIter __f, _InputIter __l, const value_compare& __comp, const container_type& __c, const _Alloc& __a);


  template <
      class _InputIter,
      class _Alloc,
      __enable_if_t<__has_input_iterator_category<_InputIter>::value && uses_allocator<container_type, _Alloc>::value,
                    int> = 0>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  priority_queue(_InputIter __f, _InputIter __l, const value_compare& __comp, container_type&& __c, const _Alloc& __a);
# 652 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool empty() const { return c.empty(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type size() const { return c.size(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference top() const { return c.front(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push(const value_type& __v);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push(value_type&& __v);
# 673 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3
  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void emplace(_Args&&... __args);

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void pop();

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(priority_queue& __q)
      noexcept(__is_nothrow_swappable_v<container_type>&& __is_nothrow_swappable_v<value_compare>);

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Container& __get_container() const { return c; }
};


template <class _Compare,
          class _Container,
          class = enable_if_t<!__is_allocator<_Compare>::value>,
          class = enable_if_t<!__is_allocator<_Container>::value> >
priority_queue(_Compare, _Container) -> priority_queue<typename _Container::value_type, _Container, _Compare>;

template <class _InputIterator,
          class _Compare = less<__iter_value_type<_InputIterator>>,
          class _Container = vector<__iter_value_type<_InputIterator>>,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<!__is_allocator<_Compare>::value>,
          class = enable_if_t<!__is_allocator<_Container>::value> >
priority_queue(_InputIterator, _InputIterator, _Compare = _Compare(), _Container = _Container())
    -> priority_queue<__iter_value_type<_InputIterator>, _Container, _Compare>;

template <class _Compare,
          class _Container,
          class _Alloc,
          class = enable_if_t<!__is_allocator<_Compare>::value>,
          class = enable_if_t<!__is_allocator<_Container>::value>,
          class = enable_if_t<uses_allocator<_Container, _Alloc>::value> >
priority_queue(_Compare, _Container, _Alloc) -> priority_queue<typename _Container::value_type, _Container, _Compare>;

template <class _InputIterator,
          class _Allocator,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<__is_allocator<_Allocator>::value> >
priority_queue(_InputIterator, _InputIterator, _Allocator)
    -> priority_queue<__iter_value_type<_InputIterator>,
                      vector<__iter_value_type<_InputIterator>, _Allocator>,
                      less<__iter_value_type<_InputIterator>>>;

template <class _InputIterator,
          class _Compare,
          class _Allocator,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<!__is_allocator<_Compare>::value>,
          class = enable_if_t<__is_allocator<_Allocator>::value> >
priority_queue(_InputIterator, _InputIterator, _Compare, _Allocator)
    -> priority_queue<__iter_value_type<_InputIterator>,
                      vector<__iter_value_type<_InputIterator>, _Allocator>,
                      _Compare>;

template <class _InputIterator,
          class _Compare,
          class _Container,
          class _Alloc,
          class = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
          class = enable_if_t<!__is_allocator<_Compare>::value>,
          class = enable_if_t<!__is_allocator<_Container>::value>,
          class = enable_if_t<uses_allocator<_Container, _Alloc>::value> >
priority_queue(_InputIterator, _InputIterator, _Compare, _Container, _Alloc)
    -> priority_queue<typename _Container::value_type, _Container, _Compare>;
# 762 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3
template <class _Tp, class _Container, class _Compare>
inline priority_queue<_Tp, _Container, _Compare>::priority_queue(const _Compare& __comp, const container_type& __c)
    : c(__c), comp(__comp) {
  std::make_heap(c.begin(), c.end(), comp);
}



template <class _Tp, class _Container, class _Compare>
inline priority_queue<_Tp, _Container, _Compare>::priority_queue(const value_compare& __comp, container_type&& __c)
    : c(std::move(__c)), comp(__comp) {
  std::make_heap(c.begin(), c.end(), comp);
}



template <class _Tp, class _Container, class _Compare>
template <class _InputIter, __enable_if_t<__has_input_iterator_category<_InputIter>::value, int> >
inline priority_queue<_Tp, _Container, _Compare>::priority_queue(
    _InputIter __f, _InputIter __l, const value_compare& __comp)
    : c(__f, __l), comp(__comp) {
  std::make_heap(c.begin(), c.end(), comp);
}

template <class _Tp, class _Container, class _Compare>
template <class _InputIter, __enable_if_t<__has_input_iterator_category<_InputIter>::value, int> >
inline priority_queue<_Tp, _Container, _Compare>::priority_queue(
    _InputIter __f, _InputIter __l, const value_compare& __comp, const container_type& __c)
    : c(__c), comp(__comp) {
  c.insert(c.end(), __f, __l);
  std::make_heap(c.begin(), c.end(), comp);
}



template <class _Tp, class _Container, class _Compare>
template <class _InputIter, __enable_if_t<__has_input_iterator_category<_InputIter>::value, int> >
inline priority_queue<_Tp, _Container, _Compare>::priority_queue(
    _InputIter __f, _InputIter __l, const value_compare& __comp, container_type&& __c)
    : c(std::move(__c)), comp(__comp) {
  c.insert(c.end(), __f, __l);
  std::make_heap(c.begin(), c.end(), comp);
}



template <class _Tp, class _Container, class _Compare>
template <class _Alloc, __enable_if_t<uses_allocator<_Container, _Alloc>::value, int> >
inline priority_queue<_Tp, _Container, _Compare>::priority_queue(const _Alloc& __a) : c(__a) {}

template <class _Tp, class _Container, class _Compare>
template <class _Alloc, __enable_if_t<uses_allocator<_Container, _Alloc>::value, int> >
inline priority_queue<_Tp, _Container, _Compare>::priority_queue(const value_compare& __comp, const _Alloc& __a)
    : c(__a), comp(__comp) {}

template <class _Tp, class _Container, class _Compare>
template <class _Alloc, __enable_if_t<uses_allocator<_Container, _Alloc>::value, int> >
inline priority_queue<_Tp, _Container, _Compare>::priority_queue(
    const value_compare& __comp, const container_type& __c, const _Alloc& __a)
    : c(__c, __a), comp(__comp) {
  std::make_heap(c.begin(), c.end(), comp);
}

template <class _Tp, class _Container, class _Compare>
template <class _Alloc, __enable_if_t<uses_allocator<_Container, _Alloc>::value, int> >
inline priority_queue<_Tp, _Container, _Compare>::priority_queue(const priority_queue& __q, const _Alloc& __a)
    : c(__q.c, __a), comp(__q.comp) {}



template <class _Tp, class _Container, class _Compare>
template <class _Alloc, __enable_if_t<uses_allocator<_Container, _Alloc>::value, int> >
inline priority_queue<_Tp, _Container, _Compare>::priority_queue(
    const value_compare& __comp, container_type&& __c, const _Alloc& __a)
    : c(std::move(__c), __a), comp(__comp) {
  std::make_heap(c.begin(), c.end(), comp);
}

template <class _Tp, class _Container, class _Compare>
template <class _Alloc, __enable_if_t<uses_allocator<_Container, _Alloc>::value, int> >
inline priority_queue<_Tp, _Container, _Compare>::priority_queue(priority_queue&& __q, const _Alloc& __a)
    : c(std::move(__q.c), __a), comp(std::move(__q.comp)) {}



template <class _Tp, class _Container, class _Compare>
template <
    class _InputIter,
    class _Alloc,
    __enable_if_t<__has_input_iterator_category<_InputIter>::value && uses_allocator<_Container, _Alloc>::value, int> >
inline priority_queue<_Tp, _Container, _Compare>::priority_queue(_InputIter __f, _InputIter __l, const _Alloc& __a)
    : c(__f, __l, __a), comp() {
  std::make_heap(c.begin(), c.end(), comp);
}

template <class _Tp, class _Container, class _Compare>
template <
    class _InputIter,
    class _Alloc,
    __enable_if_t<__has_input_iterator_category<_InputIter>::value && uses_allocator<_Container, _Alloc>::value, int> >
inline priority_queue<_Tp, _Container, _Compare>::priority_queue(
    _InputIter __f, _InputIter __l, const value_compare& __comp, const _Alloc& __a)
    : c(__f, __l, __a), comp(__comp) {
  std::make_heap(c.begin(), c.end(), comp);
}

template <class _Tp, class _Container, class _Compare>
template <
    class _InputIter,
    class _Alloc,
    __enable_if_t<__has_input_iterator_category<_InputIter>::value && uses_allocator<_Container, _Alloc>::value, int> >
inline priority_queue<_Tp, _Container, _Compare>::priority_queue(
    _InputIter __f, _InputIter __l, const value_compare& __comp, const container_type& __c, const _Alloc& __a)
    : c(__c, __a), comp(__comp) {
  c.insert(c.end(), __f, __l);
  std::make_heap(c.begin(), c.end(), comp);
}


template <class _Tp, class _Container, class _Compare>
template <
    class _InputIter,
    class _Alloc,
    __enable_if_t<__has_input_iterator_category<_InputIter>::value && uses_allocator<_Container, _Alloc>::value, int> >
inline priority_queue<_Tp, _Container, _Compare>::priority_queue(
    _InputIter __f, _InputIter __l, const value_compare& __comp, container_type&& __c, const _Alloc& __a)
    : c(std::move(__c), __a), comp(__comp) {
  c.insert(c.end(), __f, __l);
  std::make_heap(c.begin(), c.end(), comp);
}


template <class _Tp, class _Container, class _Compare>
inline void priority_queue<_Tp, _Container, _Compare>::push(const value_type& __v) {
  c.push_back(__v);
  std::push_heap(c.begin(), c.end(), comp);
}



template <class _Tp, class _Container, class _Compare>
inline void priority_queue<_Tp, _Container, _Compare>::push(value_type&& __v) {
  c.push_back(std::move(__v));
  std::push_heap(c.begin(), c.end(), comp);
}

template <class _Tp, class _Container, class _Compare>
template <class... _Args>
inline void priority_queue<_Tp, _Container, _Compare>::emplace(_Args&&... __args) {
  c.emplace_back(std::forward<_Args>(__args)...);
  std::push_heap(c.begin(), c.end(), comp);
}



template <class _Tp, class _Container, class _Compare>
inline void priority_queue<_Tp, _Container, _Compare>::pop() {
  std::pop_heap(c.begin(), c.end(), comp);
  c.pop_back();
}

template <class _Tp, class _Container, class _Compare>
inline void priority_queue<_Tp, _Container, _Compare>::swap(priority_queue& __q)
    noexcept(__is_nothrow_swappable_v<container_type>&& __is_nothrow_swappable_v<value_compare>) {
  using std::swap;
  swap(c, __q.c);
  swap(comp, __q.comp);
}

template <class _Tp,
          class _Container,
          class _Compare,
          __enable_if_t<__is_swappable_v<_Container> && __is_swappable_v<_Compare>, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void
swap(priority_queue<_Tp, _Container, _Compare>& __x, priority_queue<_Tp, _Container, _Compare>& __y)
    noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}

template <class _Tp, class _Container, class _Compare, class _Alloc>
struct uses_allocator<priority_queue<_Tp, _Container, _Compare>, _Alloc>
    : public uses_allocator<_Container, _Alloc> {};

}}
# 945 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/queue" 3
#pragma clang diagnostic pop
# 246 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/format" 2 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 1 3
# 118 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 3
# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/stack.h" 1 3
# 17 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/stack.h" 3


#pragma clang diagnostic push
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/stack.h" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/stack.h" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/stack.h" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/stack.h" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/stack.h" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 19 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/stack.h" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Container = deque<_Tp> >
class stack;

}}
# 24 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__fwd/stack.h" 3
#pragma clang diagnostic pop
# 119 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 2 3
# 139 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 3



# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/__undef_macros" 1 3
# 143 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 2 3

#pragma clang diagnostic push
# 144 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 144 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 144 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 144 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 144 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 144 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

template <class _Tp, class _Container>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y);

template <class _Tp, class _Container>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y);

template <class _Tp, class _Container >
class stack {
public:
  typedef _Container container_type;
  typedef typename container_type::value_type value_type;
  typedef typename container_type::reference reference;
  typedef typename container_type::const_reference const_reference;
  typedef typename container_type::size_type size_type;
  static_assert(is_same<_Tp, value_type>::value, "");

protected:
  container_type c;

public:
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) stack() noexcept(is_nothrow_default_constructible<container_type>::value) : c() {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) stack(const stack& __q) : c(__q.c) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) stack& operator=(const stack& __q) {
    c = __q.c;
    return *this;
  }


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) stack(stack&& __q) noexcept(is_nothrow_move_constructible<container_type>::value)
      : c(std::move(__q.c)) {}

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) stack& operator=(stack&& __q) noexcept(is_nothrow_move_assignable<container_type>::value) {
    c = std::move(__q.c);
    return *this;
  }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit stack(container_type&& __c) : c(std::move(__c)) {}


  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit stack(const container_type& __c) : c(__c) {}

  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) explicit stack(const _Alloc& __a,
                                       __enable_if_t<uses_allocator<container_type, _Alloc>::value>* = 0)
      : c(__a) {}
  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  stack(const container_type& __c, const _Alloc& __a, __enable_if_t<uses_allocator<container_type, _Alloc>::value>* = 0)
      : c(__c, __a) {}
  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  stack(const stack& __s, const _Alloc& __a, __enable_if_t<uses_allocator<container_type, _Alloc>::value>* = 0)
      : c(__s.c, __a) {}

  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  stack(container_type&& __c, const _Alloc& __a, __enable_if_t<uses_allocator<container_type, _Alloc>::value>* = 0)
      : c(std::move(__c), __a) {}
  template <class _Alloc>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))
  stack(stack&& __s, const _Alloc& __a, __enable_if_t<uses_allocator<container_type, _Alloc>::value>* = 0)
      : c(std::move(__s.c), __a) {}
# 234 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 3
  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool empty() const { return c.empty(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) size_type size() const { return c.size(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) reference top() { return c.back(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const_reference top() const { return c.back(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push(const value_type& __v) { c.push_back(__v); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void push(value_type&& __v) { c.push_back(std::move(__v)); }
# 254 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 3
  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106")))

  decltype(auto)
  emplace(_Args&&... __args) {
    return c.emplace_back(std::forward<_Args>(__args)...);
  }
# 269 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 3
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void pop() { c.pop_back(); }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(stack& __s) noexcept(__is_nothrow_swappable_v<container_type>) {
    using std::swap;
    swap(c, __s.c);
  }

  [[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) const _Container& __get_container() const { return c; }

  template <class _T1, class _OtherContainer>
  friend bool operator==(const stack<_T1, _OtherContainer>& __x, const stack<_T1, _OtherContainer>& __y);

  template <class _T1, class _OtherContainer>
  friend bool operator<(const stack<_T1, _OtherContainer>& __x, const stack<_T1, _OtherContainer>& __y);
};


template <class _Container, class = enable_if_t<!__is_allocator<_Container>::value> >
stack(_Container) -> stack<typename _Container::value_type, _Container>;

template <class _Container,
          class _Alloc,
          class = enable_if_t<!__is_allocator<_Container>::value>,
          class = enable_if_t<uses_allocator<_Container, _Alloc>::value> >
stack(_Container, _Alloc) -> stack<typename _Container::value_type, _Container>;
# 318 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 3
template <class _Tp, class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator==(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y) {
  return __x.c == __y.c;
}

template <class _Tp, class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y) {
  return __x.c < __y.c;
}

template <class _Tp, class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator!=(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y) {
  return !(__x == __y);
}

template <class _Tp, class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y) {
  return __y < __x;
}

template <class _Tp, class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator>=(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y) {
  return !(__x < __y);
}

template <class _Tp, class _Container>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) bool operator<=(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y) {
  return !(__y < __x);
}
# 359 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 3
template <class _Tp, class _Container, __enable_if_t<__is_swappable_v<_Container>, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne190106"))) void swap(stack<_Tp, _Container>& __x, stack<_Tp, _Container>& __y)
    noexcept(noexcept(__x.swap(__y))) {
  __x.swap(__y);
}

template <class _Tp, class _Container, class _Alloc>
struct uses_allocator<stack<_Tp, _Container>, _Alloc> : public uses_allocator<_Container, _Alloc> {
};

}}
# 369 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/stack" 3
#pragma clang diagnostic pop
# 247 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/format" 2 3
# 195 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ostream" 2 3


# 1 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/print" 1 3
# 50 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/print" 3


#pragma clang diagnostic push
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/print" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/print" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/print" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/print" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/print" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 52 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/print" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {
# 70 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/print" 3
__attribute__((__visibility__("default"))) bool __is_posix_terminal(FILE* __stream);
# 400 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/print" 3
}}
# 400 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/print" 3
#pragma clang diagnostic pop
# 198 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/ostream" 2 3
# 1368 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/istream" 2 3
# 44 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iostream" 2 3
# 49 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iostream" 3


#pragma clang diagnostic push
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iostream" 3
#pragma clang diagnostic ignored "-Wc++11-extensions"
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iostream" 3
#pragma clang diagnostic ignored "-Wc++14-extensions"
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iostream" 3
#pragma clang diagnostic ignored "-Wc++17-extensions"
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iostream" 3
#pragma clang diagnostic ignored "-Wc++20-extensions"
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iostream" 3
#pragma clang diagnostic ignored "-Wc++23-extensions"
# 51 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iostream" 3
 namespace __attribute__((__type_visibility__("default"))) std { inline namespace __1 {

extern __attribute__((__visibility__("default"))) istream cin;
extern __attribute__((__visibility__("default"))) ostream cout;
extern __attribute__((__visibility__("default"))) ostream cerr;
extern __attribute__((__visibility__("default"))) ostream clog;


extern __attribute__((__visibility__("default"))) wistream wcin;
extern __attribute__((__visibility__("default"))) wostream wcout;
extern __attribute__((__visibility__("default"))) wostream wcerr;
extern __attribute__((__visibility__("default"))) wostream wclog;


}}
# 65 "/usr/local/Cellar/llvm/19.1.6/bin/../include/c++/v1/iostream" 3
#pragma clang diagnostic pop
# 2 "hello.cpp" 2

int main() {
    std::cout << "Hello, LLVM!" << std::endl;
    return 0;
}
