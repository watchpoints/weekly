










2.4.1. 本发明的主要创新点/发明点
本发明的关键在于：
(1) 无服务器(Serverless)架构下存储分布式文件系统的元数据信息,通过sql命令方式快速查询。
(2) 基于数据对象schema信息实现sqldiff工具，快速对比目录下文件变化情况.
(3) 通过集群定时启动job方式并发迁移文件。
CREATE TABLE entrie
id 编号,name 文件名，inode编号，type 文件类型，size 大小等

2.4.2. 本发明的权利要求如下

基于元数据增量搜索文件 

1）	在Grand Unified File Index (GUFI)基础上，
利用多线程扫描文件系统的元数据
2）	在多线程并发扫描规程中，根据策略 增量过滤需要分级的文件。
代替Beelive全量扫描
3）	最后增量扫描结果到本地文本 或者sqlite3数据中

基于元数据对文件快速搜索后基于策略的并发迁移
1）主节点启动定时器检检测job任务
2）work主分发节点 分派任务
1）	work从节点并发处理任务
2）	work主机统计任务执行情况
3）	解析策略，按照优先级排序
4）	判断是否匹配，根据策略产生查询sql，统计个数，小于0为不匹配
bdm-search  -n 8 -B 4096  -a -d " " -E 'SELECT COUNT(*)  FROM pentries WHERE uid= 0 AND gid=0' /root/bee

7） 执行策略,检索文件，查询结果输出到共享目录文件中
bdm-search  -n 8 -B 4096  -a -d " " -o /mnt/beegfs/bak/query -E 'SELECT path() || (CASE type WHEN "d" THEN "" ELSE "/" || name END)  FROM pentries WHERE uid= 0 AND gid=0' /root/beegfs

8） 启动mpirun,master节点 任务分发
Master 发送 文件目录到 到slave节点
9）	任务处理
slave节点结束消息，读取文件中 需要迁移文件，开始迁移



BeeGFS的客户端是由一个内核模块和两个系统服务组成的,内核模块主要实现了一个Linux的文件系统
本发明
在不增加额外常驻服务情况下。
利用
满足海量文件系统中，实现快速文件检索，快速迁移。对原有文件系统很少影响
从而达到分级迁移目的。

本发明目在是beegfs分布式文件集群基础上，尽可能少的情况下占用服务器计算资源，快速分层迁移。

1.文件的元数据信息保存到本地磁盘文件(SQLite),取代要常驻服务存储到内存方式而实现海量文件快速检索。
2.通过job方式启动文件迁移任务，不迁移占用额外服务端资源。
3.迁移程序只需要读写 本地文件系统实现文件从快池到慢池迁移(beegfs客户端注册一个文件系统，访问全局数据)。



1.根据分级迁移剩余问题
2.处理教育贷相关问题


1）主节点启动runapi job 完成分布式计算
2）work主分发节点 分派任务
3）work从节点并发处理任务
4）work主机统计任务执行情况


1）	解析策略，按照优先级排序
2）	判断是否匹配，根据策略产生查询sql，统计个数，小于0为不匹配
bdm-search  -n 8 -B 4096  -a -d " " -E 'SELECT COUNT(*)  FROM pentries WHERE uid= 0 AND gid=0' /root/beeg

3）执行策略,检索文件，查询结果输出到共享目录文件中
bdm-search  -n 8 -B 4096  -a -d " " -o /mnt/beegfs/bak/query -E 'SELECT path() || (CASE type WHEN "d" THEN "" ELSE "/" || name END)  FROM pentries WHERE uid= 0 AND gid=0' /root/beegfs

4） 启动mpirun,master节点 任务分发
Master 发送 文件目录到 到slave节点
1. 指定符合策略迁移，是每次遍历文件，寻找符合条件，然后


2.4.1. 本发明的主要创新点/发明点
本发明的关键在于：
（1）	基于元数据快速搜索文件。
（2）	基于元数据对文件快速搜索后基于策略的并发迁移。
2.4.2. 本发明的权利要求如下

基于元数据增量搜索文件 

1）	在Grand Unified File Index (GUFI)基础上，
利用多线程扫描文件系统的元数据
2）	在多线程并发扫描规程中，根据策略 增量过滤需要分级的文件。
代替Beelive全量扫描
3）	最后增量扫描结果到本地文本 或者sqlite3数据中

基于元数据对文件快速搜索后基于策略的并发迁移
1）主节点启动定时器检检测job任务
2）work主分发节点 分派任务
1）	work从节点并发处理任务
2）	work主机统计任务执行情况
3）	解析策略，按照优先级排序
4）	判断是否匹配，根据策略产生查询sql，统计个数，小于0为不匹配
bdm-search  -n 8 -B 4096  -a -d " " -E 'SELECT COUNT(*)  FROM pentries WHERE uid= 0 AND gid=0' /root/bee

7） 执行策略,检索文件，查询结果输出到共享目录文件中
bdm-search  -n 8 -B 4096  -a -d " " -o /mnt/beegfs/bak/query -E 'SELECT path() || (CASE type WHEN "d" THEN "" ELSE "/" || name END)  FROM pentries WHERE uid= 0 AND gid=0' /root/beegfs

8） 启动mpirun,master节点 任务分发
Master 发送 文件目录到 到slave节点
9）	任务处理
slave节点结束消息，读取文件中 需要迁移文件，开始迁移





5）	任务处理
slave节点结束消息，读取文件中 需要迁移文件，开始迁移
利用Beegfs提供工具迁移
6） 统计结果


1）管理节点执行全量扫描文件命令 产生索引文件输出到一个目录
   通过sql查询方式一次性查找符合策略文件，
   例如：
   search  -n 8 -B 4096  -a -d " " -E 'SELECT COUNT(*)  FROM pentries WHERE uid= 0 AND gid=0' /xxx/xxx
   代替反复遍历目录查找文件，减少IO操作次数。
   
2）管理节点执行对比命令 增量判断本次需要迁移文件。
   步骤1是对整个目录进行扫描，无法区分是否从快池迁移慢池
   对用户来说文件路径保持不变，存储位置发生变化。文件迁移后增加flag标记 记录步骤1产生数据库文件中。
   
   执行对比工具 本次全量扫描文件数据库文件 和上次迁移数据库文件对比
   增量判断。
   优点：通过客户都命令方式对比变化文件，不需要额外常驻服务存储文件信息。
   需要多索引文件历史记录存在2份，增加磁盘空间。
   
3）job节点 执行负载均衡，迁移增量文件。
   文件迁移过程如果用户正在读写，说明仍有用户在访问属于热数据，该文件迁移终止。保证数据一致性

4）针对大文件迁移，根据通过sql命令 根据大小排序，
  集中迁移大文件，然后在集中迁移小文件方式避免大文件迁移影响小文件迁移速度

5）job节点迁移完毕，汇总管理节点，任务执行完毕，修改文件迁移结果

6）管理节点，修改步骤1扫描结果，为下次增量扫描做对比。



1）递归遍历/mnt/beegfs目录，
   获取文件属性：
    文件名称，文件类型，文件大小，文件访问权限，文件创建时间，修改时间等。

2）每一层有多个目录，多个目录交给线程池继续遍历。

3) 每个目录遍历结果输出到sqlite3数据库中。
    Entries表存储目录下每个文件信息。
      CREATE TABLE entrie
      id 编号,name 文件名，inode编号，type 文件类型，size 大小等
 tree表记录每个目录 和子目录之间关系。


